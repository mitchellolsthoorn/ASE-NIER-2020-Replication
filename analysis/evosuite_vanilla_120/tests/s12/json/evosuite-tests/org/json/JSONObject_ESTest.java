/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 19:56:12 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.URISyntaxException;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.PseudoColumnUsage;
import java.sql.RowIdLifetime;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.tools.StandardLocation;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX =TY");
      String[] stringArray0 = new String[10];
      stringArray0[0] = "] is not a JSONObject.";
      JSONObject jSONObject0 = new JSONObject("a0yKAzX =TY", stringArray0);
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-127);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("a0yKAzX =TY", "] is not a JSONObject.");
      JSONObject jSONObject2 = jSONObject1.put("] is not a JSONObject.", (-124.2512F));
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      JSONObject jSONObject3 = jSONObject1.put("lo", (Collection<?>) linkedList0);
      jSONObject2.optDouble("a0yKAzX =TY");
      jSONObject3.opt("] is not a JSONObject.");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      
      String string0 = "qO\"2KQ4|";
      jSONObject0.optBoolean("qO\"2KQ4|", true);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      jSONObject0.put("7`blZ+R^;?ld", (Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "7`blZ+R^;?ld");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "keySet";
      JSONObject jSONObject0 = new JSONObject((Object) "keySet");
      String string1 = "false";
      jSONObject0.optInt("false", 91);
      Double double0 = new Double(Double.NaN);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optBigDecimal("keySet", bigDecimal0);
      jSONObject0.optDouble("keySet", 0.0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      try { 
        jSONObject0.write((Writer) charArrayWriter0, 1708, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection<?>) linkedList0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONObject jSONObject2 = jSONObject1.putOnce("tr", byteArrayInputStream0);
      JSONObject jSONObject3 = jSONObject0.put("lo", 1707.0F);
      jSONObject2.put("7`blZ+R^;?ld", (Collection<?>) linkedList0);
      jSONObject0.optDouble("N>kY{prrQdO%;>,h");
      jSONObject3.opt("]'T!6!1c?w&r?^");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "~1";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("in");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "z_}*rXM";
      objectArray0[1] = (Object) "\f";
      objectArray0[2] = (Object) "z_}*rXM";
      PrintWriter printWriter0 = mockPrintWriter0.printf("z_}*rXM", objectArray0);
      jSONObject0.write((Writer) printWriter0);
      jSONObject0.optNumber("\f", (Number) bigDecimal0);
      String string0 = "uE";
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("uE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)53);
      JSONObject.wrap(jSONObject0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@`0YrYedY<l-", true);
      JSONObject jSONObject1 = new JSONObject(mockFileOutputStream0);
      PipedReader pipedReader0 = new PipedReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject.wrap(mockFileInputStream0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      jSONObject1.optQuery("");
      try { 
        jSONObject1.getNumber("isisEmpty");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000030] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      String[] stringArray0 = new String[10];
      stringArray0[0] = "] is not a JSONObject.";
      JSONObject jSONObject0 = new JSONObject("a0yKAzX rTY", stringArray0);
      jSONObject0.optInt("yBnL.WW3e7t >g");
      jSONObject0.put("to", 0L);
      Float float0 = new Float((-188.10693F));
      JSONObject.numberToString(float0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("java.lang.Float@0000000007");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Short short0 = new Short((short)588);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject.stringToValue("getnot");
      jSONObject0.put("le", 0.0F);
      StringWriter stringWriter0 = new StringWriter((short)588);
      JSONObject.quote("I?&y\"v\"s}Cy<630", (Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-111);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String string0 = "readUnsignedShort";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("readUnsignedShort");
      jSONObject0.write((Writer) mockPrintWriter0, 59, (-2159));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "getnot";
      JSONObject.stringToValue("Expected '");
      try { 
        jSONObject1.getBoolean("getnot");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject.doubleToString((-1588.791));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optFloat("rn3H(K,UI!K5M=%Jw_Y", Float.NaN);
      JSONObject jSONObject1 = jSONObject0.put("rn3H(K,UI!K5M=%Jw_Y", 430.61288F);
      jSONObject1.remove("-1588.791");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONObject1.optBoolean("rn3H(K,UI!K5M=%Jw_Y");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject.doubleToString((-1588.791));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optFloat("rn3H(K,UI!K5M=%Jw_Y", Float.NaN);
      JSONObject jSONObject1 = jSONObject0.put("rn3H(K,UI!K5M=%Jw_Y", 430.61288F);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringWriter stringWriter0 = new StringWriter(117);
      stringWriter0.write("rn3H(K,UI!K5M=%Jw_Y");
      JSONObject.quote("-1588.791", (Writer) stringWriter0);
      jSONObject1.optBoolean("rn3H(K,UI!K5M=%Jw_Y");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "?eiJ*^+.1346o=m-B)d";
      jSONObject0.accumulate("readChar", (Object) null);
      jSONObject0.optBoolean("?eiJ*^+.1346o=m-B)d");
      JSONObject.doubleToString((-1135));
      JSONObject.stringToValue("-1135");
      try { 
        jSONObject0.getDouble("-1135");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "Expected '";
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      int int0 = 71;
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 71, 71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "a0yKAzX rTY");
      String string0 = "isreadInt";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("isreadInt");
      jSONObject0.write((Writer) mockPrintWriter0, (-111), (-2159));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aSQI{T#");
      HashMap<PseudoColumnUsage, CryptoPrimitive> hashMap0 = new HashMap<PseudoColumnUsage, CryptoPrimitive>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.USAGE_UNKNOWN;
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      hashMap0.put(pseudoColumnUsage0, cryptoPrimitive0);
      jSONObject0.increment("~0");
      JSONObject jSONObject1 = jSONObject0.put("aSQI{T#", (Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject1.query(jSONPointer0);
      jSONObject0.optJSONObject("aSQI{T#");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.optInt("java.lang.Long@00000000030");
      jSONObject0.toMap();
      jSONObject0.similar("java.lang.Long@00000000030");
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.WARNING;
      jSONObject0.optEnum(class0, "java.lang.Long@00000000030", trayIcon_MessageType0);
      jSONObject0.put("x", (double) 0);
      jSONObject0.optLong("~n.pedb:Y4", (-754L));
      jSONObject0.put("", (-1L));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("qO\"2KQ4|", true);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject jSONObject1 = new JSONObject();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      jSONObject0.optEnum(class0, "m6)uD8A?C?M\"+)qM?", multipleGradientPaint_CycleMethod0);
      jSONObject0.isNull("qO\"2KQ4|");
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("OV%)n!E[)*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1135));
      JSONObject.stringToValue("-1135");
      try { 
        jSONObject0.getDouble("-1135");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertEquals(0, jSONObject0.length());
      
      Object object0 = new Object();
      jSONObject0.putOpt("P6j1=:=U|'_djzU", object0);
      JSONObject.stringToNumber("93");
      String string0 = "getnot";
      JSONObject.stringToValue("93");
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -464
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rn3H(K,UI!K5M=%Jw_Y");
      Double double0 = new Double((-1.0));
      JSONObject jSONObject1 = jSONObject0.put("getreadLong", (Object) mockPrintWriter0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) mockPrintWriter0);
      jSONObject1.names();
      jSONObject0.optFloat("getreadLong");
      jSONObject0.optNumber("isreadLine");
      try { 
        jSONObject0.getJSONArray("rn3H(K,UI!K5M=%Jw_Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hcOd)w";
      JSONObject jSONObject0 = new JSONObject(character0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = jSONObject0.keySet();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONPointer0.toURIFragment();
      jSONObject0.optQuery(jSONPointer0);
      jSONObject0.optJSONArray("hcOd)w");
      String string0 = " amdvqPV";
      try { 
        jSONObject0.put(" amdvqPV", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      JSONObject.getNames((Object) "a0yKAzX rTY");
      int int0 = 1844;
      JSONObject jSONObject0 = new JSONObject(1844);
      JSONObject.valueToString(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      long long0 = 1L;
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      JSONObject.getNames((Object) "a0yKAzX rTY");
      JSONObject jSONObject0 = new JSONObject(1844);
      JSONObject.valueToString(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      
      jSONArray0.put(1844, 1L);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "G";
      JSONObject.isDecimalNotation("G");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = null;
      jSONObject0.optInt((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-46);
      PipedReader pipedReader0 = new PipedReader();
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("", (Map<?, ?>) hashMap0);
      Byte byte0 = new Byte((byte) (-46));
      jSONObject0.toString();
      Class<StandardLocation> class0 = StandardLocation.class;
      jSONObject0.optEnum(class0, "");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "Expected '";
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      Double double0 = new Double(Double.NaN);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optBigDecimal("Expected '", bigDecimal0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*");
      Double double1 = new Double((-1479.2630462081504));
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      Double double0 = new Double(Double.NaN);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*");
      Double double1 = new Double((-1479.2630462081504));
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JTable.PrintMode> linkedList0 = new LinkedList<JTable.PrintMode>();
      jSONObject0.put("A JSONArray text must start with '['", (Collection<?>) linkedList0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.stringToValue("A JSONArray text must start with '['");
      Float float0 = new Float(0.0F);
      JSONObject.wrap(float0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("K;8Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "#";
      try { 
        jSONObject0.get("Duplicate key \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 627;
      jSONArray0.optJSONObject(627);
      String string0 = "(f";
      jSONArray0.put((double) 627);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".xv__Os.ddQ");
      jSONArray0.optInt((-2601), 718);
      jSONArray0.optLong((-1360));
      try { 
        jSONArray0.put((-2601), (Map<?, ?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2601] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      HashMap<GroupLayout.Alignment, ClientInfoStatus> hashMap0 = new HashMap<GroupLayout.Alignment, ClientInfoStatus>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optFloat("a0yKAzX rTY", (-1146.75F));
      jSONObject0.put("K5.{}y/53P", (-1946.795F));
      StringWriter stringWriter0 = new StringWriter(1194);
      JSONObject.quote("K5.{}y/53P", (Writer) stringWriter0);
      jSONObject0.optDouble("istoString", (double) 1194);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(306);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optBigInteger("2,Rw\"\"%DI2D(/~UQ<", (BigInteger) null);
      String string0 = "org.json.JSONObject$1";
      try { 
        jSONObject1.getFloat("org.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.optBoolean("", true);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject jSONObject1 = jSONObject0.put("7`blZ+R^;?ld", (Collection<?>) linkedList0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = '}';
      charArray0[2] = '\'';
      charArray0[3] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject2 = jSONObject1.putOnce((String) null, charArrayReader0);
      jSONObject0.put("shortValue", 0.0F);
      jSONObject2.put("/", (Collection<?>) linkedList0);
      jSONObject0.optDouble("");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0);
      JSONObject jSONObject1 = jSONObject0.putOnce("%'", bufferedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rn3H(K,UI!K5M=%Jw_Y");
      jSONObject0.toMap();
      jSONObject0.optFloat("rn3H(K,UI!K5M=%Jw_Y", 1.0F);
      jSONObject0.toMap();
      jSONObject0.increment("rn3H(K,UI!K5M=%Jw_Y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject1.optBigInteger("%'", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Short short0 = new Short((short)588);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("toBigInteger");
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject.getNames((Object) "a0yKAzX rTY");
      JSONObject jSONObject0 = new JSONObject(1844);
      JSONObject.valueToString(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      Character character0 = new Character(' ');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JSONObject.valueToString(mockFileReader0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      stringArray0[5] = "0";
      stringArray0[6] = "java.io.StringWriter@0000000003";
      stringArray0[7] = "java.io.StringWriter@0000000003";
      stringArray0[8] = "java.io.StringWriter@0000000003";
      JSONObject jSONObject1 = new JSONObject(character0, stringArray0);
      jSONObject1.increment("java.io.StringWriter@0000000003");
      jSONObject1.isEmpty();
      try { 
        JSONObject.stringToNumber("Null key.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [Null key.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("7uj;.z+n4%A");
      jSONTokener0.nextValue();
      JSONArray jSONArray0 = new JSONArray();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7uj");
      JSONObject jSONObject0 = new JSONObject(45);
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONObject jSONObject1 = new JSONObject(map0);
      jSONObject0.optFloat("q:q%9_01%g?", Float.NaN);
      try { 
        jSONObject0.put("7uj;.z+n4%A", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)4);
      JSONObject.wrap(jSONObject0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      PipedReader pipedReader0 = new PipedReader();
      Double double0 = new Double((byte)4);
      JSONObject.wrap(double0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, (int) (byte)4, (int) (byte)4);
      StringWriter stringWriter0 = new StringWriter(3281);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("\"\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double1);
      JSONObject.wrap(double1);
      String string0 = "";
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("nex");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Character character0 = new Character('\\');
      Object object0 = JSONObject.wrap(character0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "by";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "Tm(df}B";
      stringArray0[2] = "vF~=Xs;H4~";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getInt("by");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject.isDecimalNotation("eg2u5Og/~6fB|Mzv");
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      MockFile mockFile0 = new MockFile("eg2u5Og/~6fB|Mzv", "#V9n Gt_x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      Character character0 = Character.valueOf('T');
      JSONObject.wrap(character0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Double double0 = new Double(0);
      JSONObject jSONObject1 = jSONObject0.putOpt("|k\"o\"p].O^-x", double0);
      jSONObject0.getFloat("|k\"o\"p].O^-x");
      JSONObject jSONObject2 = new JSONObject();
      Class<MultipleGradientPaint.CycleMethod> class0 = MultipleGradientPaint.CycleMethod.class;
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      jSONObject1.optEnum(class0, "ph6D!3}b", multipleGradientPaint_CycleMethod0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      LinkedList<JTable.PrintMode> linkedList0 = new LinkedList<JTable.PrintMode>();
      jSONObject0.put("A JSONArray text must start with '['", (Collection<?>) linkedList0);
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.NORMAL;
      linkedList0.add(jTable_PrintMode0);
      try { 
        jSONObject0.getFloat("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("P6j1=:=U|'_djzU", object0);
      try { 
        jSONObject1.getFloat("P6j1=:=U|'_djzU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)116, (-171));
      byteArrayInputStream0.read(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SnOY}=";
      stringArray0[1] = "#/";
      stringArray0[2] = "41w0B";
      stringArray0[3] = "#/";
      stringArray0[4] = "Y\"H%7 '.&h^{?";
      stringArray0[5] = "41w0B";
      MockFile mockFile0 = new MockFile("9rdMTXy'%Noy1wyAYH1", "Y\"H%7 '.&h^{?");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = '|';
      charArray0[2] = 'z';
      charArray0[3] = 'B';
      charArray0[4] = '\"';
      charArray0[5] = '_';
      charArray0[6] = ':';
      charArray0[7] = 'k';
      charArray0[8] = '.';
      mockFileWriter0.write(charArray0);
      mockFileWriter0.append('q');
      Short short0 = new Short((short)17);
      JSONObject.wrap(short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)92);
      Short short0 = new Short((short)511);
      Object object1 = JSONObject.wrap(short0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("lo?yskG12/Q>PGMb");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, (byte)92);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(object1);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("getshortValue");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("b^!?DzBf-b#,:", (float) 0);
      jSONObject1.optDouble("b^!?DzBf-b#,:", 0.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "qO\"2KQ4|";
      jSONObject0.optBoolean("qO\"2KQ4|", true);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      String string1 = "7`blZ+R^\\;?ld";
      JSONObject jSONObject1 = jSONObject0.put("7`blZ+R^;?ld", (Collection<?>) linkedList0);
      JSONObject jSONObject2 = jSONObject1.putOnce(string0, jSONObject0);
      float float0 = 0.0F;
      String string2 = "lo";
      JSONObject jSONObject3 = jSONObject0.put(string2, float0);
      String string3 = "] not found.";
      jSONObject3.put(string3, (Collection<?>) linkedList0);
      jSONObject2.optDouble(string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, "qO\"2KQ4|");
      JSONObject.getNames(jSONObject0);
      Class<Component.BaselineResizeBehavior> class1 = Component.BaselineResizeBehavior.class;
      try { 
        jSONObject0.getEnum(class1, "qO\"2KQ4|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(integer1);
      String string0 = "";
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_FOREVER;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_REMOVAL;
      hashMap0.put(cardTerminals_State0, rowIdLifetime0);
      String string1 = "false";
      JSONObject jSONObject2 = jSONObject1.put("false", (Map<?, ?>) hashMap0);
      jSONObject2.names();
      try { 
        jSONObject0.getInt("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject.stringToNumber("93");
      MockFile mockFile0 = new MockFile("93", "93");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "5Ci+[VrA9%|WonE";
      try { 
        JSONObject.stringToNumber("5Ci+[VrA9%|WonE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "7::N";
      Double double0 = new Double(0.0);
      Double double1 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double1);
      String string1 = "BRu\"-";
      String string2 = "5Ci+[VrA9%|WonE";
      try { 
        JSONObject.stringToNumber("5Ci+[VrA9%|WonE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Short short0 = new Short((short)588);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject.doubleToString((short)588);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("n:D<\\;O$Ob", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject.doubleToString(2410.610705323835);
      Character character0 = new Character('Q');
      JSONObject.valueToString(character0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.io.StringWriter@0000000002";
      stringArray0[1] = "java.io.StringWriter@0000000002";
      stringArray0[2] = "java.io.StringWriter@0000000002";
      stringArray0[3] = "java.io.StringWriter@0000000002";
      stringArray0[4] = "2410.610705323835";
      JSONObject jSONObject0 = new JSONObject("2410.610705323835", stringArray0);
      jSONObject0.isEmpty();
      try { 
        JSONObject.stringToNumber("java.io.StringWriter@0000000002");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [java.io.StringWriter@0000000002] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optNumber("ha");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject.stringToValue("Misplaced endArray.");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      String string0 = "true";
      JSONObject.isDecimalNotation("true");
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "7::N";
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rn3H(K,UI!K5M=%Jw_Y");
      long long0 = 0L;
      try { 
        jSONObject0.getDouble("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      short short0 = (short)588;
      Short short1 = new Short((short)588);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "a0yKAzX rTY";
      JSONObject jSONObject0 = new JSONObject("a0yKAzX rTY", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject2 = jSONObject1.put("a0yKAzX rTY", (Collection<?>) linkedList0);
      JSONObject jSONObject3 = jSONObject0.put("] is not a JSONObject.", 0.0F);
      JSONObject.stringToValue("] is not a JSONObject.");
      jSONObject2.put("] is not a JSONObject.", 24);
      jSONObject3.entrySet();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("P6j1=:=U|'_djzU", object0);
      jSONObject1.optLong("istoString", 1L);
      jSONObject0.optInt("5b");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getlongValue");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5b";
      jSONObject0.optInt("Error reading value at index position ");
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.putOnce("Error reading value at index position ", "gettoString");
      try { 
        jSONObject0.getBigDecimal("5b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject.isDecimalNotation("6xI>]Fk.");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("YKhd3;8e=m,h@c");
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, "6xI>]Fk.");
      jSONObject1.toString(1);
      jSONObject1.names();
      jSONObject1.optLong((String) null);
      jSONObject0.optDouble("YKhd3;8e=m,h@c", 1.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optJSONObject("getClass");
      jSONObject1.names();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Short short0 = new Short((short)608);
      HashMap<ObjectInputStream, BufferedReader> hashMap0 = new HashMap<ObjectInputStream, BufferedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = null;
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("toBigInteger");
      try { 
        jSONObject0.get("T+HA{=|c4i]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject.isDecimalNotation("G");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null);
      jSONObject0.toMap();
      jSONObject0.toMap();
      JSONObject jSONObject1 = jSONObject0.increment("getgetBytes");
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject1.optEnum(class0, (String) null);
      jSONObject0.optJSONObject("1;");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "qO\"2KQ4|";
      long long0 = (-3384L);
      JSONObject jSONObject1 = jSONObject0.put("qO\"2KQ4|", (-3384L));
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject1.optEnum(class0, "qO\"2KQ4|");
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject1.putOnce("qO\"2KQ4|", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"qO\"2KQ4|\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rn3H(K,UI!K5M=%Jw_Y");
      JSONObject jSONObject1 = jSONObject0.put("7::N", 0L);
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject1.optEnum(class0, "7::N");
      Class<Component.BaselineResizeBehavior> class1 = Component.BaselineResizeBehavior.class;
      try { 
        jSONObject1.getEnum(class1, "] not a string.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not an enum of type java.io.StringWriter@0000000014.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("P6j1=:=U|'_djzU", object0);
      jSONObject1.optInt("KFODNI1c}GWZ9Qm+");
      String string0 = "XT:f7JzE\\rG+/|3b";
      Double double0 = new Double((-2236.83155970487));
      JSONObject jSONObject2 = jSONObject0.put("P6j1=:=U|'_djzU", (Object) null);
      String string1 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Writer writer0 = jSONObject2.write((Writer) charArrayWriter0, 0, 0);
      jSONObject0.write(writer0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("P6j1=:=U|'_djzU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "qO\"2KQ4|";
      long long0 = (-3384L);
      JSONObject jSONObject1 = jSONObject0.put("qO\"2KQ4|", (-3384L));
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject1.putOnce("qO\"2KQ4|", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"qO\"2KQ4|\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      JSONObject jSONObject0 = new JSONObject((Object) "] is not < JSO$Object.");
      JSONObject.getNames(jSONObject0);
      JSONObject.stringToValue("] is not < JSO$Object.");
      jSONObject0.append("] is not < JSO$Object.", "] is not < JSO$Object.");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = new Boolean("a0yKAzX rTY");
      JSONObject.getNames((Object) "a0yKAzX rTY");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("a0yKAzX rTY", "a0yKAzX rTY");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-110));
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      JSONObject.wrap(locale_FilteringMode0);
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(pipedReader0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_OTHER;
      hashMap0.put(cardTerminals_State0, rowIdLifetime0);
      JSONObject jSONObject1 = jSONObject0.put(")dSZi^dI7aQA#),S?lB", (Map<?, ?>) hashMap0);
      jSONObject1.optQuery("");
      try { 
        jSONObject0.getNumber(")dSZi^dI7aQA#),S?lB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      jSONObject0.optInt("cIxq`?'yW1Wrw");
      jSONObject0.optInt("Error reading value at index position ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ZjP+!G#VX'`Mt7";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.putOnce("ZjP+!G#VX'`Mt7", (Object) null);
      JSONObject.stringToValue("r8 Oo>pW(4e~alggL");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "keySet");
      Double double0 = new Double(Double.NaN);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.optBigDecimal("keySet", bigDecimal0);
      BigDecimal bigDecimal1 = null;
      try {
        bigDecimal1 = new BigDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)9, 489);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "41w0B";
      stringArray0[1] = "] could not convert to BigInteger.";
      stringArray0[2] = "#/";
      stringArray0[3] = "pointer cannot be null";
      stringArray0[4] = "SnOY}=";
      stringArray0[5] = "toS";
      stringArray0[6] = " line ";
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)97;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte) (-27);
      byteArray1[4] = (byte)97;
      byteArrayInputStream0.read(byteArray1);
      stringArray0[7] = "Y\"H%7 '.&h^{?";
      JSONObject jSONObject0 = new JSONObject(byteArrayInputStream0, stringArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject0.optBigDecimal("getintern", bigDecimal0);
      jSONObject0.length();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("hashCode", true);
      LinkedList<JTable.PrintMode> linkedList0 = new LinkedList<JTable.PrintMode>();
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.NORMAL;
      linkedList0.add(jTable_PrintMode0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONObject jSONObject1 = new JSONObject();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      HashMap<SocketFlow.Status, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<SocketFlow.Status, MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Short short0 = new Short((short)28);
      JSONObject.numberToString(short0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",6u]Sr]}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",6u]Sr]}");
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONObject jSONObject1 = new JSONObject(map0);
      Float float0 = new Float(3575.79F);
      jSONObject1.put(",6u]Sr]}", (-1.0F));
      jSONObject1.optDouble(",6u]Sr]}", (double) 3575.79F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "keySet");
      String string0 = "toBigInt;:er";
      jSONObject0.optJSONObject("toBigInt;:er");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getJSONObject("toBigInt;:er");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(22);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("P6j1=:=U|'_djzU", object0);
      try { 
        jSONObject1.getJSONObject("P6j1=:=U|'_djzU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      jSONObject1.optInt("fI", 57);
      jSONObject1.remove("fI");
      BigDecimal bigDecimal0 = new BigDecimal((-1412L));
      jSONObject0.put("in", 0.0);
      jSONObject1.toString(2283);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "in";
      stringArray0[2] = "GbcGvkHIp:vz<,7";
      stringArray0[3] = "";
      stringArray0[4] = "java.io.StringWriter@0000000015";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject2.getJSONObject("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000028] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 59;
      Long long0 = new Long(59);
      JSONObject.wrap(long0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("", (Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(";oJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      JSONObject.wrap(jSONObject0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      PipedReader pipedReader0 = new PipedReader();
      Long long0 = new Long(93L);
      JSONObject.wrap(long0);
      String string0 = "";
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      jSONObject0.optQuery("");
      // Undeclared exception!
      try { 
        RoundingMode.valueOf(1923);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument out of range
         //
         verifyException("java.math.RoundingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("nextProbablePrime");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = new Object();
      jSONObject0.putOpt("P6j1=:=U|'_djzU", object0);
      jSONObject0.optInt("5b");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      JSONObject jSONObject1 = jSONObject0.put("", (-1.0));
      jSONObject1.toString(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "java.io.StringWriter@0000000016");
      JSONObject.writeValue(charArrayWriter0, "", 2283, 1301);
      jSONObject1.keySet();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("?eiJ*^+.1346o=m-B)d");
      JSONObject.doubleToString((-1135));
      JSONObject.stringToValue("-1135");
      try { 
        jSONObject0.getDouble("-1135");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = new Object();
      jSONObject0.putOpt("P6j1=:=U|'_djzU", object0);
      jSONObject0.optInt("5b");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5b";
      jSONObject0.optInt("Error reading value at index position ");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.putOnce("Error reading value at index position ", "gettoString");
      JSONObject.stringToValue("5b");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "fI";
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      int int0 = 57;
      jSONObject1.optInt("fI", 57);
      jSONObject0.similar((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)33;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|b!XE=}/;L";
      stringArray0[1] = "*tc7)n2y7Kjegfn1pIc";
      stringArray0[2] = "to";
      stringArray0[3] = "PzHmju7]";
      stringArray0[4] = "y3";
      stringArray0[5] = "true";
      stringArray0[6] = "qW tNvi'[";
      JSONObject jSONObject0 = new JSONObject(bigInteger0, stringArray0);
      jSONObject0.similar("to");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.optInt("JSONArray[");
      BigDecimal bigDecimal0 = new BigDecimal(3402L);
      jSONObject0.put("", (-2366.992));
      jSONObject0.toString(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      JSONObject.writeValue(charArrayWriter1, (Object) null, 0, 18);
      jSONObject0.keySet();
      try { 
        jSONObject0.getJSONObject("value [%s] is not an array or object therefore its key %s cannot be resolved");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(59);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", (double) (-1412L));
      jSONObject1.toString(2283);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      charArrayWriter1.append((CharSequence) "NJe7'Fe@3");
      jSONObject1.put(";z9,", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 10);
      jSONObject1.keySet();
      jSONObject0.optFloat("java.io.StringWriter@0000000002", (float) 0L);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "a0yKAzX rTY";
      JSONObject jSONObject0 = new JSONObject((Object) "a0yKAzX rTY");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.entrySet();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.optInt("Expected '", 105);
      jSONObject1.toMap();
      jSONObject1.put("Expected '", 1L);
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, "]!foo");
      try { 
        jSONObject0.toString(695);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, " line ");
      String string0 = "\"^{Y,9IPeAe3440L=";
      jSONObject0.optInt(" line ", (-1431655763));
      jSONObject0.remove("Expected '");
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1431655763));
      jSONObject0.put("lRUSw", 0.0);
      try { 
        jSONObject0.toString(2283);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = new Short((short)588);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject.stringToValue("getnot");
      jSONObject0.toMap();
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Short short0 = new Short((short)608);
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.toString();
      try { 
        jSONObject0.getBoolean("java.io.StringWriter@0000000004");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      HashMap<BufferedInputStream, Float> hashMap0 = new HashMap<BufferedInputStream, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "fI";
      String string1 = "";
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "fI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      PipedReader pipedReader0 = new PipedReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JSONObject.wrap(mockFileReader0);
      String string0 = "";
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_FOREVER;
      hashMap0.put(cardTerminals_State0, rowIdLifetime0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map<?, ?>) hashMap0);
      String string1 = "Q6_2)jCa7166T>lDD&";
      // Undeclared exception!
      try { 
        jSONObject1.optQuery("Q6_2)jCa7166T>lDD&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.stringToValue("getisEmpty");
      MockFileWriter mockFileWriter0 = new MockFileWriter("0000", true);
      mockFileWriter0.append('{');
      JSONObject.wrap(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "v~1<U<A.b+ @'l";
      String string1 = "\"^{Y,9IPeAe3440L=";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject.stringToValue("%s is not an array index");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "\"^{Y,9IPeAe3440L=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String string0 = "UtR*";
      File file0 = MockFile.createTempFile("Ow[g5e:L`]U~]]g", "Ow[g5e:L`]U~]]g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      JSONObject jSONObject0 = new JSONObject(mockPrintStream0);
      Short short0 = new Short((short)2272);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2329, (-3809));
      JSONObject.wrap(byteArrayInputStream0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.indent(pipedWriter0, (byte)0);
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      Character.valueOf('/');
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, "getreadUnsignedShort");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject0.toString();
      jSONObject0.optFloat((String) null);
      jSONObject0.keys();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.optInt("5b");
      String string0 = "XT:7JzE\\r+/|3";
      Double double0 = new Double(0);
      JSONObject jSONObject1 = jSONObject0.put("XT:7JzE\r+/|3", (Object) double0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0);
      Object object0 = JSONObject.NULL;
      jSONObject1.names();
      jSONObject1.optFloat("XT:7JzE\r+/|3");
      jSONObject1.optNumber("");
      try { 
        jSONObject0.getJSONArray("XT:7JzE\r+/|3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rn3H(K,UI!K5M=%Jw_Y");
      JSONObject jSONObject1 = jSONObject0.put("getreadLong", (Object) mockPrintWriter0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) mockPrintWriter0);
      jSONObject1.names();
      jSONObject0.optFloat("getreadLong");
      String string0 = "intValue";
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      // Undeclared exception!
      try { 
        jSONObject1.optQuery("intValue");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "5b";
      int int0 = new Integer(0);
      Double double0 = new Double(0);
      JSONObject jSONObject1 = jSONObject0.put("5b", (Object) double0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0);
      jSONObject1.names();
      jSONObject1.optFloat("5b");
      jSONObject1.optNumber("");
      try { 
        jSONObject0.getJSONArray("5b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short short0 = (short)588;
      Short short1 = new Short((short)588);
      JSONObject jSONObject0 = new JSONObject();
      Short short2 = new Short((short)588);
      JSONObject jSONObject1 = jSONObject0.increment("a JSON pointer should start with '/' or '#/'");
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(59);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.names();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NJe7'Fe@3");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 59);
      jSONObject0.putOnce("Misplaced endArray.", bufferedWriter0);
      JSONObject.stringToValue("NJe7'Fe@3");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject.isDecimalNotation("G");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null);
      JSONObject jSONObject1 = jSONObject0.put("G", 0L);
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, (String) null);
      jSONObject1.toString(0);
      jSONObject1.names();
      jSONObject0.optString("java.io.StringWriter@0000000008");
      jSONObject1.optLong("");
      jSONObject1.optDouble("gettoLowerCase", (double) 0L);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(59);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("&2Wyj$Ks_kqZ$VujHa");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      jSONObject1.optInt("fI", 57);
      jSONObject1.remove("fI");
      BigDecimal bigDecimal0 = new BigDecimal((-1412L));
      jSONObject0.put("in", 0.0);
      jSONObject1.toString(2283);
      jSONObject0.names();
      jSONObject0.optString("fI");
      jSONObject0.optLong("java.io.StringWriter@0000000015");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject.isDecimalNotation("G");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null);
      JSONObject jSONObject1 = jSONObject0.put("G", 0L);
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, (String) null);
      jSONObject1.toString(0);
      jSONObject1.names();
      jSONObject1.optLong("java.io.StringWriter@0000000008");
      jSONObject1.optDouble("gettoLowerCase", (double) 0L);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "5b";
      try { 
        jSONObject0.getBigInteger(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "5b";
      try { 
        jSONObject0.getBigInteger("5b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "] is not a valid number.";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "a0yKAzX rTY";
      JSONObject jSONObject0 = new JSONObject("a0yKAzX rTY", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      jSONObject1.put("a0yKAzX rTY", (Collection<?>) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("] is not a JSONObject.", 0.0F);
      try { 
        jSONObject2.getBigDecimal("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Short short0 = new Short((short)588);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short short1 = new Short((short)588);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      jSONObject0.put("/", (Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        JSONObject.quote("/", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      String string0 = JSONObject.doubleToString(1844);
      assertEquals("1844", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.optInt("5b");
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      Character.valueOf('T');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('5');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "5b");
      JSONObject.getNames((Object) stringWriter2);
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '/';
      charArray0[2] = '5';
      charArray0[3] = 'T';
      charArray0[4] = '5';
      BigDecimal bigDecimal1 = null;
      try {
        bigDecimal1 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject.isDecimalNotation("\\");
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      jSONObject0.accumulate(";DnV$QYm$7", roundingMode0);
      jSONObject0.putOpt(";DnV$QYm$7", "longValueExact");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = new Object();
      jSONObject0.putOpt("P6j1=:=U|'_djzU", object0);
      String string0 = "5b";
      jSONObject0.optInt("5b");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      Character.valueOf('T');
      JSONObject.getNames((Object) "");
      char[] charArray0 = new char[0];
      BigDecimal bigDecimal1 = null;
      try {
        bigDecimal1 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      JSONObject.valueToString(byte0);
      String string0 = "L~aAS!~2F:_DP|mz5";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("L~aAS!~2F:_DP|mz5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "a0yKAzX rTY";
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "] is not a JSONObject.";
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.wrap(bigInteger0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_FOREVER;
      hashMap0.put(cardTerminals_State0, rowIdLifetime0);
      File file0 = MockFile.createTempFile("? *lZlW~n0s\"", "");
      String string1 = "toC";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "toC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"toC\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Character character0 = new Character('T');
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, " line ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.query(jSONPointer0);
      boolean boolean0 = new Boolean("\"^{Y,9IPeAe3440L=");
      try { 
        jSONObject0.getString(" line ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject.isDecimalNotation("Expected '");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.optInt((String) null);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      jSONObject1.optInt("fI", 57);
      jSONObject1.remove("fI");
      BigDecimal bigDecimal0 = new BigDecimal((-1412L));
      JSONObject jSONObject2 = jSONObject0.put("in", 0.0);
      jSONObject1.toString(2283);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "in");
      jSONObject2.put("", false);
      JSONObject.writeValue(charArrayWriter0, (Object) null, 57, (-627));
      Set<String> set0 = jSONObject2.keySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-316.94310184463));
      JSONObject jSONObject1 = new JSONObject(58);
      String string0 = "\\Iq_;WUv[,r";
      int int0 = 128;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      int int1 = 2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 58);
      Object object0 = JSONObject.NULL;
      jSONObject1.put(":&M2j", object0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0);
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-2396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte0);
      JSONObject jSONObject0 = new JSONObject(object0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(pipedReader0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      String string0 = "lo";
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      jSONObject0.optEnum(class0, "java.io.PipedReader@0000000002", authenticator_RequestorType0);
      jSONObject0.put("lo", (-1084.26424662));
      int int0 = 69;
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter("", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = new JSONObject(locale0);
      String string0 = "isreadInt";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("isreadInt");
      jSONObject0.write((Writer) mockPrintWriter0, (-2), (-2159));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, " line ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      BigDecimal bigDecimal0 = new BigDecimal(1595L);
      JSONObject jSONObject1 = jSONObject0.put("\"^{Y,9IPeAe3440L=", 1.0);
      jSONObject0.toString((-1232));
      jSONObject1.names();
      jSONObject0.optString("s;");
      jSONObject1.optLong("9j|M");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      Double double0 = new Double((-316.94310184463));
      JSONObject jSONObject0 = new JSONObject((int) (byte)48);
      String string0 = "\\Iq_;WUv[,r";
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 128, (byte)0);
      jSONObject0.put("Iq_;WUv[,r", (Object) byteArrayInputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0);
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.ITALY;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = (short)589;
      Short short1 = new Short((short)589);
      JSONObject jSONObject0 = new JSONObject(short1);
      jSONObject0.append("/", (Object) null);
      int int0 = 123;
      jSONObject0.optInt((String) null, 123);
      jSONObject0.remove("true");
      BigDecimal bigDecimal0 = new BigDecimal((long) 123);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("oqL2/q3TVtJ>w)", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(40);
      String string0 = "";
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Short short0 = new Short((short)588);
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "getnot";
      JSONObject.stringToValue("getnot");
      try { 
        jSONObject0.getBoolean("getnot");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      String string0 = "getreadUnsignedShort";
      jSONObject0.optEnum(class0, "getreadUnsignedShort");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.query(jSONPointer0);
      try { 
        jSONObject0.getBoolean("\"^{Y,9IPeAe3440L=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      jSONObject1.optInt("fI", 57);
      jSONObject1.remove("fI");
      BigDecimal bigDecimal0 = new BigDecimal((-1412L));
      JSONObject jSONObject2 = jSONObject0.put("in", 0.0);
      jSONObject2.optInt("fI", (-16));
      jSONObject1.toString(2283);
      jSONObject0.optDouble("java.io.StringWriter@0000000015");
      jSONObject0.keySet();
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject.stringToValue("true");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(114);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Stepping back two steps is not supported");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Map<String, Object> map0 = jSONObject2.toMap();
      JSONObject jSONObject3 = new JSONObject(map0);
      jSONObject3.optFloat("rn3H(K,UI!K5M=%Jw_Y", 3575.79F);
      jSONObject1.put("\"\"", 1.0F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject.doubleToString(744.6879248);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = new JSONObject(3358);
      String string0 = "] could not convert to BigDecimal.";
      try { 
        jSONObject0.getFloat("] could not convert to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "v~1<U<A.b+ @'l";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "v~1<U<A.b+ @'l";
      JSONObject jSONObject0 = new JSONObject("G", stringArray0);
      jSONObject0.optInt("gettoString");
      JSONObject jSONObject1 = jSONObject0.put("G", (long) (-928));
      try { 
        jSONObject1.getFloat("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      String[] stringArray0 = new String[10];
      stringArray0[0] = "] is not a JSONObject.";
      JSONObject jSONObject0 = new JSONObject("a0yKAzX rTY", stringArray0);
      jSONObject0.optInt("yBnL.WW3e7t >g");
      JSONObject jSONObject1 = jSONObject0.put("to", 0L);
      try { 
        jSONObject1.getJSONArray("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      String[] stringArray0 = new String[2];
      String string0 = "] is not a JSONObject.";
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "a0yKAzX rTY";
      JSONObject jSONObject0 = new JSONObject("a0yKAzX rTY", stringArray0);
      jSONObject0.optInt("yBnL.WW3e7t >g");
      JSONObject jSONObject1 = jSONObject0.put("to", 0L);
      try { 
        jSONObject1.getJSONArray("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, "getreadUnsignedShort");
      jSONObject0.optString("getreadUnsignedShort", "0O/,P<mG,-jUfd");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String[] stringArray0 = new String[6];
      String string0 = "' and instead saw ''";
      stringArray0[0] = "' and instead saw ''";
      stringArray0[1] = "] is not a JSONArray.";
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = ")1qINpcbi=%<@~";
      JSONObject.isDecimalNotation(")1qINpcbi=%<@~");
      JSONTokener jSONTokener0 = new JSONTokener(")1qINpcbi=%<@~");
      try { 
        JSONObject.stringToNumber(")1qINpcbi=%<@~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [)1qINpcbi=%<@~] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "fI";
      String string1 = "";
      jSONObject0.optBoolean("", true);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      jSONObject1.remove("fI");
      BigDecimal bigDecimal0 = new BigDecimal((-1412L));
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      // Undeclared exception!
      try { 
        jSONObject1.query(" [character ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("isdoubleValue");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      HashMap<ByteArrayInputStream, CryptoPrimitive> hashMap0 = new HashMap<ByteArrayInputStream, CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("KAOd", 2691.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("qO\"2KQ4|", (-3384L));
      HashMap<Resource.AuthenticationType, BufferedOutputStream> hashMap0 = new HashMap<Resource.AuthenticationType, BufferedOutputStream>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      Float float0 = new Float(3575.79F);
      JSONObject jSONObject3 = jSONObject2.put("qO\"2KQ4|", 0.0F);
      jSONObject3.toString(70);
      double double0 = jSONObject1.optDouble("qO\"2KQ4|", (double) (-3384L));
      assertEquals(1, jSONObject0.length());
      assertEquals((-3384.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      jSONObject1.optInt("fI", 57);
      jSONObject1.remove("fI");
      BigDecimal bigDecimal0 = new BigDecimal((-1412L));
      jSONObject0.put("in", 0.0);
      jSONObject1.toString(2283);
      jSONObject0.optDouble("java.io.StringWriter@0000000015");
      Set<String> set0 = jSONObject0.keySet();
      assertFalse(set0.contains("fI"));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "] is not a valid number.";
      String[] stringArray0 = new String[2];
      JSONObject.wrap("v~1<U<A.b+ @'l");
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_SESSION;
      hashMap0.put(cardTerminals_State0, rowIdLifetime0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.stringToValue(".");
      JSONObject.wrap(".");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONObject jSONObject0 = new JSONObject();
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, "v8-Q9nvqO");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "GoRG\"?aN}rx'>tUKy BK";
      try { 
        jSONObject0.getLong("GoRG\"?aN}rx'>tUKy BK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "GoRG\"?aN}x'>tU?yOBK";
      try { 
        jSONObject0.getLong("GoRG\"?aN}x'>tU?yOBK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "qO\"2KQ4|";
      try { 
        jSONObject0.getBigInteger("qO\"2KQ4|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      jSONObject1.optInt("fI", 57);
      jSONObject1.remove("fI");
      BigDecimal bigDecimal0 = new BigDecimal((-1412L));
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = '&';
      Character.valueOf('9');
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "fI";
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      int int0 = 57;
      jSONObject1.optInt("fI", 57);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "' and instead saw ''";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string0 = "org.json.JSONException";
      try { 
        MockURI.URI("5b", "5b", "org.json.JSONException", (int) (byte)0, "] is not a JSONArray.", "5b", "8_~ge@Py<$9HiA4m");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 5b://5b@org.json.JSONException:0%5D%20is%20not%20a%20JSONArray.?5b#8_~ge@Py%3C$9HiA4m
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = new Object();
      JSONObject.stringToValue("9");
      try { 
        jSONObject0.getJSONArray("getintValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "Expected '";
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      String string1 = "\\u";
      int int0 = (-928);
      jSONObject0.optInt("lU3TQt");
      JSONObject jSONObject1 = jSONObject0.put("", (long) 0);
      try { 
        jSONObject1.getJSONArray(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000024] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<KeyRep.Type> linkedList0 = new LinkedList<KeyRep.Type>();
      JSONObject jSONObject1 = jSONObject0.put("n9", (Collection<?>) linkedList0);
      jSONObject1.putOnce("En;Q0:0", "7`blZ+R^;?ld");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      HashMap<JSONObject, DayOfWeek> hashMap0 = new HashMap<JSONObject, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "5b";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (-483.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rn3H(K,UI!K5M=%Jw_Y");
      jSONObject0.toMap();
      jSONObject0.optFloat("G", 0.0F);
      jSONObject0.toMap();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "' and instead saw ''";
      stringArray0[1] = "] is not a JSONArray.";
      stringArray0[2] = "";
      Long long0 = new Long(1L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)92;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = jSONObject0.optNumber((String) null, (Number) bigInteger0);
      assertEquals((byte)92, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "' and instead saw ''";
      stringArray0[1] = "] is not a JSONArray.";
      jSONObject0.toMap();
      float float0 = jSONObject0.optFloat("Dk3.*", 3063.0F);
      assertEquals(3063.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte0);
      JSONObject jSONObject0 = new JSONObject(object0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(pipedReader0);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBigDecimal("R{W{ef7E_*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject.isDecimalNotation("\\");
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      jSONObject0.accumulate(";DnV$QYm$7", roundingMode0);
      jSONObject0.toString();
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      JSONObject jSONObject1 = jSONObject0.put("]", true);
      jSONObject0.optLong("Error reading value at index position ");
      jSONObject0.remove("Error reading value at index position ");
      jSONObject0.optBoolean("gettoString");
      jSONObject0.write((Writer) charArrayWriter0);
      jSONObject1.toMap();
      assertEquals(62, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      StringWriter stringWriter0 = new StringWriter(1683);
      JSONObject.quote("zoU1b", (Writer) stringWriter0);
      assertEquals("\"zoU1b\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Object object0 = new Object();
      HashMap<SocketFlow.Status, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<SocketFlow.Status, MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optInt("`W.y%<g>eD,~ChI");
      Double double0 = new Double(0);
      jSONObject0.put("C6/zTR!g~r{v1", (Object) double0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0);
      PipedReader pipedReader0 = new PipedReader();
      jSONObject0.toMap();
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      try { 
        jSONObject0.getEnum(class0, "`W.y%<g>eD,~ChI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "";
      jSONObject0.optInt("5b");
      String string1 = "XT:f7JzE\\rG+/|3b";
      Double double0 = new Double(0);
      JSONObject jSONObject1 = jSONObject0.put("XT:f7JzE\rG+/|3b", (Object) double0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("qO\"2KQ4|", true);
      Double double0 = new Double((-1485.3491314094354));
      JSONObject.numberToString(double0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getshortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("5b");
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(pipedReader0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("$n<%oBGUL,V6Q", (Collection<?>) null);
      jSONObject1.putOnce("$n<%oBGUL,V6Q", (Object) null);
      JSONObject jSONObject2 = jSONObject0.put("$n<%oBGUL,V6Q", 0.0F);
      JSONObject jSONObject3 = jSONObject2.put("$n<%oBGUL,V6Q", (Collection<?>) null);
      double double0 = jSONObject3.optDouble("] not found.");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<Character, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Character, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.toString((-2104));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Character character0 = Character.valueOf('X');
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement0 = LayoutStyle.ComponentPlacement.INDENT;
      linkedList0.add((Locale.LanguageRange) null);
      hashMap0.put(character0, layoutStyle_ComponentPlacement0);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2104));
      jSONObject0.optNumber("java.io.StringWriter@0000000002", (Number) bigDecimal0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.query(jSONPointer0);
      jSONObject0.optDouble("kZ^3");
      jSONObject0.optJSONArray("a.![6K-a!nDR'");
      JSONObject.wrap((Object) null);
      hashMap0.clone();
      jSONObject0.optJSONArray("a.![6K-a!nDR'");
      try { 
        jSONObject0.getBigDecimal("kZ^3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte1);
      JSONObject jSONObject0 = new JSONObject(object0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(pipedReader0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_FOREVER;
      hashMap0.put(cardTerminals_State0, rowIdLifetime0);
      JSONObject jSONObject1 = jSONObject0.put("Q@Yh~K|VC7>+oER4n", (Map<?, ?>) hashMap0);
      jSONObject0.optInt("java.io.PipedReader@0000000002");
      try { 
        jSONObject1.getBigDecimal((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      String string0 = "'W:e<x:1#c^{^]";
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "H/KmO*d(,q#5";
      String string1 = ";E'~)*hi^";
      String string2 = "null";
      jSONObject0.optInt("null");
      JSONObject jSONObject1 = jSONObject0.put(";E'~)*hi^", (Object) null);
      String string3 = "] is not a boolean.";
      // Undeclared exception!
      try { 
        jSONObject1.optQuery("] is not a boolean.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "H/KmO*d(,q#5";
      String string1 = ";E'~)*hi^";
      jSONObject0.optInt("null");
      JSONObject jSONObject1 = jSONObject0.put(";E'~)*hi^", (Object) null);
      // Undeclared exception!
      try { 
        jSONObject1.optQuery("] is not a boolean.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("qO\"2KQ4-|", true);
      jSONObject0.put("lo", 0.0F);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      jSONObject0.toMap();
      float float0 = jSONObject0.optFloat(" V2d!AC2yX-LI2S", 0.0F);
      assertEquals(2, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte0);
      JSONObject jSONObject0 = new JSONObject(object0);
      PipedReader pipedReader0 = new PipedReader();
      Object object1 = JSONObject.wrap(pipedReader0);
      assertNotNull(object1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "java.io.PipedReader@0000000002";
      stringArray0[2] = "java.io.PipedReader@0000000002";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "java.io.PipedReader@0000000002";
      stringArray0[7] = "";
      stringArray0[8] = "";
      jSONObject0.toMap();
      float float0 = jSONObject0.optFloat("", (float) (byte)0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("v8-Q9nvqO");
      assertNull(jSONArray0);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JSONObject.testValidity((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1845;
      try { 
        jSONArray0.getJSONObject(1845);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1845] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("toBigInteger");
      jSONObject0.put("toBigInteger", 9L);
      jSONObject0.toMap();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object object0 = new Object();
      HashMap<SocketFlow.Status, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<SocketFlow.Status, MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optInt("`W.y%<g>eD,~ChI");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      int int0 = (-928);
      jSONObject0.optInt("lU3TQt");
      jSONObject0.put("", (long) 0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Integer integer0 = new Integer(9);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'";
      String string0 = "_gG#*/Am%x)|/%X*z";
      stringArray0[1] = "_gG#*/Am%x)|/%X*z";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      jSONObject0.keySet();
      JSONPointer jSONPointer0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONObject0.query(jSONPointer0);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "";
      JSONObject.quote("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("true", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name true, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "Illegal escape.";
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Illegal escape.", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Illegal escape., locale zh
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      jSONObject0.increment("");
      JSONObject jSONObject1 = jSONObject0.put("l2n;h}^}3m", 0.0);
      jSONObject1.toString(97);
      jSONObject0.optDouble("java.io.StringWriter@0000000044");
      try { 
        MockURI.URI(";es_D0NQ", ";es_D0NQ", "l2n;h}^}3m", "!Yr>z%VQlf&x<X[");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ;es_D0NQ://;es_D0NQl2n;h%7D%5E%7D3m#!Yr%3Ez%25VQlf&x%3CX[
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(57);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optNumber("ha");
      String string0 = jSONObject0.optString("ha", "4hZq=^D~L9u");
      assertEquals(1, jSONObject0.length());
      assertEquals("4hZq=^D~L9u", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<Character, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Character, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.toString((-2104));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Character character0 = Character.valueOf('X');
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement0 = LayoutStyle.ComponentPlacement.INDENT;
      linkedList0.add((Locale.LanguageRange) null);
      linkedList1.offer("=,(Z$c-_uK}.Lpy");
      hashMap0.put(character0, layoutStyle_ComponentPlacement0);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2104));
      jSONObject0.optNumber("java.io.StringWriter@0000000002", (Number) bigDecimal0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JSONObject.testValidity(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "rn3H(K,UI!K5M=%Jw_Y";
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject jSONObject1 = jSONObject0.put("rn3H(K,UI!K5M=%Jw_Y", (Collection<?>) linkedList0);
      try { 
        jSONObject1.putOnce("rn3H(K,UI!K5M=%Jw_Y", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"rn3H(K,UI!K5M=%Jw_Y\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "Substring bounds error";
      jSONObject0.putOnce("Substring bounds error", hashMap0);
      String string1 = "].";
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("].");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject.isDecimalNotation("v~1<U<A.b+ @'l");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "v~1<U<A.b+ @'l";
      JSONObject jSONObject0 = new JSONObject("v~1<U<A.b+ @'l", stringArray0);
      jSONObject0.optInt("gettoString");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.putOnce("v~1<U<A.b+ @'l", jSONObject1);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = JSONObject.stringToValue("5b");
      assertEquals("5b", object0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      JSONTokener jSONTokener0 = new JSONTokener("a0yKAzX rTY");
      jSONTokener0.next();
      jSONTokener0.skipTo('l');
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Short short0 = new Short((short)588);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      // Undeclared exception!
      try { 
        JSONObject.quote("/", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "7::N";
      // Undeclared exception!
      try { 
        JSONObject.quote("7::N", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject.stringToValue("Expected '");
      Boolean boolean0 = new Boolean("Expected '");
      JSONObject jSONObject0 = new JSONObject(117);
      jSONObject0.putOnce("Expected '", " _#.W%&BU");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "' and instead saw ''";
      stringArray0[1] = "] is not a JSONArray.";
      stringArray0[2] = "";
      stringArray0[3] = "5b";
      stringArray0[4] = "";
      stringArray0[5] = "R{W{ef7E_*";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBigDecimal("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      try { 
        jSONObject0.getNumber("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject.isDecimalNotation("G");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null);
      JSONObject jSONObject1 = jSONObject0.put("G", 0L);
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, (String) null);
      Class<Component.BaselineResizeBehavior> class1 = Component.BaselineResizeBehavior.class;
      try { 
        jSONObject1.getEnum(class1, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte)62);
      Byte byte1 = new Byte((byte)62);
      JSONObject jSONObject0 = new JSONObject(17);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("cQ9K9klh{1W[7/<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, BigDecimal> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, BigDecimal>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONObject jSONObject1 = new JSONObject(map0);
      jSONObject0.optFloat("Expected '", 3575.79F);
      jSONObject1.put("Expected '", (-1.0F));
      Writer writer0 = JSONObject.quote("Expected '", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte0);
      JSONObject jSONObject0 = new JSONObject(object0);
      MockFile mockFile0 = new MockFile("readDouble", "readDouble");
      MockFile mockFile1 = new MockFile("readUnsignedShort");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONObject.wrap(locale_Category0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getreadDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte0);
      JSONObject jSONObject0 = new JSONObject(object0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(pipedReader0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      jSONObject0.optQuery("");
      try { 
        jSONObject0.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedReader pipedReader0 = new PipedReader();
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(52);
      JSONObject.wrap("P6j1=:=U|'_djzU");
      JSONObject jSONObject1 = new JSONObject((Object) "P6j1=:=U|'_djzU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("sho");
      Map<String, Object> map0 = jSONObject1.toMap();
      JSONObject jSONObject2 = new JSONObject(map0);
      jSONObject1.optFloat("\n", 403.02463F);
      jSONObject1.put("2@/2|,OkuNx/Dxg(", 403.02463F);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(47);
      String string0 = "x%gH#3";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.stringToValue(".");
      JSONObject.wrap(".");
      jSONObject0.toMap();
      String string0 = "false";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("}tsF]YSA5p=");
      assertEquals("}tsF]YSA5p=", object0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "uj;.z+n4%A";
      JSONTokener jSONTokener0 = new JSONTokener("uj;.z+n4%A");
      jSONTokener0.nextValue();
      jSONTokener0.nextTo("r~N`2");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 10 [character 11 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode.values();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "^";
      stringArray0[2] = "";
      stringArray0[3] = "] is not a valid number.";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      jSONObject0.increment("");
      String string0 = null;
      String string1 = "DS=#,6H%";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3052
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String string0 = "UtR*";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("UtR*");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("GT*IPh/[]:?nJ;n#7", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name GT*IPh/[]:?nJ;n#7, locale zh
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject.doubleToString(2410.610705323835);
      int int0 = (-1119);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1119
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject.doubleToString(2410.610705323835);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte0);
      JSONObject jSONObject0 = new JSONObject(object0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(pipedReader0);
      String string0 = "";
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_FOREVER;
      hashMap0.put(cardTerminals_State0, rowIdLifetime0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map<?, ?>) hashMap0);
      jSONObject1.optQuery("");
      try { 
        jSONObject1.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Integer integer0 = new Integer(0);
      Object object0 = JSONObject.wrap(integer0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(object0);
      String string0 = "";
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_FOREVER;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_REMOVAL;
      hashMap0.put(cardTerminals_State0, rowIdLifetime0);
      jSONObject1.put("false", (Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(pipedReader0);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap0 = new HashMap<CardTerminals.State, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      String string0 = "\\u";
      String string1 = "";
      String string2 = " V2d!AC2yX-LI2S";
      MockFile mockFile0 = new MockFile(" V2d!AC2yX-LI2S");
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string0, "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      HashMap<Short, Resource.AuthenticationType> hashMap0 = new HashMap<Short, Resource.AuthenticationType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.wrap(jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap(jSONObject1);
      HashMap<CardTerminals.State, RowIdLifetime> hashMap1 = new HashMap<CardTerminals.State, RowIdLifetime>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_ABSENT;
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_FOREVER;
      hashMap1.put(cardTerminals_State0, rowIdLifetime0);
      JSONObject jSONObject2 = jSONObject1.put("getBytes", (Map<?, ?>) hashMap1);
      jSONObject2.optQuery("");
      Short short0 = new Short((short)1039);
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      hashMap0.put(short0, resource_AuthenticationType0);
      try { 
        jSONObject1.getNumber("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000029] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Expected '");
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      jSONObject0.optEnum(class0, "getreadUnsignedShort");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2329, (-3809));
      JSONObject.wrap(byteArrayInputStream0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.indent(pipedWriter0, (byte)0);
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = 'v';
      charArray0[2] = 'k';
      charArray0[3] = ',';
      charArray0[4] = ' ';
      charArray0[5] = 'o';
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.wrap((Object) null);
      jSONObject0.toMap();
      float float0 = jSONObject2.optFloat("false", (-994.5F));
      assertEquals((-994.5F), float0, 0.01F);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject.isDecimalNotation("a0yKAzX rTY");
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      String string0 = "\\u";
      MockFile mockFile0 = new MockFile(string0, "a0yKAzX rTY");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JSONObject.wrap(mockFileOutputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getisEmpty");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "] is no a valid number.";
      try { 
        JSONObject.stringToNumber("] is no a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [] is no a valid number.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      short short0 = (short)589;
      Short short1 = new Short((short)589);
      JSONObject jSONObject0 = new JSONObject(short1);
      try { 
        JSONObject.stringToNumber("/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [/] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Short short0 = new Short((short)608);
      try { 
        JSONObject.stringToNumber("/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [/] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject.getNames((Object) null);
      JSONObject jSONObject0 = new JSONObject(1191);
      JSONObject.valueToString(linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("java.io.StringWriter@0000000003");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONTokener jSONTokener0 = new JSONTokener(pipedReader0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("zoU1b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "";
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.getBigDecimal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.optBoolean("?eiJ*^+.1346o=m-B)d");
      JSONObject.doubleToString(0);
      JSONObject.stringToValue("0");
      try { 
        jSONObject0.getDouble("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("true");
      try { 
        jSONObject0.getBigDecimal("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = JSONObject.quote("a0yKAzX rTY");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONObject.getNames((Object) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(9L);
      Character character0 = new Character('n');
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames((Object) bigDecimal0);
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-3245L));
      Character character0 = new Character('T');
      Object object0 = JSONObject.NULL;
      JSONObject.wrap(object0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("SS+x]YETXX3Xev8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "R{W{ef7E_*";
      stringArray0[2] = "' and instead saw ''";
      stringArray0[3] = "5b";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("R{W{ef7E_*", (-2746.63F));
      try { 
        jSONObject0.getBigDecimal("]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject.doubleToString(0.0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("qO\"2KQ4|", true);
      assertTrue(boolean0);
      
      Object object0 = JSONObject.stringToValue("+54F0w");
      assertEquals("+54F0w", object0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Character character0 = new Character('T');
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Short short0 = new Short((short)589);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.remove("true");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      String string0 = jSONObject0.optString("4hZq=^D~L9u", "'W:e<x:1#c^{^]");
      assertEquals("'W:e<x:1#c^{^]", string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      int int0 = new Integer(57);
      jSONObject1.remove("fI");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.put("fI", (double) 57);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "fI";
      String string1 = "";
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = jSONObject0.append("fI", (Object) null);
      jSONObject1.remove("fI");
      BigDecimal bigDecimal0 = new BigDecimal((-1412L));
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = '&';
      Character character0 = Character.valueOf('9');
      JSONObject.getNames((Object) character0);
      charArray0[2] = ')';
      charArray0[3] = '$';
      charArray0[4] = 'm';
      BigDecimal bigDecimal1 = null;
      try {
        bigDecimal1 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2791);
      jSONObject0.increment("U5'y()(~)kT5utfMqV");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = new Boolean("a0yKAzX rTY");
      JSONObject jSONObject0 = new JSONObject((Object) "] s not . JSO$Object.");
      Locale.getISOCountries();
      JSONObject.stringToValue("] s not . JSO$Object.");
      jSONObject0.append("] s not . JSO$Object.", "] s not . JSO$Object.");
      assertEquals(3, jSONObject0.length());
  }
}
