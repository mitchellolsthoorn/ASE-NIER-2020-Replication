/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 18:06:59 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-84));
      boolean boolean0 = JSONPath.eqNotNull(3089, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/0", true);
      JSONPath jSONPath0 = JSONPath.compile("n-");
      Double double0 = new Double((-1));
      JSONPath jSONPath1 = JSONPath.compile("/stackTrace/0");
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, double0, jSONPath_PropertySegment0);
      Object object1 = jSONPath1.eval(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("TNsR3");
      Short short0 = new Short((short)6);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/3", (String) null, 2);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3125, 0, (short)6);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -519
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-544), (-488), (-544));
      // Undeclared exception!
      jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$ValueSegment");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 5095, 2);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny.internal", "com.alibaba.fastjson.JSONPath$Context", (Throwable) null);
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("com.alibaba.fastjson.serializer.BeforeFilter", longArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTimeoutException0, jSONPath_FilterSegment0);
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Svi&pBecA;8oz");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotSame(object0, jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("wnE7");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%NCh$-fn8E|ES");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RUDWv#^}AZoN`o");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(970L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9'uJqFv}*");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(9L, object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Svi&pBecA;8oz");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("FBLC![");
      jSONPath_JSONPathParser0.readSegement();
      String[] stringArray0 = new String[3];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("org.joda.time.", stringArray0, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      assertSame(jSONPath_StringInSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = JSONPath.remove((Object) sQLClientInfoException0, "com.alibaba.fastjson.JSONPath$1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("710IAXE[bTefxi%kfv");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(710L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("stackTrace");
      Byte byte0 = new Byte((byte) (-127));
      jSONPath0.deepGetPropertyValues(byte0, (List<Object>) null);
      assertEquals("stackTrace", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("FBLC![");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('$');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/2");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '6, but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1753));
      Long long0 = new Long((-1753));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval((JSONPath) null, long0, "6cUofe*|jBvI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1t`");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-484));
      assertEquals((-483.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "list_item_value";
      stringArray0[1] = "/stackTre/11";
      SerializeConfig serializeConfig0 = new SerializeConfig(989, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      jSONPath0.deepSet(parserConfig0, "fastjson.parser.autoTypeSupport", 3089, serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("list_item_value", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(57);
      int int0 = JSONPath.size((Object) jSONPath_ArrayAccessSegment0, "{");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("unsupported array put operation. ");
      boolean boolean0 = jSONPath0.setPropertyValue("unsupported array put operation. ", "XPpO'*", 1544L, "unsupported array put operation. ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, ">MI992ANbz?6Pj", (Object) "U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      boolean boolean0 = jSONPath0.set((Object) "L", (Object) serializeConfig0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("IN", serializeConfig0, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny.internal", "fastjson.parser.safeMode", 79);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("3\"BFJF>", (String) null, 79, hashMap0, sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath0.set((Object) sQLClientInfoException0, (Object) "IN");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("unsupported array put operation. ", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, " G");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(615L);
      Set<?> set0 = JSONPath.keySet((Object) double0, "IN");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bm";
      stringArray0[1] = "bm";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_MultiPropertySegment0, "\u0000");
      assertFalse(set0.contains("\u0000"));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Set<?> set0 = JSONPath.keySet((Object) sQLSyntaxErrorException0, "/stackTrace/2");
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("#");
      Set<?> set0 = jSONPath0.keySet((Object) "/stackTrace/6");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(17, 17, 17);
      JSONPath jSONPath0 = JSONPath.compile(">]lc^cDON092rgT");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(jSONPath_RangeSegment0);
      assertFalse(collection0.contains(17));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{");
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("!U:>'6\"3i.5WavPt_q");
      Object object0 = jSONPath0.getArrayItem((Object) null, 36);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      Object object0 = jSONPath0.getArrayItem("com.alibaba.fastjson.JSONPath$RefOpSegement", 0);
      assertEquals("com.alibaba.fastjson.JSONPath$RefOpSegement", object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$)@o?");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      int int0 = jSONPath0.evalSize(jSONPath_MultiPropertySegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("writeDirect");
      int int0 = jSONPath0.evalSize("%);IQE ~o");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      int int0 = jSONPath0.evalSize(propertyNamingStrategy0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 31);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_RangeSegment0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)JSONPath.eval((Object) sQLFeatureNotSupportedException0, "!");
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".000000000");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      Object object0 = jSONPath0.eval((Object) jSONPath_MaxSegment0);
      assertSame(jSONPath_MaxSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/stackTrace/4", (Throwable) null);
      boolean boolean0 = JSONPath.contains((Object) sQLRecoverableException0, "/stackTrace/4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = JSONPath.compare("/stackTrace/11", "/stackTrace/11");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = JSONPath.compare("/stackTrace/11", "com.alibaba.fastjson.serializer.AtomicCodec");
      assertEquals((-52), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSONPath.size((Object) class0, "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer(2614);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) integer0, "1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("keySet");
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("/cause/stackTrace/2", "/cause/stackTrace/2", 1201);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("(nFc2i,iiXX^", "\"F1pd", (-819), sQLTransientException0);
      JSONPath jSONPath0 = new JSONPath("(nFc2i,iiXX^");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(classLoader0, ",V#5qm", (-465), batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      Float float0 = new Float((double) 200);
      // Undeclared exception!
      jSONPath0.setPropertyValue(javaBeanSerializer0, "fastjson.parser.autoTypeSupport", 8963398325558730460L, float0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("S3<t ;!", serializeConfig0, parserConfig0);
      Double double0 = new Double(1000.0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(double0, "fastjson.parser.safeMode", 3906L, "S3<t ;!");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("cU],;F_6[X", class0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "", 31, jSONPath_FilterSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("stackTrace");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, (-1), "/stackTrace/0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(282, true, true, 90, 40);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) dataTruncation0, "/cause/cause/stackTrace/5", (Object) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("n-");
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false, false);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      // Undeclared exception!
      jSONPath0.set((Object) javaBeanDeserializer0, (Object) 0, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) "nin");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com.alibaba.fastjson.JSONPath$RefOpSegement", (Object) jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$Id]Ya+>wt\"j47hW.d");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "$Id]Ya+>wt\"j47hW.d", (Object) "$Id]Ya+>wt\"j47hW.d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : $Id]Ya+>wt\"j47hW.d
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "eF1psSxhB";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(double0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[N_ eV%7Oe_WVdJ";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("[N_ eV%7Oe_WVdJ", stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("F4$RLo[>Y*Om^", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not match ");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("address");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      jSONPath0.removePropertyValue(javaBeanSerializer0, "address", true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("TwTQf&", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(serializeConfig0, "EQ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("r6:#0");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 431);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("DisableCheckSpecialChar");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "DisableCheckSpecialChar");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) class0, "|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("A[)$`E \"vO]U9'Y}(dKA", "A[)$`E \"vO]U9'Y}(dKA", 62);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLNonTransientConnectionException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-", "/stackTrace/8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("qJGAIft0'r\"hvzq{}", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<Short> class0 = Short.TYPE;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/12");
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Date> class0 = Date.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      Class<UUID> class0 = UUID.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(", but '");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. , but '
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.CalendarCodec");
      Class<JSONPath> class0 = JSONPath.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(javaBeanSerializer0, "illegal ref, ", 2994L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("nok", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(jSONPath_SizeSegment0, "com.alibaba.fastjson.serializer.SerializeWriter", (-2147483648L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class double
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterGroup");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f");
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1198);
      JSONPath jSONPath0 = new JSONPath("@67Zkwt", serializeConfig0, (ParserConfig) null);
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      Short short0 = new Short((short) (-5638));
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(short0, (short) (-5638));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("$QT,[(Z?ivn\"[t!w(mw", "$QT,[(Z?ivn\"[t!w(mw", (ParserConfig) null, 109, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSONPath.extract(".E(bN+GFC/@t,PQ(el", ".E(bN+GFC/@t,PQ(el", parserConfig0, 48, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : .E(bN+GFC/@t,PQ(el
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^45HVdGz2^|!wg|");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$IntObjInSegement", parserConfig0, 32);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("DisableCheckSpecialChar");
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("illegal json : ");
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("DisableCheckSpecialChar");
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) jSONPath0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "L", "Fp&Jr4e~: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Fp&Jr4e~: 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("nin", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "com.alibaba.fastjson.JSONPath$RefOpSegement");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONPath jSONPath0 = new JSONPath("FBLC![");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : FBLC![
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(bigInteger0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".$2'=H");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      jSONPath0.deepSet(bigDecimal0, ".$2'=H", (-1878L), (Object) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(";7o%-?H<8%+ioS", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(";7o%-?H<8%+ioS", "expect '", linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("TNsR3");
      Vector<Object> vector0 = new Vector<Object>(2);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("OX^!", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JSONPath jSONPath0 = JSONPath.compile("7H2lv$:sL[");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(mockGregorianCalendar0, stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NullSegement", serializeConfig0, parserConfig0);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath0, (String[]) null);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, jSONArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Svi&pBecA;8oz");
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) jSONPath0, "x@AD!eA!aM", (Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : x@AD!eA!aM
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%!H25l\"FTK?r @ba '");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "com.alibaba.fastjson.JSONPath$IntBetweenSegement", (Object) "/stackTrace/0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. %!H25l\"FTK?r @ba '
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=%6M2P(RrOGt[R6`U^");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) mockGregorianCalendar0, "~{j]bAL$F] Uo37^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ~{j]bAL$F] Uo37^
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("max");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      MockDate mockDate0 = new MockDate(1, 35, 1, 62, (-516));
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) mockDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("unsupported array put operation. ");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : unsupported array put operation. 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("GT", stringArray0[1]);
      // Undeclared exception!
      try { 
        JSONPath.compare(stringArray0[0], sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nu*&");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("X:", "Wx3KbwzkbH`\"#");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.serializer.AtomicCodec", "FfI*T)[]68E:}", (-1725), sQLRecoverableException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLNonTransientConnectionException0, "nu*&", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      Integer integer0 = new Integer((-1073));
      jSONPath0.deepSet((Object) null, "com.alibaba.fastjson.serializer.AtomicCodec", 0L, integer0);
      assertEquals("null", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Svi&pBecA;8oz");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("Svi&pBecA;8oz", "Or", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path Svi&pBecA;8oz, segement Or
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^rQ3By|jav)|ullL279");
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(mockGregorianCalendar0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$Id]Ya+>wt\"j47hW.d");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "$Id]Ya+>wt\"j47hW.d", 431);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("A[)$`E \"vO]U9'Y}(dKA");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("A[)$`E \"vO]U9'Y}(dKA");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("A[)$`E \"vO]U9'Y}(dKA", sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("null", "list_item_desc", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, sQLDataException0, 74, batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.buildArraySegement("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue((JSONPath) null, "com.alibaba.fastjson.JSONPath$IntBetweenSegement", jSONPath_PropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("scanFieldStringArray", false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(34);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, jSONPath_ArrayAccessSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/9");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n-");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<2/?J");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">+2]!=S_9DNeF+");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("u", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "org.joda.time.format.DateTimeFormatter", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path u
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPath jSONPath0 = new JSONPath("$Id]Ya+>wt\"j47hW.d");
      JSONPath jSONPath1 = JSONPath.compile("$Id]Ya+>wt\"j47hW.d");
      jSONPath1.getPropertyValue(jSONPath0, "!mqwiIhf", (-1946L));
      // Undeclared exception!
      try { 
        JSONPath.extract("!mqwiIhf", "!mqwiIhf");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Oun{lAC./G!1<^.\"L", "fZ");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("BQLF&!{", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "Oun{lAC./G!1<^.\"L", (Object) sQLTimeoutException0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("U");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) propertyNamingStrategy0, (Object) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("gwKoa");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_NullSegement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".$2'=H");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("stackTrace");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("stackTrace", true);
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) jSONPath_PropertySegment0, objectArray0);
      assertEquals("stackTrace", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("DisableCheckSpecialChar");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_WildCardSegment0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$1");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1201);
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/11");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0_L'1Z>.UX[|l~Ih!6", parserConfig0, 31);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\u0000");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("like", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2like
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/0", true);
      JSONPath jSONPath0 = JSONPath.compile("n-");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "n-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "list_item_value";
      stringArray0[1] = "/stackTrace/11";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("list_item_value", stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("list_item_value", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath0, stringArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[1] = "/cause/stackTrace/9";
      stringArray0[2] = "com";
      stringArray0[3] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[4] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("com", stringArray0);
      jSONPath0.keySet((Object) jSONArray0);
      assertEquals(5, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("8]=", serializeConfig0, parserConfig0);
      Map<String, Object> map0 = JSONPath.paths((Object) serializeConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(map0);
      assertEquals(3, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(108, false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("rlike", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "IN");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("~Kzb@GkP@44", (SerializeConfig) null, parserConfig0);
      boolean boolean0 = jSONPath0.removePropertyValue(parserConfig0, "fastjson.parser.autoTypeAccept", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(":M");
      ArrayList<JSONPath.WildCardSegment> arrayList0 = new ArrayList<JSONPath.WildCardSegment>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      arrayList0.add(jSONPath_WildCardSegment0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(arrayList0, ":M", 19, sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(":M");
      ArrayList<JSONPath.WildCardSegment> arrayList0 = new ArrayList<JSONPath.WildCardSegment>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      jSONPath0.deepSet(arrayList0, ":M", 19, sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException", sQLTimeoutException0.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not support jsonpath : ");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[6];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("ip", clientInfoStatus0);
      SQLException sQLException0 = new SQLException("ip", "]T^Ea^ p6p&");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ip", "D3ER8@?&h zm #V", intArray0, sQLException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, batchUpdateException0);
      jSONPath0.deepSet(sQLClientInfoException0, "D3ER8@?&h zm #V", (-956L), "]T^Ea^ p6p&");
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("|<|Q;");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(sQLTransactionRollbackException0, ";7o%-?H<8%+ioS", linkedList0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.autoTypeAccept", (Long[]) null, false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      // Undeclared exception!
      try { 
        jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, (Object) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntObjInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Short short0 = new Short((short)9999);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Integer integer0 = new Integer((-1));
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float float0 = new Float((float) 45380);
      boolean boolean0 = JSONPath.eqNotNull(float0, 4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte byte1 = new Byte((byte) (-84));
      boolean boolean0 = JSONPath.eqNotNull(byte1, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Float float0 = new Float((float) 45380);
      boolean boolean0 = JSONPath.eqNotNull(71, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Byte byte0 = new Byte((byte)42);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = JSONPath.eq(float0, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Long long0 = new Long(2731823439467737506L);
      Long[] longArray0 = new Long[8];
      longArray0[0] = long0;
      boolean boolean0 = JSONPath.eq(longArray0[0], long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Svi&pBecA;8oz");
      boolean boolean0 = JSONPath.eq("Svi&pBecA;8oz", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("FBLC![");
      boolean boolean0 = JSONPath.eq((Object) null, jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/YD\u0003Yf(OB#X<b|D/");
      boolean boolean0 = JSONPath.eq(jSONPath0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/YD\u0003Yf(OB#X<b|D/");
      boolean boolean0 = JSONPath.eq(jSONPath0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny", sQLRecoverableException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", "bm", 4000, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      String string0 = "\\u)J=|FlF\"%ou";
      StackTraceElement stackTraceElement0 = new StackTraceElement("a}ec6 Y", string0, "a}ec6 Y", 123);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElementArray0[1];
      stackTraceElementArray0[3] = stackTraceElementArray0[2];
      stackTraceElementArray0[4] = stackTraceElementArray0[0];
      stackTraceElementArray0[5] = stackTraceElement0;
      stackTraceElementArray0[6] = stackTraceElementArray0[0];
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "list_item_value";
      stringArray0[1] = "/stackTrace/11";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLNonTransientException0, stringArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("IN");
      int int0 = JSONPath.size((Object) sQLTransactionRollbackException0, "/stackTrace/0");
      //  // Unstable assertion: assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/st^ackTrace/7");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2, 63, 159);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      int[] intArray0 = new int[5];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_MultiIndexSegment0, map0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, jSONArray0);
      assertEquals(5, jSONArray0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement(":", "org.springframework.cglib.proxy.Factory", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("vUZ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, jSONPath_StringOpSegement0, jSONPath_FilterSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("*cm^ZTS*6S`eVL/r+p", serializeConfig0, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NGXIw96=c%KTpei;{iQ", "fastjson.parser.deny", (-227));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("*cm^ZTS*6S`eVL/r+p", "fastjson.parser.deny", sQLTransactionRollbackException0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(",but '");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.deny", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_Operator0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("S]L(wsOD%meseFs", "nin", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("S]L(wsOD%meseFs", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, serializeConfig0, jSONPath_MaxSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("nin", 0.0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("n-", "n-", true);
      JSONPath jSONPath0 = JSONPath.compile("n-");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<SQLDataException> class0 = SQLDataException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, javaBeanDeserializer0, "/stackTrace/9");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("IN");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("PipObRzH19'o", "IN", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException0);
      assertEquals(1, jSONArray0.size());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(",  end ");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = new JSONPath("oVLh=");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, ",  end ", ",  end ");
      assertEquals(",  end ", object0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny.internal");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_FilterSegment0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(79, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("IN", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      Pattern pattern0 = Pattern.compile("IN");
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("IN", pattern0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RegMatchSegement0, jSONPath_RegMatchSegement0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("double", sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLSyntaxErrorException0, jSONPath_Operator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("7H2lv$:sL[");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("7H2lv$:sL[", "\"A=R!AS", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_StringOpSegement0, false);
      JSONPath jSONPath0 = JSONPath.compile("^>N=qi&*");
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, jSONPath_MultiIndexSegment0, jSONPath_FilterSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("gwKoa", "gwKoa", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      SQLException sQLException0 = new SQLException("CstackTrace", "gwKoa");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/cause/stackTrace", "gwKoa", sQLException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, sQLTimeoutException0);
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("*cm^ZTS*6S`eVL/r+p", "|u{(8#WB(Rn{}ysh![U", jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("*cm^ZTS*6S`eVL/r+p", serializeConfig0, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NGXIw96=c%KTpei;{iQ", "fastjson.parser.deny", 233);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("|u{(8#WB(Rn{}ysh![U", "fastjson.parser.deny", sQLTransactionRollbackException0);
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, sQLTransientConnectionException0, uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("-", "", true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(93, 18, 18);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, classLoader0, (Object) null, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(":M");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":M";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(":M", ":M", ":M", stringArray0, false);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, propertyNamingStrategy0, jSONPath0, sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$i*5i4^";
      stringArray0[1] = "$i*5i4^";
      stringArray0[2] = "$i*5i4^";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(", but '", "$i*5i4^", ", but '", stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("7H2lv$:sL[", "map is null.", "\"A=R!AS", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("JSONArray", (String) null, (String) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("RLIKE", jSONPath_KeySetSegment0, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("RLIKE", serializeConfig0, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal", "2", 11);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath0, sQLTransactionRollbackException0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("SFa", 843.359873, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("SFa");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SFa";
      stringArray0[1] = "SFa";
      stringArray0[2] = "SFa";
      stringArray0[3] = "SFa";
      stringArray0[4] = "SFa";
      stringArray0[5] = "SFa";
      stringArray0[6] = "SFa";
      stringArray0[7] = "SFa";
      stringArray0[8] = "SFa";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_DoubleOpSegement0, stringArray0);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("@type", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_Operator0, jSONArray0, jSONArray0);
      assertEquals(9, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("stackTrace", (-1932.564413889449), jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("stackTrace");
      int[] intArray0 = new int[7];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("stackTrace");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_MultiIndexSegment0, sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("U");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("U", 8963398325558730460L, jSONPath_Operator0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, propertyNamingStrategy0, jSONPath_Operator0, "U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5");
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/stackTrace/8", stringArray0, true);
      UUID uUID0 = MockUUID.randomUUID();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "fastjson.parser.autoTypeSupport", jSONPath_SizeSegment0, uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("|<|Q;");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "|<|Q;";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("|<|Q;", stringArray0, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("cg8#k$eaXR", "O5qnd}&{");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("O5qnd}&{", "cg8#k$eaXR", sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, sQLIntegrityConstraintViolationException0, "|<|Q;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/YD\u0003Yf(OB#X<b|D/");
      Long long0 = new Long(2731823439467737502L);
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("i", longArray0, false);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, longArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("6cUofe*|jBvI", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("6cUofe*|jBvI");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "6cUofe*|jBvI", jSONPath0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("org.springframework.security.core.userdetails.User", (-904L), (-254670111376247151L), false);
      JSONPath jSONPath0 = JSONPath.compile("checkValue");
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "checkValue", "checkValue", "org.springframework.security.core.userdetails.User");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("|<|Q;");
      String[] stringArray0 = new String[1];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("|<|Q;", stringArray0, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("|<|Q;", "O5qnd}&{");
      UUID uUID0 = MockUUID.randomUUID();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("O5qnd}&{", "|<|Q;", sQLInvalidAuthorizationSpecException0);
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("|<|Q;", longArray0, false);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_StringInSegement0, uUID0, sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("1cY", "1cY", false);
      JSONPath jSONPath0 = new JSONPath("1cY");
      Float float0 = new Float(1000.0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, float0, "1cY", jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.safeMode", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(",  end ");
      JSONPath jSONPath0 = new JSONPath("oVLh=");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",  end ");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, ",  end ", sQLNonTransientConnectionException0, "oVLh=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      SQLTransientException sQLTransientException0 = new SQLTransientException("+#'", "+#'", 1201);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(187, 1201, (-465));
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, sQLTransientException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-100), (-100), (-100));
      JSONPath jSONPath0 = new JSONPath("j@r");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-100));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "j@r", jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3543), 14, 2561);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Object object0 = JSONPath.reserveToObject(hashMap0, (String[]) null);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTransactionRollbackException0, object0);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("*");
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0_L'1Z>.UX[|l~Ih!6", parserConfig0, 1);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("f");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, "f", jSONPath_MultiPropertySegment0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "stackTrace";
      stringArray0[1] = "/stackTrace/0";
      stringArray0[2] = "n-";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("stackTrace");
      Integer integer0 = new Integer((-3716));
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, integer0, "stackTrace");
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("nin", true);
      DataTruncation dataTruncation0 = new DataTruncation((-843), false, false, 3125, 329);
      jSONPath_PropertySegment0.setValue(jSONPath0, "+#'", dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("[,w&j$8", "fastjson.parser.deny.internal", parserConfig0, (-1437148578), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 3, line 1, column 4[,w&j$8
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      Integer integer0 = new Integer((-2914));
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, byte0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      DataTruncation dataTruncation0 = new DataTruncation(7, false, false, 118, 118, sQLNonTransientException0);
      Long long0 = new Long((-254670111376247109L));
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, dataTruncation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.DataTruncation cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = JSONPath.compare("null", "com.alibaba.fastjson.serializer.AtomicCodec");
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("GT");
      // Undeclared exception!
      try { 
        JSONPath.compare("unsupported array put operation. ", sQLSyntaxErrorException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.CharArrayCodec", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, parserConfig0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RangeSegment");
      Set<?> set0 = jSONPath0.evalKeySet("com.alibaba.fastjson.JSONPath$RangeSegment");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval((JSONPath) null, set0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("u8H1fL:QsOg<}");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"QsOg<}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("84h&a}f{:q~l s@e@A");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"84h&a}f{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("p}2(}&;5(zNU1\"P5,?E");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}2(}&;5(zNU1\"P5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*PN$i,;H*7v}Q/o!");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("PN$i,;H", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IN");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not support jsonpath : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Xw=rZo\"4>zPt");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"F1pd");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but 'd'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%02d");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1024);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("java.time.OffsetDateTime");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("@,Ig_BQI/*S|2T?@/T", "@,Ig_BQI/*S|2T?@/T", false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_ValueSegment0);
      assertSame(jSONPath_ValueSegment0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("H_Wu[83{3Z=ZSUJ\"6|");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeSupport");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/YD\u0003Yf(OB#X<b|D/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@nsv7pP&Fv%=a~");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 'n'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("sNSoM5?\"o");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but '\"'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\u0000");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \u0000
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/YD\u0003Yf(OB#X<b|D/");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : /YD\u0003Yf(OB#X<b|D/
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("DisableCheckSpecialChar");
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath0, ".*M#u(+*EjZDuBKk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : .*M#u(+*EjZDuBKk
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(402, 402, 402);
      JSONPath jSONPath0 = new JSONPath("/stackTrace");
      Double double0 = new Double(2669.89143);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, double0, clientInfoStatus0);
      Map<String, Object> map0 = JSONPath.paths(object0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.putIfAbsent((String) null, clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      //  // Unstable assertion: assertEquals(81, map0.size());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.putIfAbsent("{'/cau}estackTraNe/7", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      //  // Unstable assertion: assertEquals(89, map0.size());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("list_item_value", sQLNonTransientException0);
      sQLNonTransientException0.initCause(sQLIntegrityConstraintViolationException0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Map<String, Object> map0 = JSONPath.paths((Object) sQLNonTransientException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(176, map0.size());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "/stackTrace/12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(282, true, true, 73, 282);
      boolean boolean0 = JSONPath.set((Object) dataTruncation0, "/cause/causeGstackTrace/5", (Object) dataTruncation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaa.fastjson.JSONPath$RangeSegment");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com.alibaa.fastjson.JSONPath$RangeSegment", (Object) "com.alibaa.fastjson.JSONPath$RangeSegment", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("F4$RLo[>Y*Om^");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.awt.");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(".0*$", "nG4-;[");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("nG4-;[", "5w0", 12, sQLTransientConnectionException0);
      SQLWarning sQLWarning0 = new SQLWarning("}w%4=C?KA./e`#v", "}w%4=C?KA./e`#v", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) sQLWarning0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".000000000");
      SQLDataException sQLDataException0 = new SQLDataException("parser", "com.alibaba.fastjson.JSONPath$IntObjInSegement", (-2030));
      int[] intArray0 = new int[6];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLDataException0, (Object) jSONPath_MultiIndexSegment0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("bm");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) "bm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\u0000");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      boolean boolean0 = jSONPath0.set((Object) "\u0000", (Object) serializeConfig0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IN");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(R{G5gL|&t=')X|=R:%");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("CG@Wl.s%h}Km-U,wi", "IN", 86, sQLNonTransientConnectionException0);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLTransientConnectionException0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("nin", "/**/");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("g|bW>B ", "/stackTrace/11", 1592, sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("FBLC![", "nin", 47, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTransactionRollbackException0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".000000000");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_MaxSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$MaxSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(989, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/11", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath jSONPath0 = new JSONPath(",");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "/stackTrace/11", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.asm.Type");
      Integer integer0 = new Integer((short) (-1608));
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) integer0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.asm.Type
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "stackTrace", "n-", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path n-
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath jSONPath0 = JSONPath.compile("nin");
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals("nin", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "stackTirace", "-", (Object[]) stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("zW<\"k@y1lOb", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException();
      jSONPath0.arrayAdd((Object) sQLDataException0, (Object[]) null);
      assertNull(sQLDataException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("illegal json : ");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("TNsR3");
      int int0 = jSONPath0.size((Object) "TNsR3");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("TNsR3");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("|<|Q;");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "|<|Q;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. |<|Q;
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(14);
      boolean boolean0 = jSONPath0.containsValue((Object) "!n2T``C#Hg/)r8", (Object) jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, 1, 31);
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_RangeSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(989, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/11", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSONPath.extract("U0'kKz~o>~", "/stackrace/1", parserConfig0, 48, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace7/2");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("date");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[5];
      Object object0 = JSONPath.extract(",", "rCM", parserConfig0, 2837, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("JSONArray", "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2JSONArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("j@r");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/12");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      jSONPath0.init();
      assertEquals("*", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("w", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, bigDecimal0, "yyyy\u5E74M\u6708'Q\u65E5 HH:mmIss");
      assertNotNull(hashSet0);
      assertFalse(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("SFa", 843.359873, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("SFa");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath0, "SFa", jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("L", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("DisableCheckSpecialChar");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, class0, jSONPath_WildCardSegment0, parserConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("`");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('', char0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.AtomicCodec");
      SQLTransientException sQLTransientException0 = new SQLTransientException("cglib");
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, sQLDataException0, sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(14);
      SQLException sQLException0 = new SQLException("", "com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!n2T``C#Hg/)r8", "com.alibaba.fastjson.serializer.AtomicCodec", 14, sQLException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("n-", "n-", true);
      int int0 = JSONPath.size((Object) jSONPath_ValueSegment0, "/stackTrace/0");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("bm");
      JSONPath jSONPath0 = JSONPath.compile(", but '");
      Short short0 = new Short((short) (-392));
      Byte byte0 = new Byte((byte)1);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath0, short0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath_MultiIndexSegment0, "UseSingleQuotes", (Object) intArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("F");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("P", "ko1NO$l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2P
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "UseSingleQuotes", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("list_item_value");
      String string0 = jSONPath0.getPath();
      assertEquals("list_item_value", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("TNsR3");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("p", "p");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Object object0 = JSONPath.eval((Object) propertyNamingStrategy0, "U");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      JSONPath.arrayAdd((Object) "ip", "_4`d", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      jSONPath0.remove((Object) bigInteger0);
  }
}
