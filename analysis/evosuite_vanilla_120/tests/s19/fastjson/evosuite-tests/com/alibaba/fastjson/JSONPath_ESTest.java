/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 22:31:45 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.lang.annotation.Annotation;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("aH4!", "}2`9@ck'", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("}2`9@ck'");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator0, "aH4!", hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("H|", "}2`9@ck'", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("}2`9@ck'");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator0, "H|", hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), 5614464919154503228L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "kp;?i*/\"E]$ at;P";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("tk", "tk", "kp;?i*/\"E]$ at;P", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2947, 173, 12);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RlikeSegement");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      SQLTransientException sQLTransientException0 = new SQLTransientException("/cause/stackTrace/12", "-");
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientException0);
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath0, sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("|8BUx;[C}T(z:F)", ";", 45);
      DataTruncation dataTruncation0 = new DataTruncation(119, false, false, 173, (-365), sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, object0, dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -230
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(",", "classLoaderName", "classLoaderName", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(117);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2396), 0, 93);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, jSONPath_FilterSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("u", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3627), 84, (-2155));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_Operator0, "bI=usYo&0dtml");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("LIKE");
      Float float0 = new Float(0.0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, (-2155), (-2155));
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, float0, jSONPath_MaxSegment0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2[");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RUE=u_.:jAMgm%2yc$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(107);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/9", serializeConfig0, parserConfig0);
      JSONScanner jSONScanner0 = new JSONScanner("RUE=u_.:jAMgm%2yc$", 107);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONPath_SizeSegment0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!T^7");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2`9@ck'");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(1563L);
      assertEquals(1565.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NOT_IN");
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-811277319855450459L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0Y@7~}zBU-b g");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'1Cw");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}2`9@ck'");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("H|", "}2`9@ck'", jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_StringOpSegement0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" B^rc9m");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("syntax error, expect [, actual ", "2`9%k'", jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_StringOpSegement0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("D");
      SQLDataException sQLDataException0 = new SQLDataException("(", "(", 1305);
      JSONPath jSONPath0 = new JSONPath(".%t;;fT3<;");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("D", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) sQLDataException0, (Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. .%t;;fT3<;
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("YYUa2)~sNg'5PGHtEl", "YYUa2)~sNg'5PGHtEl", parserConfig0, (-75), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2YYUa2)~sNg'5PGHtEl
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k[}+");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("/stackTrace/12");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("YYUa2)~sNg'5PGHtEl");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-75));
      jSONPath0.deepGetPropertyValues(jSONPath_ArrayAccessSegment0, (List<Object>) null);
      assertEquals("YYUa2)~sNg'5PGHtEl", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^3xa5N");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("5%54/`?*[DTf%=N");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('7');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '7, but '5'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("syntax", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.autoTypeSupport");
      int[] intArray0 = new int[5];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("Ll'TUw_G", 388.126, jSONPath_Operator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("4?j': ", "k4@Fer !rsv", 122, sQLRecoverableException0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, jSONPath0, jSONPath_MultiIndexSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(69);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("value not found in path ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, (Object) null, classLoader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("GT");
      Float float0 = Float.valueOf((float) 0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("GT", true);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Ol2TkdKG,V\"7`OrScL", "", intArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, batchUpdateException0, float0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_J=N?Sr$jcrh{d(~";
      stringArray0[1] = "syntax error, expect [, actual ";
      stringArray0[2] = "2`9%k'";
      stringArray0[3] = "scan new error";
      stringArray0[4] = " B^rc9m";
      stringArray0[5] = "com.alibaba.fastjson.JSONPath$SizeSegment";
      stringArray0[6] = "Q^2\"";
      stringArray0[7] = "d;}4%lgwxC''$G dn";
      stringArray0[8] = "";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("( GRDU^u-]VS");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&F ,|Ml]P82>$");
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLSyntaxErrorException0, "d;}4%lgwxC''$G dn");
      assertEquals(9, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(172);
      // Undeclared exception!
      try { 
        JSONPath.read("C}<Ii<'-=`Uh.N8+<=", "C}<Ii<'-=`Uh.N8+<=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2C}<Ii<'-=`Uh.N8+<=
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jd?|!`b^G=z+1;@*ZA");
      boolean boolean0 = jSONPath0.setPropertyValue("jd?|!`b^G=z+1;@*ZA", "com.alibaba.fastjson.serializer.EnumerationSerializer", 1L, "jd?|!`b^G=z+1;@*ZA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_LIKE");
      boolean boolean0 = jSONPath0.set((Object) "NOT_LIKE", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("value not found in path ");
      SQLDataException sQLDataException0 = new SQLDataException("value not found in path ");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "z");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<,O");
      Set<?> set0 = JSONPath.keySet((Object) jSONPath0, "MQC8yY");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      Set<?> set0 = jSONPath0.keySet((Object) ",");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/7");
      Object object0 = jSONPath0.getPropertyValue(propertyNamingStrategy0, "HW*BZyZ=FM}", (-991L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(3);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("SupportNonPublicField", serializeConfig0, parserConfig0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("iin");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("IHA", (SerializeConfig) null, parserConfig0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("expect '");
      Object object0 = jSONPath0.getArrayItem((Object) null, 70);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T#}d)%E~88/i3.m<,O", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}ol.7F y");
      Object object0 = jSONPath0.getArrayItem(jSONPath_StringInSegement0, 0);
      assertSame(object0, jSONPath_StringInSegement0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("~P3@y5G", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("~P3@y5G");
      int int0 = jSONPath0.evalSize(jSONPath_IntObjInSegement0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("uRw9`J");
      int int0 = jSONPath0.evalSize("");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ASMSerializer_");
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.util.concurrent.atomic.LongAdder");
      Set<?> set0 = jSONPath0.evalKeySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("q", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_WildCardSegment0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "T#}d)%E~88/i3.m<,O", "LIKE");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Object object0 = JSONPath.eval((Object) mockGregorianCalendar0, "/");
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", object0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("~", "~", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("~");
      Object object0 = jSONPath0.eval((Object) jSONPath_StringOpSegement0);
      assertSame(jSONPath_StringOpSegement0, object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer(2869);
      Integer integer1 = new Integer(39);
      int int0 = JSONPath.compare(integer0, integer1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) javaBeanSerializer0, "j/5m4XU@7_U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("jsonpath error, path ", serializeConfig0, parserConfig0);
      JSONPath.size((Object) jSONPath0, "L[PMNOi j^z,");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = JSONPath.size((Object) bigInteger0, "orgjoda.time.Fnsant");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath.size((Object) jSONPath_KeySetSegment0, "j(s;[$gcTCj^&{&");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.util.concurrent.atomic.LongAdder");
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mB[Se1P");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONReader");
      Byte byte0 = new Byte((byte)4);
      int int0 = jSONPath0.size((Object) byte0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/7");
      // Undeclared exception!
      jSONPath0.setPropertyValue(jSONPath0, (String) null, (-217L), propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath jSONPath0 = JSONPath.compile("expect '");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_Operator0, "like", (-8L), jSONPath_WildCardSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("e_hR CK '[O|qD", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)9);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "*e!^jE`|df>QKMK{", 2205L, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_LIKE");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 45, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        JSONPath.set((Object) classLoader0, "fastjson.parser.autoTypeSupport", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.util.concurrent.atomic.LongAdder");
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "fastjson.parser.deny.internal", (Object) "java.util.concurrent.atomic.LongAdder");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "tk.J)GhF\"*", "fastjson.parser.safeMode", (Object) classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("Zfve", 1205L, jSONPath_Operator0);
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) jSONPath_IntOpSegement0, false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("iin");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) "F9", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("8WvVQ)");
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("8WvVQ)", serializeConfig0, parserConfig0);
      Long long0 = new Long(6456855723474196908L);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_NotNullSegement0, (Object) long0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 8WvVQ)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/7");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Annotation> class0 = Annotation.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      jSONPath0.set((Object) javaBeanDeserializer0, (Object) propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("z$k$xMhPwkEI");
      JSONPath jSONPath0 = JSONPath.compile("*");
      int[] intArray0 = new int[4];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) pattern0, (Object) jSONPath_MultiIndexSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("rlike");
      JSONPath jSONPath0 = JSONPath.compile("rlike");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) pattern0, (Object) pattern0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.regex.Pattern
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "GT";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "noEt";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(bigInteger0, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "`";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(bigDecimal0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "noEt";
      Integer integer0 = new Integer((-2591));
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(integer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("V", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.util.concurrent.atomic.LongAdder");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(jSONPath_WildCardSegment0, "s", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_BETWEEN");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigDecimal0, "NOT_BETWEEN", false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(107);
      JSONPath jSONPath0 = JSONPath.compile("RUE=u_.:jAMgm%2yc$");
      boolean boolean0 = jSONPath0.removePropertyValue("/nextException/stackTrace/8", "/nextException/stackTrace/8", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("expect '");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "/nextException/stackTrace/2", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("~P3@y5G");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("~P3@y5G", jSONPath0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, jSONPath_FilterSegment0, 1003);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$FilterSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "like");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      boolean boolean0 = JSONPath.remove((Object) mockGregorianCalendar0, "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("iin");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      jSONPath0.remove((Object) javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "com.alibaba.fastjson.JSONPath$MaxSegment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("8Wy9*L'`C", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Ua*MeC>q*-", true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath_PropertySegment0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("(", "(", 1305);
      Spliterator<Throwable> spliterator0 = sQLDataException0.spliterator();
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) spliterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "ynxh0", "t");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException(";Z|`\"&");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java", "java", sQLTransientException0);
      JSONPath jSONPath0 = new JSONPath(";Z|`\"&");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("InitStringFieldAsEmpty", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ;Z|`\"&
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mB[Se1P");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(8, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("[]", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",pL.j8s_WywmB@");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ,pL.j8s_WywmB@
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mB[Se1P");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("d,pNy");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : d,pNy
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mB");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("typeName");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("typeName");
      assertFalse(collection0.contains("typeName"));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(classLoader0, "i+#N", 1203232727967308606L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      JSONPath jSONPath0 = JSONPath.compile("tk");
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("~P3@y5G");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/domains/0/classloader/classLoader/parallelLockMap", serializeConfig0, (ParserConfig) null);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("gi&g+n'[e@");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("gi&g+n'[e@", 99);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.deny.internal", "com.alibaba.fastjson.JSONPath$WildCardSegment", parserConfig0, 1508, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSONPath.extract("NOT_BETWEEN", "U6UVG@", parserConfig0, 0, (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "$IQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("T#}d)%E~88/i3.m<,O", "}m(kO8ZKGP.q+4lv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2T#}d)%E~88/i3.m<,O
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<O");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T#}d)%E~88/i3.m<O", parserConfig0, 1175);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : T#}d)%E~88/i3.m<O
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("CO@\"54");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) class0, "\\.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Short short0 = new Short((short) (-4812));
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) short0, "1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = JSONPath.eval((Object) arrayList0, "yyyyMMddHHmmssSSSZ");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("q", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.autoTypeAccept", "q");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("O0 em", "O0 em", sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("com.alibaba.fastjson.JSONPath$PropertySegment", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "q", 5338L, sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("u");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "y`*H~62qtf=O9,G9", (-108L), serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("&@ psNR-Z[(x_");
      Class<SQLDataException> class0 = SQLDataException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "&@ psNR-Z[(x_", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Float float0 = new Float((double) 4369L);
      JSONPath jSONPath0 = JSONPath.compile(">UjKS");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepScan(float0, ">UjKS", arrayList0);
      assertEquals(">UjKS", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java");
      SQLTransientException sQLTransientException0 = new SQLTransientException("OyO");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java", "java", sQLTransientException0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLTransactionRollbackException0, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.ParseContext", (SerializeConfig) null, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>(1549);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(parserConfig0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) "expect '", "r8|\u0007vC3LKbFm|i=jH", (Object) "r8|\u0007vC3LKbFm|i=jH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : r8|\u0007vC3LKbFm|i=jH
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = JSONPath.compile("*");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath0.containsValue((Object) "*", (Object) jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\\-");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "", (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "fastjson.parser.deny.internal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/cause/stackTrace/4", "~,bd>zS<", 1253);
      boolean boolean0 = JSONPath.contains((Object) sQLNonTransientConnectionException0, "E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("1");
      Float float0 = new Float(10000.0F);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$1");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLWarning sQLWarning0 = new SQLWarning(batchUpdateException0);
      boolean boolean0 = jSONPath0.contains((Object) sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("~P3@y5G", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("~P3@y5G");
      jSONPath0.contains((Object) jSONPath_IntObjInSegement0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      Integer integer0 = new Integer((-523));
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) integer0, "YYUa2)~sNg'5PGHtEl", (Object[]) jSONPath_OperatorArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("value not found in path ", 0.0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("max");
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath_FilterSegment0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("rHlike", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.removePropertyValue(parserConfig0, "}m+*", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      jSONPath0.deepSet((Object) null, ">zb%71v/y<if3g|", 2011L, ">zb%71v/y<if3g|");
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/7");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("/cause/stackTrace/7", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("#t6OGbR-6");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-1994648420));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("expect '", (-15L), jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("expect '");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(".Al/u8:(|*tjj3)", false);
      MockDate mockDate0 = new MockDate((-4270347329889690746L));
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_IntOpSegement0, mockDate0);
      assertEquals("Wed Oct 11 19:58:29 GMT 135317173", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("x[", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("0h7T:(! <l/(g", false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_WildCardSegment0, "Y&#!fs");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/7");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(3, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z&");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/7");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~P3@y5G");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(0, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        JSONPath.compile(stringArray0[4]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      String[] stringArray0 = new String[7];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      boolean boolean0 = jSONPath0.set((Object) javaBeanSerializer0, (Object) ",", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("8tj:&");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("EQ");
      jSONPath0.arrayAdd((Object) "EQ", (Object[]) null);
      assertEquals("EQ", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      boolean boolean0 = jSONPath0.containsValue((Object) "like", (Object) "like");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_LIKE");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_Operator0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      JSONScanner jSONScanner0 = new JSONScanner("", 111);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(hashSet0, jSONScanner0, parserConfig0);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("~");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.serializer.CollectionCodec");
      SQLDataException sQLDataException0 = new SQLDataException("k[}+", "?l}/", 1305, sQLRecoverableException0);
      Spliterator<Throwable> spliterator0 = sQLDataException0.spliterator();
      JSONScanner jSONScanner0 = new JSONScanner("scan true error", 0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(spliterator0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2scan true error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/7");
      Object object0 = jSONPath0.eval((Object) "/cause/stackTrace/7");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("I<Ejh8v&X3;o[_B-IRD");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "I<Ejh8v&X3;o[_B-IRD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : I<Ejh8v&X3;o[_B-IRD
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(64);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath0 = new JSONPath("k[}+", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("FUjS");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("4*rB]", false);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.remove(jSONPath0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-611));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, mockGregorianCalendar0, locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class org.evosuite.runtime.mock.java.util.MockGregorianCalendar
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "NOT_LIKE", parserConfig0, 1508, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/cause/stackTrace/4";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(propertyNamingStrategy0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ASMSerializer_";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject((Object) null, stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSONPath.reserveToObject(serializeConfig0, (String[]) null);
      assertSame(object0, serializeConfig0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T#}d)%E~88/i3.m<,O", stringArray0, false);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_StringInSegement0, stringArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("~P3@y5G", (String[]) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("yyyy/MM/dd HH:mm:ss");
      Set<?> set0 = jSONPath0.evalKeySet("yyyy/MM/dd HH:mm:ss");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(57, 57, 173);
      JSONPath jSONPath0 = new JSONPath("Hbx");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "Hbx", "Hbx");
      Locale locale0 = Locale.JAPANESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Object object1 = jSONPath_RangeSegment0.eval(jSONPath0, object0, calendar0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(".*");
      int int0 = jSONPath0.size((Object) "EQ");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "nin");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("OyO");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTransientException0, "/stackTrace");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLTransientException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("j/5m4XU@7_U");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("j/5m4XU@7_U", "9$Wf]EN\"T#|");
      boolean boolean0 = jSONPath0.removePropertyValue(sQLTransactionRollbackException0, "9$Wf]EN\"T#|", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = JSONPath.remove((Object) hashMap0, "tk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("4!?4BG}ol.7F y");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, propertyNamingStrategy0, sQLTimeoutException0);
      boolean boolean0 = JSONPath.set(object0, "nin", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<,O");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ZL}z$$e!:");
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, propertyNamingStrategy0, sQLTimeoutException0);
      jSONPath0.deepSet(jSONArray0, "4!?4BG}ol.7F y", 989, jSONPath_MultiIndexSegment0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("n+=ot", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(parserConfig0, "gnc9&,SJg0ZUzxCxF!M", 126L, jSONPath_Operator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path n+=ot, segement gnc9&,SJg0ZUzxCxF!M
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NOT_BETWEEN");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NOT_BETWEEN", "com.alibaba.fastjson.parser.ParserConfig", 3237, hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("and", clientInfoStatus0);
      jSONPath0.deepSet(sQLClientInfoException0, "bX%mhZG6&C{[M!jZ", (-5194641081268104286L), hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("rHlke", serializeConfig0, parserConfig0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) classLoader0);
      jSONPath0.deepScan(linkedList0, "fastjson.parser.autoTypeSupport", linkedList0);
      assertEquals("rHlke", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("rHlke", serializeConfig0, parserConfig0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(linkedList0, "fastjson.parser.autoTypeSupport", linkedList0);
      assertEquals("rHlke", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("WdB68+>v)0xPM!*", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLClientInfoException0, "NOT_BETWEEN", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path NOT_BETWEEN, segement NOT_BETWEEN
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tk";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(hashMap0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-3));
      boolean boolean0 = JSONPath.eqNotNull(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Float float0 = new Float((-927.0));
      Double double0 = new Double((-914));
      boolean boolean0 = JSONPath.eqNotNull(float0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Float float0 = new Float(1000000.0);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = JSONPath.eqNotNull(float0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Short short0 = new Short((short)1900);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Float float0 = new Float(0.0);
      Integer integer0 = Integer.getInteger("~P3@y5G", 47);
      boolean boolean0 = JSONPath.eqNotNull(float0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Short short0 = new Short((short)1903);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(short0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long long0 = 12L;
      Integer integer0 = Integer.getInteger("java.lang.AutoCloseable", 66);
      boolean boolean0 = JSONPath.eqNotNull(integer0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Integer integer0 = new Integer((-914));
      boolean boolean0 = JSONPath.eqNotNull(integer0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((double) 5614464919154503228L);
      Short short0 = new Short((short)176);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Float float0 = new Float(4606.153801316);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Float float0 = new Float((double) (short) (-553));
      boolean boolean0 = JSONPath.eq(float0, "2[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-989.6868172748433));
      Float float0 = new Float((-399.60833845645));
      boolean boolean0 = JSONPath.eq(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("ASMSerializer_", "NOT_LIKE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      boolean boolean0 = JSONPath.eq(sQLTransactionRollbackException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eq((Object) null, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(107);
      boolean boolean0 = JSONPath.eq(serializeConfig0, serializeConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      Short short0 = new Short((short)1903);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, short0, javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("tk");
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, hashMap0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("nin", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues("nin");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("`kaxh8?V0");
      Map<String, Object> map0 = JSONPath.paths((Object) ".(TBP)3/[0jMi#;QRy", (SerializeConfig) null);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(map0);
      assertTrue(collection0.contains(".(TBP)3/[0jMi#;QRy"));
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("t4_y");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, serializeConfig0, 77, jSONPath_Operator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.serializer.SerializeConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("expect '");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("expect '", "~,bd>zS<", 98);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLDataException0, "/stackTrace/5", (Object) jSONPath0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("com.alibaba.fastjson.JSONPath$RegMatchSegement");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      JSONPath jSONPath0 = JSONPath.compile("toJSON error");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/asmFactory/classLoader/parent/classLoader/parent/package2certs", false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_PropertySegment0, jSONPath_JSONPathParser0, "c{(CF{^O|q8 +w.2tlM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("expect '", 0L, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("expect '");
      Long long0 = new Long(0L);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(81, 105, 81, 105, 41, 105);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, long0, mockGregorianCalendar0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("g~hhcbUlG1#O /", (-3195.93241835), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("$[G$D_Ky)z");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("z~KLO");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLTransientConnectionException0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      JSONPath jSONPath0 = JSONPath.compile("like");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T#}d)%E~88/i3.m<,O", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}ol.7F y");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(13, (-111), (-111));
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, jSONPath_RangeSegment0);
      assertSame(jSONPath_RangeSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T#}d)%E~88/i3.m<,O", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("4-?4BG}ol.7F y");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1837, 17, (-1766));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_RangeSegment0, sQLTimeoutException0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("g~hhcbUlG1#O /", (-3195.93241835), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("$[G$D_Ky)z");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLTimeoutException0);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Object object0 = jSONPath_FilterSegment0.eval((JSONPath) null, sQLTransactionRollbackException0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("z$k$xMhPwkEI");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("*", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("z$k$xMhPwkEI");
      Long long0 = new Long((-464L));
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, long0, jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("r", "r", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("r");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("X0r)ZSK", "stackTr", 6);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, sQLRecoverableException0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("expect '");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("6$%PiJuIaSxW]|/A'|", "K|xKBG*u3", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "*", "(Ljava/lang/reflect/Type;)Ljava/lang/Object;", "expect '");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.deny.internal", "'s*,s*'", jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      Float float0 = new Float((-1757.9883F));
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, float0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("OyO");
      JSONPath jSONPath0 = new JSONPath("t");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("Om\"RkM&Gv'E6]A", "OyO", false);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, sQLTransientException0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.properties", "fastjson.properties", "c4-=_r}9,%YS", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("fastjson.properties");
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "c4-=_r}9,%YS", mockGregorianCalendar0, "c4-=_r}9,%YS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("Q:W?dv", (String) null, (String) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(";@iH%X\u0001CfEyk]*N)", (String) null, "c4", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<O");
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("T#}d)%E~88/i3.m<O", jSONPath_MinSegment0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, (Object) null, jSONPath_MinSegment0, "T#}d)%E~88/i3.m<O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("expect '", 0L, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("expect '");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("expect '", "expect '");
      Long long0 = new Long(0L);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, (Object) null, sQLFeatureNotSupportedException0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("YYUa2)~sNg'5PGHtEl", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("YYUa2)~sNg'5PGHtEl");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, bigDecimal0, propertyNamingStrategy0, "YYUa2)~sNg'5PGHtEl");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "YYUa2)~sNg'5PGHtEl";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("YYUa2)~sNg'5PGHtEl", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("YYUa2)~sNg'5PGHtEl");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, bigDecimal0, propertyNamingStrategy0, stringArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 12L;
      Long long1 = new Long(12L);
      longArray0[0] = long1;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("~P3@y5G", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("~P3@y5G");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("~P3@y5G", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("~P3@y5G");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, longArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      long[] longArray0 = new long[4];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("~P3@y5G", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("(Yvox.");
      SerializeConfig serializeConfig0 = new SerializeConfig(36, true);
      Integer integer0 = new Integer(36);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "(Yvox.", serializeConfig0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("expcae '");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("(;dSCKzS,9+!i^!", "expcae '", false);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "(;dSCKzS,9+!i^!", "(;dSCKzS,9+!i^!", "expcae '");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&]/46D");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("&]/46D", jSONPath_JSONPathParser0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("&]/46D", serializeConfig0, parserConfig0);
      byte[] byteArray0 = new byte[15];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "&]/46D", bigInteger0, "&]/46D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("NOT_BETWEEN");
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      Long long0 = new Long(1685);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, "NOT_BETWEEN", long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("expect '");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(124, (-3366), (-870));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("8h=\"]^ o}2 hl:i,$f", "V/[+@L/JV4~", (-3627));
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, sQLTimeoutException0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      UUID uUID0 = MockUUID.randomUUID();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2489, 700, 700);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, uUID0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("e");
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Long long0 = new Long((-1));
      BigDecimal bigDecimal0 = new BigDecimal((double) (-1));
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, long0, bigDecimal0);
      assertEquals(3, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("*", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("OyO");
      JSONPath jSONPath0 = new JSONPath("8tj:&");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("parent", true);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1065);
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_ArrayAccessSegment0, sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[>X6t\"FmJ4-&K", "staHRTr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[>X6t\"FmJ4-&K
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Byte byte0 = new Byte((byte)89);
      Integer integer0 = new Integer((byte)89);
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, byte0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Byte byte0 = new Byte((byte)4);
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, byte0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = JSONPath.compare("java", "java");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NOT_LIKE");
      JSONPath jSONPath0 = new JSONPath("NOT_LIKE");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_LIKE";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_JSONPathParser0, stringArray0);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      DataTruncation dataTruncation0 = new DataTruncation((-977), false, false, 103, 103);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NOT_LIKE", dataTruncation0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientConnectionException0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser1 = (JSONPath.JSONPathParser)jSONPath_MinSegment0.eval(jSONPath0, sQLRecoverableException0, jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertNull(jSONPath_JSONPathParser1);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"I]{_7yE");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":rV`");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"rV`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("can not cast to Timestamp, value : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("can not cast to Timestamp, value : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"can not cast to Timestamp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("NOT_BETWEEN");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("OT_BETWEEN", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      jSONPath0.init();
      assertEquals("NOT_BETWEEN", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">UjKS");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("q!HM(_ybZD4FVku\"A");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'H'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('+');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("noEt");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // noEt
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("';ngrY;?trTJ4HAu)m");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but 'm'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1\"\"M[xKjWLz^P");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(7267793227937552092L);
      assertEquals(7.2677932279375524E18, double0, 0.01);
      
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}2`@ck");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-453L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Mou4CZ*k.M-)DgS");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&@ psNR-Z[(x_");
      Pattern pattern0 = Pattern.compile("Instant", 3427);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("&@ psNR-Z[(x_", pattern0, jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RegMatchSegement0);
      assertSame(jSONPath_Filter0, jSONPath_RegMatchSegement0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k[}+");
      jSONPath_JSONPathParser0.explain();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.autoTypeAccept");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qEg2$3bSmx03pT=\"~=4");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but '4'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IN<cl/k>GH,@(MOY");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("CO@\"54");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but '\"'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \\.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$[G$D_Ky)z");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_KeySetSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $[G$D_Ky)z
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("X");
      jSONPath0.init();
      assertEquals("X", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("n");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Byte> class0 = Byte.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      int int0 = jSONPath0.size((Object) javaBeanDeserializer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("mB[Se1P", "mB[Se1P", (-1097));
      SQLWarning sQLWarning0 = new SQLWarning("mB[Se1P", "XplcvKhKvs4k7A", (-2311), sQLNonTransientException0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLWarning0);
      //  // Unstable assertion: assertEquals(166, map0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) parserConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "`F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) jSONPath_ArrayAccessSegment0, (Object) jSONPath_ArrayAccessSegment0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";eV1BkNw9");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "Y{$ [J!zQj,|Qh[C", "fastjson.parser.deny.internal", (Object) jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("Dh/t", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) parserConfig0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = JSONPath.set((Object) classLoader0, ",", (Object) jSONPath_KeySetSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) "[>X6t\"FmJ4-&K", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("m:M |-u9&=^C", "com.alibaba.fastjson.JSONPath$MinSegment", (-2220), hashMap0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLClientInfoException0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/7");
      boolean boolean0 = jSONPath0.remove((Object) "/cause/stackTrace/7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("`");
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "EQ", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/4");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "~P3@y5G", (Object[]) longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path /cause/stackTrace/4
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java");
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("OyO");
      Throwable[] throwableArray0 = sQLTransientException0.getSuppressed();
      JSONPath jSONPath0 = new JSONPath("t");
      jSONPath0.arrayAdd((Object) "ynxh0", (Object[]) throwableArray0);
      assertEquals("t", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.util.IdentityHashMap");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(92);
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_ArrayAccessSegment0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("expect '");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = jSONPath0.size((Object) mockGregorianCalendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("q", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      boolean boolean0 = JSONPath.containsValue((Object) ">UjKS", "%", (Object) jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = jSONPath0.contains((Object) uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("(", "(", 1305);
      Spliterator<Throwable> spliterator0 = sQLDataException0.spliterator();
      boolean boolean0 = JSONPath.contains((Object) spliterator0, "(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}ol.7F y");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Object object0 = JSONPath.extract("", "/cause/cause/stackTrace/2");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/7");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("z$k$xMhPwkEI");
      JSONPath jSONPath0 = new JSONPath("t4_y[X+Zl?");
      int[] intArray0 = new int[4];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) pattern0, (Object) jSONPath_MultiIndexSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. t4_y[X+Zl?
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("g~hhcbUlG1#O /", (-3195.93241835), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("$[G$D_Ky)z");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLRecoverableException0, sQLRecoverableException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T#}d)%E~88/i3.m<,O", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}ol.7F y");
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_StringInSegement0, jSONPath_WildCardSegment0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement(".0vPp zJgsV%X", 36, 36, true);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, jSONPath_MultiPropertySegment0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("j/5m4XU@7_U");
      JSONPath jSONPath0 = JSONPath.compile("j/5m4XU@7_U");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, "j/5m4XU@7_U", jSONPath0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("PqSIHo<<MTFVeUB");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('q', char0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1\"\"M[xKjWLz^P");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      boolean boolean0 = JSONPath.set(object0, "/stackTrace/5", (Object) sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("OyO");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTransientException0, "/stackTrace/6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("1");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("NOT_BETWEEN");
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, false);
      DataTruncation dataTruncation0 = new DataTruncation((-2287), false, false, 0, (-2324));
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, dataTruncation0, throwableDeserializer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("q", 1683L, 1683L, false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("q", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, parserConfig0, jSONPath_WildCardSegment0, "q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Float float0 = new Float(1000000.0);
      // Undeclared exception!
      try { 
        jSONPath_SizeSegment0.eval((JSONPath) null, float0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$SizeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("illegal json : ");
      Short short0 = new Short((short)958);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "com.alibaba.fastjson.JSONPath$ValueSegment", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("lDu42$I3%Y]:V");
      int int0 = JSONPath.size((Object) jSONPath0, "fastjson.parser.autoTypeSupport");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("e");
      String string0 = jSONPath0.getPath();
      assertEquals("e", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("`]H");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("jsonpath can not be null", "autoTypeSupport");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLWarning> class0 = SQLWarning.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      JSONPath.arrayAdd((Object) javaBeanDeserializer0, "/stackTrace/11", (Object[]) null);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Short short0 = new Short((short) (-857));
      Map<String, Object> map0 = JSONPath.paths((Object) short0);
      // Undeclared exception!
      try { 
        JSONPath.compare(map0, "`]H");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("like");
      jSONPath0.remove((Object) "/cause/stackTrace/7");
  }
}
