/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 19:19:29 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((byte)75, (byte)37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("write clob error", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("write clob error", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 0);
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "i2]>)wp>", "i2]>)wp>");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("()[C", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("()[C", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 21, 0);
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, parserConfig0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("P=r$W`R03{+XXq_");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("org.springframework.security.core.authority.SimpleGrantedAuthority");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&G:0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+~|v");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2159L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9$R=|]Eh.6JMJ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -_IqO[6fMI|");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$n");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("X,yEhNp-P$*T>Y@");
      assertNotNull(jSONPath_JSONPathParser0);
      
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. X,yEhNp-P$*T>Y@
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "l#w0kK6xW1llN", "l#w0kK6xW1llN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : l#w0kK6xW1llN
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "S`JC,Dp`ReC/", "org.springframework.security.web.authentication.WebAuthenticationDetails");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3f/.X:\"*gJ9e");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(3L, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$NotNullSegement", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(jSONPath0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, parserConfig0, bigInteger0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath0.getPath());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("wq/K8Eby.6QOwV1v");
      assertNotNull(jSONPath_JSONPathParser0);
      
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("wq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("gxa*A'#q|J_3K0g");
      assertNotNull(jSONPath_JSONPathParser0);
      
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g4}G2fZ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      assertNotNull(jSONPath_MinSegment0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      JSONPath jSONPath0 = new JSONPath("w=8p");
      assertEquals("w=8p", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_MinSegment0, "w=8p");
      assertEquals("w=8p", jSONPath0.getPath());
      assertEquals("w=8p", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3f/.X:\"*gJ9e");
      assertNotNull(jSONPath_JSONPathParser0);
      
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-1872417015366588117L));
      assertEquals((-1.87241701536658816E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("|_N][");
      assertEquals("|_N][", jSONPath0.getPath());
      assertNotNull(jSONPath0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1500);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("unclosed.str", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("unclosed.str", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      assertNotNull(jSONPath_KeySetSegment0);
      
      int int0 = JSONPath.size((Object) jSONPath_KeySetSegment0, "'");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(56);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("*", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(jSONPath0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      assertNotNull(jSONPath_SizeSegment0);
      
      int int0 = jSONPath0.size((Object) jSONPath_SizeSegment0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("*", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      assertEquals("false", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("value", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("t^", "t^", 48);
      assertEquals("t^", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(48, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("t^", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: t^", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      boolean boolean0 = jSONPath0.setPropertyValue(jSONPath_PropertySegment0, "com.alibaba.fastjson.serializer.JSONObjectCodec", (-2192L), sQLIntegrityConstraintViolationException0);
      assertEquals("false", jSONPath0.getPath());
      assertEquals("t^", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(48, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("t^", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: t^", sQLIntegrityConstraintViolationException0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(javaBeanSerializer0);
      
      Short short0 = new Short((short)160);
      assertEquals((short)160, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONPath.set((Object) javaBeanSerializer0, "]", (Object) short0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("lang");
      assertEquals("lang", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null);
      assertEquals("lang", jSONPath0.getPath());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "zHl4|C");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long long0 = new Long(2);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      Set<?> set0 = JSONPath.keySet((Object) long0, "0");
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("0"));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_");
      assertEquals("_", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Integer integer0 = new Integer(517);
      assertEquals(517, (int)integer0);
      assertNotNull(integer0);
      
      Set<?> set0 = jSONPath0.keySet((Object) integer0);
      assertEquals("_", jSONPath0.getPath());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("_"));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("<");
      assertEquals("<", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Set<?> set0 = jSONPath0.keySet((Object) "=WHYJ!ydI+>.t");
      assertEquals("<", jSONPath0.getPath());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("=WHYJ!ydI+>.t"));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_");
      assertEquals("_", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.getPropertyValue("_", "_", 156L);
      assertEquals("_", jSONPath0.getPath());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$Operator");
      assertEquals("com.alibaba.fastjson.JSONPath$Operator", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(34, 2709, 34);
      assertNotNull(jSONPath_RangeSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$Operator", jSONPath0);
      assertEquals("com.alibaba.fastjson.JSONPath$Operator", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Object object0 = jSONPath0.getPropertyValue(arrayList0, "com.alibaba.fastjson.JSONPath$Operator", (-26639035867733124L));
      assertEquals("com.alibaba.fastjson.JSONPath$Operator", jSONPath0.getPath());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      assertEquals("false", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Class<Calendar> class0 = Calendar.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertEquals("false", jSONPath0.getPath());
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      JSONPath jSONPath0 = new JSONPath("9rcTvgu", serializeConfig0, (ParserConfig) null);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("9rcTvgu", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("9rcTvgu", jSONPath0.getPath());
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("getContext", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("getContext", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(jSONPath0);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("getContext", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fied_ser");
      assertEquals("fied_ser", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      assertEquals(PropertyNamingStrategy.NoChange, propertyNamingStrategy0);
      
      Object object0 = jSONPath0.getArrayItem(propertyNamingStrategy0, 0);
      assertEquals("fied_ser", jSONPath0.getPath());
      assertSame(propertyNamingStrategy0, object0);
      assertSame(object0, propertyNamingStrategy0);
      assertEquals(PropertyNamingStrategy.NoChange, object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("m,Eg?xN&_)BF=!GDUb[");
      assertEquals("m,Eg?xN&_)BF=!GDUb[", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = jSONPath0.evalSize(byte0);
      assertEquals("m,Eg?xN&_)BF=!GDUb[", jSONPath0.getPath());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      int int0 = jSONPath0.evalSize(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("8cV+QU=GFiFLbHh%fe2");
      assertEquals("8cV+QU=GFiFLbHh%fe2", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals("8cV+QU=GFiFLbHh%fe2", jSONPath0.getPath());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3");
      assertEquals("3", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Set<?> set0 = jSONPath0.evalKeySet("3");
      assertEquals("3", jSONPath0.getPath());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("3"));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(parserConfig0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      JSONPath jSONPath0 = new JSONPath("+>C{+&;", serializeConfig0, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("+>C{+&;", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(jSONPath0);
      
      Object object0 = JSONPath.eval((Object) jSONPath0, "fastjson.parser.deny.internal");
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("+>C{+&;", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList linkedList1 = (LinkedList)JSONPath.eval((Object) linkedList0, ",");
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList0.contains(","));
      assertNotNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("<");
      assertEquals("<", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath jSONPath1 = (JSONPath)jSONPath0.eval((Object) jSONPath0);
      assertEquals("<", jSONPath0.getPath());
      assertEquals("<", jSONPath1.getPath());
      assertSame(jSONPath0, jSONPath1);
      assertSame(jSONPath1, jSONPath0);
      assertNotNull(jSONPath1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = JSONPath.compare("com.alibaba.fastjson.JSONPath$NotNullSegement", "A4!e4");
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      assertEquals("*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        JSONPath.size((Object) jSONPath0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("_");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: _", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("_", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        JSONPath.size((Object) sQLIntegrityConstraintViolationException0, "hI?d`GVqsg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : hI?d`GVqsg
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=o4");
      assertEquals("=o4", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2428, 2428, 2378);
      assertNotNull(jSONPath_RangeSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_RangeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. =o4
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Con[ext");
      assertEquals("com.alibaba.fastjson.JSONPath$Con[ext", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_WildCardSegment0, "()[C", 1L, bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      assertEquals("false", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigInteger0, "false", 4794L, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("w");
      assertEquals("w", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "Q", 5614464919154503228L, jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/11");
      assertEquals("/stackTrace/11", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, (Object) null, 94, "/stackTrace/11");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MaxSegment");
      assertEquals("com.alibaba.fastjson.JSONPath$MaxSegment", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "S", (Object) "S");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "/stackTrace", (Object) "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLTransientConnectionException0, "IfY%#?66ZoW)#(6|;$", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : IfY%#?66ZoW)#(6|;$
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSONPath jSONPath0 = JSONPath.compile("wq/K8Ezy.6VOwV1v");
      assertEquals("wq/K8Ezy.6VOwV1v", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) jSONPath_Operator0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("g4}G2fZ", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("g4}G2fZ", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(jSONPath0);
      
      Integer integer0 = new Integer((-2522));
      assertEquals((-2522), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "g4}G2fZ", (Object) integer0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : g4}G2fZ
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONPath jSONPath0 = JSONPath.compile("nin");
      assertEquals("nin", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      assertNotNull(jSONPath_WildCardSegment0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("wq/K8Eby.6QOwV1v", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("wq/K8Eby.6QOwV1v", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "rlike", (Object) "rlike");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(I)V");
      assertEquals("(I)V", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "(I)V", (Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. (I)V
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(stack0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fastjson.parser.deny";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("X,yEhNp-P$*T>Y@", stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = JSONPath.compile("^paBuVa'L");
      assertEquals("^paBuVa'L", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = ",yuXu#lkfM#0(w";
      int int0 = (-1275);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("~HqD");
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ~HqD", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("~HqD", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ~HqD", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("~HqD", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeAccept", sQLNonTransientException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("fastjson.parser.safeMode", ",yuXu#lkfM#0(w", (-1275), sQLNonTransientException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ~HqD", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("~HqD", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: fastjson.parser.autoTypeAccept", sQLNonTransientException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals((-1275), sQLTransientException0.getErrorCode());
      assertEquals(",yuXu#lkfM#0(w", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: fastjson.parser.safeMode", sQLTransientException0.toString());
      assertEquals("fastjson.parser.safeMode", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      jSONPath0.removePropertyValue(parserConfig0, "fastjson.parser.safeMode", true);
      boolean boolean0 = false;
      int int1 = 100;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int1, int0);
      String string1 = "SKe&Z\\v(8x:6";
      int int2 = 117;
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreAutoType;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.IgnoreNotMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableCircularReferenceDetect;
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("syntax error : ");
      assertEquals("syntax error : ", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      jSONPath0.removePropertyValue(jSONPath0, "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken", false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%%");
      assertEquals("%%", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "fastjson.parser.deny", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("v]HS`yw2WnHZC;+Np3");
      assertEquals("v]HS`yw2WnHZC;+Np3", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "0", 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) class0, "jg_r0H7A.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("p");
      assertEquals("p", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "p");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("#Ch\"ta&M", 1038);
      assertEquals("#Ch\"ta&M", pattern0.toString());
      assertEquals("#Ch\"ta&M", pattern0.pattern());
      assertEquals(1038, pattern0.flags());
      assertNotNull(pattern0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("$VALUES", pattern0, jSONPath_Operator0);
      assertEquals("#Ch\"ta&M", pattern0.toString());
      assertEquals("#Ch\"ta&M", pattern0.pattern());
      assertEquals(1038, pattern0.flags());
      assertNotNull(jSONPath_RegMatchSegement0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_RegMatchSegement0, "[float");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) serializeConfig0, ":");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONPath jSONPath0 = new JSONPath("r");
      assertEquals("r", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      jSONPath0.remove((Object) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Or");
      assertEquals("Or", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) propertyNamingStrategy0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      assertEquals("/", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLWarning0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":theo=FOtVirZ+l");
      assertEquals(":theo=FOtVirZ+l", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) ":theo=FOtVirZ+l");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("+", "+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-:Bs'LP+fRE-KHm?iaW", "r[[sf!72PDqW./'U]|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("wq/K8Ezy.6VOwV1v", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("wq/K8Ezy.6VOwV1v", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) jSONPath0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Byte byte0 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) byte0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) parserConfig0, "2[n/AsW0w[_W(wJ&&y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 2[n/AsW0w[_W(wJ&&y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("qHseg~PB~oxZEsJz");
      assertEquals("qHseg~PB~oxZEsJz", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : qHseg~PB~oxZEsJz
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9yo Hdm7gH.z");
      assertEquals("9yo Hdm7gH.z", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 9yo Hdm7gH.z
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("getFieldValue error.");
      assertEquals("getFieldValue error.", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : getFieldValue error.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      JSONPath jSONPath0 = JSONPath.compile("xxQavMDI");
      assertEquals("xxQavMDI", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("-", (SerializeConfig) null, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("-", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotNull(jSONPath0);
      
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      JSONPath jSONPath0 = JSONPath.compile("@$we;s4^");
      assertEquals("@$we;s4^", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(class0, "^wM", (-312));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("_", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("_", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(jSONPath0);
      
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("-", (SerializeConfig) null, parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("-", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(jSONPath0);
      
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3f/.X:&\"*gJ9e");
      assertEquals("3f/.X:&\"*gJ9e", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      assertEquals("-", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      JSONPath jSONPath0 = new JSONPath("^&g!(mrq({NJ", serializeConfig0, (ParserConfig) null);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals("^&g!(mrq({NJ", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(122, true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("in", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("in", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(jSONPath0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(short0, 122);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(parserConfig0);
      
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.safeMode", "fastjson.parser.safeMode", parserConfig0, (-2871), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSONPath.extract("D[:J+CWU3zwxvx", "D[:J+CWU3zwxvx", parserConfig0, (-2226), featureArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J+CWU3zwxv\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "nin", parserConfig0, 46, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("", "z=DiVm)%[< Q&.c", parserConfig0, 445, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : z=DiVm)%[< Q&.c
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "illeal");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("+");
      assertEquals("+", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("H{(pxs^9G]");
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -5
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3f/.X:&\"*gJ9e");
      assertEquals("3f/.X:&\"*gJ9e", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("%#Y%;f+.&O%", parserConfig0, (-927));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 3f/.X:&\"*gJ9e
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      assertEquals("nin", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("f", longArray0, false);
      assertEquals(4, longArray0.length);
      assertNotNull(jSONPath_IntObjInSegement0);
      
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) jSONPath_IntObjInSegement0, "UpXH8skK9QX[>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("-", (SerializeConfig) null, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("-", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(jSONPath0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("NOT_LIKE", "fastjson.parser.autoTypeSupport", sQLNonTransientConnectionException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("NOT_LIKE", sQLWarning0.getMessage());
      assertEquals("fastjson.parser.autoTypeSupport", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: NOT_LIKE", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLWarning0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath(".g[%ck`7-v,8!9G=Fu", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(".g[%ck`7-v,8!9G=Fu", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(jSONPath0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.deny.internal", "}", sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: fastjson.parser.deny.internal", sQLRecoverableException0.toString());
      assertEquals("}", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("fastjson.parser.deny.internal", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLRecoverableException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%ck`7-v\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("X,yEhNp-P$*T>Y@");
      assertEquals("X,yEhNp-P$*T>Y@", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "X,yEhNp-P$*T>Y@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : X,yEhNp-P$*T>Y@
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONPath jSONPath0 = JSONPath.compile("|^/4");
      assertEquals("|^/4", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(class1, "LT", 10000000000L, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~1vHg`|$SD7Hf");
      assertEquals("~1vHg`|$SD7Hf", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Long long0 = new Long((-3753L));
      assertEquals((-3753L), (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "~1vHg`|$SD7Hf", 840L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("wq/K8Ezy.6VOwV1v", ";XOUz!'/DA}la|s,", 128);
      assertEquals("wq/K8Ezy.6VOwV1v", sQLNonTransientException0.getMessage());
      assertEquals(128, sQLNonTransientException0.getErrorCode());
      assertEquals(";XOUz!'/DA}la|s,", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: wq/K8Ezy.6VOwV1v", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("S{wuV~d2", "/stackTrace/3", 1145, hashMap0, sQLNonTransientException0);
      assertEquals("wq/K8Ezy.6VOwV1v", sQLNonTransientException0.getMessage());
      assertEquals(128, sQLNonTransientException0.getErrorCode());
      assertEquals(";XOUz!'/DA}la|s,", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: wq/K8Ezy.6VOwV1v", sQLNonTransientException0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: S{wuV~d2", sQLClientInfoException0.toString());
      assertEquals("S{wuV~d2", sQLClientInfoException0.getMessage());
      assertEquals("/stackTrace/3", sQLClientInfoException0.getSQLState());
      assertEquals(1145, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      JSONPath jSONPath0 = new JSONPath("/stackTrace/3", serializeConfig0, (ParserConfig) null);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("/stackTrace/3", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(sQLClientInfoException0, (String) null, 128, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_");
      assertEquals("_", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockGregorianCalendar0, "_", 156L, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path _, segement _
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("-XQ (Avs6Bt\"7P`T(", (SerializeConfig) null, parserConfig0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("-XQ (Avs6Bt\"7P`T(", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(jSONPath0);
      
      Class<BigInteger> class0 = BigInteger.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(javaBeanSerializer0);
      
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      assertNotNull(jSONPath_SizeSegment0);
      
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(jSONPath_SizeSegment0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("-XQ (Avs6Bt\"7P`T("));
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("-XQ (Avs6Bt\"7P`T(", "`7!Xlc+a',g", list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      assertEquals("between", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains("between"));
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("between", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("if");
      assertEquals("if", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains("if"));
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) "", "fastjson.parser.deny", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) "-", ">w@9}hRg_G!>{.", (Object) "-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. >w@9}hRg_G!>{.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(358);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      JSONPath jSONPath0 = JSONPath.compile("+");
      assertEquals("+", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) serializeConfig0, (Object) jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(parserConfig0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "", (Object) parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-62));
      assertEquals((byte) (-62), (byte)byte0);
      assertNotNull(byte0);
      
      JSONPath jSONPath0 = JSONPath.compile("fh{=,HE5H4C");
      assertEquals("fh{=,HE5H4C", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) byte0, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : fh{=,HE5H4C
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_Operator0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "", "_asm_flOag_", (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      JSONPath jSONPath0 = JSONPath.compile("wq/K8Ezy.6bOwV1v");
      assertEquals("wq/K8Ezy.6bOwV1v", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("th6tsqo{", "th6tsqo{", 47);
      assertEquals("java.sql.SQLNonTransientConnectionException: th6tsqo{", sQLNonTransientConnectionException0.toString());
      assertEquals("th6tsqo{", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("th6tsqo{", sQLNonTransientConnectionException0.getMessage());
      assertEquals(47, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      boolean boolean0 = jSONPath0.removePropertyValue(sQLNonTransientConnectionException0, "th6tsqo{", true);
      assertEquals("wq/K8Ezy.6bOwV1v", jSONPath0.getPath());
      assertEquals("java.sql.SQLNonTransientConnectionException: th6tsqo{", sQLNonTransientConnectionException0.toString());
      assertEquals("th6tsqo{", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("th6tsqo{", sQLNonTransientConnectionException0.getMessage());
      assertEquals(47, sQLNonTransientConnectionException0.getErrorCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterGroup");
      assertEquals("com.alibaba.fastjson.JSONPath$FilterGroup", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2519));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      jSONPath0.deepSet((Object) null, "com.alibaba.fastjson.JSONPath$FilterGroup", (-98L), jSONPath_ArrayAccessSegment0);
      assertEquals("com.alibaba.fastjson.JSONPath$FilterGroup", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Z");
      assertEquals("Z", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Z"));
      assertNotNull(linkedList0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains("Z"));
      assertNotNull(vector0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLFeatureNotSupportedException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean0 = vector0.add((Object) sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLFeatureNotSupportedException]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLFeatureNotSupportedException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(vector0.contains("Z"));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(vector0, "&pR}6", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path Z, segement &pR}6
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Set<?> set0 = JSONPath.keySet((Object) hashMap0, "writeFieldValue");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$/FVdOK*>Yw)fo,~");
      assertEquals("$/FVdOK*>Yw)fo,~", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("json-path can not be null or empty");
      assertEquals("json-path can not be null or empty", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(", segement ", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Integer integer0 = new Integer((-133));
      assertEquals((-133), (int)integer0);
      assertNotNull(integer0);
      
      jSONPath_PropertySegment0.setValue(jSONPath0, integer0, "com.alibaba.fastjson.JSONPath$FilterGroup");
      assertEquals("json-path can not be null or empty", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("wq/K8Eby.6QOwV1v", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("wq/K8Eby.6QOwV1v", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotNull(jSONPath0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "EV", (-2522));
      assertEquals((-2522), sQLTimeoutException0.getErrorCode());
      assertEquals("EV", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      assertEquals((-2522), sQLTimeoutException0.getErrorCode());
      assertEquals("EV", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTimeoutException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2522), 3, (-1446212072));
      assertNotNull(jSONPath_RangeSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, (Object) null);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("wq/K8Eby.6QOwV1v", jSONPath0.getPath());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotNull(arrayList0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeSupport", false);
      assertNotNull(jSONPath_PropertySegment0);
      
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, arrayList0, sQLNonTransientConnectionException0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("wq/K8Eby.6QOwV1v", jSONPath0.getPath());
      assertEquals((-2522), sQLTimeoutException0.getErrorCode());
      assertEquals("EV", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTimeoutException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|^/4");
      assertNotNull(jSONPath_JSONPathParser0);
      
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
      assertNotNull(jSONPath_SegmentArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("getContext");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
      assertNotNull(jSONPath_SegmentArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Ist-yfS");
      assertEquals("Ist-yfS", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "X,yEhNp-P$*T>Y@";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : X,yEhNp-P$*T>Y@
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MaxSegment");
      assertNotNull(jSONPath_JSONPathParser0);
      
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("B");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("wq/K8Eby.6QOwV1v", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("wq/K8Eby.6QOwV1v", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) serializeConfig0, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_WildCardSegment0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("-", (SerializeConfig) null, parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("-", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("-", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_");
      assertEquals("_", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      String string0 = "z";
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) string0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("evalSize error : ");
      assertNotNull(jSONPath_JSONPathParser0);
      
      JSONPath jSONPath0 = new JSONPath("N*");
      assertEquals("N*", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) jSONPath_JSONPathParser0, objectArray0);
      assertEquals("N*", jSONPath0.getPath());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("unclosed.str", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("unclosed.str", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) serializeConfig0, (Object) "unclosed.str");
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("unclosed.str", jSONPath0.getPath());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wq/K8Ezy.6VOwV1v");
      assertEquals("wq/K8Ezy.6VOwV1v", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("rlike", "java.sql.Timestamp");
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.Timestamp", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: rlike", sQLTransactionRollbackException0.toString());
      assertEquals("rlike", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("rlike", "wq/K8Ezy.6VOwV1v", (-1004), sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.Timestamp", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: rlike", sQLTransactionRollbackException0.toString());
      assertEquals("rlike", sQLTransactionRollbackException0.getMessage());
      assertEquals((-1004), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("wq/K8Ezy.6VOwV1v", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: rlike", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("rlike", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.Timestamp", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: rlike", sQLTransactionRollbackException0.toString());
      assertEquals("rlike", sQLTransactionRollbackException0.getMessage());
      assertEquals((-1004), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("wq/K8Ezy.6VOwV1v", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: rlike", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("rlike", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLIntegrityConstraintViolationException: rlike", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: rlike", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) sQLSyntaxErrorException0, (Object) null);
      assertEquals("wq/K8Ezy.6VOwV1v", jSONPath0.getPath());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.Timestamp", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: rlike", sQLTransactionRollbackException0.toString());
      assertEquals("rlike", sQLTransactionRollbackException0.getMessage());
      assertEquals((-1004), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("wq/K8Ezy.6VOwV1v", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: rlike", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("rlike", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLIntegrityConstraintViolationException: rlike", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: rlike", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("r");
      assertEquals("r", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("r"));
      assertNotNull(stack0);
      
      boolean boolean0 = jSONPath0.contains((Object) stack0);
      assertEquals("r", jSONPath0.getPath());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("r"));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("wq/K8Eby.6QOwV1v", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("wq/K8Eby.6QOwV1v", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(jSONPath0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "EV", (-2522));
      assertEquals("EV", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals((-2522), sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      assertEquals("EV", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals((-2522), sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTimeoutException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      boolean boolean0 = jSONPath0.contains((Object) sQLNonTransientConnectionException0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("wq/K8Eby.6QOwV1v", jSONPath0.getPath());
      assertEquals("EV", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals((-2522), sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTimeoutException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLNonTransientConnectionException0.getMessage());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("0");
      assertEquals("0", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      boolean boolean0 = jSONPath0.contains((Object) "wq/K8Ezy.6VOwV1v");
      assertEquals("0", jSONPath0.getPath());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("fastjson.parser.autoTypeSupport", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertNotNull(jSONPath0);
      
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "ucnosed.^str");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/sackTrace/10");
      assertEquals("/sackTrace/10", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("can not cast to long, value : ");
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      assertEquals("fastjson.parser.deny", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LH$?55;.q3", parserConfig0, 1413);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_");
      assertEquals("_", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("like");
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertNotNull(defaultJSONParser0);
      
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2like
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("p");
      assertEquals("p", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      Object object0 = jSONPath0.eval((Object) jSONPath_Operator0);
      assertEquals("p", jSONPath0.getPath());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3f/.X:\"*gJ9e");
      assertEquals("3f/.X:\"*gJ9e", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Object object0 = jSONPath0.eval((Object) null);
      assertEquals("3f/.X:\"*gJ9e", jSONPath0.getPath());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("0keC`oGei$<", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertEquals("0keC`oGei$<", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(jSONPath0);
      
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      assertNotNull(jSONPath_PropertySegment0);
      
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.remove(jSONPath0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("\"o/G.]8", serializeConfig0, parserConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isSafeMode());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("\"o/G.]8", jSONPath0.getPath());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertNotNull(jSONPath0);
      
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1622));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      Byte byte0 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("And", "com.alibaba.fastjson.parser.JSONReaderScanner", parserConfig0, (-440), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "r";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("r", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1005));
      assertNotNull(jSONPath_ArrayAccessSegment0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/4tackTrace/5";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_ArrayAccessSegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "r";
      stringArray0[1] = "r";
      stringArray0[2] = "r";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(stack0, stringArray0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, stringArray0.length);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(stack0.contains("r"));
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(throwableDeserializer0);
      
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(throwableDeserializer0, (String[]) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertEquals("fastjson.parser.autoTypeAccept", jSONPath0.getPath());
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("p");
      assertEquals("p", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("like", (-3210L), jSONPath_Operator0);
      assertNotNull(jSONPath_IntOpSegement0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      assertNotNull(jSONPath_WildCardSegment0);
      
      ChronoField chronoField0 = ChronoField.ERA;
      assertEquals(ChronoField.ERA, chronoField0);
      
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      assertNotNull(jSONPath_FilterSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, chronoField0, jSONPath_FilterSegment0);
      assertEquals("p", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Set<?> set0 = JSONPath.keySet((Object) arrayList0, "serializer");
      assertEquals("p", jSONPath0.getPath());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("getFieldValue error.");
      assertEquals("getFieldValue error.", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertEquals("getFieldValue error.", jSONPath0.getPath());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((short) (-4271), 16, 78);
      assertNotNull(jSONPath_RangeSegment0);
      
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "fastjson.parser.deny.internal", map0);
      assertEquals("getFieldValue error.", jSONPath0.getPath());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(55, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", but '");
      assertEquals(", but '", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("3f/.X:\"*gJ9e");
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 3f/.X:\"*gJ9e", sQLTransientException0.toString());
      assertEquals("3f/.X:\"*gJ9e", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      boolean boolean0 = jSONPath0.removePropertyValue(sQLTransientException0, ":", true);
      assertEquals(", but '", jSONPath0.getPath());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 3f/.X:\"*gJ9e", sQLTransientException0.toString());
      assertEquals("3f/.X:\"*gJ9e", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[-XQ (Avs6Bt\"7P`T(}");
      assertEquals("[-XQ (Avs6Bt\"7P`T(}", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      Long long0 = new Long(3329L);
      assertEquals(3329L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONPath0.removePropertyValue("", ":", true);
      assertEquals("[-XQ (Avs6Bt\"7P`T(}", jSONPath0.getPath());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      Set<?> set0 = JSONPath.keySet((Object) ":", ":");
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      jSONPath0.init();
      assertEquals("[-XQ (Avs6Bt\"7P`T(}", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      assertEquals("between", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      Map<String, Object> map0 = JSONPath.paths((Object) serializeConfig0, serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertNotNull(map0);
      
      boolean boolean0 = jSONPath0.removePropertyValue(map0, "A%XSS:wl!cSW", false);
      assertEquals("between", jSONPath0.getPath());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("/stackTrace/10");
      assertNotNull(mockThrowable0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/stackTrace/10", "/stackTrace/10", mockThrowable0);
      assertEquals("/stackTrace/10", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: /stackTrace/10", mockThrowable0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("/stackTrace/10", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("/stackTrace/10", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /stackTrace/10", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("S", "l#w0kK6xW1llN");
      assertEquals("l#w0kK6xW1llN", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: S", sQLRecoverableException0.toString());
      assertEquals("S", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      boolean boolean0 = JSONPath.set((Object) sQLInvalidAuthorizationSpecException0, "/cause/stackTrace/7", (Object) sQLRecoverableException0);
      assertEquals("/stackTrace/10", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: /stackTrace/10", mockThrowable0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("/stackTrace/10", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("/stackTrace/10", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: /stackTrace/10", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("l#w0kK6xW1llN", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: S", sQLRecoverableException0.toString());
      assertEquals("S", sQLRecoverableException0.getMessage());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("-", (SerializeConfig) null, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("-", jSONPath0.getPath());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(jSONPath0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("r71e+!", "()[C", mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("()[C", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: r71e+!", sQLRecoverableException0.toString());
      assertEquals("r71e+!", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      jSONPath0.deepSet(hashMap0, "fastjson.parser.safeMode", (-2365L), sQLRecoverableException0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("-", jSONPath0.getPath());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("()[C", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: r71e+!", sQLRecoverableException0.toString());
      assertEquals("r71e+!", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONPath jSONPath0 = new JSONPath("fastjson", serializeConfig0, parserConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(jSONPath0);
      
      jSONPath0.deepSet(serializeConfig0, "Rg", (-1695L), "fastjson");
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isJacksonCompatible());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isSafeMode());
      assertEquals("fastjson", jSONPath0.getPath());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.SAFE_MODE);
      assertFalse(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NZ");
      assertEquals("NZ", jSONPath0.getPath());
      assertNotNull(jSONPath0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("NZ"));
      assertNotNull(linkedList0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains("NZ"));
      assertNotNull(vector0);
      
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      assertNotNull(jSONPath_KeySetSegment0);
      
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 0);
      assertNotNull(jSONPath_RangeSegment0);
      
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, (Object) null, jSONPath_RangeSegment0);
      assertEquals("NZ", jSONPath0.getPath());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = vector0.add((Object) hashSet0);
      assertEquals("NZ", jSONPath0.getPath());
      assertEquals("[[]]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(vector0.contains(0));
      assertTrue(boolean0);
      
      jSONPath0.deepScan(vector0, "&pR}6", linkedList0);
      assertEquals("NZ", jSONPath0.getPath());
      assertEquals(0, linkedList0.size());
      assertEquals("[[]]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertFalse(linkedList0.contains(0));
      assertFalse(vector0.contains(0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = JSONPath.contains((Object) mockGregorianCalendar0, "fastjson.parser.safeMode");
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Short short0 = new Short((short) (-770));
      assertEquals((short) (-770), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Double double0 = new Double(2130.716895787121);
      assertEquals(2130.716895787121, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, double0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Double double0 = new Double(1.0);
      BigDecimal bigDecimal0 = BigDecimal.valueOf(8963398325558730460L, (-50790374));
      JSONPath.eqNotNull(double0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Double double0 = new Double((-8.199835664415568));
      Byte byte0 = new Byte((byte)0);
      boolean boolean0 = JSONPath.eqNotNull(double0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Double double0 = new Double(1.0);
      Byte byte0 = new Byte((byte)0);
      boolean boolean0 = JSONPath.eqNotNull(byte0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      boolean boolean0 = JSONPath.eqNotNull(byte0, 989);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(655.0);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, 5614464919154503228L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Double double0 = new Double((-1545.8789));
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-62));
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = JSONPath.eq(byte0, uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("fastjson.parser.safeMode", "w-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-62));
      boolean boolean0 = JSONPath.eq(byte0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Long long0 = new Long((-2226L));
      boolean boolean0 = JSONPath.eq((Object) null, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("w");
      boolean boolean0 = JSONPath.eq(jSONPath0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath jSONPath0 = new JSONPath("ul#k");
      jSONPath0.deepGetPropertyValues(vector0, vector0);
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", but '");
      Vector<Object> vector0 = new Vector<Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLFeatureNotSupportedException0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Z");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Collection<Object> collection0 = jSONPath0.getPropertyValues(linkedList0);
      assertFalse(collection0.contains("Z"));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\"");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-641));
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, serializeConfig0, 2166, jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.serializer.SerializeConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10");
      MockThrowable mockThrowable0 = new MockThrowable("/stackTrace/10");
      boolean boolean0 = jSONPath0.set((Object) mockThrowable0, (Object) "/stackTrace/10");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/stackTrace/8", "/stackTrace/8", 358);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.JSONPath$NotNullSegement", "=WHYJ!ydI+>.t", sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLInvalidAuthorizationSpecException0, (Object) "/stackTrace/8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Context");
      int[] intArray0 = new int[6];
      intArray0[2] = (-1753);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(125, 1443168256, 92);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "kotlin.reflect.jvm.internal.KClassImpl", (Object) null);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "g4}2Z", object0);
      assertEquals(6, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("deny", classLoader0, false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("3+3x D!+yHw2z!T", "deny", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_StringOpSegement0, false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("gxa*A'#q|J_3K0g", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONValidator$UTF8Validator");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NOT_LIKE", sQLDataException0);
      Class<Integer> class0 = Integer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "3+3x D!+yHw2z!T", sQLIntegrityConstraintViolationException0, throwableDeserializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("trim", " x%L 0N*W8SZ4o", false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RlikeSegement0, jSONPath_RlikeSegement0, true);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_WildCardSegment0, (Object) null, parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":theo=FOtVirZ+l";
      stringArray0[1] = ":theo=FOtVirZ+l";
      stringArray0[2] = "/cause/stackTrace/10";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(":theo=FOtVirZ+l", ":theo=FOtVirZ+l", ":theo=FOtVirZ+l", stringArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_MatchSegement0, false);
      JSONPath jSONPath0 = JSONPath.compile(":theo=FOtVirZ+l");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "/cause/stackTrace/10", ":theo=FOtVirZ+l", ":theo=FOtVirZ+l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":t]]Q?kqzfH6E");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(":t]]Q?kqzfH6E", "/stackTrace/9", sQLFeatureNotSupportedException0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment(", but '", ":t]]Q?kqzfH6E", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = JSONPath.compile("kYAM\"JVsEk{Z");
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, sQLFeatureNotSupportedException0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("<m8v(\u0001");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("<m8v(\u0001", 5943927444873253254L, 5943927444873253254L, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "<m8v(\u0001", "<m8v(\u0001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny", "rlike", "DisableASM", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig(115);
      JSONPath jSONPath0 = new JSONPath("getFieldValue error.", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_Operator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5TH:(6^YDGXBJRFBJ85");
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-=do}";
      stringArray0[1] = "fastjson";
      stringArray0[2] = "i2";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "-=do}", double0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("g|% ", 701L, 701L, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLSyntaxErrorException0, sQLDataException0);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("evalSize error : ", "fastjson.parser.autoTypeSupport", "fastjson.parser.deny", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(59, (-4646), (-4646));
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, jSONPath_RangeSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Ist&-yfS");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("Ist&-yfS");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_MultiPropertySegment0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("X,yEhNp-P$*T>Y@");
      Pattern pattern0 = Pattern.compile("1,b");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("X,yEhNp-P$*T>Y@", pattern0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, "1,b", "1,b", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("wq/K8Ezy.6VOwV1v", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      Float float0 = new Float(60.0F);
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("p[g>6-?/G2-5l  +K}", "fastjson.parser.deny.internal", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, float0, serializeConfig0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("com.alibaba.fastjson.JSONPath$WildCardSegment", "com.alibaba.fastjson.JSONPath$WildCardSegment", false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("like", "\\-", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "ip", jSONPath_RlikeSegement0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("$n");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("", "9\">Lyx:TK~B3p", true);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "9\">Lyx:TK~B3p", jSONPath0, "9\">Lyx:TK~B3p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.serializer.StringCodec", "com.alibaba.fastjson.serializer.StringCodec", "com.alibaba.fastjson.serializer.StringCodec", (String[]) null, false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.StringCodec");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "com.alibaba.fastjson.serializer.StringCodec", "com.alibaba.fastjson.serializer.StringCodec", "com.alibaba.fastjson.serializer.StringCodec");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("mW", (String) null, (String) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10");
      MockThrowable mockThrowable0 = new MockThrowable("/stackTrace/10");
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/stackTrace/10";
      stringArray0[1] = "jg_r0H7A.";
      stringArray0[2] = "jg_r0H7A.";
      stringArray0[3] = "jg_r0H7A.";
      stringArray0[4] = "/stackTrace/10";
      stringArray0[5] = "jg_r0H7A.";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Ho>E\"n3Z4Y\u0002m,6%", "jg_r0H7A.", intArray0, mockThrowable0);
      DataTruncation dataTruncation0 = new DataTruncation(110, true, true, 110, (-605));
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, batchUpdateException0, dataTruncation0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1024);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("jg_r0H7A.", jSONPath_ArrayAccessSegment0, jSONPath_Operator0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, class0, jSONPath_KeySetSegment0, arrayList0);
      assertFalse(boolean0);
      assertEquals(6, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(" G+GiRTLo %viA$", (-1800.5), jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("oI8z,a");
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, (Object) null, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("S{89dV q@G2%C", 5943927444873253254L, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("S{89dV q@G2%C");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      UUID uUID0 = MockUUID.fromString("S{89dV q@G2%C");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, "S{89dV q@G2%C", jSONPath_FilterSegment0, uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("0");
      String[] stringArray0 = new String[6];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("udT0:~0$Ci<pP", stringArray0, true);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath0, "json-path can not be null or empty", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = new String[20];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("g4}G2fZ", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("6QOwV1v");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, stringArray0[1], "udT0:~0$Ci<pP", stringArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(" ", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("0keC`oGei$<");
      SQLTransientException sQLTransientException0 = new SQLTransientException("|o\"MJdwa&-", " ", 39);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(114);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, sQLTransientException0, jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(5347909877633654828L);
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("n5IsCv", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("n5IsCv");
      SQLTransientException sQLTransientException0 = new SQLTransientException("n5IsCv", "n5IsCv", 44);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, longArray0[0], long0, sQLTransientException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(5347909877633654828L);
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("n5IsCv", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("n5IsCv");
      SQLTransientException sQLTransientException0 = new SQLTransientException("n5IsCv", "n5IsCv", 44);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, longArray0[0], long0, sQLTransientException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("YLWYGJ@?cFQ", (Long[]) null, true);
      JSONPath jSONPath0 = JSONPath.compile("YLWYGJ@?cFQ");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1024, 1024, 1024);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("YLWYGJ@?cFQ", "YLWYGJ@?cFQ", 1024, sQLClientInfoException0);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_IntObjInSegement0, sQLTransactionRollbackException0);
      assertNotNull(object0);
      
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_WildCardSegment0);
      assertNotNull(set0);
      
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement(",", (-2378990704010641148L), (-2378990704010641148L), false);
      Short short0 = new Short((short) (-4907));
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, parserConfig0, set0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$MaxSegment", vector0, false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MaxSegment");
      int[] intArray0 = new int[2];
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("com.alibaba.fastjson.JSONPath$MultiPropertySegment", (-2720), (-5808511793177152969L), false);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath_ValueSegment0, jSONPath_MultiIndexSegment0, vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Ist&-yfS");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = new JSONPath("Ist&-yfS");
      long[] longArray0 = new long[3];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("Ist&-yfS", longArray0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_FilterSegment0, classLoader0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$MaxSegment", vector0, false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MaxSegment");
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLNonTransientConnectionException0, (Object) null, jSONPath_MultiIndexSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$MaxSegment", vector0, true);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MaxSegment");
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLNonTransientConnectionException0, (Object) null, jSONPath_MultiIndexSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("b");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("p", "p", (-1790889994));
      SQLDataException sQLDataException0 = new SQLDataException("b", "F.l", (-1789569704));
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("p");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeSupport", "applyName", hashMap0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.parser.safeMode", sQLDataException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLRecoverableException0, sQLFeatureNotSupportedException0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, sQLClientInfoException0, sQLClientInfoException0, jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Long long0 = new Long((-1695L));
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("true");
      JSONPath jSONPath0 = JSONPath.compile("rwxrX-K]W=={|n");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, propertyNamingStrategy0, "rwxrX-K]W=={|n", long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(236, 100, 48);
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.alibaba.fastjson.JSONPath$MultiIndexSegment", "6@gN4WQ: e>hvrhBu]");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("setter not found, class ", sQLTransientException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, sQLNonTransientConnectionException0, jSONPath_WildCardSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("oI8z,a");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(21, (-1281), 21);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("oI8z,a", "oI8z,a", (-1281), sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -60
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("syntax error: ", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, bigDecimal0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("<6-Xa", true);
      SerializeConfig serializeConfig0 = new SerializeConfig(1038, false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("<6-Xa", serializeConfig0, parserConfig0);
      jSONPath_PropertySegment0.setValue(jSONPath0, "<6-Xa", parserConfig0);
      assertFalse(ParserConfig.SAFE_MODE);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("H$Z");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-XQ (Avs6Bt\"7P`T(}");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 3, line 1, column 4[-XQ (Avs6Bt\"7P`T(}
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(5347909877633654828L);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("0keC`oGei$<", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.deny", true);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, longArray0[1], long0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Double double0 = new Double((-1226.0));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("can't create non-static inner class instance.", "can't create non-static inner class instance.");
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, sQLNonTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLNonTransientConnectionException cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("XIyEhNp-P$*T>Y@");
      Long long0 = new Long((-3367L));
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, jSONPath_JSONPathParser0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$JSONPathParser cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = JSONPath.compare("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        JSONPath.compare("nin", classLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/10");
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray("/cause/stackTrace/10", stringArray0);
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      Object object1 = jSONPath_MinSegment0.eval(jSONPath0, object0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(101);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("n5IsCv", serializeConfig0, parserConfig0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, "n5IsCv", bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = new JSONPath("/N#>6WF 7ppM<");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath0, classLoader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not support jsonpath : ");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("\"o/G.]8");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'EZk)IPbZ");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("B");
      jSONPath_JSONPathParser0.accept('B');
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("wq/K8Ezy.6VOwV1v");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("q/K8Ezy.6VO", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("like");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("C<p]Z4K>C7t");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!h");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'h'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n5IsCv.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // n5IsCv.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\":");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but ':'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Q4kY-4FK");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1492L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o/G.]8");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(1L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%#Y%;f+.&O%");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("Or");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&~F>:gi");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      assertSame(jSONPath_Filter0, jSONPath_NotNullSegement0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":t]]Q?kqzfH6E");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"t]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Pl6yp=A");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@iRPZ~AsP46Dc}]eZ)");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 'i'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("S&#>Bz");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'S'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$n");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Map<String, Object> map0 = JSONPath.paths((Object) classLoader0, serializeConfig0);
      //  // Unstable assertion: assertEquals(4, map0.size());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) classLoader0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("/stackTrace/10");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/stackTrace/10", "/stackTrace/10", mockThrowable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("S", "l#w0kK6xW1llN");
      boolean boolean0 = JSONPath.set((Object) sQLInvalidAuthorizationSpecException0, "/cause/takTrace/7", (Object) sQLRecoverableException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Double double0 = new Double(1079.7043);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("wq/K8Ezy.6VOwV1v", serializeConfig0, parserConfig0);
      Integer integer0 = new Integer(368);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) double0, (Object) integer0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Sl", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath0.set((Object) serializeConfig0, (Object) jSONPath_SizeSegment0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("r");
      Stack<Object> stack0 = new Stack<Object>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = jSONPath0.set((Object) stack0, (Object) bigDecimal0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(",", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath0.set((Object) serializeConfig0, (Object) jSONPath_SizeSegment0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("r");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("|bo", "0iS>*z;!H.!<Aj", 0);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLTransactionRollbackException0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray("/cause/stackTrace/10", stringArray0);
      boolean boolean0 = JSONPath.remove(object0, "/cause/stackTrace/10");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Double double0 = new Double((-460));
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) double0, "$n", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.Double
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$Operator");
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "com.alibaba.fastjson.JSONPath$Operator", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      MockDate mockDate0 = new MockDate();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) mockDate0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Z");
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Object[] objectArray0 = new Object[10];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) propertyNamingStrategy0, "cseateCol'ecin", objectArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("r");
      Double double0 = new Double((-1226.0));
      jSONPath0.arrayAdd((Object) double0, (Object[]) null);
      assertEquals("r", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nin");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nin");
      Set<?> set0 = jSONPath0.keySet((Object) "nin");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1663);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("A7r=Zh,<W|I", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("_");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("_");
      boolean boolean0 = jSONPath0.containsValue((Object) sQLIntegrityConstraintViolationException0, (Object) "B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      boolean boolean0 = JSONPath.containsValue((Object) sQLTransientException0, "/cause/stackTrace/4", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = JSONPath.contains(object0, "0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wq/K8Ezy.6VOwV1v");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("jg_r0H7A.", "/stackTrace/10");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Object object0 = JSONPath.extract("\t", "fastjson.parser.deny.internal");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("_", "_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/9");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(56);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.size((Object) serializeConfig0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath(stringArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Z");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-10), 0, 0);
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, (Object) null, jSONPath_RangeSegment0);
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("'EZk)IPbZ", "'EZk)IPbZ", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("'EZk)IPbZ");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "between", jSONPath_Operator0, "c!{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|^/4");
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("|^/4", 1L, (-342L), false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntBetweenSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntBetweenSegement0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(41);
      JSONPath jSONPath0 = new JSONPath("/ !g-1wi[LC[c*");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "between", "-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Object object0 = JSONPath.reserveToObject(jSONPath_SizeSegment0, (String[]) null);
      assertSame(jSONPath_SizeSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) jSONPath_MinSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("not", "N#%\"7Jk%dFSF6yY+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("r", "not", (-5));
      boolean boolean0 = JSONPath.containsValue((Object) null, "not", (Object) sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      int int0 = JSONPath.size((Object) "$n", "ek71nt");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("'s*,s*'", serializeConfig0, (ParserConfig) null);
      String string0 = jSONPath0.getPath();
      assertEquals("'s*,s*'", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fh{=,HE5H4C");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Object[] objectArray0 = new Object[0];
      JSONPath.arrayAdd((Object) propertyNamingStrategy0, "cseateCol'ecin", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Set<?> set0 = JSONPath.keySet((Object) serializeConfig0, "/parent/omain/0/permissions");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(292);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_ArrayAccessSegment0, "com.alibaba.fastjson.JSONPath$RefOpSegement", (Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("([C)Z", (long[]) null, true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.StringCodec");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      Float float0 = new Float((-546.0F));
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath_IntInSegement0, float0);
      assertNotNull(hashSet0);
      
      jSONPath0.getArrayItem(hashSet0, 1613);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Sl", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) "Sl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/stackTrace/10", jSONPath_KeySetSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig(676, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation(676, false, true, 676, 108);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, serializeConfig0, dataTruncation0);
      assertTrue(boolean0);
  }
}
