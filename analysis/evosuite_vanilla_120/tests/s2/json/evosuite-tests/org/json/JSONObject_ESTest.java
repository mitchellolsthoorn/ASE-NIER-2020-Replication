/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 16:11:55 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.MultipleGradientPaint;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.sql.PseudoColumnUsage;
import java.sql.RowIdLifetime;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.jws.WebParam;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("#/");
      assertEquals("#/", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9");
      assertEquals(9, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("#/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [#/] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("9");
      assertEquals(9, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("8<6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(46);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JSONObject.indent(charArrayWriter0, 1044);
      assertEquals(1044, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertNotNull(set0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("1P\"_");
      assertEquals("1P\"_", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JSONObject jSONObject0 = new JSONObject(set0);
      assertNotNull(jSONObject0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      Number number0 = jSONObject1.optNumber("", (Number) bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertNotNull(number0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, number0.shortValue());
      assertEquals((byte)1, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("^", "^");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      float float0 = jSONObject1.optFloat("^", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("", (-2541.479F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      try { 
        jSONObject1.getBigInteger("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("LSM{bBB1w");
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("5", "5");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Object object0 = jSONObject1.remove("5");
      assertEquals("5", object0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(object0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertNotNull(jSONPointer0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.query("#/");
      assertNull(object0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      String string0 = jSONObject0.optString("bqlP&ZP>VHVy|NqB", (String) null);
      assertNull(string0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(35, jSONObject0.length());
      
      JSONPointer jSONPointer0 = new JSONPointer("#/");
      assertNotNull(jSONPointer0);
      
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float(1579.032F);
      assertEquals(1579.032F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertNotNull(jSONPointer0);
      assertEquals(0, linkedList0.size());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.optQuery("#/");
      assertNull(object0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      Number number0 = jSONObject0.optNumber("org.json.JSONObject$Null", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertNotNull(number0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, number0.shortValue());
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Number number0 = jSONObject0.optNumber((String) null, (Number) bigInteger0);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
      assertNotNull(number0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)10, number0.shortValue());
      assertEquals((byte)10, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      BigDecimal bigDecimal0 = new BigDecimal((-2870L));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-54), bigDecimal0.byteValue());
      assertEquals((short) (-2870), bigDecimal0.shortValue());
      
      Number number0 = jSONObject0.optNumber("org.json.JSONObject$Null", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertNotNull(number0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((byte) (-54), bigDecimal0.byteValue());
      assertEquals((short) (-2870), bigDecimal0.shortValue());
      assertEquals((short) (-2870), number0.shortValue());
      assertEquals((byte) (-54), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("XDpn\"f:31}M5/Kksl.m", 363.936178442877);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      long long0 = jSONObject1.optLong("XDpn\"f:31}M5/Kksl.m");
      assertEquals(363L, long0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("", (-2541.479F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      long long0 = jSONObject1.optLong("");
      assertEquals((-2541L), long0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("LSM{bBB1w", 363.936178442877);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      int int0 = jSONObject0.optInt("LSM{bBB1w");
      assertEquals(363, int0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put(" E&h~l0X#e", 1193.5485F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      float float0 = jSONObject1.optFloat(" E&h~l0X#e");
      assertEquals(1193.5485F, float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", (-2541.479F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      float float0 = jSONObject1.optFloat("");
      assertEquals((-2541.479F), float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, Thread.State> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, Thread.State>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      double double0 = jSONObject0.optDouble("2$|Epx>.%yBWX#Wo", 0.0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("LSM{bBB1w", 363.936178442877);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      double double0 = jSONObject0.optDouble("LSM{bBB1w");
      assertEquals(363.936178442877, double0, 0.01);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-48);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte) (-48), bigInteger0.byteValue());
      assertEquals((short)208, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-48)}, byteArray0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("#/", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte) (-48), bigInteger0.byteValue());
      assertEquals((short)208, bigInteger0.shortValue());
      assertEquals((short)208, bigInteger1.shortValue());
      assertEquals((byte) (-48), bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-48)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float float0 = new Float(1579.032F);
      assertEquals(1579.032F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("A JSONObject text must end with '}'", (BigDecimal) null);
      assertNull(bigDecimal0);
      assertEquals(1, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("istrim", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("G:0bD^fi0x2'xd", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2483);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 2483);
      assertNotNull(bigDecimal0);
      assertEquals((short)2483, bigDecimal0.shortValue());
      assertEquals((byte) (-77), bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("null", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)2483, bigDecimal0.shortValue());
      assertEquals((byte) (-77), bigDecimal0.byteValue());
      assertEquals((short)2483, bigDecimal1.shortValue());
      assertEquals((byte) (-77), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("] is not a JSONArray.", true);
      assertNotNull(mockFileOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      LinkedList<WebParam.Mode> linkedList0 = new LinkedList<WebParam.Mode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("0000", (Collection<?>) linkedList0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Desktop.Action, MockFileReader> hashMap0 = new HashMap<Desktop.Action, MockFileReader>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A", hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = jSONObject1.isNull("A");
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation(";MT#zD\"{f>t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", (-2541.479F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      int int0 = jSONObject0.getInt("");
      assertEquals((-2541), int0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("LSM{bBB1w", 0.0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      float float0 = jSONObject1.getFloat("LSM{bBB1w");
      assertEquals(0.0F, float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", (-1.0F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      float float0 = jSONObject1.getFloat("");
      assertEquals((-1.0F), float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("LSM{bBB1w", 363.936178442877);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      double double0 = jSONObject1.getDouble("LSM{bBB1w");
      assertEquals(363.936178442877, double0, 0.01);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", (-2541.479F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      double double0 = jSONObject0.getDouble("");
      assertEquals((-2541.47900390625), double0, 0.01);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8192);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("Unable to increment [", (Object) byteArrayInputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(9, byteArray0.length);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = (ByteArrayInputStream)jSONObject0.get("Unable to increment [");
      assertSame(jSONObject0, jSONObject1);
      assertSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotNull(byteArrayInputStream1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(9, byteArrayInputStream1.available());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, "", 92, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(105);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(35, jSONObject0.length());
      
      try { 
        jSONObject0.write((Writer) charArrayWriter0, (-1909438157), 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: methods
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 1820, 1820);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.put(2, 0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        JSONObject.quote("JSONArray initial value should be a string or collection or array.", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("intValueExact");
      assertNotNull(mockFileWriter0);
      
      HashMap<MockPrintStream, OutputStreamWriter> hashMap0 = new HashMap<MockPrintStream, OutputStreamWriter>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      OutputStreamWriter outputStreamWriter0 = hashMap0.put((MockPrintStream) null, mockFileWriter0);
      assertNull(outputStreamWriter0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONObject0.put("intValueExact", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      LinkedList<PipedReader> linkedList0 = new LinkedList<PipedReader>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 4036.3F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(48);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "2.1620282339210113");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertNotNull(jSONObject0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("lfzG&DdR(mI98M");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = new Locale("", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name , locale 
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("XDpn\"f:31}M5/Kksl.m", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1043));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1043
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = MockFile.createTempFile("08yGHnP", "m`9+AG\"(WO");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/08yGHnP0m`9+AG\"(WO", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("08yGHnP0m`9+AG\"(WO", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      assertNotNull(mockFileWriter0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "08yGHnP");
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 0, (-4276));
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/08yGHnP0m`9+AG\"(WO", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("08yGHnP0m`9+AG\"(WO", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("08yGHnP");
      assertNotNull(mockFileWriter0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "08yGHnP");
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 18, (-4276));
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      MockFile mockFile0 = new MockFile("QOf ^M`ZkO:!b#^mY");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      JSONObject jSONObject1 = jSONObject0.put("#/", (Object) mockFileWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("QOf ^M`ZkO:!b#^mY", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals("QOf ^M`ZkO:!b#^mY", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, (-722), 32);
      assertSame(jSONObject0, jSONObject1);
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("QOf ^M`ZkO:!b#^mY", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals("QOf ^M`ZkO:!b#^mY", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject0.write((Writer) charArrayWriter0, 8, 8);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(2, charArrayWriter0.size());
      assertEquals("{}", charArrayWriter0.toString());
      assertEquals("{}", charArrayWriter1.toString());
      assertEquals(2, charArrayWriter1.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Object object0 = JSONObject.wrap(charArrayWriter0);
      assertNotNull(object0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(set0);
      assertNotNull(jSONArray0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer((-722));
      assertEquals((-722), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = JSONObject.wrap(integer0);
      assertEquals((-722), object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.wrap("org.json.JSONObject@0000000001");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.BASELINE;
      boolean boolean0 = linkedList0.offerLast(groupLayout_Alignment0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(groupLayout_Alignment0));
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertNotNull(jSONArray0);
      assertEquals(1, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertTrue(linkedList0.contains(groupLayout_Alignment0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      
      try { 
        jSONArray0.put(19, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      JSONObject.testValidity(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("Nbm@$8)`ul");
      assertEquals("Nbm@$8)`ul", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Writer writer0 = JSONObject.quote("1P\"_", (Writer) stringWriter0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertNotNull(writer0);
      assertEquals("\"1P\\\"_\"", stringWriter0.toString());
      assertEquals("\"1P\\\"_\"", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(70);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)JSONObject.quote("d/mC9ne*e", (Writer) charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals(11, charArrayWriter0.size());
      assertEquals("\"d/mC9ne*e\"", charArrayWriter0.toString());
      assertEquals(11, charArrayWriter1.size());
      assertEquals("\"d/mC9ne*e\"", charArrayWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)JSONObject.quote("\\Jr)Fu&UNp7U_DTLhc", (Writer) charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals("\"\\\\Jr)Fu&UNp7U_DTLhc\"", charArrayWriter0.toString());
      assertEquals(21, charArrayWriter0.size());
      assertEquals(21, charArrayWriter1.size());
      assertEquals("\"\\\\Jr)Fu&UNp7U_DTLhc\"", charArrayWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)JSONObject.quote("", (Writer) charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter1.size());
      assertEquals("\"\"", charArrayWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("java.io.StringWriter@0000000001", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("LSM{bBB1w");
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = JSONObject.quote((String) null, (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2483);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("K4NKBs*ax(", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("Stepping back two steps is not supported", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("", (-2541.479F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      String string0 = jSONObject0.optString("", "");
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Number number0 = jSONObject0.optNumber("T?k", (Number) null);
      assertNull(number0);
      assertEquals(0, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("has", "gettoLowerCase");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      long long0 = jSONObject1.optLong("has", (-2203L));
      assertEquals((-2203L), long0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("(/Fz0DP`?*9G", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      long long0 = jSONObject0.optLong("(/Fz0DP`?*9G", 1L);
      assertEquals(1L, long0);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      long long0 = jSONObject0.optLong("2.t zJ;", 0L);
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      int int0 = jSONObject0.optInt("#/", (-722));
      assertEquals((-722), int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(39);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      float float0 = jSONObject0.optFloat("", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("t)EVn`+W)\u0001x*]hxR", "t)EVn`+W)\u0001x*]hxR");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject1.accumulate("t)EVn`+W)\u0001x*]hxR", "t)EVn`+W)\u0001x*]hxR");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      
      double double0 = jSONObject0.optDouble("t)EVn`+W)\u0001x*]hxR", (-920.62781));
      assertEquals((-920.62781), double0, 0.01);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.increment("");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      double double0 = jSONObject0.optDouble("", (double) (-265));
      assertEquals(1.0, double0, 0.01);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("t)EVn`+W)\u0001x*]hxR", "t)EVn`+W)\u0001x*]hxR");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      double double0 = jSONObject0.optDouble("t)EVn`+W)\u0001x*]hxR", (-920.62781));
      assertEquals((-920.62781), double0, 0.01);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.optBoolean("K4NKBs*ax(", true);
      assertTrue(boolean0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("Missing value", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.READ;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type1 = jSONObject0.optEnum(class0, "Missing value", processBuilder_Redirect_Type0);
      assertEquals(ProcessBuilder.Redirect.Type.READ, processBuilder_Redirect_Type1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(processBuilder_Redirect_Type0, processBuilder_Redirect_Type1);
      assertSame(processBuilder_Redirect_Type1, processBuilder_Redirect_Type0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType1 = jSONObject0.optEnum(class0, "a[5LMB'", multipleGradientPaint_ColorSpaceType0);
      assertEquals(MultipleGradientPaint.ColorSpaceType.LINEAR_RGB, multipleGradientPaint_ColorSpaceType1);
      assertSame(multipleGradientPaint_ColorSpaceType0, multipleGradientPaint_ColorSpaceType1);
      assertSame(multipleGradientPaint_ColorSpaceType1, multipleGradientPaint_ColorSpaceType0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.opt(":");
      assertNull(object0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Desktop.Action, MockFileReader> hashMap0 = new HashMap<Desktop.Action, MockFileReader>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("? @8^:", object0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = jSONObject1.isEmpty();
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float(1579.032F);
      assertEquals(1579.032F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("rCKC)<i`bT(", "rCKC)<i`bT(");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      try { 
        jSONObject1.getBoolean("rCKC)<i`bT(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float(1579.032F);
      assertEquals(1579.032F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("rCKC)<i`bT(", 1579.032F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      try { 
        jSONObject1.getBoolean("rCKC)<i`bT(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("8", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Object object0 = jSONObject1.get("8");
      assertEquals(true, object0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(object0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      try { 
        jSONObject0.get("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Class<LayoutStyle.ComponentPlacement> class0 = LayoutStyle.ComponentPlacement.class;
      jSONObject0.optEnum(class0, "tXxCP}~`+f02|)xps");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("] is not a JSONArray.", true);
      assertNotNull(mockFileOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Set<String> set0 = jSONObject0.keySet();
      assertNotNull(set0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.remove("5");
      assertNull(object0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rCKC)<i`bT(");
      assertNotNull(mockFileOutputStream0);
      
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertNotNull(map0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("? @8^:", object0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(map0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertNotNull(map0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("(/Fz0DP`?*9G", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject0.append("", "(/Fz0DP`?*9G");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      
      String string0 = jSONObject2.toString(12);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 1551);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Collection<String> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("org.json.JSONObject", collection0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(collection0.contains("org.json.JSONObject"));
      
      String string0 = jSONObject0.toString(2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Desktop.Action, Integer> hashMap0 = new HashMap<Desktop.Action, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject(32);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("Null key.", hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 8, 60);
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertNotNull(writer0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(35, jSONObject0.length());
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Float, StringReader> hashMap0 = new HashMap<Float, StringReader>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000004.", (-324.65482F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject0.toString(128);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Writer writer0 = JSONObject.writeValue(stringWriter0, (Object) null, 2165, 2165);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertNotNull(writer0);
      assertEquals("null", stringWriter0.toString());
      assertEquals("null", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertNotNull(jSONObject0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = JSONObject.wrap(double0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = JSONObject.wrap(float0);
      assertEquals(0.0F, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = JSONObject.wrap(long0);
      assertEquals(1L, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Short short0 = new Short((short) (-1625));
      assertEquals((short) (-1625), (short)short0);
      assertNotNull(short0);
      
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short) (-1625), object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Character character0 = new Character('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      Object object0 = JSONObject.wrap(character0);
      assertEquals('N', object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertNotNull(jSONArray0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = (JSONArray)JSONObject.wrap(jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      assertNotNull(jSONObject0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(35, jSONObject0.length());
      
      try { 
        jSONObject0.put("a JSON pointer should start with '/' or '#/'", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      try { 
        jSONObject0.put("-QL^gJ", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("0..");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("2.1620282339210113");
      assertNotNull(number0);
      assertEquals((short)2, number0.shortValue());
      assertEquals((byte)2, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("-Fq");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Fq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("1R35(p0&;pp!\"E~ol");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("des");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      MockFile mockFile0 = new MockFile("#/");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      JSONObject jSONObject1 = jSONObject0.put("#/", (Object) mockFileWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("#", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("#", mockFile0.getName());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertTrue(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("#", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("#", mockFile0.getName());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotNull(jSONObject2);
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      
      boolean boolean0 = jSONObject0.similar(jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(boolean0);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{uqb=4B \"dW)M8|[|");
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      boolean boolean0 = jSONObject0.similar("{uqb=4B \"dW)M8|[|");
      assertFalse(boolean0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      try { 
        jSONObject0.getJSONObject("b'8q3A~Y9v'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      try { 
        jSONObject0.getDouble("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      assertNotNull(jSONObject0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1699);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(3, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rCKC)<i`bT(");
      assertNotNull(mockFileOutputStream0);
      
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      String string0 = jSONObject0.toString((-1881));
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      MockFile mockFile0 = new MockFile("#/");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      JSONObject jSONObject1 = jSONObject0.put("#/", (Object) mockFileWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("#", mockFile0.getName());
      assertEquals("#", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject1.optString("#/");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("#", mockFile0.getName());
      assertEquals("#", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("(R&/;yr3%||J", (-1345));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Integer integer0 = new Integer(9);
      assertEquals(9, (int)integer0);
      assertNotNull(integer0);
      
      Number number0 = jSONObject1.optNumber("(R&/;yr3%||J", (Number) integer0);
      assertFalse(number0.equals((Object)integer0));
      assertEquals((-1345), number0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(number0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("K4NKBs*ax(", jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.optNumber("K4NKBs*ax(", (Number) null);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("ekc*FG", "ekc*FG");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      long long0 = jSONObject1.optLong("ekc*FG");
      assertEquals(0L, long0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put(",pr({]qFn", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      long long0 = jSONObject1.optLong(",pr({]qFn", 4381L);
      assertEquals(0L, long0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("W3w/jh^Pp[JXqXV*9");
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject1.accumulate("", "");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      
      int int0 = jSONObject2.optInt("", 93);
      assertEquals(93, int0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("LSM{bBB1w", 0.0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      int int0 = jSONObject1.optInt("LSM{bBB1w", 65);
      assertEquals(0, int0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("5", "5");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      int int0 = jSONObject1.optInt("5", 93);
      assertEquals(5, int0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("-0", boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      float float0 = jSONObject0.optFloat("-0", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("5", "5");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      float float0 = jSONObject0.optFloat("5", 0.0F);
      assertEquals(5.0F, float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      assertNotNull(jSONObject0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("M[2#],", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      
      float float0 = jSONObject0.optFloat("M[2#],", 0.0F);
      assertEquals(10.0F, float0, 0.01F);
      assertSame(jSONObject0, jSONObject1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(18);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("get", (-734));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      double double0 = jSONObject0.optDouble("get");
      assertEquals((-734.0), double0, 0.01);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", (-2541.479F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("", bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)19, bigInteger1.byteValue());
      assertEquals((short) (-2541), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("LSM{bBB1w", 363.936178442877);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = jSONObject1.optBigInteger("LSM{bBB1w", bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)363, bigInteger1.shortValue());
      assertEquals((byte)107, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(16);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("/5[A2Sb#&XX_\")_$~86", "6#l");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject1.optBigInteger("/5[A2Sb#&XX_\")_$~86", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.increment("");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("", bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      assertEquals(RoundingMode.DOWN, roundingMode0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("^", roundingMode0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 110);
      assertNotNull(bigDecimal0);
      assertEquals((short)110, bigDecimal0.shortValue());
      assertEquals((byte)110, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("^", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(0, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((short)110, bigDecimal0.shortValue());
      assertEquals((byte)110, bigDecimal0.byteValue());
      assertEquals((byte)110, bigDecimal1.byteValue());
      assertEquals((short)110, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "(/Fz0DP`?*9G");
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Class<RowIdLifetime> class0 = RowIdLifetime.class;
      try { 
        jSONObject1.getEnum(class0, "] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("5", "5");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      try { 
        jSONObject1.increment("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("LSM{bBB1w", 363.936178442877);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject0.increment("LSM{bBB1w");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      assertNotNull(jSONObject0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("QZ39qx_*v#e9D}", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject1.increment("QZ39qx_*v#e9D}");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("5", "5");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      boolean boolean0 = jSONObject0.has("5");
      assertTrue(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      boolean boolean0 = jSONObject0.has("CXP*<xQo");
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("5", "5");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      String string0 = jSONObject1.getString("5");
      assertEquals("5", string0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
      
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      assertNotNull(jSONObject0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("getDeclaringClass", (int) (byte)37);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      long long0 = jSONObject0.getLong("getDeclaringClass");
      assertEquals(37L, long0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOnce(" E&h~l0X#e", " E&h~l0X#e");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      try { 
        jSONObject0.getLong(" E&h~l0X#e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Float float0 = new Float(1579.032F);
      assertEquals(1579.032F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("rCKC)<i`bT(", (-1218.2976F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      try { 
        jSONObject0.getJSONArray("rCKC)<i`bT(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("'AWup)LQ0\"4", 748);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      int int0 = jSONObject0.getInt("'AWup)LQ0\"4");
      assertEquals(748, int0);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("08yGHnP");
      assertNotNull(mockFileWriter0);
      
      JSONObject jSONObject1 = jSONObject0.put("08yGHnP", (Object) mockFileWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      try { 
        jSONObject1.getInt("08yGHnP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("K4NKBs*ax(", (-1L));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Number number0 = jSONObject0.getNumber("K4NKBs*ax(");
      assertEquals((-1L), number0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(number0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Nesting too deep.", 363.936178442877);
      float float0 = jSONObject1.getFloat("Nesting too deep.");
      assertEquals(363.9362F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("5", "5");
      try { 
        jSONObject0.getFloat("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("5", 0.0F);
      double double0 = jSONObject0.getDouble("5");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("5", "5");
      try { 
        jSONObject1.getDouble("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      try { 
        jSONObject0.getBigDecimal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("XDpn\"fo31}M5/Kksl.m", (double) 16);
      boolean boolean0 = jSONObject1.optBoolean("XDpn\"fo31}M5/Kksl.m", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      JSONObject jSONObject1 = jSONObject0.put("(/Fz0DP`?*9G", false);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject1.getBoolean("(/Fz0DP`?*9G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = JSONObject.doubleToString(3644.41);
      assertEquals("3644.41", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26);
      jSONObject0.append("", "");
      try { 
        jSONObject0.putOnce("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      try { 
        jSONObject1.append("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      HashMap<Short, ByteArrayOutputStream> hashMap0 = new HashMap<Short, ByteArrayOutputStream>();
      Short short0 = new Short((short) (-1962));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      hashMap0.put(short0, byteArrayOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      hashMap0.put((Long) null, "] not found.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      HashMap<Locale.FilteringMode, MockPrintWriter> hashMap0 = new HashMap<Locale.FilteringMode, MockPrintWriter>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      hashMap0.put(locale_FilteringMode0, (MockPrintWriter) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{uqb=4B \"dW)M8|[|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 5 [character 6 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      Object object1 = JSONObject.wrap(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("0000", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.optQuery("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.optString((String) null);
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<PseudoColumnUsage, Desktop.Action> hashMap0 = new HashMap<PseudoColumnUsage, Desktop.Action>();
      jSONObject0.put("0", (Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HashMap<ByteArrayInputStream, Authenticator.RequestorType> hashMap0 = new HashMap<ByteArrayInputStream, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(816);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("VbZp#r]92!+X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      HashMap<Desktop.Action, MockFileReader> hashMap0 = new HashMap<Desktop.Action, MockFileReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Double double0 = new Double(1);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(39);
      Number number0 = jSONObject0.optNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
