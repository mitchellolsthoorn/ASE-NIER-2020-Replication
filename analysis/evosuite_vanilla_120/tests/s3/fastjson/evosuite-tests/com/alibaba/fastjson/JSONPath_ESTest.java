/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 16:37:42 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("m");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      boolean boolean0 = jSONPath0.contains((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Short short0 = Short.valueOf((short)2);
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$*M}^<");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(60, 105, (-1130));
      JSONPath.RangeSegment jSONPath_RangeSegment1 = new JSONPath.RangeSegment(3253, 2, 2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment1.eval(jSONPath0, jSONPath_RangeSegment0, sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1624
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g@<'N3bs%T8|&");
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, (-193));
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, ";h6??k", jSONPath_MultiIndexSegment0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*_di6HpZY5g0AXMK;d ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. *_di6HpZY5g0AXMK;d 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("d=K=LfM");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0", serializeConfig0, parserConfig0);
      jSONPath0.init();
      assertEquals("/stackTrace/0", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")IiJ{ vR1Ko/38U2 ");
      jSONPath_JSONPathParser0.parseArrayAccess(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((byte)0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9B,\"\"QI,?E)3P1V><i$");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0000-00-00");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~xgG/lPUO");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("N|t)?}q6pA", sQLRecoverableException0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_ValueSegment0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("%", "PropertyNamingStrategy$1", jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_StringOpSegement0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[]");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.lang.AutoCloseable");
      jSONPath0.init();
      assertEquals("java.lang.AutoCloseable", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("like", "like", false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("Qt>n<OQx$", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, serializeConfig0, serializeConfig0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("lG67d6%c y'SF;n");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.lang.AutoCloseable");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not support jsonpath : ");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("AqQH4F\"66PSe>n9$p", false);
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, jSONPath_PropertySegment0, jSONPath_JSONPathParser0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Ljava/lang/Object;Ljava/lang/String;");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("v~&]I!JEL`5>s");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('3');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(3);
      JSONPath jSONPath0 = new JSONPath(">#!NlLOw-dv");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("false");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, ">#!NlLOw-dv", sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v~&]I!JEL`5>s");
      Vector<Object> vector0 = new Vector<Object>();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SQLWarning sQLWarning0 = new SQLWarning("Oq");
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLWarning0, vector0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g@<'N3bs%T8|&");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-690), 62, (-123008));
      // Undeclared exception!
      jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("MiscCodec not support ", true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("'WIqxNh", "MiscCodec not support ", 5);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("O;-:bnu0}C.O(2", "Or");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path 9B,\"\"QI,?E)3P1V><i$, segement MiscCodec not support 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7g|1WR7?");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(2898L);
      assertEquals(2905.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("9", "9");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      JSON.DEFAULT_GENERATE_FEATURE = (-992);
      String string0 = jSONPath0.toJSONString();
      assertEquals("[\n\t\n]", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/stackTrace/2", "/stackTrace/2", 67);
      int int0 = jSONPath0.size((Object) sQLInvalidAuthorizationSpecException0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jj");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      boolean boolean0 = jSONPath0.setPropertyValue("jj", "jj", 0L, sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      Integer integer0 = Integer.getInteger("w4Zq/oC'ovA", 111);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONPath.read("", "E#%");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(9999999);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_KeySetSegment0, "/");
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      Object object0 = jSONPath0.getPropertyValue((Object) null, (String) null, (short)2507);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("getName", serializeConfig0, parserConfig0);
      Class<Date> class0 = Date.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BQc?.o~o=]3/");
      Object object0 = jSONPath0.getArrayItem("oThH1'I4/j2Uu]N?'", 0);
      assertEquals("oThH1'I4/j2Uu]N?'", object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      Object object0 = new Object();
      int int0 = jSONPath0.evalSize(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("type not match. ", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize("type not match. ");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SerializeConfig serializeConfig0 = new SerializeConfig(871);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("Or", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize(mockGregorianCalendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("v~&]I!JEL`5>s");
      JSONPath jSONPath0 = new JSONPath("z^]s.&[");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_JSONPathParser0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("w");
      Set<?> set0 = jSONPath0.evalKeySet("w");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("`7:frO");
      Object object0 = JSONPath.eval((Object) jSONPath_NullSegement0, ".");
      assertSame(jSONPath_NullSegement0, object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      boolean boolean0 = JSONPath.contains((Object) calendar0, ",");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = JSONPath.compare("HJJ+%=cgQhf", "HJJ+%=cgQhf");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = JSONPath.compare("4eJ{S0*V.3g", "l]c|U0]gX2Jo8*_g");
      assertEquals((-56), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.size((Object) "null", "LE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{\"$ref\":\"$\"}");
      // Undeclared exception!
      try { 
        JSONPath.size((Object) sQLFeatureNotSupportedException0, "{\"$ref\":\"$\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"$ref\":\"$\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("@");
      Class<Integer> class0 = Integer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("/3", serializeConfig0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) classLoader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", (SerializeConfig) null, parserConfig0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("AqQH4F\"66PSe>n9$p");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : AqQH4F\"66PSe>n9$p
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("?['4ol#G$0");
      Class<DataTruncation> class0 = DataTruncation.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      // Undeclared exception!
      jSONPath0.setPropertyValue(javaBeanSerializer0, "?['4ol#G$0", (-402L), propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("d", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("between");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("(zH>J*l0VUzHS8Wps", "@,L", (-1000L), sQLTimeoutException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("step must greater than zero : ");
      SQLWarning sQLWarning0 = new SQLWarning("step must greater than zero : ");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "(Ljava/lang/String;Z)V", 2430L, sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 8, "jJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("S:#IoL:XE\"");
      JSONPath jSONPath0 = new JSONPath("?&E<dk+S?ZDh^]U4UO9");
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "fastjson.parser.autoTypeAccept", (Object) jSONPath_JSONPathParser0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.fastjson.JSONPath$MaxSegment", 1213L, jSONPath_Operator0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "jJ", "com.alibaba.fastjson.JSONPath$MaxSegment", (Object) jSONPath_IntOpSegement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/stackTrace/0");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLSyntaxErrorException0, "/stackTrace/0", (Object) "fY,qYn^tP\"I|/)q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath0, (String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) bigDecimal0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) hashMap0, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("1C");
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONPath0.set((Object) bigInteger0, (Object) "1C", true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      Integer integer0 = Integer.getInteger("", 111);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_KeySetSegment0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Jn)f ");
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "Jn)f ", (Object) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("F");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/stackTrace/5";
      stringArray0[1] = "/stackTrace/5";
      stringArray0[2] = "/stackTrace/5";
      stringArray0[3] = "w[:^";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-72));
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(byte0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = new Float((double) 118);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("+", float0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "+";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_FilterSegment0, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[&");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fastjson.parser.autoTypeSupport";
      stringArray0[1] = "/stackTrace/2";
      stringArray0[2] = "[&";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLTimeoutException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MinguoDate minguoDate0 = MockMinguoDate.now();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/stackTrace/5";
      stringArray0[1] = "/stackTrace/5";
      stringArray0[2] = "w[:^";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(minguoDate0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.AutoCloseable";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_KeySetSegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.US;
      JSONPath jSONPath0 = JSONPath.compile("E@S1^98-'+D5;>&cDh");
      // Undeclared exception!
      jSONPath0.removePropertyValue(locale0, "E@S1^98-'+D5;>&cDh", false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("type not match. ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue("type not match. ", "jsonpath can not be null", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "Jrl6|DkG*zW5|(6M", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      JSONPath.remove((Object) javaBeanDeserializer0, "array");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("%");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_NotNullSegement0, "%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("jJ");
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.asm.MethodCollector");
      // Undeclared exception!
      try { 
        jSONPath1.remove((Object) collection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("E@");
      // Undeclared exception!
      jSONPath0.remove((Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("@");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("HJJ+%=cgQhf");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : HJJ+%=cgQhf
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("fastjson.parser.autoTypeSupport", "fastjson.parser.deny.internal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("/stackTrace/6", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) class0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.alibaba.fastjson.util.IOUtils");
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) sQLNonTransientConnectionException0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/6");
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("/3", serializeConfig0, parserConfig0);
      MockDate mockDate0 = new MockDate(0, 0, 0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) mockDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rPdrWU}UF)kV7JT");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : rPdrWU}UF)kV7JT
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("[&", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("w[:^");
      jSONPath0.init();
      assertEquals("w[:^", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*1N");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", (SerializeConfig) null, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/stackTrace/8", "fastjson.parser.deny", sQLWarning0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("jJ");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(collection0, "EQ", 453L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("x_UBB?m= _E4ldf=c2/");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("JSONPath$ValueSegment", (SerializeConfig) null, parserConfig0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("WmeK=CA0,T3");
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RegMatchSegement", serializeConfig0, (ParserConfig) null);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(871);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("K_P?", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation(36, false, false, 36, 36);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(dataTruncation0, 36);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", (String) null, parserConfig0, 3689, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("Um[,>j^piK", "Um[,>j^piK", parserConfig0, 32, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2Um[,>j^piK
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("AutoCloseable", "/stackTrace/4", (ParserConfig) null, (-992), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("Zf", "i!L}{%p?KwFP_%", parserConfig0, 92, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : i!L}{%p?KwFP_%
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "*1di6HpZ5g0AMK;d ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".Z3Pzvc3'Ytr,");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("H>C!G?2", parserConfig0, 40);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : .Z3Pzvc3'Ytr,
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(871);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("K_P?", serializeConfig0, parserConfig0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("AllowComment", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) javaBeanSerializer0, "com.alibaba.fastjson.JSONPath$JSONPathParser");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) aSMDeserializerFactory0, "/3");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("vOIHO8Q[)x");
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      Short short0 = new Short((short)1093);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 9B,\"\"QI,?E)3P1V><i$
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Short short0 = new Short((short)20);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(short0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(class0, ";Ljava/lang/String;Ljava/lang/Object;)V", (-1014497654951707614L), ";Ljava/lang/String;Ljava/lang/Object;)V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.lang.AutoCloseable");
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      SQLDataException sQLDataException0 = new SQLDataException("java.lang.AutoCloseable", "java.lang.AutoCloseable", 105);
      // Undeclared exception!
      jSONPath0.deepSet(javaBeanDeserializer0, "java.lang.AutoCloseable", (byte)2, sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("beanInfo", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(89, 43, 43, (-3250), 6, 6);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockGregorianCalendar0, "(UR]H:?;", (-5194641081268104286L), aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path beanInfo, segement (UR]H:?;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      Stack<Object> stack0 = new Stack<Object>();
      Class<Method> class0 = Method.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, "", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LE");
      Class<JSONPath.MultiPropertySegment> class0 = JSONPath.MultiPropertySegment.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("LE", "LE", 70);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("LE", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath(".$&pZ=DZ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) ".$&pZ=DZ", (Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : .$&pZ=DZ
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath.contains((Object) "w", "[&");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Short short0 = new Short((short)0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) short0, "xb!oa`I}5jn9-tGH/kl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : xb!oa`I}5jn9-tGH/kl
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/3", serializeConfig0, parserConfig0);
      Float float0 = new Float((double) 0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, "fastjson.parser.safeMode");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[] longArray0 = new long[5];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("'Ca:K.", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("/3");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_IntInSegement0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(167, 167, 63);
      JSONPath jSONPath0 = JSONPath.compile("w[:^");
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_RangeSegment0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path w[:^
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("not support jsonpath : ", true);
      JSONPath jSONPath0 = JSONPath.compile("not support jsonpath : ");
      jSONPath_PropertySegment0.setValue(jSONPath0, (Object) null, (Object) null);
      assertEquals("not support jsonpath : ", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("java.lang.AutoCloseable", "java.lang.AutoCloseable", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path java.lang.AutoCloseable, segement java.lang.AutoCloseable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("L");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, "L", 3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, vector0, 2881, vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2881
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("writeFieldNameDirect");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("eX0~ln", (Map<String, ClientInfoStatus>) null);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("j", false);
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("j", sQLClientInfoException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_MultiIndexSegment0, sQLDataException0);
      assertEquals("java.sql.SQLDataException: j", sQLDataException0.toString());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(18);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("n,eR(~6\"|:Hwnng{", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.safeMode", false);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_PropertySegment0, jSONPath_WildCardSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/5");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("expect '");
      jSONPath_JSONPathParser0.readName();
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "HJJ+%=cgQhf";
      stringArray0[2] = "HJJ+%=cgQhf";
      stringArray0[3] = ";h6??k";
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("g@<'N3bs%T8|&", "HJJ+%=cgQhf", false);
      JSONPath jSONPath0 = JSONPath.compile("g@<'N3bs%T8|&");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepGetPropertyValues(jSONPath_RlikeSegement0, arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("F");
      boolean boolean0 = jSONPath0.set((Object) "F", (Object) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("illegal state, textLength is zero");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("E@");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/2");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLInvalidAuthorizationSpecException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("/3", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) serializeConfig0.propertyNamingStrategy, (Object[]) null);
      assertTrue(serializeConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = jSONPath0.containsValue((Object) uUID0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".$&pZ=DZ");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // .
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("HJJ+%=cgQhf");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SerializeConfig serializeConfig0 = new SerializeConfig(58, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$SizeSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(88);
      JSONPath jSONPath0 = new JSONPath(":");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(":", ":");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, sQLIntegrityConstraintViolationException0, jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(700, true, false, 187, 700);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/stackTrace/1";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(dataTruncation0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(187, false, false, 187, 700);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.AutoCloseable";
      stringArray0[1] = "java.lang.AutoCloseable";
      stringArray0[2] = "java.lang.AutoCloseable";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(dataTruncation0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(propertyNamingStrategy0, stringArray0);
      assertSame(propertyNamingStrategy0, object0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object object0 = JSONPath.reserveToObject(classLoader0, (String[]) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("m", stringArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("u9>0NxHTQ", "like", 0, (Throwable) null);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLTransactionRollbackException0, (String[]) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(bigInteger0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      Stack<Object> stack0 = new Stack<Object>();
      Set<?> set0 = jSONPath0.evalKeySet(stack0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(217, 217, (-1982342024));
      JSONPath jSONPath0 = new JSONPath("WmeK=CA0,T3");
      int[] intArray0 = new int[7];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("yHWdZ", clientInfoStatus0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("safeMode");
      SQLDataException sQLDataException0 = new SQLDataException("yHWdZ", "yHWdZ", 5, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("yHWdZ", "yHWdZ", hashMap0, sQLDataException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLClientInfoException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, batchUpdateException0, hashMap0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("*", (-422L), (-422L), false);
      JSONPath jSONPath0 = JSONPath.compile("*");
      int int0 = jSONPath0.size((Object) jSONPath_IntBetweenSegement0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("AqQH4F\"66PSe>n9$p");
      SQLDataException sQLDataException0 = new SQLDataException("AqQH4F\"66PSe>n9$p", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLDataException0, "/stackTrace");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLDataException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("MiscCodec not support ", true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("oH}1Z06", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("TK*ZI$jg1Bhi", hashMap0);
      SQLDataException sQLDataException0 = new SQLDataException("in", "like", sQLClientInfoException0);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Double double0 = new Double(2113.3407945707);
      Map<String, Object> map0 = JSONPath.paths((Object) double0);
      boolean boolean0 = JSONPath.remove((Object) map0, "like");
      assertFalse(map0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("~01xH9Df'EaN4=%", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("/stackTrace/7", "support", 1955);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.deny", "fastjson.parser.safeMode", sQLDataException0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("a!h~Xso$!pnub5m", "pDby)\"Vu", (-1615119152));
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, sQLTimeoutException0, sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(sQLTransientConnectionException0, "fastjson.parser.deny.internal", (-3928183487890302916L), object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLTransientConnectionException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      Stack<Object> stack0 = new Stack<Object>();
      SQLWarning sQLWarning0 = new SQLWarning();
      jSONPath0.deepScan(sQLWarning0, "/stackTrace/5", stack0);
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ", minimumCapacity=";
      stringArray0[1] = "authority";
      stringArray0[2] = "jJ";
      stringArray0[3] = "value not found in path ";
      stringArray0[4] = "principal";
      stringArray0[5] = "value not found in path ";
      stringArray0[6] = "' ]'LE?e'F>bZEEfml";
      stringArray0[7] = "value not found in path ";
      stringArray0[8] = "value not found in path ";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, (Object) null, "authority");
      boolean boolean0 = jSONPath0.set((Object) arrayList0, (Object) "principal");
      assertTrue(boolean0);
      assertEquals(9, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("jJ");
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) collection0, "/stackTrace/5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("in");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      boolean boolean0 = jSONPath0.contains((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Double double0 = new Double((-342.6359));
      BigDecimal bigDecimal0 = new BigDecimal((long) (byte) (-89));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Double double0 = new Double(1.0);
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Double double0 = new Double(3463);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(double0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Double double0 = new Double(0.0);
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Float float0 = new Float(1001.105853219);
      Short short0 = new Short((short)41);
      boolean boolean0 = JSONPath.eqNotNull(float0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Short short0 = new Short((short)127);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Short short0 = new Short((short)127);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(short0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Short short0 = new Short((short) (-1317));
      Byte byte0 = new Byte((byte) (-24));
      boolean boolean0 = JSONPath.eqNotNull(short0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Integer integer0 = new Integer((-721));
      boolean boolean0 = JSONPath.eqNotNull(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Integer integer0 = new Integer((-721));
      BigDecimal bigDecimal0 = new BigDecimal(2073L);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = JSONPath.eq(bigInteger0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eq(bigInteger0, parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight(67);
      boolean boolean0 = JSONPath.eq(bigInteger1, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      boolean boolean0 = JSONPath.eq(sQLRecoverableException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      boolean boolean0 = JSONPath.eq((Object) null, serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("not", "not", (-1077), hashMap0);
      boolean boolean0 = JSONPath.eq(sQLClientInfoException0, sQLClientInfoException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLRecoverableException0, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("java.lang.AutoCloseable", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues("java.lang.AutoCloseable");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("jJ");
      Collection<Object> collection1 = jSONPath0.getPropertyValues(collection0);
      assertFalse(collection1.contains("jJ"));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("java.lang.AutoCloseable", serializeConfig0, parserConfig0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/2");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(75);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(jSONPath_ArrayAccessSegment0);
      boolean boolean0 = jSONPath0.remove((Object) collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/6");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException0 = new SQLDataException("e6^M", "/stackTrace/6", (-1077), sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("e6^M", "/stackTrace/6", (-1077));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLDataException0, (Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" D]&0r+y\"4T>=U");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath0, (-3959), sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      Double double0 = new Double(2113.3407945707);
      Map<String, Object> map0 = JSONPath.paths((Object) double0);
      jSONPath0.getArrayItem(map0, 116);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("jJ");
      int[] intArray0 = new int[8];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2126, 2126, 2126);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_RangeSegment0, collection0);
      assertEquals(8, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "in";
      stringArray0[1] = "in";
      stringArray0[2] = "in";
      stringArray0[3] = "in";
      stringArray0[4] = "in";
      stringArray0[5] = "in";
      stringArray0[6] = "in";
      stringArray0[7] = "#M:";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("in", stringArray0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("in");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "in", aSMDeserializerFactory0, sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.serializer.SerializeConfig", "com.alibaba.fastjson.serializer.SerializeConfig", "com.alibaba.fastjson.serializer.SerializeConfig", (String[]) null, true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.SerializeConfig");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_MatchSegement0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("@T}puRaxT9yOydj6", "", 613, (Throwable) null);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, bigInteger0, sQLTransientConnectionException0, jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      Float float0 = new Float(1001.105853219);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("not");
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("not", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "matchedCount", sQLSyntaxErrorException0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "MiscCodec not support ", float0, sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("*_di6HpZY5g0AXsMK;d ", (String) null, "C", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("*_di6HpZY5g0AXsMK;d ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("u-tHf", "`nHSs^T%)'m", 60, (Throwable) null);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_MatchSegement0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, (Object) null, sQLInvalidAuthorizationSpecException0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("I7F");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("I7F", jSONPath_MultiIndexSegment0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_ValueSegment0, jSONPath_MultiIndexSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("*", (-422L), (-422L), false);
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*", "*", (-526));
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntBetweenSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLSyntaxErrorException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("IeO");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("IeO", "mg", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, "/stackTrace/9");
      assertEquals("/stackTrace/9", object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1656, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("fastjson.parser.autoTypeAccept", 676L, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, serializeConfig0, jSONPath_IntOpSegement0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g@<'N3bs%T8|&");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("g9}", 0.0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(";h6??k");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, "g@<'N3bs%T8|&", sQLRecoverableException0);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("com.alibaba.fastjson.PropertyNamingStrategy");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("com.alibaba.fastjson.PropertyNamingStrategy", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MatchSegement");
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, pattern0, "com.alibaba.fastjson.PropertyNamingStrategy", pattern0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("x_UBB?m= _E4ldf=c2/");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("java.lang.AutoCloseable");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("{");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("{", "x_UBB?m= _E4ldf=c2/", jSONPath_Operator0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(118);
      SQLTransientException sQLTransientException0 = new SQLTransientException("x_UBB?m= _E4ldf=c2/");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Segment0, jSONPath_ArrayAccessSegment0, sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$IntInSegement", "com.alibaba.fastjson.JSONPath$IntInSegement", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntInSegement");
      Short short0 = new Short((short) (-1764));
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, short0, "com.alibaba.fastjson.JSONPath$IntInSegement", "com.alibaba.fastjson.JSONPath$IntInSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("s*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("s*", "s*", jSONPath_Operator0);
      Float float0 = new Float((double) (-422L));
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator0, "s*", float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("g@<'N3bs%T8|&", "HJJ+%=cgQhf", true);
      JSONPath jSONPath0 = JSONPath.compile("g@<'N3bs%T8|&");
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_MultiIndexSegment0, "g@<'N3bs%T8|&", ";h6??k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("6Jp-:ib[j1}<Twan@k5", "=]47j&'HzG_ubB", "", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("6Jp-:ib[j1}<Twan@k5");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("KSJC0[@W^dK5im0", "6Jp-:ib[j1}<Twan@k5");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "=]47j&'HzG_ubB", bigDecimal0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("|Mvh{8o+N{nQ.t", jSONPath_MaxSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("|Mvh{8o+N{nQ.t");
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_MaxSegment0, jSONPath_MaxSegment0, mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("writeFieldNameDirect");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("between", (-1.0), jSONPath_Operator0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, "TODO", "|>7`b4yk~{", jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("nin", (-800L), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(3, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("nin", serializeConfig0, parserConfig0);
      Long long0 = new Long(3);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, long0, long0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("m");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "m";
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/1");
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/cause/stackTrace/1", stringArray0, true);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, (Object) null, jSONPath_JSONPathParser0, "m");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("m");
      String[] stringArray0 = new String[1];
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/1");
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("/cause/stackTrace/1", stringArray0, true);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, (Object) null, jSONPath_JSONPathParser0, "m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONValidator$UTF16Validator", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("d50|/IcV!-pI*al[3");
      Short short0 = new Short((short)0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("d50|/IcV!-pI*al[3", sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, short0, sQLSyntaxErrorException0, "\"Bx=CM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("scanString", longArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("scanString");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, (Object) null, "scanString");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("SortFeidFastMatch");
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1));
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("SortFeidFastMatch", longArray0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("in");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "SortFeidFastMatch", sQLTransientConnectionException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("7D.:t(SR", (-534L), (-534L), true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("nin", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, parserConfig0, classLoader0, serializeConfig0.propertyNamingStrategy);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("I7F");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("I7F", jSONPath_MultiIndexSegment0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("I7F", "),7");
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_ValueSegment0, sQLTimeoutException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("I7F");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("I7F", jSONPath_MultiIndexSegment0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("I7F", "),7");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_ValueSegment0, sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("*7PWia/~m^}1", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("I7F");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("TD#<tyE/y{ >");
      Short short0 = new Short((short)1093);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, jSONPath0, short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.autoTypeSupport");
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath0, bigInteger0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2025, 255, (-1348));
      JSONPath jSONPath0 = new JSONPath("AutoCloseable");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, jSONPath0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("yHWdZ", "yHWdZ", 72);
      SQLDataException sQLDataException0 = new SQLDataException("syntax error : ", "safeMode", (-3400), sQLInvalidAuthorizationSpecException0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(331, 72, 108);
      JSONPath jSONPath0 = JSONPath.compile("R1^");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, sQLDataException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\"-RY=gqzSt ");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2308), (-2308), 48);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, "lang");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[S", "safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[S
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Float float0 = new Float(1001.105853219);
      SQLWarning sQLWarning0 = new SQLWarning("", "fastjson.parser.autoTypeAccept", 20);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, sQLWarning0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLWarning cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.AutoCloseable");
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLTimeoutException0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTimeoutException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Double double0 = new Double((-2510.612795420999));
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, "#|I|jh~^#/");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, "/3");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Double double0 = new Double((-2664));
      int int0 = JSONPath.compare(bigDecimal0, double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("@dGyur3AWxL8; ?e|", "@dGyur3AWxL8; ?e|");
      Object object0 = jSONPath0.eval((Object) sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*", "*", (-526));
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = JSONPath.compile("/chronology");
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, jSONPath_KeySetSegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("<|\u0001o~", serializeConfig0, (ParserConfig) null);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("<|\u0001o~", false);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath_PropertySegment0, jSONPath_PropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Byte byte0 = new Byte((byte)45);
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) byte0, "w[:^", (Object[]) stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // value not found in path w[:^
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"rhoQ");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'Ca:K.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'Ca\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_fieldType");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'f, but 'e'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'Ca:K.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but '.'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(";");
      JSONPath.size((Object) ";", "\\-");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) ";", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("MiscCodec not support ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("R!lx/xJ^>I(");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'l'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("lQ=*_gacS {k");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not support jsonpath : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("jJ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("s*,s*'", object0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m1&Z-JNBD4K");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-3851359326990528739L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-}/:iq&#HIJ~z+G1E4");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("((j1VmRV2T/mH");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("vOIHO8Q[)x");
      Byte byte0 = new Byte((byte)59);
      boolean boolean0 = jSONPath0.contains((Object) byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".:#\"o`XE\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Q>I&{3i&[");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("BC[?=FL'7g\"MxMASd?P", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2642));
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_ArrayAccessSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but '='
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("L");
      boolean boolean0 = jSONPath0.containsValue((Object) "L", (Object) "L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "(CLjava/lang/String;Ljava/math/BigDecimal;)V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.SerializeConfig");
      Double double0 = new Double(1.0);
      JSONPath jSONPath1 = new JSONPath("$");
      boolean boolean0 = jSONPath1.set((Object) double0, (Object) jSONPath0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "in", (Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*", false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal", "in");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*", "r/Q7g:X^kk5H7(<aM", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_PropertySegment0, "*", (Object) sQLTimeoutException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, "&6(1mD", (Object) "&6(1mD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "*", "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("jJ");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      Object[] objectArray0 = new Object[8];
      jSONPath0.arrayAdd((Object) "*", objectArray0);
      assertEquals("*", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath0, ",", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.lang.AutoCloseable");
      SQLWarning sQLWarning0 = new SQLWarning();
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLWarning0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path java.lang.AutoCloseable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("g{j?/");
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("jJ");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath0, "evSize error :>", objectArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // value not found in path evSize error :>
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.arrayAdd((Object) serializeConfig0, "fastjson.parser.deny.internal", (Object[]) null);
      assertEquals("@type", serializeConfig0.getTypeKey());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("KSJC0");
      Set<?> set0 = jSONPath0.keySet((Object) "Oq#i>Q");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/6");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("\"!F>c]4`#!Oyg#", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \"!F>c]4`#!Oyg#
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("'s*,s*'", (SerializeConfig) null, parserConfig0);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/5");
      DataTruncation dataTruncation0 = new DataTruncation(9, false, false, (-3311), (-3003));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, dataTruncation0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLRecoverableException0, (Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) "1C", "com.alibaba.fastjson.JSONPath$ArrayAccessSegment", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("u9>0NxHTQ", "u9>0NxHTQ", 0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      boolean boolean0 = JSONPath.containsValue((Object) sQLSyntaxErrorException0, "com.alibaba.fastjson.JSONPath$ValueSegment", (Object) bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      boolean boolean0 = JSONPath.contains((Object) stack0, "CamelCase");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      boolean boolean0 = jSONPath0.contains((Object) throwableDeserializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("in");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("AutoCloseable", "/stackTrace/4", parserConfig0, (-992), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", (SerializeConfig) null, parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0);
      Object object0 = jSONPath0.extract(defaultJSONParser1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Object object0 = JSONPath.extract("", "e2");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("between");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "m";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, stringArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/6");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2'[Si";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("2'[Si", "2'[Si", (String) null, stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Object object0 = jSONPath_FilterSegment0.eval((JSONPath) null, propertyNamingStrategy0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("|Mvh{8o+N{nQ.t", jSONPath_MaxSegment0, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|Mvh{8o+N{nQ.t");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RefOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_RefOpSegement0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("*", (-422L), (-422L), true);
      JSONPath jSONPath0 = JSONPath.compile("*");
      boolean boolean0 = jSONPath0.removePropertyValue(jSONPath_IntBetweenSegement0, "}$DHVTiTwq('@", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-n]+T%-X7!\"N>", "evalKeySet error : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("jJ");
      String string0 = jSONPath0.getPath();
      assertEquals("jJ", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("jJ");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("K+'MOe#d(w", "'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2K+'MOe#d(w
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      Object object0 = JSONPath.eval((Object) propertyNamingStrategy0, "GE");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/6");
      Set<?> set0 = JSONPath.keySet((Object) jSONPath0, "/stackTrace/6");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(126);
      Map<String, Object> map0 = JSONPath.paths((Object) "VV+{mkgHjk##5}5G*", serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Short short0 = new Short((short) (-5955));
      boolean boolean0 = JSONPath.set((Object) short0, "/stackTrace/6", (Object) "/stackTrace/6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      long[] longArray0 = new long[2];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("U", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("passHandle");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("U");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("passHandle");
      BigDecimal bigDecimal0 = new BigDecimal((-1093L));
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, sQLSyntaxErrorException0, sQLNonTransientConnectionException0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("I7F");
      jSONPath0.remove((Object) "I7F");
  }
}
