/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 03:34:10 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.sql.ClientInfoStatus;
import java.sql.JDBCType;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.DropMode;
import javax.swing.SortOrder;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(2167);
      hashMap0.put((JSONObject) null, double0);
      // Undeclared exception!
      try { 
        jSONArray0.put(2167, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONArray jSONArray1 = jSONArray0.put(2167, (Map<?, ?>) hashMap0);
      jSONArray0.optDouble(2167, (double) 2167);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray1.toString();
      Random.setNextRandom(2167);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalExclusionType, Long> hashMap0 = new HashMap<Dialog.ModalExclusionType, Long>();
      JSONArray jSONArray1 = jSONArray0.put(91, (-933.71352));
      jSONArray1.join("oQ\"w+jgB#/Y`HJ/");
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(8177, 8177);
      jSONArray1.getNumber(8177);
      jSONArray0.optDouble(8177, 661.6);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.toString();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2167, 0L);
      try { 
        jSONArray1.getInt(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2198;
      HashMap<Dialog.ModalExclusionType, Long> hashMap0 = new HashMap<Dialog.ModalExclusionType, Long>();
      jSONArray0.put(2198, (Map<?, ?>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.optInt(2198);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JDBCType, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<JDBCType, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put(10, (Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      jSONArray1.getDouble(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.join((String) null);
      Random.setNextRandom(1038);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertFalse(jSONArray1.isEmpty());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(57, false);
      jSONArray2.put(298, 2396.79896609896);
      jSONArray2.optInt(73, 0);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray3.optInt(73);
      try { 
        jSONArray1.getString(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalExclusionType, Long> hashMap0 = new HashMap<Dialog.ModalExclusionType, Long>();
      jSONArray0.put(2198, (Map<?, ?>) hashMap0);
      jSONArray0.toString();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.optJSONObject(2198);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1006;
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber(3269, (Number) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.put(1038, false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, 0.0);
      jSONArray0.optFloat(0, (float) 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1038, (float) 9);
      try { 
        jSONArray1.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      // Undeclared exception!
      try { 
        jSONArray1.write((Writer) null, 134, 134);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optDouble((-2086), (double) 0.0F);
      try { 
        jSONArray0.put((-1), (-1291.313280314));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      jSONArray0.put(0, (double) 0);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      JSONArray jSONArray1 = jSONArray0.put((-1242));
      BigInteger bigInteger1 = BigInteger.ONE;
      jSONArray1.optBigInteger(0, bigInteger1);
      jSONArray0.put(0, (long) (-1242));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.abs();
      bigInteger0.signum();
      JSONArray jSONArray1 = jSONArray0.put(638, true);
      jSONArray1.optBigDecimal(638, (BigDecimal) null);
      JSONArray jSONArray2 = new JSONArray();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.abs();
      bigInteger0.signum();
      JSONArray jSONArray1 = jSONArray0.put(638, true);
      jSONArray1.optBigDecimal(638, (BigDecimal) null);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(8177, 8177);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONArray1.optEnum(class0, 8177, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.put(8448);
      HashMap<Thread.State, RoundingMode> hashMap0 = new HashMap<Thread.State, RoundingMode>();
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.put((float) 8448);
      jSONArray1.getInt(0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(8177, 8177);
      jSONArray0.optDouble(8177, 661.6);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.toString();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      jSONArray0.put(80, (double) 80);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      jSONArray0.optDouble(80);
      jSONArray0.put(10);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = jSONArray1.put(8448);
      HashMap<Thread.State, RoundingMode> hashMap0 = new HashMap<Thread.State, RoundingMode>();
      jSONArray2.put(8448, (Map<?, ?>) hashMap0);
      jSONArray2.optInt(8448, 8448);
      jSONArray2.optInt((-1601));
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0.0F);
      int int0 = jSONArray0.getInt(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      Number number0 = jSONArray1.optNumber(0, (Number) bigInteger0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.optQuery("");
      jSONArray0.optNumber((-792));
      bigInteger0.intValueExact();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2111);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 101;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(101);
      bigInteger0.intValueExact();
      jSONArray0.similar(linkedList0);
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optBigDecimal(101, bigDecimal0);
      JSONArray jSONArray1 = jSONArray0.put(69, true);
      int int1 = 292;
      jSONArray1.optInt(292, 69);
      jSONArray0.optBoolean(69, false);
      jSONArray1.toList();
      JSONArray jSONArray2 = jSONArray1.put(69, (-2401L));
      try { 
        jSONArray2.getDouble(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)56;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "] is not an enum of type ");
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-109);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(10, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2431);
      jSONArray0.optDouble(1771, (double) (-2431));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.remove((Object) jSONArray0);
      try { 
        jSONArray0.put((-731), 2287.5125934);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-731] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(8192, 8192);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.toString(8192);
      Number number0 = jSONArray1.optNumber(8192);
      assertNotNull(number0);
      assertEquals(8192, number0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONArray jSONArray1 = jSONArray0.put(2167, (Map<?, ?>) hashMap0);
      jSONArray1.optNumber(2167);
      assertEquals(2168, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.optDouble((-2431), 2287.5125934);
      linkedList0.remove((Object) jSONArray0);
      int int0 = (-1);
      try { 
        jSONArray0.put((-1), (double) (-2431));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-23);
      LinkedList<WebParam.Mode> linkedList0 = new LinkedList<WebParam.Mode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      jSONArray0.put(0.0F);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, (int) (byte)4, (int) (byte) (-1));
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      try { 
        jSONArray0.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000005.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(80, (double) 80);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      jSONArray1.put((-1330L));
      assertEquals(82, jSONArray1.length());
      
      double double0 = jSONArray0.getDouble(80);
      assertEquals(80.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.signum();
      bigInteger1.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigInteger0.signum();
      JSONArray jSONArray1 = jSONArray0.put(640, 0);
      jSONArray1.optNumber(154, (Number) bigDecimal0);
      try { 
        jSONArray1.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-32);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.intValueExact();
      jSONArray0.spliterator();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger1.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger2);
      bigInteger2.signum();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      // Undeclared exception!
      jSONArray0.put(183780320, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(101);
      bigInteger0.intValueExact();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1, (Object) linkedList0);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONArray0.write((Writer) stringWriter0, 1000000, (-5638));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(101);
      bigInteger0.intValueExact();
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1, (Object) bigInteger0);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = (-2222);
      jSONArray0.write((Writer) stringWriter0, (-2222), (-2222));
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<Desktop.Action> class0 = Desktop.Action.class;
      int int0 = (-160);
      try { 
        jSONArray0.getEnum(class0, (-160));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-160] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      jSONArray0.put(2167, (Map<?, ?>) hashMap0);
      jSONArray0.optDouble(2167);
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getInt(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      bigInteger0.setBit(109);
      bigInteger0.doubleValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      int int0 = 0;
      try { 
        jSONArray0.getInt(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(107, (double) 107);
      assertEquals(108, jSONArray0.length());
      
      jSONArray0.optJSONObject((-1632));
      assertEquals(108, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      jSONArray0.put(8192, 8192);
      JSONObject jSONObject0 = jSONArray1.optJSONObject(8192);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONArray0.optEnum(class0, 609, locale_Category0);
      JSONArray jSONArray1 = jSONArray0.put(false);
      Class<StandardLocation> class1 = StandardLocation.class;
      StandardLocation standardLocation0 = StandardLocation.PLATFORM_CLASS_PATH;
      jSONArray1.optEnum(class1, (-3250), standardLocation0);
      jSONArray1.optFloat((-3250), (float) (-3250));
      String string0 = jSONArray1.optString(2642);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(2167);
      bigInteger0.intValueExact();
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      Short short0 = new Short((short)1222);
      jSONArray1.put(0, (Object) short0);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, (int) (short)1222, 1);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = jSONArray1.put(8448);
      HashMap<Thread.State, RoundingMode> hashMap0 = new HashMap<Thread.State, RoundingMode>();
      JSONArray jSONArray3 = jSONArray2.put(8448, (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(8448);
      jSONArray3.optBigDecimal(3292, bigDecimal0);
      jSONArray0.put(3292, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray0.put((float) 8448);
      jSONArray2.get(3290);
      assertEquals(8450, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      int int0 = (-859);
      try { 
        jSONArray0.getDouble((-859));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-859] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigInteger0.signum();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jSONArray0.optBigDecimal(1, bigDecimal1);
      JSONArray jSONArray1 = jSONArray0.put(1, false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      jSONArray0.query("");
      int int0 = jSONArray1.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 93;
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.ERROR;
      jSONArray0.optInt(93);
      linkedList0.add(trayIcon_MessageType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      linkedList0.poll();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)108;
      byteArray0[0] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TrayIcon.MessageType trayIcon_MessageType1 = TrayIcon.MessageType.NONE;
      linkedList0.add(trayIcon_MessageType1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.put(93, (-2340.0F));
      jSONArray1.optBoolean(93);
      try { 
        jSONArray0.getBigDecimal(2166);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2166] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(9, (float) 9);
      jSONArray0.toString();
      jSONArray0.optJSONObject((-1632));
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      jSONArray1.put((Collection<?>) linkedList0);
      assertEquals(11, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.put(2167, 0L);
      jSONArray1.getFloat(2167);
      Float float0 = new Float((float) 2167);
      jSONArray1.put(91, (Object) float0);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(2167);
      PipedInputStream pipedInputStream0 = new PipedInputStream(91);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray(pipedInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(602, 0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray1.optNumber(65, (Number) bigDecimal0);
      jSONArray0.getNumber(602);
      try { 
        jSONArray0.getBigDecimal((-3660));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3660] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigInteger0.signum();
      jSONArray0.optBigDecimal(0, bigDecimal0);
      jSONArray0.put(0, true);
      BigInteger bigInteger2 = BigInteger.ZERO;
      try { 
        jSONArray0.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertSame(jSONArray1, jSONArray0);
      
      int int0 = 0;
      try { 
        jSONArray1.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(101);
      bigInteger0.intValueExact();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1, (Object) linkedList0);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, 1, 101);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.optJSONArray(101);
      assertNull(jSONArray2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalExclusionType, Long> hashMap0 = new HashMap<Dialog.ModalExclusionType, Long>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte byte0 = Byte.valueOf((byte)107);
      try { 
        jSONArray0.put((-396), (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-396] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      jSONArray0.put((Object) bigInteger0);
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      try { 
        jSONArray0.put((-4097), (Object) bigInteger1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4097] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      JSONArray jSONArray1 = jSONArray0.put((Object) bigInteger0);
      JSONArray jSONArray2 = jSONArray1.put(1);
      jSONArray2.toString(2366);
      jSONArray1.optBigDecimal((-694), (BigDecimal) null);
      jSONArray2.optInt((-694));
      try { 
        jSONArray2.getString(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      JSONArray jSONArray1 = jSONArray0.put((Object) bigInteger0);
      JSONArray jSONArray2 = jSONArray1.put(1);
      jSONArray2.toString(2366);
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray(",G5Lf ESx.0sd2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      JSONArray jSONArray1 = jSONArray0.put(101, 2396.79896609896);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      try { 
        jSONArray1.getJSONArray(101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[101] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(107, (double) 107);
      try { 
        jSONArray0.getJSONArray(107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[107] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONArray jSONArray1 = jSONArray0.put(2167, (Map<?, ?>) hashMap0);
      int int0 = jSONArray1.optInt(2167);
      assertEquals(2168, jSONArray0.length());
      assertEquals(0, int0);
      
      jSONArray1.put((long) 0);
      jSONArray0.optString(0);
      assertEquals(2169, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      jSONArray1.toString((-333));
      JSONArray jSONArray2 = jSONArray0.put(1499);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "java.io.StringWriter@0000000003");
      Writer writer0 = jSONArray2.write((Writer) printWriter0);
      Writer writer1 = jSONArray2.write(writer0);
      assertSame(writer1, printWriter0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0L);
      List<Object> list0 = jSONArray1.toList();
      assertTrue(list0.contains(0L));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(107, (double) 107);
      jSONArray1.optFloat(107, 1314.0F);
      try { 
        jSONArray1.getJSONObject((-1381));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1381] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      jSONArray1.similar(jSONArray0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.join((String) null);
      jSONArray0.optFloat(10, 0.0F);
      JSONArray jSONArray3 = jSONArray2.put(3982, (Object) jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.toJSONObject(jSONArray0);
      float float0 = jSONArray0.optFloat(10, (float) 10);
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.optFloat(1360);
      try { 
        jSONArray0.getJSONArray(1360);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1360] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append('4');
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'S';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      jSONArray0.write((Writer) stringWriter2, 1777, 2);
      assertEquals("44S[]", stringWriter2.toString());
      
      jSONArray0.optNumber(59);
      JSONArray jSONArray1 = jSONArray0.put((-433.842F));
      float float0 = jSONArray1.optFloat(1777);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      jSONArray1.similar(jSONArray0);
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      int int0 = 65;
      jSONArray0.optBigDecimal(65, bigDecimal0);
      JSONArray jSONArray2 = jSONArray1.put(10, true);
      jSONArray2.optInt(33, 1);
      jSONArray0.put(1070, (float) 65);
      jSONArray1.optJSONArray(1);
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray("GLFv<j jv?;}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      jSONArray1.similar(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.optJSONArray(10);
      assertNull(jSONArray2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 6278;
      jSONArray0.toJSONObject((JSONArray) null);
      int int1 = (-333);
      jSONArray0.toString(6278);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      jSONArray0.write((Writer) mockPrintWriter0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1960);
      jSONArray0.optNumber(1960, (Number) bigDecimal0);
      jSONArray0.toList();
      try { 
        jSONArray0.get(74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[74] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalExclusionType, Long> hashMap0 = new HashMap<Dialog.ModalExclusionType, Long>();
      jSONArray0.put(2206, (Map<?, ?>) hashMap0);
      assertEquals(2207, jSONArray0.length());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.optNumber(2206, (Number) bigInteger0);
      assertEquals(2207, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = jSONArray1.put(8448);
      HashMap<Thread.State, RoundingMode> hashMap0 = new HashMap<Thread.State, RoundingMode>();
      jSONArray2.put(8448, (Map<?, ?>) hashMap0);
      Class<SortOrder> class0 = SortOrder.class;
      jSONArray0.optEnum(class0, 8448);
      // Undeclared exception!
      jSONArray1.toString((-333));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(8177, 8177);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = jSONArray0.optEnum(class0, 8177, locale_Category0);
      assertEquals(Locale.Category.FORMAT, locale_Category1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      jSONArray1.toString((-333));
      jSONArray1.put(2161, (-1L));
      boolean boolean0 = jSONArray0.optBoolean((-333), true);
      assertTrue(boolean0);
      
      List<Object> list0 = jSONArray1.toList();
      assertTrue(list0.contains((-1L)));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(2167, 2574);
      try { 
        jSONArray0.getNumber(2574);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2574] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray0.similar(bigInteger0);
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      jSONArray0.toList();
      try { 
        jSONArray0.getNumber(1124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1124] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      jSONArray0.similar(jSONArray0);
      JSONArray jSONArray1 = jSONArray0.optJSONArray(10);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = jSONArray1.put(6278, (double) 6278);
      JSONArray jSONArray3 = jSONArray2.put((float) (-333));
      jSONArray3.optInt(6278, (-1786));
      jSONArray0.optInt(1);
      JSONArray jSONArray4 = new JSONArray();
      String string0 = jSONArray2.toString();
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = jSONArray1.put(8448);
      HashMap<Thread.State, RoundingMode> hashMap0 = new HashMap<Thread.State, RoundingMode>();
      JSONArray jSONArray3 = jSONArray2.put(8448, (Map<?, ?>) hashMap0);
      Class<SortOrder> class0 = SortOrder.class;
      jSONArray0.optEnum(class0, 8448);
      jSONArray2.optString(8448, "ZgJ^Mp}!tJ-jT8ZMqP");
      JSONArray jSONArray4 = null;
      try {
        jSONArray4 = new JSONArray(jSONArray3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(101);
      bigInteger0.intValueExact();
      jSONArray0.similar(linkedList0);
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optBigDecimal(101, bigDecimal0);
      JSONArray jSONArray1 = jSONArray0.put(69, true);
      jSONArray1.optInt(292, 69);
      jSONArray0.optBoolean(69, false);
      List<Object> list0 = jSONArray1.toList();
      assertEquals(70, jSONArray0.length());
      assertTrue(list0.contains(true));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      long long0 = jSONArray1.optLong(0, (long) 0);
      assertEquals(0L, long0);
      
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONArray1.getBoolean(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2106), 859.05F);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2106] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      bigInteger0.intValueExact();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.opt((-14));
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = jSONArray0.put(8192, 8192);
      jSONArray1.optJSONObject(8192);
      long long0 = jSONArray2.getLong(8192);
      assertEquals(8192L, long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2167;
      JSONArray jSONArray1 = jSONArray0.put(2167, 0L);
      jSONArray1.toList();
      // Undeclared exception!
      try { 
        jSONArray1.optQuery("] not found.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append('4');
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'S';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      charBuffer0.flip();
      jSONArray0.write((Writer) stringWriter2, 1777, 2);
      JSONArray jSONArray1 = jSONArray0.put(2, 2);
      jSONArray1.getLong(2);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(101);
      int int0 = new Integer(101);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(101, (Object) linkedList0);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(8177, 8177);
      try { 
        jSONArray1.getJSONObject(8177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8177] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(8192, 8192);
      try { 
        jSONArray1.getJSONObject(8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8192] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(8192, 8192);
      jSONArray1.opt(44);
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append('4');
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'S';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      jSONArray0.write((Writer) stringWriter2, 1777, 2);
      String string0 = " iQr.A d+}/";
      MockFile mockFile0 = new MockFile(" iQr.A d+}/");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(8177, 8177);
      // Undeclared exception!
      jSONArray1.join("");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalExclusionType, Long> hashMap0 = new HashMap<Dialog.ModalExclusionType, Long>();
      JSONArray jSONArray1 = jSONArray0.put(2206, (Map<?, ?>) hashMap0);
      jSONArray1.toList();
      jSONArray0.optDouble(2206);
      jSONArray1.put(2213);
      assertEquals(2208, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      double double0 = jSONArray0.optDouble(1810);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((-2060));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2060] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      int int0 = 6278;
      try { 
        jSONArray1.getJSONObject((-2307));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2307] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optString(95, "");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optString(3127, "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray0.optBigInteger(3127, bigInteger0);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.contains(3127));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(8192, 8192);
      jSONArray1.optInt(1, 1020);
      jSONArray1.optInt(1020);
      try { 
        jSONArray0.getString(8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8192] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(107, (double) 107);
      jSONArray0.join("||M40?91A88e;Y/(H");
      assertEquals(108, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.opt(3329);
      Float float0 = new Float((double) 3329);
      jSONArray0.similar(float0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-96);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      BigInteger bigInteger1 = bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      jSONArray0.optBigDecimal(3125920, bigDecimal0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.put((int) (byte)47, (long) (byte)47);
      jSONArray2.optBoolean((int) (byte) (-78), false);
      try { 
        jSONArray0.getFloat(3329);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3329] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      int int0 = (-24);
      try { 
        jSONArray0.put((-24), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-24] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      Class<SortOrder> class0 = SortOrder.class;
      jSONArray0.optEnum(class0, 6278);
      JSONArray jSONArray2 = jSONArray1.put(6278, (double) 6278);
      JSONArray jSONArray3 = jSONArray2.put((float) (-333));
      jSONArray3.optInt(6278, (-1786));
      jSONArray0.optInt(1);
      try { 
        jSONArray1.getString((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(9, (float) 9);
      jSONArray1.optInt(9);
      try { 
        jSONArray1.getString(14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[14] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 107;
      jSONArray0.put(107, (double) 107);
      // Undeclared exception!
      jSONArray0.toString(107);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put(2795, 2795);
      int int0 = 6308;
      Object object0 = new Object();
      jSONArray0.optNumber(6308);
      // Undeclared exception!
      jSONArray0.toString((-712));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = jSONArray1.put(8448);
      Class<SortOrder> class0 = SortOrder.class;
      jSONArray0.optEnum(class0, 8448);
      BigDecimal bigDecimal0 = new BigDecimal((long) 8448);
      jSONArray0.optBigDecimal((-333), bigDecimal0);
      jSONArray2.put(8448, (long) 8448);
      jSONArray2.optBoolean(8448, false);
      // Undeclared exception!
      jSONArray0.toList();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2198, (long) 2198);
      List<Object> list0 = jSONArray1.toList();
      assertFalse(list0.contains(2198));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalExclusionType, Long> hashMap0 = new HashMap<Dialog.ModalExclusionType, Long>();
      JSONArray jSONArray1 = jSONArray0.put(2206, (Map<?, ?>) hashMap0);
      jSONArray0.toList();
      jSONArray0.optDouble(93);
      jSONArray1.put(200);
      assertEquals(2208, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(8192, 8192);
      jSONArray1.getFloat(8192);
      JSONObject jSONObject0 = jSONArray0.optJSONObject(8192);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(101);
      bigInteger0.intValueExact();
      jSONArray0.similar(linkedList0);
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optBigDecimal(101, bigDecimal0);
      JSONArray jSONArray1 = jSONArray0.put(69, true);
      int int0 = jSONArray1.optInt((-125), 3317);
      assertEquals(70, jSONArray0.length());
      assertEquals(3317, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = null;
      try { 
        jSONArray0.getBoolean(8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8192] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.length();
      StringWriter stringWriter0 = new StringWriter(84);
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 8448, 84);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(101);
      bigInteger0.intValueExact();
      jSONArray0.similar(linkedList0);
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optBigDecimal(101, bigDecimal0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put(101, (long) 1);
      jSONArray1.optBoolean(101, false);
      try { 
        jSONArray1.getFloat((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          JSONArray jSONArray0 = new JSONArray();
          HashMap<Dialog.ModalExclusionType, Long> hashMap0 = new HashMap<Dialog.ModalExclusionType, Long>();
          JSONArray jSONArray1 = jSONArray0.put(8192, 155);
          LinkedList<Double> linkedList0 = new LinkedList<Double>();
          JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
          jSONArray2.toJSONObject(jSONArray1);
          assertFalse(jSONArray0.isEmpty());
          assertEquals(8193, jSONArray0.length());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      HashMap<Component.BaselineResizeBehavior, RoundingMode> hashMap0 = new HashMap<Component.BaselineResizeBehavior, RoundingMode>();
      HashMap<Component.BaselineResizeBehavior, RoundingMode> hashMap1 = new HashMap<Component.BaselineResizeBehavior, RoundingMode>(hashMap0);
      JSONArray jSONArray2 = jSONArray1.put(3328, (Map<?, ?>) hashMap1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.nextProbablePrime();
      JSONArray jSONArray3 = new JSONArray();
      jSONArray3.optBigInteger(3328, bigInteger0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray4 = new JSONArray((Collection<?>) linkedList0);
      jSONArray4.toJSONObject(jSONArray2);
      JSONArray jSONArray5 = jSONArray2.put((float) 3328);
      jSONArray5.put(false);
      jSONArray4.put(false);
      Object object0 = jSONArray3.opt(3308);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.opt(3329);
      jSONArray0.put(3329, (Object) null);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      jSONArray0.optLong(3312, (long) 3312);
      try { 
        jSONArray0.getFloat((-1235));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1235] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalExclusionType, Locale.Category> hashMap0 = new HashMap<Dialog.ModalExclusionType, Locale.Category>();
      hashMap0.clone();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Collection<Formatter.BigDecimalLayoutForm> collection0 = null;
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.toString((-333));
      HashMap<Locale.FilteringMode, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<Locale.FilteringMode, MultipleGradientPaint.ColorSpaceType>();
      jSONArray1.put((Map<?, ?>) hashMap0);
      jSONArray1.optBoolean((-4747), false);
      jSONArray0.remove((-1294));
      JSONArray jSONArray3 = new JSONArray((Collection<?>) null);
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONArray2.optEnum(class0, (-1294));
      try { 
        jSONArray1.put((-1294), (-333));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1294] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = jSONArray1.put(2351, (Collection<?>) null);
      jSONArray1.toString((-333));
      int int0 = 748;
      try { 
        jSONArray2.getBigInteger(748);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[748] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(101);
      bigInteger0.intValueExact();
      jSONArray0.similar(linkedList0);
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optBigDecimal(101, bigDecimal0);
      JSONArray jSONArray1 = jSONArray0.put(69, true);
      jSONArray1.optInt(292, 69);
      jSONArray1.put(101, (float) 69);
      jSONArray1.optJSONArray(69);
      jSONArray0.toString();
      assertEquals(102, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(77);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      Object object0 = new Object();
      jSONArray0.optNumber(6308);
      jSONArray0.put(6308, (double) (-712));
      jSONArray0.put((-1.0F));
      int int0 = jSONArray0.optInt((-2553), (-2553));
      assertEquals(6310, jSONArray0.length());
      assertEquals((-2553), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.pow(101);
      bigInteger0.or(bigInteger1);
      jSONArray0.similar(linkedList0);
      jSONArray0.spliterator();
      bigInteger0.xor(bigInteger2);
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.remove((-3469));
      jSONArray0.toList();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("*");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      // Undeclared exception!
      try { 
        jSONArray0.query(jSONPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // * is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      
      try { 
        jSONArray0.getString(8155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8155] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2000);
      try { 
        jSONArray0.getString((-2000));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2000] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      jSONArray0.optBoolean((-1));
      jSONArray0.optLong(0, (-2867L));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.negate();
      jSONArray0.optBigInteger(0, bigInteger0);
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      int int0 = 8192;
      try { 
        jSONArray0.put((-1096), 8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1096] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = jSONArray1.put(2351, (Collection<?>) null);
      jSONArray1.toString((-333));
      jSONArray1.optBoolean((-4747), false);
      jSONArray0.remove((-1294));
      JSONArray jSONArray3 = new JSONArray((Collection<?>) null);
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONArray2.optEnum(class0, (-1294));
      try { 
        jSONArray1.put((-1294), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1294] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0F);
      try { 
        jSONArray0.getInt(188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[188] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONArray0.optQuery(jSONPointer0);
      jSONArray0.optBoolean(92, true);
      JSONArray jSONArray1 = jSONArray0.put(0, 0.0);
      JSONArray jSONArray2 = jSONArray1.put(1075.8152F);
      jSONArray2.put(false);
      assertEquals(3, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      long long0 = jSONArray1.optLong((-333));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONPointer.builder();
      JSONPointer.builder();
      JSONPointer jSONPointer0 = new JSONPointer("");
      jSONArray0.optQuery(jSONPointer0);
      int int0 = 3619;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_INSERTION;
      Class<CardTerminals.State> class0 = CardTerminals.State.class;
      jSONArray0.optEnum(class0, 3619, cardTerminals_State0);
      jSONArray0.query("");
      try { 
        jSONArray0.put((-890), (long) 3619);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-890] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      JSONArray jSONArray1 = jSONArray0.put(101, 2396.79896609896);
      JSONArray jSONArray2 = jSONArray1.put(55.0148F);
      jSONArray2.optInt(8164, (-1786));
      jSONArray1.optInt(0);
      try { 
        jSONArray0.getString((-1786));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1786] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(8192, 8192);
      jSONArray1.optLong(8192, (long) 8192);
      jSONArray0.getFloat(8192);
      // Undeclared exception!
      jSONArray1.toList();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      try { 
        jSONArray1.put((-600), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-600] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.opt(3329);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      jSONArray0.put(3329, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.nextProbablePrime();
      jSONArray0.optBigInteger(3329, bigInteger0);
      jSONArray0.remove(3329);
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.getBigDecimal(2324);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2324] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("] is not a JSONObject.");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString((-333));
      int int0 = 32;
      jSONArray0.optBoolean(32, true);
      int int1 = (-1294);
      jSONArray0.remove(532);
      try { 
        jSONArray0.getBigInteger(532);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[532] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.query("");
      Object object0 = new Object();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      bigInteger0.testBit(101);
      jSONArray0.similar(linkedList0);
      jSONArray0.spliterator();
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optBigDecimal(101, bigDecimal0);
      jSONArray0.remove((-3469));
      jSONArray0.toList();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(107, (double) 107);
      jSONArray1.join("");
      jSONArray1.put(77, false);
      assertEquals(108, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.iterator();
      int int0 = (-1);
      JSONArray jSONArray1 = jSONArray0.put(1086, 0L);
      jSONArray1.spliterator();
      try { 
        jSONArray1.getBigDecimal(1246);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1246] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.put((Object) jSONArray1);
      JSONArray jSONArray3 = jSONArray2.put((-1));
      jSONArray3.toString(38);
      JSONArray jSONArray4 = null;
      try {
        jSONArray4 = new JSONArray(",G5Lf ESx.0sd2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONArray jSONArray2 = new JSONArray();
      HashMap<Thread.State, RoundingMode> hashMap0 = new HashMap<Thread.State, RoundingMode>();
      jSONArray2.put(8448, (Map<?, ?>) hashMap0);
      Class<SortOrder> class0 = SortOrder.class;
      jSONArray0.optEnum(class0, 8448);
      jSONArray1.toString((-333));
      jSONArray0.optString(8448);
      jSONArray0.join("java.io.StringWriter@0000000007");
      // Undeclared exception!
      jSONArray2.toString(128);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Collection<Formatter.BigDecimalLayoutForm> collection0 = null;
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      jSONArray1.put(2351, (Collection<?>) null);
      jSONArray1.toString((-333));
      jSONArray1.optBoolean((-4747), false);
      jSONArray0.remove((-1294));
      JSONArray jSONArray2 = new JSONArray((Collection<?>) null);
      try { 
        jSONArray2.getBigDecimal(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(2351, (Collection<?>) null);
      int int0 = 748;
      try { 
        jSONArray1.getBigInteger(748);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[748] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(107, (double) 107);
      jSONArray0.toString();
      assertEquals(108, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2198, (long) 2198);
      jSONArray1.remove(2198);
      jSONArray1.toList();
      assertEquals(2198, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.put(8205);
      assertNotSame(jSONArray2, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      Double double0 = new Double((-2256.56618064));
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1);
      int int0 = jSONArray0.optInt(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put((-218), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-218] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-472), (double) (-472));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-472] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      jSONArray1.put(8448);
      Class<SortOrder> class0 = SortOrder.class;
      jSONArray0.optEnum(class0, 6278);
      int int0 = (-333);
      jSONArray1.toString((-333));
      jSONArray1.join((String) null);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray("java.io.StringWriter@0000000006");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("].");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = (-3205);
      jSONArray0.toString();
      jSONArray0.join("index %d is out of bounds - the array has %d elements");
      int int1 = (-1090);
      try { 
        jSONArray0.put((-1090), (double) (-1090));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1090] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      int int0 = 3329;
      jSONArray0.opt(3329);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      jSONArray0.put(1355, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger0.byteValueExact();
      jSONArray0.optBigInteger(2911, bigInteger1);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-3244));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONArray0.optBigInteger((-3244), bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      JSONArray jSONArray1 = jSONArray0.optJSONArray((-1324));
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.iterator();
      jSONArray0.optInt((-3199), 2167);
      JSONArray jSONArray1 = jSONArray0.put(2167, (-5124.48F));
      jSONArray1.optJSONArray(2167);
      assertEquals(2168, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(101);
      bigInteger0.intValueExact();
      jSONArray0.similar(linkedList0);
      jSONArray0.spliterator();
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optBigDecimal(101, bigDecimal0);
      JSONArray jSONArray1 = jSONArray0.put(69, true);
      try { 
        jSONArray1.put((-1), 1776L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(8192, 8192);
      jSONArray1.put(8192, true);
      try { 
        jSONArray1.getJSONObject(8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8192] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(125, false);
      JSONArray jSONArray2 = jSONArray1.put(1080, (long) 125);
      jSONArray2.spliterator();
      int int0 = 2927;
      try { 
        jSONArray1.getBigDecimal(125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[125] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(2198);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.optInt((-3199), 2167);
      assertEquals(2167, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString(4820);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0F);
      jSONArray0.toString(188);
      Number number0 = jSONArray1.optNumber(188);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      jSONArray1.toString((-333));
      int int0 = (-4747);
      jSONArray1.optBoolean((-4747), false);
      int int1 = (-1294);
      jSONArray0.remove((-1294));
      int int2 = 91;
      try { 
        jSONArray0.getBigInteger(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getBigDecimal(2172);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2172] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      linkedList0.add(locale_FilteringMode0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = (-3534);
      try { 
        jSONArray0.getBigDecimal((-3534));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3534] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONArray jSONArray1 = jSONArray0.put(2167, (Map<?, ?>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      jSONArray1.optBigInteger(2167, bigInteger1);
      assertEquals(2168, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put(93, 93);
      jSONArray1.toJSONObject(jSONArray0);
      assertEquals(94, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      jSONArray0.put(false);
      boolean boolean0 = jSONArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      int int1 = 3329;
      jSONArray0.opt(3329);
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      jSONArray0.put(3329, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.nextProbablePrime();
      jSONArray0.optBigInteger(3329, bigInteger0);
      try { 
        jSONArray0.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(9, (float) 9);
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = jSONArray0.optBigInteger(9, bigInteger1);
      assertEquals((byte)9, bigInteger2.byteValue());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      jSONArray1.optLong(0, (long) 0);
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      LinkedList<Locale.FilteringMode> linkedList1 = new LinkedList<Locale.FilteringMode>();
      linkedList1.add(locale_FilteringMode0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList1);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2326, 8192);
      try { 
        jSONArray0.getLong(8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8192] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(8177, 8177);
      // Undeclared exception!
      jSONArray0.toList();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      try { 
        jSONArray1.getLong(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(8192, 8192);
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONArray(107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[107] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(77, (double) 77);
      jSONArray0.join("||M40?91A88e;Y/(H");
      jSONArray0.isNull(2180);
      assertEquals(78, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONArray0.optQuery(jSONPointer0);
      jSONArray0.optBoolean(92, true);
      jSONArray0.isNull(92);
      try { 
        jSONArray0.getJSONArray(2849);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2849] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong((-870));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove(0);
      jSONArray0.optLong(0, (long) 0);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.toString((-333));
      jSONArray0.remove((-333));
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      jSONArray1.optBoolean((-4747), false);
      int int0 = (-1294);
      jSONArray0.remove((-1294));
      int int1 = 91;
      try { 
        jSONArray0.getBigInteger(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      try { 
        jSONArray0.getBigInteger(713);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[713] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get(1903);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1903] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Collection<GraphicsDevice.WindowTranslucency> collection0 = null;
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      int int0 = 6308;
      try { 
        jSONArray0.get(6308);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[6308] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      linkedList0.add(locale_FilteringMode0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.getBigInteger((-2577));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2577] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      String string0 = jSONArray0.join("5");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = jSONArray1.put((Object) jSONArray2);
      JSONArray jSONArray4 = new JSONArray();
      JSONArray jSONArray5 = jSONArray3.put((float) 6278);
      jSONArray5.similar(jSONArray4);
      jSONArray1.optInt((-333), (-487));
      jSONArray5.optInt(1);
      try { 
        jSONArray4.getString(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2356, 44);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONArray0.optEnum(class0, 2136, locale_Category0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 2136);
      jSONArray0.optBigDecimal(2356, bigDecimal0);
      assertEquals(2357, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("Nesting error.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      jSONArray0.optBigDecimal(9, bigDecimal0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.similar(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 101;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(101);
      bigInteger0.intValueExact();
      jSONArray0.similar(linkedList0);
      jSONArray0.spliterator();
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optBigDecimal(101, bigDecimal0);
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.INHERIT;
      linkedList0.add(processBuilder_Redirect_Type0);
      // Undeclared exception!
      try { 
        jSONArray0.query("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":[]}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      jSONArray0.similar(bigInteger0);
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      bigInteger0.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optBigDecimal(67, bigDecimal0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.put(10, 0L);
      jSONArray2.optBoolean(10, false);
      assertEquals(11, jSONArray1.length());
      
      jSONArray2.getFloat(10);
      List<Object> list0 = jSONArray1.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Object) linkedList0);
      try { 
        jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      int int0 = 0;
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(31);
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      jSONArray0.optBoolean(0);
      int int1 = 3329;
      jSONArray0.opt(3329);
      short short0 = (short)93;
      Short short1 = new Short((short)93);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(short1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONArray0.optQuery(jSONPointer0);
      jSONArray0.optBoolean(92, true);
      JSONArray jSONArray1 = jSONArray0.put(0.508);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Window.Type> class0 = Window.Type.class;
      try { 
        jSONArray0.getEnum(class0, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[9] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2431), (long) (-2431));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2431] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<CardTerminals.State> class0 = CardTerminals.State.class;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.removeLastOccurrence(jSONArray0);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONPointer.builder();
      JSONPointer.builder();
      jSONArray0.optQuery(jSONPointer0);
      int int0 = 3619;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_INSERTION;
      jSONArray0.optEnum(class0, 3619, cardTerminals_State0);
      int int1 = (-890);
      try { 
        jSONArray0.put((-890), (long) 3619);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-890] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      jSONTokener0.more();
      jSONTokener0.syntaxError("{\"x\":\"hello\",\"y\":\"a string\",\"z\":true,\"a\":[],\"b\":{}}", (Throwable) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Character.UnicodeScript, Integer> hashMap0 = new HashMap<Character.UnicodeScript, Integer>();
      jSONArray0.put((-1330L));
      try { 
        jSONArray0.getDouble(80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[80] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}";
      jSONArray0.put((-1L));
      try { 
        MockURI.URI("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":false}}";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":false}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      jSONArray0.spliterator();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.abs();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigInteger0.signum();
      int int0 = 65;
      jSONArray0.optBigDecimal(0, bigDecimal0);
      jSONArray0.put(0, true);
      int int1 = 945;
      jSONArray0.optInt(945, 49);
      JSONArray jSONArray1 = jSONArray0.put(23, (float) 0);
      jSONArray1.optJSONArray(1070);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray("}SLF9s5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(9, (float) 9);
      jSONArray1.toList();
      assertEquals(10, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2944;
      JSONArray jSONArray1 = jSONArray0.put(2944, (-712.0517F));
      // Undeclared exception!
      try { 
        jSONArray1.forEach((Consumer<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringReader stringReader0 = new StringReader("].");
      JSONTokener jSONTokener0 = new JSONTokener("].");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("Tq.^j,o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }
}
