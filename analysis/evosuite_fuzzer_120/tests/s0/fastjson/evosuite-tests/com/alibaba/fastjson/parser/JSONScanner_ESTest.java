/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 21:08:23 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import java.math.BigDecimal;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{mfruit\":false,\"size\":2Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"@type\":\"{mfruit\":false,\"size\":2Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}");
      String string0 = jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.nextToken(51068);
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-2556L), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.nMio.file.Paths", (-667));
      ParserConfig parserConfig0 = new ParserConfig(false);
      jSONScanner0.scanSymbol(parserConfig0.symbolTable);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(0L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // .
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,99]");
      jSONScanner0.bp = 3934;
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json.
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mH9iU;=|x}T?$FzG_", 82);
      jSONScanner0.token = 82;
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(82);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0~NMjyFjf<,zL<;_Kf");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 10~NMjyFjf<,zL<;_Kf
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"/Date(\":-99,\"not close json text, token : \":[],\"\"fruit\":{\":99}");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanFieldStringArray(charArray0, 1339, parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      long long0 = jSONScanner0.scanLong('n');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("90");
      double double0 = jSONScanner0.scanDouble('e');
      assertEquals(90.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0~NMjyFjf<,zL<;_Kf");
      double double0 = jSONScanner0.scanDouble('r');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.nextToken(31);
      int int0 = jSONScanner0.scanInt('y');
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 2014);
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2, (-876));
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', '9', '9', '9', (-420), (-420));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":false,\"size\":\"toJSON error\",\"illegal json, \":\"Red\",\"value\":99,\"value2\":-99,\"number\":\"1\"}", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('%', 'U', '%');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"/Date(\":-9V,\"not close json text, token : \":[],\"\"fruit\":{\":99}");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,false,{}]");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"fruit\":f\":\"parseInt error : \",\"y\":true,\"z\":true,\"a\":{},\"b\":{}}");
      jSONScanner0.putChar('7');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json, \":null,\"pos \":\"a string\",\"springfox.documentation.spring.web.json.Json\":{},\"com.alibaba.fastjson.asm.TypeCollector\":{},\"unclosed str\":\"pos \",\"dd/MM/yyyy HH:mm:ss\":{}}", 0);
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\"]", 2014);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1[\"a string\"]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      jSONScanner0.calendar = calendar0;
      jSONScanner0.setTime('6', 'l', '7', '7', 'K', 'R');
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}\":{}},\"a string\",\"a string\",99]");
      char[] charArray0 = new char[3];
      jSONScanner0.copyTo(2, 2, charArray0);
      assertArrayEquals(new char[] {'\"', 'u', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("javax.xml.bind.annotation.XmlAccessType", 0);
      char[] charArray0 = new char[1];
      jSONScanner0.arrayCopy(0, charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"dr>it\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}\":{}},\"a string\",\"a string\",99]");
      char[] charArray0 = jSONScanner0.sub_chars(48, 13);
      assertEquals(13, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"listContext\":{}}]");
      char[] charArray0 = jSONScanner0.sub_chars(0, 0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,true,[],{\"ull[null,[\"a string\"]]\":[]}]");
      String string0 = jSONScanner0.subString(13, 13);
      assertEquals("e,[],{\"ull[nu", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"a string\"}", 20);
      String string0 = jSONScanner0.subString(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8pExL:.@B", 91);
      jSONScanner0.nextToken();
      String string0 = jSONScanner0.stringVal();
      assertEquals("p", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.nextToken();
      jSONScanner0.numberString();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[]}");
      jSONScanner0.nextToken(3050);
      jSONScanner0.nextToken();
      String string0 = jSONScanner0.numberString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,-99,\"a string\",false,null]");
      jSONScanner0.nextToken();
      jSONScanner0.scanDouble('D');
      char char0 = jSONScanner0.next();
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      jSONScanner0.nextToken((-1755));
      char char0 = jSONScanner0.next();
      assertEquals('x', char0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      int int0 = jSONScanner0.indexOf('f', 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}", 50900);
      int int0 = jSONScanner0.indexOf('u', 39);
      assertEquals(66, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      jSONScanner0.putChar('\'');
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((byte)9, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.nextToken();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short) (-99), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Qev#-xw;k/yf", 44);
      char char0 = jSONScanner0.charAt(91);
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1i(NX4)m@}");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.AwtCodec");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('c', char0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":false,\"parseInt error : \":[],\"unclosed str\":true,\"\":\":-99,\"number\":{\"x\":{}}}", 0);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"/Date(\":-9V,\"not close json text, token : \":[],\"\"fruit\":{\":99}");
      char[] charArray0 = new char[1];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,-99,[]]");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('%');
      jSONScanner0.nextToken();
      jSONScanner0.bytesValue();
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"/Date(\":-99,\"not close json text, token : \":[],\"\"fruit\":{\":99}");
      SymbolTable symbolTable0 = new SymbolTable(185);
      String string0 = jSONScanner0.addSymbol(17, 7, 0, symbolTable0);
      assertEquals("t close", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport", 0);
      String string0 = jSONScanner0.addSymbol(0, 0, 114, parserConfig0.symbolTable);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-67), 50);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1848));
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+|f", 1984);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone(':', '7', '7', '6', 'z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\"", 2014);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(1788);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("f'RXX`vxdq8d", 184);
      jSONScanner0.bp = (-304);
      // Undeclared exception!
      try { 
        jSONScanner0.scanISO8601DateIfMatch();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"javax.persistence.OneToMany\":\"a string\",\"java.time.ZoneOffset\":false,\"illegal str, \":{},\"unclosed str\":-99}");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("{\"99\":null,\"\"@type\":\"{\"fruit\":{},\"parseInt error : \":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":false}", 123);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 2014);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";ra2oeP<:7LO", parserConfig0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, 125, defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[],\"a string\",[]]");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0~NMjyFjf<5zL<;_9f");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d3*X");
      jSONScanner0.bp = (-165);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal json, ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wDJ.wrp#");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 2014);
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+09q~=");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false,[],false,true,true,false,null]");
      jSONScanner0.bp = 2805;
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<XzlIX-4)", (-1899));
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1899));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"/Date(\":-99,\"not close json text, token : \":[],\"\"fruit\":{\":99}");
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("-BXIRo", 123, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.nextToken(31);
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("P5u<J >$}Z?BZ!~Z65P", 83);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, charArray0, 8, 83);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"99\":null,\"\"@type\":\"{\"fruit\":{},\"parseInt error : \":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":false}");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(79, charArray0, (-2), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("u$bn");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(594, 594, 97, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(1224736769, (-2392), (-2392), parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 163, 3040);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 3157, 39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 1067);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[,[],[]]");
      jSONScanner0.next();
      jSONScanner0.nextToken(5);
      jSONScanner0.nextToken();
      jSONScanner0.skipArray(false);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull[null,\"a string\",false,false,[false]]\":{}}]");
      jSONScanner0.nextToken(51068);
      jSONScanner0.skipArray(false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull[null,\"a string\",false,false,[false]]\":{}}]");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1[{\"ull[null,\"a string\",false,false,[false]]\":{}}]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"\u0000\":[],\"\"@type\":\"\":true},null,\"a string\",99,99]");
      jSONScanner0.bp = 51068;
      // Undeclared exception!
      jSONScanner0.skipObject(false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.skipObject(false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}\":{}},\"a string\",\"a string\",99]");
      jSONScanner0.nextToken(51068);
      jSONScanner0.nextToken();
      jSONScanner0.skipObject(false);
      assertEquals('a', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull[null,\" string\",false,false,[false]]\":}}]");
      jSONScanner0.nextToken((-23));
      jSONScanner0.nextToken();
      jSONScanner0.skipObject(false);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull[null,\" string\",false,false,[false]]\":}}]");
      jSONScanner0.skipObject(false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.nextToken();
      String string0 = jSONScanner0.info();
      assertEquals("pos 10, line 1, column 11\"a string\"", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'\",R", 479);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(479, 113);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = JSONScanner.charArrayCompare("{\"(Ljava/util/Collection;\":\"hello\",\"TODO\":[],\"illegal str, \":true,\"illegal state. \":[],\"parseInt error : \":null,\"x\":99,\"\"@type\":\"{\"fruit\":false,\"size\":-99,\"illegal json, \":\"Red\",\"\":true,\"value2\":-99,\"number\":\"pos \"}\":{}}", 163, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("-99", (-1), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = JSONScanner.charArrayCompare("{\"x\":\"hello\",\"TODO\":7,\"()Z\":true,\"a\":[],\"b\":{},\"xx\":true}", 158, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("writeNormal");
      int int0 = jSONScanner0.indexOf('<', 65279);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      jSONScanner0.scanTypeName((SymbolTable) null);
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull-99\":99,\"evalSize error : \":\"a string\",\"illegal state. \":{},\"pos \":99},{\"(Ljava/lang/Object;Ljava/lang/String;)V\":true}]");
      jSONScanner0.nextToken(51068);
      jSONScanner0.nextToken();
      long[] longArray0 = new long[1];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull-99\":99,\"evalSize error : \":\"a string\",\"illegal state. \":{\"\"@type\":\"[{\"\"fruit\":9\":false},[]]\":false},\"pos \":99},{\"(Ljava/lang/Object;Ljava/lang/String;)V\":true,\"\"@type\":\"[{\"\"fruit\":9\":false},[]]\":99}]");
      jSONScanner0.nextToken(51068);
      jSONScanner0.nextToken();
      long[] longArray0 = new long[1];
      jSONScanner0.seekObjectToField(longArray0);
      boolean boolean0 = jSONScanner0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true-\"=alue2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      jSONScanner0.nextToken((-1755));
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"~NMjyFjf<\":[{}]},[]]");
      jSONScanner0.nextToken(51068);
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"bin\":-99,\"\"\"@type\":\":{}},[]]");
      jSONScanner0.nextToken(51068);
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 14, line 1, column 15[{\"bin\":-99,\"\"\"@type\":\":{}},[]]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"com.alibaba.fastjson.asm.MethodWriter\":\"a string\"},99,-99]");
      jSONScanner0.nextToken(51068);
      jSONScanner0.nextToken();
      long[] longArray0 = new long[1];
      jSONScanner0.seekObjectToField(longArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"com.alibaba.fastjson.util.ParameterizedTypeImpl\":[]}]");
      jSONScanner0.nextToken(1840);
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) 1840, false);
      assertEquals(']', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"/Date(\":-99,\"not close json text, token : \":[],\"\"fruit\":{\":99}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-5939269048541779808L), true);
      assertEquals(14, jSONScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json, \":null,\"pos \":\"a string\",\"springfox.documentation.spring.web.json.Json\":{},\"com.alibaba.fastjson.asm.TypeCollector\":{},\"unclosed str\":\"pos \",\"dd/MM/yyyy HH:mm:ss\":{}}", 0);
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) 0, false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"com.alibaba.fastjson.asm.MethodWriter\":-99,\"com.alibaba.fastjson.util.ParameterizedTypeImpl\":{}}]");
      jSONScanner0.nextToken(1839);
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((long) 1839, true);
      assertEquals(1, jSONScanner0.pos());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json, \":99,\"pos \":\"a string\",\"springfox.documentation.spring.web.json.Json\":{},\"com.alibaba.fastjson.asm.TypeCollector\":{},\"unclosed str\":\"pos \",\"dd/MM/yyyy HH:mm:ss\":{},\", minimumCapacity=\":false}", 0);
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"hasPropertyFilters\":true},[]]");
      jSONScanner0.nextToken(51068);
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-2568L), true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax error : \":\"a string\",\", column \":{},\"\":\"a string\"}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((-287L), false);
      assertEquals(59, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"/Date(\":-9V,\"not close json text, token : \":[],\"\"fruit\":{\":99}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(10L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":99,\"error parse null\":null,\"illegal json, \":\"\"@type\":\"[4@Sg}=+Tm![9X\",\"value\":true,\"value2\":-99,\"number\":\"pos \",\"x\":null}", 0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 2, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"/Date(\":-99,\"not close json text, token : \":[],\"\"fruit\":{\":99}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) '\u0000', false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 51, line 1, column 52{\"/Date(\":-99,\"not close json text, token : \":[],\"\"fruit\":{\":99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      jSONScanner0.nextToken((-1755));
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-2L), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 58, line 1, column 59{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":", 2014);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-3814L), true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"com.alibaba.fastjson.asm.MethodWriter\":-99,\"com.alibaba.fastjson.util.ParameterizedTypeImpl\":null},[],\"a string\"]");
      jSONScanner0.nextToken(1839);
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField(1175976911015356977L, false);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"com.alibaba.fastjson.asm.MethodWriter\":false,\"com.alibaba.fastjson.util.ParameterizedTypeImpl\":{\"_asm_deser__\":\"a string\",\"\"@type\":\";f@Tl(bbv\":null},\"\"@type\":\";f@Tl(bbv\":-99},99,[-99]]");
      jSONScanner0.nextToken(1839);
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField(1175976911015356977L, false);
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"com.alibaba.fastjson.asm.MethodWriter\":false,\"com.alibaba.fastjson.util.ParameterizedTypeImpl\":false,\"\"@type\":\"[null,false]\":null}]");
      jSONScanner0.nextToken(1839);
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), true);
      assertEquals('@', jSONScanner0.getCurrent());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"listContext\":{Q}]");
      jSONScanner0.nextToken(229);
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-2556L), false);
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"false\":null}", 2014);
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField(0L, false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]");
      jSONScanner0.nextToken(0);
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField(0L, false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}", 2014);
      jSONScanner0.nextToken(6733);
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((-4145L), false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-1L), false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 8);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 8, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}\":{}},\"a string\",\"a string\",99]");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem('H');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",\"a string\",-99]", 2014);
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(2014);
      assertEquals(20, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",\"a string\",-99,[],null,\"a string\"]", 2014);
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(2014);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}\":{}},\"a string\",\"a string\",99]");
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem('\u0000');
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}\":{}},\"a string\",\"a string\",99]");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem('\u0000');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 2012);
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem(2012);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rue");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"'zb&kDn#&$xrf");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0~NMjyFjf<,zL<;_Kf");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,99]", 2031);
      jSONScanner0.bp = 1721;
      jSONScanner0.skipArray();
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,true,[],{\"ull[null,[\"a string\"]]\":[]}]");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1[99,false,true,[],{\"ull[null,[\"a string\"]]\":[]}]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":{},\"\"fruit\":f\":7,\"z\":true,\"a\":{},\"parseInt error : \":{}}", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[4@Sg}=+Tm![9X", 169);
      jSONScanner0.skipObject();
      assertEquals(6, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"\"fruit\":9\":false},[]]");
      jSONScanner0.nextToken(31);
      jSONScanner0.nextToken();
      jSONScanner0.skipObject(false);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"javax.persistence.OneToMany\":-99,\"java.time.ZoneOffset\":-99}");
      jSONScanner0.nextToken(51068);
      jSONScanner0.skipObject(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,true,[],{\"ull[null,[\"a string\"]]\":[]}]");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(114);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax error : \":null,\"javax.xml.datatype.XMLGregorianCalendar\":false,\"ull{}\":[]}");
      jSONScanner0.nextToken(51032);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals(1, jSONScanner0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a s");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[6];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a strin", 731);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, 731, parserConfig0.symbolTable);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"\":false,\"parseInt error : \":[],\"unclosed str\":true,\"value2\":99,\"number\":\"a string\"}");
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m~&*.", parserConfig0);
      jSONScanner0.scanFieldStringArray(charArray0, 0, defaultJSONParser0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("", 8);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanFieldStringArray(charArray0, 8, defaultJSONParser0.symbolTable);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0~NMjyFjf<5zL<;_9f");
      ParserConfig parserConfig0 = new ParserConfig(true);
      jSONScanner0.scanFieldStringArray((char[]) null, (-898), parserConfig0.symbolTable);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5}wU~");
      jSONScanner0.scanDate('a');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nv8;LysIjn:G\u0003h#", (-303));
      jSONScanner0.scanDate('.');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9223372036854775808", (-172));
      jSONScanner0.scanDate('%');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false,{},false,false]");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('g');
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      jSONScanner0.scanDate('%');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-Ke`d-M>.AI6");
      jSONScanner0.scanDate('`');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull[null,\"a string\",false,false,[false]]\":{}}]");
      jSONScanner0.scanDate('|');
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99]");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('h');
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"no");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('\u0019');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,[],-99]");
      jSONScanner0.nextToken();
      jSONScanner0.scanLong(',');
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(5034930684938186517L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,-99,99,false,false]");
      jSONScanner0.nextToken();
      jSONScanner0.scanLong('_');
      assertEquals(5, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null]", 2031);
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.scanLong('?');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nv8;LysIjn:G\u0003h#", (-303));
      long long0 = jSONScanner0.scanLong('a');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"99\":null,\"\"@type\":\"{\"fruit\":{},\"parseInt error : \":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":false}");
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.scanLong('8');
      assertEquals(12, jSONScanner0.token());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0~NMjyFjf<,zL<;_Kf");
      long long0 = jSONScanner0.scanLong(',');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,-99,-99,{},99,-99,{},-99]");
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.scanLong('f');
      assertEquals(14, jSONScanner0.token());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5T9Fbh`xe=($]k", (-1));
      double double0 = jSONScanner0.scanDouble('T');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"99\":null,\"\"@type\":\"{\"fruit\":{},\"parseInt error : \":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":false}");
      jSONScanner0.nextToken();
      double double0 = jSONScanner0.scanDouble('\u0096');
      assertEquals(12, jSONScanner0.token());
      assertEquals(99.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-6q^k", 1716);
      double double0 = jSONScanner0.scanDouble('[');
      assertEquals((-6.0), double0, 0.01);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"no");
      jSONScanner0.scanDouble('W');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      double double0 = jSONScanner0.scanDouble('J');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5 #Fv.");
      int int0 = jSONScanner0.scanInt('s');
      assertEquals(5, int0);
      assertEquals('5', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"no");
      jSONScanner0.scanInt('O');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,false,[],false]");
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('p');
      assertEquals(5, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k\"9");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('K');
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"99\":null,\"\"@type\":\"{\"fruit\":{},\"parseInt error : \":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":false}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('/');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0~NMjyFjf<5zL<;_9f");
      int int0 = jSONScanner0.scanInt('3');
      assertEquals(0, int0);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,false,\"a string\",false,-99]");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('p');
      assertEquals(14, jSONScanner0.token());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a s");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('#');
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken(0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"can not cast to float, value : \":false,\"illegal str, \":{},\"unclosed str\":{},\"parseInt error : \":[],\"x\":-99}");
      char[] charArray0 = new char[6];
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"\":false,\"parseInt error : \":[],\"unclosed str\":true,\"value2\":99,\"number\":\"a string\"}");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}\":{}},\"a string\",\"a string\",99]");
      char[] charArray0 = new char[3];
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0l.4Ej)J&3!Z12LSE*", (-303));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,\"a string\",false,false]", 2014);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", 2014);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,true]", 2014);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\"]", 2014);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 2014);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      char[] charArray0 = new char[1];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a s");
      jSONScanner0.nextToken();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",99]", 2014);
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(14, jSONScanner0.token());
      assertEquals((-2478609061457174971L), long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"\":false,\"parseInt error : \":[],\"unclosed str\":true,\"value2\":99,\"number\":\"a string\"}");
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("", 8);
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,{},[]]");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=iOpt,Ex*");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('=', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldDate(charArray1);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0l.4Ej)J&3!Z12LSE*", (-303));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      char[] charArray0 = new char[15];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",\"a string\"]", 2014);
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"false", (-1340));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"no");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a s");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("YeyAM,x*\"bj");
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0~NMjyFjf<5zL<;_9f");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"\":false,\"parseInt error : \":[],\"unclosed str\":true,\"value2\":99,\"number\":\"a string\"}");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      char[] charArray0 = new char[1];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken(0);
      jSONScanner0.ch = '\'';
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(55296, 123, 55296, defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', '1', '1', '1', '1', '1', (-1755), (-1755));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '0', '0', '0', '0');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '7', ':', '*', ':', ':', 34, 1984);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,\"a string\"]");
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('3', 'g', '3', 'g', 'g', 'B', 3903, 20);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', ':', '0', '9', 97, 163);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('.', '.', '.', '.', 'A', '.', (-222), (-222));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', '<', 'R');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`'-ov(@fE$BC", 2031);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('`', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java/lang/Double");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"MM/dd/yyyy HH:mm:ss\":[]}");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,false,-99]");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,false]");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mH9iU;=|x}T?$FzG_");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('m', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 72);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Dt.zG=P87G5t5Eg&");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('D', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/qr;)*CqRCzIc|DWwV", (-835));
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("OgB #3(:PF8~", 2431);
      ParserConfig parserConfig0 = new ParserConfig(true);
      jSONScanner0.scanSymbol(parserConfig0.symbolTable);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("evalKeySe. drro : ");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0bz");
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.decimalValue();
      assertEquals('b', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("evalKeySe. drro : ");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DaFx7I{$;-rTm&|");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-67), (-67));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\"parseInt error : \":\"index must > 0, but \",\"illegal json, \":\"com.alibaba.fastjson.parser.JSONScanner\",\"\"@type\":\"{\"fruit\":false,\"size\":-99,\"illegal json, \":\"Red\",\"\":true,\"value2\":-99,\"number\":\"pos \"}\":[[]],\"value2\":-99,\"number\":[]}\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"number\":\"pos \"}");
      String string0 = jSONScanner0.stringVal();
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("HzS+6TTt`$9u:D{C_");
      jSONScanner0.bytesValue();
      assertEquals('H', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      jSONScanner0.nextToken(35);
      int int0 = jSONScanner0.scanType("{\"x\":\"hello\",\"index must > 0, but \":7,\"z\":null,\"a\":true,\"\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}\":{},\"xx\":true,\"xxx\":{}}");
      assertEquals(12, jSONScanner0.token());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("gX{9fL%\"6x%|aBZ", (-1550));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("ull-99", (-3883), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDate(';');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".^SWt&n[OvN c_<:/v");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(40, 51068, (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3\"$~# pnTvp2");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('3', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k<u");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('H', 'H', 'g', 'g', 'H', 'g');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"\"@type\":\"\":false,\"parseInt error : \":[],\"unclosed str\":true,\"value2\":99,\"number\":\"a string\"}", 7);
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(7, (char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\"J\"value\":true,\"value2\":-99,\"numbNr\":\"pos \"}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\"J\"value\":true,\"value2\":-99,\"numbNr\":\"pos \"}");
      jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"fruit\":false,\"size\":\"Large\",\"illegal json, \":\"Red\",\"value\":true,\"value2\":-99,\"number\":\"pos \"}");
      jSONScanner0.scanDate('n');
      assertEquals((-1), jSONScanner0.matchStat);
  }
}
