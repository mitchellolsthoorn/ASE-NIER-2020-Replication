/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 02:28:07 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoDate;
import java.time.temporal.TemporalField;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"@type\":\"{\", column \":false,\"\":{\", column \":false,\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":false,\"com.alibaba.fastjson.PropertyNamingStrategy\":-99},\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\",\"illegal str, \":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":[[]]}");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      String string0 = jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{}", 120);
      jSONScanner0.nextToken();
      long[] longArray0 = new long[8];
      jSONScanner0.seekObjectToField(longArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-706L), true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".>QmaO92U9B:t");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(3L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // .
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".>QmaO92U9B:t");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" b2aY57L*>G$L$@");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6L)");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-2570), (SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2\t
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("91N9");
      long long0 = jSONScanner0.scanLong('1');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(91L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}0_V/tc*{");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.next();
      long long0 = jSONScanner0.scanLong('0');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanLong('4');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0dOfLw%nnJPffeB0ix", (-2));
      double double0 = jSONScanner0.scanDouble('6');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      double double0 = jSONScanner0.scanDouble('~');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("91N9");
      int int0 = jSONScanner0.scanInt('6');
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}0_V/tc*{");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.next();
      int int0 = jSONScanner0.scanInt('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}0_V/tc*{");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      char[] charArray0 = new char[1];
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 69);
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99]");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanDate('m');
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}0_V/tc*{");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '0', '7', ';', ';', 1243, (-643));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', 'c', 'c', '9', 'c', '9', (-2), (-2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\"\"@type\":\"{\"a\":null,\"unclosed str, \":7,\"can not cast to float, value : \":false,\"\":\"a string\",\"parseInt error : \":false,\"x\":false}\":null,\"unclosed str, \":7,\"can not cast to float, value : \":false,\"\":[],\"parseInt error : \":false,\"x\":false}\":null,\"\":\"\",\"com.alibaba.fastjson.parser.deserializer.MapDeserializer\":\"Red\",\"unclosed str\":{},\"number\":true,\"x\":-99}");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('+', 'u', '+');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", 101);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", jSONScanner0, parserConfig0);
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".>QmaO92U9B:t");
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport", 48);
      jSONScanner0.token = 48;
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      boolean boolean0 = JSONScanner.charArrayCompare("N3<tNC]+ZLHHt\"p5ER3", 1, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".>QmaO92U9B:t");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1.>QmaO92U9B:t
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`-99,[]]");
      jSONScanner0.skipArray();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 2092, 0, 43);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTime('v', 'v', 'T', 'H', 'c', 'm');
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}0_V/tc*{");
      char[] charArray0 = new char[6];
      jSONScanner0.copyTo(2, 2, charArray0);
      assertArrayEquals(new char[] {'0', '_', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.PrimitiveArraySerializer");
      char[] charArray0 = new char[9];
      jSONScanner0.arrayCopy(2, charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.IdentityHashMap");
      char[] charArray0 = jSONScanner0.sub_chars(0, 34);
      assertEquals(34, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char[] charArray1 = jSONScanner0.sub_chars(0, 0);
      jSONScanner0.scanFieldBoolean(charArray1);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      String string0 = jSONScanner0.subString(0, 2);
      assertEquals("-9", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.subString(0, 0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.IdentityHashMap");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbol(defaultJSONParser0.symbolTable);
      jSONScanner0.stringVal();
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner("", 2126008811);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", 101);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      String string0 = jSONScanner0.scanSymbol(parserConfig0.symbolTable);
      assertEquals("unclosed str", string0);
      
      String string1 = jSONScanner0.numberString();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.isEOF();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":[],\"value2\":false,\"number\":\"1\"}", 0);
      int int0 = jSONScanner0.indexOf('c', 0);
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}d100_V@/tc*{");
      int int0 = jSONScanner0.indexOf('K', 65535);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3{M7z*%3t#8");
      jSONScanner0.nextToken();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((byte)3, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", colum");
      char char0 = jSONScanner0.charAt(83);
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}d100_V@/tc*{");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.IdentityHashMap");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('c', char0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".>QmaO92U9B:t");
      char[] charArray0 = new char[6];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3-4we>47IP@_ubj!cu");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      MinguoDate minguoDate0 = MockMinguoDate.now();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(minguoDate0, defaultJSONParser0.lexer, parserConfig0);
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertArrayEquals(new byte[] {(byte) (-29)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONScanner jSONScanner0 = new JSONScanner("qP&pU^lH h1#GUL", (-1033));
      String string0 = jSONScanner0.addSymbol(0, 6, 0, parserConfig0.symbolTable);
      assertEquals("qP&pU^", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\", column \":false,\"\":{\", column \":false,\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":false,\"com.alibaba.fastjson.PropertyNamingStrategy\":99},\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\",\"illegal str, \":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":[[]]}\":\"a string\",\"unclosed str, \":7,\"can not cast to float, value : \":false,\"\":\"a string\",\"parseInt error : \":false,\"x\":false}");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      String string0 = jSONScanner0.addSymbol(0, 0, 5767, defaultJSONParser0.symbolTable);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("p J");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(109, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull~kKI|$+y*$pLy");
      // Undeclared exception!
      try { 
        jSONScanner0.subString(512, 512);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":null}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.next();
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false,\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":false,\"com.alibaba.fastjson.PropertyNamingStrategy\":99,\"$)esQu, H\":[]},\" not found\":true,\"illegal str, \":{\"\":{\"x\":false,\"\"@type\":\"{\", /olumn \":false,\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\",\"illegal str, \":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":[{}]}\":false}},\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":\"a string\"}");
      jSONScanner0.bp = (-2);
      // Undeclared exception!
      try { 
        jSONScanner0.scanLong('u');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2)obR{|[+P4'lAYIF2");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\t");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, 2689, defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PA", 47);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?4~9D");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mH2");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0j?6xPy_");
      jSONScanner0.bp = (-2558);
      // Undeclared exception!
      try { 
        jSONScanner0.scanDouble('7');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3{M7z*%3t#8");
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("processVa");
      jSONScanner0.bp = 10;
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":\"a string\",\"\"@type\":\"SoCa!3L&W Y7~;\":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-2571), (-2571), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3-4we>47IP@_ubj!cu");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-824));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("w3Vc4Q<-d*^+X\"", (-377), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 115);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[[],[],fa\":1005,\"write javaBean error, fastjson version 1.2.68\":99,\"ull`PA\":true}");
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(71, charArray0, 71, 71);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o9F)7z\"*D%V");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(9, 44, 44, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$)esQu, Ht~JLc");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$)esQu, Ht~JLc", parserConfig0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(114, (-1965), (-64), defaultJSONParser0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 47, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 101);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 546);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"write javaBean error, fastjson version 1.2.68\":-99,\"\t\":99}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[3];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"write javaBean error, fastjson version 1.2.68\":null,\"\t\":99}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(1999853494446917666L, false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"bsD<:oK}gRa~4g'+");
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~/]lf");
      jSONScanner0.skipArray(false);
      assertEquals(3, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"org.javamoney.moneta.Money\":99,\"()Z\":7,\"x\":\"\",\":null,\"un\":[],\"\":null}", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"org.javamoney.moneta.Money\":99,\"()Z\":7,\"x\":\"\",\":null,\"un\":[],\"\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken();
      jSONScanner0.next();
      jSONScanner0.skipObject(false);
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",null]");
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem(372);
      jSONScanner0.skipObject(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",null]");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2[\"a string\",null]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}d100_V@/tc*{");
      jSONScanner0.skipObject(false);
      double double0 = jSONScanner0.scanDouble('p');
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b}]R(");
      jSONScanner0.skipObject(false);
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", 101);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", jSONScanner0, parserConfig0);
      jSONScanner0.skipObject(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\", column \":false,\"\":{\", column \":false,\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":false,\"com.alibaba.fastjson.PropertyNamingStrategy\":99},\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\",\"illegal str, \":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":[[]]}\":\"a string\",\"unclosed str, \":7,\"can not cast to float, value : \":false,\"\":\"a string\",\"parseInt error : \":false,\"x\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"\"@type\":\"{\", column \":false,\"\":{\", column \":false,\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":false,\"com.alibaba.fastjson.PropertyNamingStrategy\":99},\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\",\"illegal str, \":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":[[]]}\":\"a string\",\"unclosed str, \":7,\"can not cast to float, value : \":false,\"\":\"a string\",\"parseInt error : \":false,\"x\":false}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.nextToken();
      jSONScanner0.info();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("illegal json, ", (-1), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("o9F)7z\"*D%V", (-1), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("IpLb;}31", 43, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[18];
      JSONScanner jSONScanner0 = new JSONScanner("{\"write javaBean error, fastjson version 1.2.68\":{},\"\t\":\"a string\",\"\"@type\":\"{\"-99,[]]\":99,\"$)esQu, H\":true,\"unclosed str, \":-99,\"unclosed str\":99}\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(91, charArray0, (-4556), 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}d100_V@/tc*{");
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\", column \":false,\"\":{\", column \":false,\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":false,\"com.alibaba.fastjson.PropertyNamingStrategy\":-99},\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\",\"illegal str, \":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":[[]]}", (-1));
      jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"6}M_V/tc*{", 1024);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"a string\"");
      String string0 = jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("KpdDFI_K'G+m.SQnNr");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[8];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 5, line 1, column 6{\"\":{
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"write javaBean error, fastjson version 1.2.68\":\"a string\",\"\t\":\"a string\"}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[3];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(75, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(I)Ljava/lang/Object;\":99,\"unclosed str\":null}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"2^uLJ17u\":0,\"\"Otype\":\"\":-99}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 16, line 1, column 17{\"2^uLJ17u\":0,\"\"Otype\":\"\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"write javaBean error, fastjson version 1.2.68\":-99,\"\t\":99,\"ull\":[]}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[3];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", column \":4,\"not match \":-99}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[3];
      jSONScanner0.seekObjectToField(longArray0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false,\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":false,\"com.alibaba.fastjson.PropertyNamingStrategy\":99,\"$)esQu, H\":[]},\" not found\":true,\"illegal str, \":{\"\":{\"x\":false,\"\"@type\":\"{\", /olumn \":false,\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\",\"illegal str, \":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":[{}]}\":false}},\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":\"a string\"}");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;\":99,\"com.alibaba.fastjson.serializer.StringCodec\":null,\"write javaBean error, fastjson version 1.2.68\":false,\"[[],[],fa\":[]}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-214748364), false);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"LocalVariableTable\":[],\":true\":\"a string\"}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-1032L), true);
      assertEquals(']', jSONScanner0.getCurrent());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", 101);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", jSONScanner0, parserConfig0);
      int int0 = jSONScanner0.seekObjectToField(1099511628211L, true);
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"LocalVariableTable\":1005,\"expect string\":\"a string\",\"xx\":false}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-1032L), true);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[[],[],fa\":[],\"unclosed str, \":\"a string\",\"write javaBean error, fastjson version 1.2.68\":[],\"com.alibaba.fastjson.serializer.StringCodec\":99,\";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;\":null}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-214748364), false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"pos \":-99,\"expect string\":\"a string\",\", column \":false,\"\t\":{\"\t\":false},\"xx\":true}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((-701L), false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99,[]]\":99,\"$)esQu, H\":null,\"MapSortField\":true,\"`-99,[]]\":-99,\"value \":\"a string\"}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-8345146961110378485L), false);
      assertEquals(86, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"}-v!vV}J[\":0.0}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField(1999853494446917666L, false);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[[],[],fa\":1005,\"write javaBean error, fastjson version 1.2.68\":{}}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((-1294L), false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"2^uLJ17u\":0,\"\"Otype\":\"\":-99}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 16, line 1, column 17{\"2^uLJ17u\":0,\"\"Otype\":\"\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"np@qI4\":-99,\"write javaBean error, fastjson version 1.2.68\":[false],\"0}C%=4G1-\":-99,\"\"@type\":\"{\"{\"$ref\":\"@\"}\":NaN}\":{}}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), false);
      assertEquals(16, jSONScanner0.token());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"write javaBean error, fastjson version 1.2.68\":{\"{\"unclose\":null},\"\t\":99,\"y\":{\"{\"unclose\":false}}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField(1999853494446917668L, false);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".>QmaO92U9B:t");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(4243L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[true,-99,[]],[\"a string\"]]");
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem(372);
      int int0 = jSONScanner0.seekObjectToField((long) 372, false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"write javaBean error, fastjson version 1.2.68\":\"a string\",\"\t\":{}}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[3];
      jSONScanner0.seekObjectToField(longArray0);
      int int0 = jSONScanner0.seekObjectToField((-1009L), false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"com.alibaa.fastjson.parser.JSONScanner\":99,\"\":\"a string\",\"PA\":null},{\"\"@type\":\"\":[]}]");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(357);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(357);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json.
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false,[],true]");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(372);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,99,\"a string\"]");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(26);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[-99],99,\"a string\"]");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(0);
      assertEquals(1, jSONScanner0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~kKI|$+y*$pLy");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem('~');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"com.alibaa.fastjson.parser.JSONScanner\":[],\"\":null},{}]");
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem(357);
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem(357);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~kKI|$+y*$pLy");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -187
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7\"po.s>", 16);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$)esQu, Ht~JLc");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x}/LUKd", 99999);
      jSONScanner0.bp = 99999;
      jSONScanner0.skipArray(false);
      assertEquals('x', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"b\":{\"x\":\"a string\"},\"illegal state. \":{},\"unclosed str\":true,\"com.alibaba.fastjson.serializer.JodaCodec\":true,\"com.alibaba.fastjson.parser.JSONScanner\":true}", 115);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"write javaBean error, fastjson version 1.2.68\":{},\"\t\":99,\"\"@type\":\"{\"-99,[]]\":true,\"$)esQu, H\":true,\"unclosed str, \":-99,\"unclosed str\":99}\":99}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"write javaBean error, fastjson version 1.2.68\":{},\"\t\":99,\"\"@type\":\"{\"-99,[]]\":true,\"$)esQu, H\":true,\"unclosed str, \":-99,\"unclosed str\":99}\":99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{},\"a string\",[-99],[]]");
      jSONScanner0.nextToken();
      jSONScanner0.skipArray(true);
      jSONScanner0.next();
      jSONScanner0.skipObject();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false,\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":false,\"com.alibaba.fastjson.PropertyNamingStrategy\":99,\"$)esQu, H\":[]},\" not found\":true,\"illegal str, \":{\"\":{\"x\":false,\"\"@type\":\"{\", /olumn \":false,\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\",\"illegal str, \":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":[{}]}\":false}},\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":\"a string\"}");
      char[] charArray0 = new char[1];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", 101);
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", jSONScanner0, parserConfig0);
      jSONScanner0.scanFieldStringArray(charArray0, 0, defaultJSONParser0.symbolTable);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", 101);
      jSONScanner0.scanFieldStringArray((char[]) null, 101, parserConfig0.symbolTable);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str, ");
      char[] charArray0 = new char[0];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      jSONScanner0.scanSymbol(parserConfig0.symbolTable);
      jSONScanner0.scanFieldStringArray(charArray0, 125, parserConfig0.symbolTable);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~kKI|$+y*$pLy");
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2~kKI|$+y*$pLy
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}d100_V@/tc*{");
      jSONScanner0.scanDate('R');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"np@qI4\":-99,\"write javaBean error, fastjson version 1.2.68\":[false],\"0}C%=4G1-\":-99,\"\"@type\":\"{\"{\"$ref\":\"@\"}\":NaN}\":{}}");
      jSONScanner0.nextToken();
      jSONScanner0.next();
      jSONScanner0.scanDate(';');
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`-99,[]]");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('m');
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("91N9");
      jSONScanner0.scanDate('P');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N!`:,8");
      jSONScanner0.scanDate('<');
      assertEquals('N', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-P99");
      jSONScanner0.scanDate('m');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{}");
      jSONScanner0.next();
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("![ceC2ye#%q29W=sjo", 462);
      jSONScanner0.scanDate('<');
      assertEquals('!', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3-4we>47IP@_ubj!cu");
      long long0 = jSONScanner0.scanLong('-');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"np@qI4\":-99,\"write javaBean error, fastjson version 1.2.68\":[false],\"0}C%=4G1-\":-99,\"\"@type\":\"{\"{\"$ref\":\"@\"}\":NaN}\":{}}");
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.scanLong(':');
      assertEquals(12, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99,[]]\":99,\"$)esQu, H\":null,\"MapSortField\":{},\"\"@type\":\"7\"po.s>\":{}}");
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.scanLong(',');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}d100_V@/tc*{");
      double double0 = jSONScanner0.scanDouble('}');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,null,[]]", 3077);
      jSONScanner0.nextToken();
      jSONScanner0.scanDouble('b');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"np@qI4\":-99,\"write javaBean error, fastjson version 1.2.68\":[false],\"0}C%=4G1-\":-99,\"\"@type\":\"{\"{\"$ref\":\"@\"}\":NaN}\":{}}");
      jSONScanner0.nextToken();
      jSONScanner0.scanDouble('d');
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99,[]]\":99,\"$)esQu, H\":null,\"MapSortField\":{},\"\"@type\":\"7\"po.s>\":{}}");
      jSONScanner0.nextToken();
      double double0 = jSONScanner0.scanDouble('h');
      assertEquals(12, jSONScanner0.token());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}d100_V@/tc*{");
      int int0 = jSONScanner0.scanInt('}');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"np@qI4\":-99,\"write javaBean error, fastjson version 1.2.68\":[false],\"0}C%=4G1-\":-99,\"\"@type\":\"{\"{\"$ref\":\"@\"}\":NaN}\":{}}");
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('d');
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,[],\"a string\",99]");
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('5');
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-99,[]]\":99,\"$)esQu, H\":null,\"MapSortField\":true,\"`-99,[]]\":-99,\"value \":\"a string\"}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('5');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3-4we>47IP@_ubj!cu");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('M');
      assertEquals(2, jSONScanner0.token());
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"write javaBean error, fastjson version 1.2.68\":{\"{\"unclose\":null},\"\t\":99,\"y\":{\"{\"unclose\":false}}");
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('F');
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      jSONScanner0.scanInt('&');
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false]");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":\"a string\"}");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str, ");
      char[] charArray0 = new char[6];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}d100_V@/tc*{");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`-99,[]]");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", 101);
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", jSONScanner0, parserConfig0);
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false,\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":false,\"com.alibaba.fastjson.PropertyNamingStrategy\":99,\"$)esQu, H\":[]},\" not found\":true,\"illegal str, \":{\"\":{\"x\":false,\"\"@type\":\"{\", /olumn \":false,\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\",\"illegal str, \":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":[{}]}\":false}},\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":\"a string\"}");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":{\"{\"fruit\":\":[]},\"\":null,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":true,\"unclosed str, \":99}", 101);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      char[] charArray0 = new char[5];
      jSONScanner0.nextIdent();
      Class<Method> class0 = Method.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 08KYA)V|@a", 16);
      Class<TemporalField> class0 = TemporalField.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1j#W");
      char[] charArray0 = new char[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", 0);
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.", 158);
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3{M7z*%3t#8");
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`-9,[]-]");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-P99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}0_V/tc*{");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('}', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"com.alibaa.fastjson.parser.JSONScanner\":99,\"\":false},{}]");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.seekArrayToItem(357);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}0_V/tc*{");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string", 101);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",null,[]]");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      long long0 = jSONScanner0.scanLong('}');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string", 101);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      char[] charArray0 = new char[3];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("91N9");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}d100_V@/tc*{");
      char[] charArray0 = new char[0];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" b2aY57L*>G$L$@");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`-99,[]]");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string", 101);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-8345146961110378485L), false);
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '0', '0', 2, '0');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '7', '7', '7', '7', '7', 2708, (-2560));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('6', '6', '6', 'g', 'g', '6', 97, 68);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '2', '$', '$', 'i', 'P', 730, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"2^uLJ17u\":0,\"\"Otype\":\"\":-99}");
      jSONScanner0.next();
      jSONScanner0.scanDate('\"');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '$', '$', '>', '>', '>', (-968), 34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', '4', ':', ':', '4', ':', (-886), (-2558));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate(',', ',', ',', ',', ',', ',', (-1), 305);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(I)Ljava/lang/Object;\":[],\"unclosed str\":\"a string\"}");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', '-', 'x', 'x', ')');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.PrimitiveArraySerializer");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}0_V/tc*{");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\"(null]");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", column \":{}}");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`j|;%)L#T2aM1LLX");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('`', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[-99],[],\"a string\",{}]");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      jSONScanner0.scanISO8601DateIfMatch();
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9F9");
      jSONScanner0.nextToken();
      jSONScanner0.decimalValue();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Sm", 512);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9F9", 115);
      jSONScanner0.nextToken();
      jSONScanner0.numberString();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3{M7z*%3t#8");
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
      
      String string0 = jSONScanner0.numberString();
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6}0_V/tc*{");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(43, (-638));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("GAZpVfO,");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('G', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"\":false,\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":false,\"com.alibaba.fastjson.PropertyNamingStrategy\":99,\"$)esQu, H\":[]},\" not found\":true,\"illegal str, \":{\"\":{\"x\":false,\"\"@type\":\"{\", /olumn \":false,\"com.alibaba.fastjson.parser.JSONScanner\":\"a string\",\"illegal str, \":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":[{}]}\":false}},\";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;\":true,\"com.alibaba.fastjson.PropertyNamingStrategy\":\"a string\"}");
      jSONScanner0.hasSpecial = true;
      jSONScanner0.bytesValue();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3-4we>47IP@_ubj!cu");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\t");
      char[] charArray0 = new char[6];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      double double0 = jSONScanner0.scanDouble('R');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.asm.TypeCollector");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(2, 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",6C+B'i9@ihje'");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7\"po.s>");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('D', 'D', 'D');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3{M7z*%3t#8");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('S', 'm', 'S', 'm', 'S', 'm');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("GAZpVfO,");
      SymbolTable symbolTable0 = new SymbolTable(193);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-352), 0, (-352), symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
