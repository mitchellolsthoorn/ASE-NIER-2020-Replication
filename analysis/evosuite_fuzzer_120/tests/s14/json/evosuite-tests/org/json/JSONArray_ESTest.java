/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 02:23:06 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.Window;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.security.CryptoPrimitive;
import java.sql.JDBCType;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JTable;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.INHERIT;
      linkedList0.addLast(processBuilder_Redirect_Type0);
      jSONArray0.put((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(966);
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      jSONArray0.put(2, (Object) integer0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(8192, true);
      int int0 = jSONArray1.optInt(8192, 4647);
      assertEquals(8193, jSONArray0.length());
      assertEquals(4647, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("java.io.StringWriter@0000000008");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      HashMap<Dialog.ModalExclusionType, Thread.State> hashMap0 = new HashMap<Dialog.ModalExclusionType, Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put(2143, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getBigInteger(57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[57] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Thread.State, Long> hashMap0 = new HashMap<Thread.State, Long>(4649);
      JSONArray jSONArray1 = jSONArray0.put(4649, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getBigDecimal(4649);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4649] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<JTable.PrintMode> linkedList0 = new LinkedList<JTable.PrintMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      MockFile mockFile0 = new MockFile("", "{\"Misplaced key.\":7,\"z\":true,\"a\":[true],\"b\":{}}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(4651, (Map<?, ?>) null);
      jSONArray0.put(4651, (Map<?, ?>) null);
      String string0 = jSONArray1.toString();
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((double) 1562);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      Number number0 = jSONArray0.optNumber(26, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jSONArray0.optNumber((-1435), (Number) bigDecimal0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-1651L));
      Number number0 = jSONArray0.optNumber(20, (Number) bigDecimal0);
      assertEquals((short) (-1651), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",null,[]]");
      long long0 = jSONArray0.optLong((-1), (long) (-2990));
      assertEquals((-2990L), long0);
      assertEquals(3, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<JTable.PrintMode> linkedList0 = new LinkedList<JTable.PrintMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      float float0 = jSONArray0.optFloat((-3407), 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat((-76), 389.0F);
      assertEquals(389.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(1247, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      double double0 = jSONArray0.optDouble((-478), (double) (-478));
      assertEquals((-478.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[true,null,[[]]]");
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      boolean boolean0 = jSONArray0.optBoolean((-5645), true);
      assertTrue(boolean0);
      assertEquals(3, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[false,false,99,[-99],true,null]");
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray0.optBigInteger(4621, bigInteger0);
      assertEquals(6, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(1475, bigInteger0);
      assertEquals((byte) (-41), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",null,[],99]");
      jSONArray0.optBigDecimal((-1934), (BigDecimal) null);
      assertEquals(4, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-66);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(70, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-463), bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, (-1.0F));
      float float0 = jSONArray0.getFloat(10);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(4651, (-1.0F));
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONArray0.write((Writer) stringWriter0, 4651, 0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, (-2241), 801);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",null,[]]");
      jSONArray0.put(93, (Object) jSONArray0);
      try { 
        jSONArray0.toString((-2990));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONArray value at index: 93
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          JSONArray jSONArray0 = new JSONArray();
          jSONArray0.put(2425, 0L);
          // Undeclared exception!
          jSONArray0.toString(12);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("S>pR|_P%o||");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Double double0 = new Double(Double.NaN);
      // Undeclared exception!
      try { 
        jSONArray0.put((Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      jSONArray0.put(1000000, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, InputStream> hashMap0 = new HashMap<Long, InputStream>();
      try { 
        jSONArray0.put((-429), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-429] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      // Undeclared exception!
      jSONArray0.put(1000000, (Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[false,-99,99,[{\"] could not convert to BigDecimal.\":null,\"\":true}],null]");
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      try { 
        jSONArray0.put((-312), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-312] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2406), (long) 30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2406] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1), 1065);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1589), (float) 110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1589] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-529), 2015.660164);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-529] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<StandardProtocolFamily> linkedList0 = new LinkedList<StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(3285, true);
      // Undeclared exception!
      jSONArray0.join("");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[fa$se,\"a string\",\"a tring\"]");
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 28 [character 29 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-97), (byte)111);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      boolean boolean0 = jSONArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",null,[]]");
      List<Object> list0 = jSONArray0.toList();
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",null,[-99,true,99]]");
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, (-3790), 4610);
      assertEquals(3, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1, (-1.0F));
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray1.write((Writer) stringWriter0, 10, 1);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 4651);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray1.write((Writer) stringWriter0, 4651, (-3790));
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, 10, 1);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Locale.FilteringMode, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Locale.FilteringMode, Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) hashMap0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.put(12, (Collection<?>) linkedList0);
      jSONArray0.put(2, (Object) null);
      assertEquals(13, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-3104), (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3104] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      String string0 = jSONArray1.optString(0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":true}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(274, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(4608, (Map<?, ?>) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jSONArray0.optNumber(4608, (Number) bigInteger0);
      assertEquals((byte)1, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(12, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      Authenticator.RequestorType authenticator_RequestorType1 = jSONArray0.optEnum(class0, 0, authenticator_RequestorType0);
      assertSame(authenticator_RequestorType1, authenticator_RequestorType0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(4651, (Map<?, ?>) null);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_ASCENT;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior1 = jSONArray1.optEnum(class0, 4651, component_BaselineResizeBehavior0);
      assertSame(component_BaselineResizeBehavior0, component_BaselineResizeBehavior1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.optInt((-1987), (-1987));
      assertEquals((-1987), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(0, (float) (-4263));
      assertEquals((-4263.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(2537, (double) 2537);
      assertEquals(2537.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(4651, (Map<?, ?>) null);
      JSONObject jSONObject0 = (JSONObject)jSONArray1.opt(4651);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[true,null,[[]]]");
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      jSONArray0.opt(1412);
      assertEquals(3, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt((-793));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.get(268);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[268] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.put(12, (Collection<?>) linkedList0);
      jSONArray0.get(12);
      assertEquals(13, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONArray0.query(jSONPointer0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",[],[-99,null,-99],false]");
      int int0 = jSONArray0.length();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(4389.734683244905);
      JSONArray jSONArray1 = jSONArray0.put((Object) double0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      jSONArray0.optEnum(class0, 4651);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(4651, (Map<?, ?>) null);
      List<Object> list0 = jSONArray1.toList();
      assertFalse(list0.contains(4651));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(45, (Object) null);
      List<Object> list0 = jSONArray1.toList();
      assertFalse(list0.contains(45));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, true);
      jSONArray0.toString(10);
      assertEquals(11, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",99,[-99,null,false],false]");
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      assertEquals(4, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Formatter.BigDecimalLayoutForm, Byte> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Byte>();
      jSONArray0.put(368, (Map<?, ?>) hashMap0);
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.toJSONObject(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.INHERIT;
      linkedList0.addLast(processBuilder_Redirect_Type0);
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray2.similar(jSONArray1);
      assertFalse(boolean0);
      assertFalse(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.put(true);
      boolean boolean0 = jSONArray2.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",null,-99]");
      boolean boolean0 = jSONArray0.similar("[\"a string\",null,-99]");
      assertEquals(3, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.similar(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      jSONArray0.remove(0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(69);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.remove((-1071));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      jSONArray0.put(1);
      jSONArray0.put(1, true);
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, true);
      jSONArray0.optString(10);
      assertEquals(11, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1, (-1.0F));
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jSONArray1.optNumber(1, (Number) bigInteger0);
      assertEquals((-1.0F), number0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, true);
      jSONArray1.optNumber(10);
      assertEquals(11, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0, (float) 0);
      long long0 = jSONArray0.optLong(0, 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, SocketFlow.Status> hashMap0 = new HashMap<JSONObject, SocketFlow.Status>();
      jSONArray0.put(1562, (Map<?, ?>) hashMap0);
      long long0 = jSONArray0.optLong(1562, (long) 1562);
      assertEquals(1562L, long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, SocketFlow.Status> hashMap0 = new HashMap<JSONObject, SocketFlow.Status>();
      jSONArray0.put(1562, (Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray0.optJSONObject(1562);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(91);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(871);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(2905, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1562, true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONArray1.optBigDecimal(1562, bigDecimal0);
      assertEquals(1563, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(4606, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(8192, true);
      jSONArray1.optBigInteger(8192, (BigInteger) null);
      assertEquals(8193, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<DayOfWeek> class0 = DayOfWeek.class;
      try { 
        jSONArray0.getEnum(class0, 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[157] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[fa$se,\"a string\",\"a tring\"]");
      int int0 = jSONArray0.optInt(1);
      assertEquals(0, int0);
      assertEquals(3, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(4651, 4651);
      int int0 = jSONArray0.optInt(4651, 60);
      assertEquals(4652, jSONArray0.length());
      assertEquals(4651, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(4651, 4651);
      float float0 = jSONArray0.optFloat(4651);
      assertEquals(4652, jSONArray0.length());
      assertEquals(4651.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, false);
      float float0 = jSONArray0.optFloat(10, (-1.0F));
      assertEquals(11, jSONArray0.length());
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(436, (float) 436);
      double double0 = jSONArray1.optDouble(436, 3304.427255);
      assertEquals(436.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, true);
      double double0 = jSONArray0.optDouble(10, (double) 10);
      assertEquals(11, jSONArray0.length());
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[fa$se,\"a string\",\"a tring\"]");
      jSONArray0.join("cZ#2 ");
      assertEquals(3, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[\"a string\",99,[-99,null,false],false]");
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      try { 
        jSONArray0.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, true);
      try { 
        jSONArray1.getString(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1, (-1.0F));
      long long0 = jSONArray0.getLong(1);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<StandardProtocolFamily, CryptoPrimitive> hashMap0 = new HashMap<StandardProtocolFamily, CryptoPrimitive>();
      jSONArray0.put(12, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getLong(12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[12] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(4651, (Map<?, ?>) null);
      JSONObject jSONObject0 = jSONArray0.getJSONObject(4651);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, false);
      try { 
        jSONArray1.getJSONObject(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Proxy.Type, Dialog.ModalExclusionType> hashMap0 = new HashMap<Proxy.Type, Dialog.ModalExclusionType>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(91, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getInt(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1, (-1.0F));
      Number number0 = jSONArray0.getNumber(1);
      assertEquals((-1.0F), number0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(8192, true);
      try { 
        jSONArray1.getNumber(8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8192] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (float) 0);
      float float0 = jSONArray1.getFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, (Map<?, ?>) null);
      try { 
        jSONArray0.getFloat(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1, (-1.0F));
      assertEquals(2, jSONArray0.length());
      
      double double0 = jSONArray0.getDouble(1);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[false,false,-99,[true,99,{}],null,true]");
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      JSONArray jSONArray1 = jSONArray0.put((int) (short)13, true);
      try { 
        jSONArray1.getDouble((short)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[13] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, true);
      boolean boolean0 = jSONArray1.optBoolean(10);
      assertEquals(11, jSONArray0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, SocketFlow.Status> hashMap0 = new HashMap<JSONObject, SocketFlow.Status>();
      JSONArray jSONArray1 = jSONArray0.put(1562, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getBoolean(1562);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1562] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, false);
      boolean boolean0 = jSONArray1.optBoolean(0, true);
      assertEquals(1, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1, false);
      try { 
        jSONArray1.getJSONArray(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[fa$se,a string\",\"a trng\"]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 16 [character 17 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(30);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      double double0 = jSONArray0.optDouble(200);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1357.4521F);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("java.io.StringWriter@0000000002");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull((-407));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[\"a string\",null,[-99,[]]]");
      int int0 = jSONArray0.optInt((-3066));
      assertEquals(3, jSONArray0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(125, (-1.0));
      boolean boolean0 = jSONArray0.similar(jSONArray0);
      assertEquals(126, jSONArray0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(662L);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.optBoolean(65);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString(929);
      assertEquals("", string0);
  }
}
