/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 22:08:27 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{&yU");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ZSq");
      jSONScanner0.setToken(125);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(0L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(.9Yn@OFdcovp[}@");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.1?_~\"I;^R");
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept", 5);
      jSONScanner0.scanSymbol(parserConfig0.symbolTable);
      jSONScanner0.scanFieldStringArray(charArray0, 5, parserConfig0.symbolTable);
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$=*C4P:Ny}Y A\"4");
      jSONScanner0.bp = (-3932);
      String string0 = jSONScanner0.info();
      assertEquals("pos -3932, line 1, column 1$=*C4P:Ny}Y A\"4", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextToken();
      Date date0 = jSONScanner0.scanDate('m');
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 3853);
      int int0 = jSONScanner0.scanInt('/');
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ullillegal state. ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-406));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-406));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept", 5);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-406));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 48);
      jSONScanner0.nextIdent();
      assertEquals(4, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('6', '9', 'H', '9', 'X', '6', 56, 1280);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', 'E', '.', 'E', 'W', 'E', (-615), 12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-747), (-747), (-747));
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone(')', ']', ')', ')', 'q');
      jSONScanner0.setTimeZone('K', ':', 'K', '\'', '\'');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]$=*C4P:Ny}Y A\"4");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('!', '!', '!', '!', '!');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Type;\":null}");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('m');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1}C6)9yEQWuu`");
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9O9");
      jSONScanner0.nextToken();
      double double0 = jSONScanner0.doubleValue();
      assertEquals((-9.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("lE$Wq0m$!_Z^/U&", 47);
      jSONScanner0.setToken(53);
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9a trig");
      int int0 = jSONScanner0.scanType((String) null);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-2147483648\":true,\"`4SI,D(}1\":true,\"com.alibaba.fastjson.parser.SymbolTable\":false,\":true\":null}");
      jSONScanner0.bp = 2147480;
      double double0 = jSONScanner0.scanDouble('.');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&;I7({MAhzCu&v", (-571));
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1&;I7({MAhzCu&v
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n`4SI,D(}1", 445);
      jSONScanner0.skipObject();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IZ>a@(6W8L}Ea9:", 5);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1IZ>a@(6W8L}Ea9:
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(46, 0, 0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTime('`', 'r', 'r', '<', 'W', '8');
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/Object;Ljava/lang/Obj*ct;)V\":5274044858141538265,\", line \":null,\"serialize exceeded MAX_OUTPUT_LENGTH=\":[\"a string\",99,null],\"ull(.9Yn@OFdcovp[}@\":{},\"parseInt errr : \":false}");
      char[] charArray0 = new char[9];
      jSONScanner0.copyTo(0, 0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"toString\":{},\"illegal json.\":\"\",\"color\":{\"x\":\"a string\"},\"value\":true,\"value2\":-99,\"number\":\"1\",\"map is null.\":-99}");
      char[] charArray0 = jSONScanner0.sub_chars(8, 8);
      assertArrayEquals(new char[] {'n', 'g', '\"', ':', '{', '}', ',', '\"'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"toString\":\"(C)Ljava/math/BigDecimal;\",\"illegal json.\":false,\"color\":{},\"value\":\"a string\",\"value2\":-99,\"number\":\"\"a string\",\"map is null.\":-99,\"x\":99}");
      char[] charArray0 = jSONScanner0.sub_chars(0, 0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":null,\"yyyy-MM-dd HH:mm:ss,SSS\":[[]],\"dd-MM-yyyy HH:mm:ss\":{}}");
      String string0 = jSONScanner0.subString(0, 34);
      assertEquals("{\"illegal json.\":null,\"yyyy-MM-dd ", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.Tl?_~\";jR");
      String string0 = jSONScanner0.subString(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextIdent();
      jSONScanner0.stringVal();
      assertEquals(6, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":null,\"illegal state. \":99,\", line \":true,\"pos \":\"a string\"}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[7];
      longArray0[1] = (-3750763034362895579L);
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I33XIfcw8qPz3J");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('[');
      assertEquals(1, jSONScanner0.token());
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Xl$*#u$Qhm,B[");
      char[] charArray0 = new char[5];
      jSONScanner0.stringDefaultValue = "Xl$*#u$Qhm,B[";
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"a string\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (-296));
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"tat\":\"a string\"}");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      String string0 = jSONScanner0.numberString();
      assertEquals("\"ta", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\"\"@type\":\"`o-ihQx'<^n\":[]}\":\"a string\",\"x\":null}");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      String string0 = jSONScanner0.numberString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.JSONObject\":null,\"\":99,\"a\":[],\"\":null,\"list_item\":[\"a string\"]}");
      char char0 = jSONScanner0.next();
      assertEquals('\"', char0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char char0 = jSONScanner0.next();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":true,\"\":\"Large\",\"\":false,\"value\":true,\"number\":\"1\"}");
      jSONScanner0.nextToken();
      char char0 = jSONScanner0.next();
      assertEquals('f', char0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.scanString();
      boolean boolean0 = jSONScanner0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"\":null,\"z\":true,\"a\":[],\"b\":{},\"xx\":false}");
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.JSONObject\":null,\"\":null,\"ull\":[],\"list_item\":[\"a string\"]}");
      int int0 = jSONScanner0.indexOf('\"', 48);
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0w/]", 782);
      jSONScanner0.nextIdent();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n`4SI,D(}1");
      jSONScanner0.skipObject(false);
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9O9");
      jSONScanner0.nextToken();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((byte) (-9), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char char0 = jSONScanner0.charAt(0);
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":1.0,\"(Ljava/lang/String;)I\":true,\"illegal state. \":\"a string\"}");
      char char0 = jSONScanner0.charAt(20);
      assertEquals('v', char0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", (-406));
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"tat\":\"a string\",\"com.alibaba.fastjson.util.TypeUtils\":{\"\"@type\":\"{\"\"@type\":\"{\"illegal json.\":99}\":null,\"dd-MM-yyyy HH:mm:ss\":{}}\":{}}}");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-85)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":{\"ull\":null},\"size\":{},\"ullillegal state. \":-99,\"\":{},\"value2\":false,\"number\":\"a string\",\"ull\":true}");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":{\"ull\":null},\"size\":{},\"ullillegal state. \":-99,\"\":{},\"value2\":false,\"number\":\"a string\",\"ull\":true}", parserConfig0, 41);
      String string0 = jSONScanner0.addSymbol(0, 6, 1219, defaultJSONParser0.symbolTable);
      assertEquals("{\"frui", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"(C)Ljava/math/BigDecimal;\",\"size\":99,\"color\":\"Red\",\"value\":true,\"\":99,\"number\":true,\"x\":-99}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      String string0 = jSONScanner0.addSymbol(48, 0, (-2061), defaultJSONParser0.symbolTable);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yyyy-MM-dd HH:mm:ss", (-587));
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-587), (-587));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~U0&pZwc", (-637));
      jSONScanner0.bp = (-637);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Type;\":null}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed :0.0,\"\":-99,\"\"@type\":\"\":{}}");
      jSONScanner0.bp = 951;
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$=*C4P:Ny}Y A\"4");
      char[] charArray0 = new char[6];
      jSONScanner0.bp = (-3932);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`o-ihQx'<^n");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MJL14C!^g");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("lE$Wq0m$!_Z^/U&");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":-99,\"\"@");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":99,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"=/l!62rv0\":{},\"&yU\":\"a string\",\"size\":true,\"isEnabled\":false,\"x\":[]}\":true,\"isEnabled\":false}\":true,\"isEnabled\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-2147483648\":true,\"`4SI,D(}1\":true,\"com.alibaba.fastjson.parser.SymbolTable\":false,\":true\":null}");
      jSONScanner0.bp = 2147480;
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.1?_~\"I^R");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":99,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"=/l!62rv0\":{},\"&yU\":\"a string\",\"size\":true,\"isEnabled\":false,\"x\":[]}\":true,\"isEnabled\":false}\":true,\"isEnabled\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(15, 66, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.1?_~\"I;^R");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(0, 12, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!q&b|[_>K]S~g");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-2974));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.JSONObject\":null,\"\":99,\"a\":[],\"\":null,\"list_item\":[\"a string\"]}");
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, (-114), charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n`4SI,D(}1");
      jSONScanner0.skipObject(false);
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.1?_~\"I;^R");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":99,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"=/l!62rv0\":{},\"&yU\":\"a strng\",\"size\":true,\"isEnabled\":false,\"x\":[]}\":true,\"isEnabled\":false}\":true,\"isEnabled\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(14, (char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/Object;Ljava/lang/Object;)V\":5274044858141538265,\", line \":null,\"serialize exceeded MAX_OUTPUT_LENGTH=\":[null,{},\"a string\"],\"ull(.9Yn@OFdcovp[}@\":{},\"parseInt error : \":null}");
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(21, charArray0, 192, 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0w/]", 782);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-706), 0, (-706), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&-fmV+u", (-2250));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-2250), (-3060), (-3060), defaultJSONParser0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, (-3790), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1143);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-1024));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.SerializeBeanInfo\":\"toJSON error\",\", line \":{\"illegal json.\":{\"ull\u0000\u0000\u0000\u0000\u0000\":true},\"ull\u0000\u0000\u0000\u0000\u0000\":99},\"com.alibaba.fastjson.parser.ParserConfig\":[]}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[9];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-2147483648\":false,\"com.alibaba.fastjson.parser.SymbolTable\":false,\"U0&pZwc\":false}");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField(1419L, false);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}~}(!W:w]Q8.?eFhB$b", 24180);
      jSONScanner0.skipArray(true);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{}]");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1[{}]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{},\"z\":true,\"a\":[],\"getFieldDeserializer\":false,\"y\":7}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"\":[],\"x\":null}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2{\"\"@type\":\"\":[],\"x\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.bp = 54;
      jSONScanner0.skipObject(true);
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"value2\":{},\"\":true}", 0);
      jSONScanner0.nextIdent();
      jSONScanner0.skipObject(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":[],\"size\":\"a string\",\"ullillegal state. \":-99,\"\":{},\"value2\":false,\"\"a string\":{},\"x\":null}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"fruit\":[],\"size\":\"a string\",\"ullillegal state. \":-99,\"\":{},\"value2\":false,\"\"a string\":{},\"x\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~U0&pZwc", (-637));
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1~U0&pZwc
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("glhX;R?2+", (-1197));
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-1197), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = JSONScanner.charArrayCompare("$=*C4P:Ny}Y A\"4", 0, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("-5-R9vX%v}8", (-1067), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = JSONScanner.charArrayCompare("k~)48rGd^tG)_EaISH", 56, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d}[%JG$:Y1'r [ElO_", 13);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(13, 13, 7, parserConfig0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9a trig");
      int int0 = jSONScanner0.indexOf('F', 187);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"yyyy-MM-dd HH:mm:ss", 42);
      String string0 = jSONScanner0.scanTypeName((SymbolTable) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`o-ihQx'<^n");
      String string0 = jSONScanner0.scanTypeName((SymbolTable) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0.0}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[1];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"pos \":[],\"illegal state. \":99}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[2];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(32, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal s\":765496005630679753,\"com.alibaba.fastjson.serializer.ObjectArrayCodec\":\"a string\",\"illegal json, \":-99,\"\"@type\":\"{\"com.alibaba.fastjson.serializer.SerializeBeanInfo\":true}\":\"a string\"}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 117, line 1, column 118{\"illegal s\":765496005630679753,\"com.alibaba.fastjson.serializer.ObjectArrayCodec\":\"a string\",\"illegal json, \":-99,\"\"@type\":\"{\"com.alibaba.fastjson.serializer.SerializeBeanInfo\":true}\":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/Object;Ljava/lang/Object;)V\":5274044858141538265,\", line \":[],\"serialize exceeded MAX_OUTPUT_LENGTH=\":99,\"ull(.9Yn@OFdcovp[}@\":[],\"parseInt error : \":99,\"com.alibaba.fastjson.parser.JSONScanner\":null,\"\"@type\":\"\":-99}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0.0,\"kk\":tre}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[17];
      longArray0[0] = (-3750763034362895579L);
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"illegal state. \":{},\", line \":true}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[7];
      longArray0[0] = (-3750763034362895579L);
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"pos \":[],\", line \":{}},\"illegal state. \":\"a string\",\", line \":{}}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[9];
      longArray0[0] = (-3750763034362895579L);
      jSONScanner0.bp = 2210;
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0.0,\"kk:true,\"clazz\":99}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 18, line 1, column 19{\"\":0.0,\"kk:true,\"clazz\":99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":1.0,\"(Ljava/lang/String;)I\":{\"\"@type\":\"\u0000\u0000\u0000\u0000\u0000\":false,\"x\":[]},\"`4SI,D(}1\":null}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[8];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 81, line 1, column 82{\", line \":1.0,\"(Ljava/lang/String;)I\":{\"\"@type\":\"\u0000\u0000\u0000\u0000\u0000\":false,\"x\":[]},\"`4SI,D(}1\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.SerializeBeanInfo\":\"toJSON error\"}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[2];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ulla-~.1?_~\"I;^R");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/String;)I\":99,\", line \":[]}");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField(1419L, true);
      assertEquals(14, jSONScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"tat\":\"a string\",\"com.alibaba.fastjson.util.TypeUtils\"::\"\"@type\":\"{\"\"@type\":\"{\"illegal json.\":99}\":null,\"dd-MM-yyyy HH:mm:ss\":{}}\":{}}}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(2269L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":1.0,\"(Ljava/lang/String;)I\":{\"currencyCode\":false,\"\"@type\":\"{\", line \":1.0,\"(Ljava/lang/String;)I\":{\"\"@type\":\"\u0000\u0000\u0000\u0000\u0000\":false,\"x\":[]},\"`4SI,D(}1\":null}\":true},\"`4SI,D(}1\":null}");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) 0, true);
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/Object;Ljava/lang/Object;)V\":true,\", line \":null,\"serialize exceeded MAX_OUTPUT_LENGTH=\":[99,null,null],\"parseInt error : \":null}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) 0, false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/Object;Ljava/lang/Object;)V\":5274044858141538265,\", line \":null,\"serialize exceeded MAX_OUTPUT_LENGTH=\":[\"a string\",99,99],\"parseInt error : \":null,\"illegal json.\":true}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals(183, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":{},\"size\":\"\"@type\":\"\",\"&yU\":true,\"value2\":false,\"number\":{},\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"x\":null}");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-3079), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/Object;Ljava/lang/Object;)V\":5274044858141538265,\", line \":null,\"serialize exceeded MAX_OUTPUT_LENGTH=\":[\"a string\",99,null],\"ull(.9Yn@OFdcovp[}@\":{},\"parseInt error : \":null,\"resolveTask\":\"a string\"}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((long) 0, false);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":1.0}");
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField(1419L, true);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal s\":765496005630679753,\"com.alibaba.fastjson.serializer.ObjectArrayCodec\":\"a string\",\"illegal json, \":-99,\"\"@type\":\"{\"com.alibaba.fastjson.serializer.SerializeBeanInfo\":true}\":\"a string\"}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(365L, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 117, line 1, column 118{\"illegal s\":765496005630679753,\"com.alibaba.fastjson.serializer.ObjectArrayCodec\":\"a string\",\"illegal json, \":-99,\"\"@type\":\"{\"com.alibaba.fastjson.serializer.SerializeBeanInfo\":true}\":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"a-~l.1?_~\":21}");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField(1419L, true);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"XIfcw8qPz\":0.0,\"-~l.1?_~\"\":[99]}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 27, line 1, column 28{\"XIfcw8qPz\":0.0,\"-~l.1?_~\"\":[99]}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0.0,\"kk\":tre}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), false);
      assertEquals(4, jSONScanner0.pos());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"pos \":-99,\", line \":{}},\"illegal state. \":\"a string\",\", line \":{},\"~l.1?_~\"I\":99}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), true);
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull\":null,\"x\":-99,\"\"@type\":\"l8wN\":99}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), false);
      assertEquals(12, jSONScanner0.token());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":1.0,\"(Ljava/lang/String;)I\":{\"\"@type\":\"\u0000\u0000\u0000\u0000\u0000\":false,\"x\":[]},\"`4SI,D(}1\":null}");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-3750763034362895579L), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 81, line 1, column 82{\", line \":1.0,\"(Ljava/lang/String;)I\":{\"\"@type\":\"\u0000\u0000\u0000\u0000\u0000\":false,\"x\":[]},\"`4SI,D(}1\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":1.0,\"(Ljava/lang/String;)I\":{\"currencyCode\":false,\"\"@type\":\"{\", line \":1.0,\"(Ljava/lang/String;)I\":{\"\"@type\":\"\u0000\u0000\u0000\u0000\u0000\":false,\"x\":[]},\"`4SI,D(}1\":null}\":true},\"`4SI,D(}1\":null}");
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-2147483648\":false,\"com.alibaba.fastjson.parser.SymbolTable\":false,\"U0&pZwc\":false}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) 0, false);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", fieldName : ", 153);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(5764610843043954687L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(1062L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]jp6<^I", 65279);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((-2825378362173150292L), true);
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.SerializeBeanInfo\":[]}");
      jSONScanner0.nextToken();
      assertEquals('\"', jSONScanner0.getCurrent());
      
      long[] longArray0 = new long[2];
      jSONScanner0.seekObjectToField(longArray0);
      int int0 = jSONScanner0.seekObjectToField((long) (-1), false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-406));
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField(69L, true);
      assertEquals((-1), int0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(0);
      assertEquals(15, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem(0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-1716));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -1716
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":{},\"size\":\"Large\",\"\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(1362);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"com.alibaba.fastjson.serializer.SerializeBeanInfo\":\"toJSON error\",\", line \":{\"illegal json.\":true,\"ull\u0000\u0000\u0000\u0000\u0000\":99,\"ullindex must > 0, but \":true},\"index must > 0, but \":[]}");
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a strig");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*51b");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/String;)I\":99,\", line \":true}");
      jSONScanner0.bp = 45380;
      jSONScanner0.skipArray();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "{\"&yU\":{\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":99,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"=/l!62rv0\":{},\"&yU\":\"a string\",\"size\":true,\"isEnabled\":false,\"x\":[]}\":true,\"isEnabled\":false}\":true,\"isEnabled\":false}\":true},\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":99,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"=/l!62rv0\":{},\"&yU\":\"a string\",\"size\":true,\"isEnabled\":false,\"x\":[]}\":true,\"isEnabled\":false}\":true,\"isEnabled\":false}\":{}}";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"&yU\":{\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":99,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"=/l!62rv0\":{},\"&yU\":\"a string\",\"size\":true,\"isEnabled\":false,\"x\":[]}\":true,\"isEnabled\":false}\":true,\"isEnabled\":false}\":true},\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":99,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"=/l!62rv0\":{},\"&yU\":\"a string\",\"size\":true,\"isEnabled\":false,\"x\":[]}\":true,\"isEnabled\":false}\":true,\"isEnabled\":false}\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0w/]", 757);
      jSONScanner0.skipArray(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":99,\"unclosed str, \":true,\"dd-MM-yyyy HH:mm:ss\":{\"N\":false}}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((long) (-3079), false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/String;)I\":99,\", line \":[],\"o-ihQx'<^\":{},\", line \":[]}");
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.1?_~\"I;^R");
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`o-ihQx'<^n");
      char[] charArray0 = new char[1];
      jSONScanner0.matchField2(charArray0);
      assertEquals('`', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ne ");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,{},{\"o-ihQx'<^\":null}]");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanFieldStringArray((char[]) null, 178, parserConfig0.symbolTable);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept", 5);
      jSONScanner0.scanFieldStringArray(charArray0, 5, parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, 563, (SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5);
      ParserConfig parserConfig0 = new ParserConfig(false);
      jSONScanner0.scanFieldStringArray(charArray0, 5, parserConfig0.symbolTable);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.nextToken();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanFieldStringArray((char[]) null, 1582, parserConfig0.symbolTable);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n`4SI,D(}1");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanFieldStringArray((char[]) null, 1106, parserConfig0.symbolTable);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n`4SI,j(}1", 445);
      jSONScanner0.scanDate('.');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99]");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('E');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":-99,\"\"@type\":\"\"com.alib\":true}");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanDate('F');
      assertEquals(4, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-5-R9vX%v}8");
      jSONScanner0.scanDate('%');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.1?_~\"I^R");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('1');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":null,\"\"@type\":\"\":[],\"\":{},\"b\":{}}");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('E');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ne ");
      jSONScanner0.scanLong('>');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-2147483648\":false,\"com.alibaba.fastjson.parser.SymbolTable\":false}");
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.scanLong('F');
      assertEquals(12, jSONScanner0.token());
      assertEquals(2147483648L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed \":0.0,\"\":-99,\"\"@type\":\"\":{}}");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      jSONScanner0.scanLong('\\');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanLong('W');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      long long0 = jSONScanner0.scanLong('W');
      assertEquals(99L, long0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9a trig");
      long long0 = jSONScanner0.scanLong('W');
      assertEquals(0L, long0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ne ");
      jSONScanner0.scanDouble('r');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-2147483648\":-1.0,\"`4SI,D(}1\":[null,\"a string\"],\"com.alibaba.fastjson.parser.SymbolTable\":-99,\":true\":\"a string\"}");
      jSONScanner0.nextToken();
      double double0 = jSONScanner0.scanDouble('.');
      assertEquals(12, jSONScanner0.token());
      assertEquals((-2.147483648E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9a xri");
      double double0 = jSONScanner0.scanDouble('.');
      assertEquals(0.0, double0, 0.01);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed \":0.0,\"\":-99,\"\"@type\":\"\":{}}");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      double double0 = jSONScanner0.scanDouble('J');
      assertEquals(12, jSONScanner0.pos());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      double double0 = jSONScanner0.scanDouble('F');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2cM");
      double double0 = jSONScanner0.scanDouble('c');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5-9vX%}8");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      int int0 = jSONScanner0.scanInt(')');
      assertEquals(2, jSONScanner0.token());
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n`4SI,D(}1", 48);
      int int0 = jSONScanner0.scanInt('g');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0w/]", 782);
      int int0 = jSONScanner0.scanInt('$');
      assertEquals(0, int0);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('e');
      assertEquals(7, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"-2147483648\":true,\"`4SI,D(}1\":true,\"com.alibaba.fastjson.parser.SymbolTable\":false,\":true\":-99}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('g');
      assertEquals(12, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9a xri");
      int int0 = jSONScanner0.scanInt('.');
      assertEquals(0, int0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$=*C4P:Ny}Y A\"4");
      jSONScanner0.skipObject(true);
      int int0 = jSONScanner0.scanInt('y');
      assertEquals(10, jSONScanner0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0w/]", 782);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"com.alib");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a strig");
      char[] charArray0 = new char[1];
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("5-R9vX%}8", (-1065));
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals('5', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("5-R9vX%}8", (-1065));
      jSONScanner0.nextToken((-1065));
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9a trig");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("a-~.1?_~\"I;^R");
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.nextToken();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\"9\"unclosed str", (-2));
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a strig");
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a strig");
      char[] charArray0 = new char[1];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0j>", 44);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0w/]", 782);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.1?_~\"I;^R");
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\"9\"unclosed str", (-2));
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9a trig");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"value2\":-99,\"color\":{},\"map is null.\":-99,\"\":\"1\",\"toString\":\"(C)Ljava/math/BigDecimal;\",\"value\":true,\"illegal json.\":\"\"@type\":\"tat\"}");
      char[] charArray0 = new char[5];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":{},\"value\":true,\"value2\":false,\"number\":\"1\"}", 2918);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"parseIntRerror S \":{},\"value2\":99,\"illegal json.\":\"Large\",\"map is null.\":-99,\"\":\"1\",\"toString\":\"(C)Ljava/math/BigDecimal;\",\"_asm_list_item_deser__\":{}}");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("P DUi5Mq[", 1105);
      char[] charArray0 = new char[1];
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9a trig");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", (-406));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.1?_~\"I;^R");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"$");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":99,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"=/l!62rv0\":{},\"&yU\":\"a string\",\"size\":true,\"isEnabled\":false,\"x\":[]}\":true,\"isEnabled\":false}\":true,\"isEnabled\":false}");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '7', '0', '7', (-119), (-119));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '0', 'u', 226, (-2760));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('6', '6', '7', '6', '6', '7', 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('6', '6', '7', '|', '|', '7', 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '.', 'b', 'b', 1017, 1017);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('6', '6', '/', '7', '|', '7', 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7N`5X/>u<CbZR]", 46);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('7', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '0', '0', 0, 226);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"astrng\"", (-1670));
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-747), 0, (-747), (-747), (-747), 0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone('O', ':', ']');
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/util/List;)V\":Infinity}");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', '-', 'V', '-', 'H');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`o-ihQj\"x'^n");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('`', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.1?_~\"I;^R");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sl*FTbS/97:4)|@1=(;");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(2, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ulla-~.1?_~\"I;^R");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yyyy-MM-dd HH:mm:ss", (-587));
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('y', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3$U042XY(7 ]uPGp");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('3', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a-~l.1?_~\"I;^R", 445);
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('a', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hch%:z+m0-myh&AR");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('h', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qKo", (-2066));
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.JSONSerializableSerializer", (-587));
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(1442, 1442);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a |string\"");
      String string0 = jSONScanner0.stringVal();
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("+Dwf", (-114), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`o-ihQj\"x'^n");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(12, 12, (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MJ14C!^g");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`o-ihQx'<^n");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('s', '8', '8');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0, 115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":[],\"size\":\"\"@type\":\"{&yU\",\"color\":false,\"\":\"a string\",\"value2\":false,\"number\":\"1\"}", 3853);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('C', 'C', 'C', 'C', 'C', 'C');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":99,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"tat\":{},\"&yU\":\"a string\",\"\"@type\":\"{\"com.alibaba.fastjson.util.ASMClassLoader\":99,\"com.alibaba.fastjson.serializer.JSONAwareSerializer\":true,\"index must > 0, but \":false,\"=/l!62rv0\":{},\"&yU\":\"a string\",\"size\":true,\"isEnabled\":false,\"x\":[]}\":true,\"isEnabled\":false}\":true,\"isEnabled\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-1), (char[]) null, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"ull\"com.alib", 100);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName((SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('/');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
