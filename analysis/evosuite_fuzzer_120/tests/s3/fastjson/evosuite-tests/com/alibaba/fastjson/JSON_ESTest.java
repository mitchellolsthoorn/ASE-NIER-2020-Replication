/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 22:07:19 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("/**/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (-4653), 3, (CharsetDecoder) uTF8Decoder0, (int) (byte)20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray(".\"L<Znis/v%/DM4B\"", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ., pos 1, line 1, column 2.\"L<Znis/v%/DM4B\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray(".000000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ., pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("yyyy-MM-dd HH:mm:ss");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeatureArray0[1];
      JSON.writeJSONString((Writer) mockFileWriter0, (Object) mockFileWriter0, serializerFeatureArray0);
      assertEquals(8, serializerFeatureArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[3];
      serializerFeatureArray0[7] = serializerFeatureArray0[0];
      serializerFeatureArray0[8] = serializerFeatureArray0[0];
      JSON.writeJSONString((Writer) outputStreamWriter0, (Object) jSONPObject0, (-3046), serializerFeatureArray0);
      assertNull(jSONPObject0.getFunction());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(989);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      jSONObject0.writeJSONString((Appendable) stringBuffer0);
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("-ss:Lcu3f|", true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      JSON.writeJSONStringTo((Object) null, mockFileWriter0, serializerFeatureArray0);
      assertEquals(2, serializerFeatureArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[6];
      Feature[] featureArray0 = new Feature[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject(charArray0, 0, (Type) null, featureArray0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      featureArray0[0] = feature0;
      Object object0 = JSON.parseObject("", (Type) null, (int)  (-3), featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("fastjson.parser.safeMode");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("fastjson.parser.autoTypeAccept");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = JSON.isValid("[[],\"a string\"]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("A `fA^c", "yyyy-MM-dd HH:mm:ss");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[2];
      serializerFeatureArray0[7] = serializerFeatureArray0[0];
      serializerFeatureArray0[8] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) mockPrintStream0, (Object) mockPrintStream0, serializerFeatureArray0);
      assertEquals(62, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Object) propertyNamingStrategy0, 3089, serializerFeatureArray0);
      assertEquals("\"CamelCase\"", byteArrayOutputStream0.toString());
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<JSONPObject> class0 = JSONPObject.class;
      JSONPObject jSONPObject0 = JSON.toJavaObject((JSON) null, class0);
      assertNull(jSONPObject0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONStringZ((Object) null, serializeConfig0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) null, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) null, serializeFilterArray0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) fileSystemHandling0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) jSONObject0.DEFAULT_PARSER_FEATURE, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject("*1#;5qK");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      String string0 = JSON.toJSONString((Object) jSONPObject0, 4253, serializerFeatureArray0);
      assertEquals("*1#;5qK()", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSON.toJSON(object0);
      String string0 = JSON.toJSONString(object1);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSON.toJSON(object0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) ((JSON) object1).DEFAULT_GENERATE_FEATURE, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      LinkedList<ParameterizedTypeImpl> linkedList0 = new LinkedList<ParameterizedTypeImpl>();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[9];
      byte[] byteArray0 = JSON.toJSONBytes((Object) linkedList0, serializeFilterArray0, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      byte[] byteArray0 = JSON.toJSONBytes((Object) pascalNameFilter0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedHashMap<String, SimplePropertyPreFilter> linkedHashMap0 = new LinkedHashMap<String, SimplePropertyPreFilter>();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089, false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      byte[] byteArray0 = JSON.toJSONBytes((Object) linkedHashMap0, serializeConfig0, serializeFilterArray0, 3089, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedHashMap<JSONValidator.Type, String> linkedHashMap0 = new LinkedHashMap<JSONValidator.Type, String>();
      SerializeConfig serializeConfig0 = new SerializeConfig(1);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) linkedHashMap0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      JSONObject jSONObject0 = new JSONObject(3089);
      SerializeConfig serializeConfig0 = new SerializeConfig(3089, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONObject0, serializeConfig0, 1597, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, linkedHashMap0);
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap((Object) null);
      JSONObject jSONObject0 = new JSONObject(map0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONObject0, 623, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.toJSON((Object) null, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-16);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONObject jSONObject0 = JSON.parseObject(byteArray0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 821, featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-128);
      Feature[] featureArray0 = new Feature[0];
      MockFileInputStream mockFileInputStream0 = JSON.parseObject(byteArray0, (Type) null, featureArray0);
      assertNull(mockFileInputStream0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[3];
      Annotation annotation0 = JSON.parseObject(byteArray0, (int)  (-19), (int)  (-67), charset0, (Type) null, featureArray0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Feature feature0 = Feature.UseObjectArray;
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = JSON.parseObject((String) null, featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[1];
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = featureArray0[1];
      featureArray0[6] = featureArray0[1];
      featureArray0[7] = feature0;
      featureArray0[8] = featureArray0[0];
      JSONObject jSONObject0 = JSON.parseObject("{\"x\":\"hello\",\"y\":7,\"z\":false,\"a\":[],\"b\":{}}", featureArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Feature[] featureArray0 = new Feature[6];
      SimplePropertyPreFilter simplePropertyPreFilter0 = JSON.parseObject((String) null, (Type) null, featureArray0);
      assertNull(simplePropertyPreFilter0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[1];
      GenericArrayTypeImpl genericArrayTypeImpl0 = JSON.parseObject((String) null, (Type) null, parserConfig0, 2753, featureArray0);
      assertNull(genericArrayTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Class<InputStream> class0 = InputStream.class;
      InputStream inputStream0 = JSON.parseObject((String) null, class0, (ParseProcess) null, featureArray0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      PascalNameFilter pascalNameFilter0 = JSON.parseObject("{}", class0);
      assertNotNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("");
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{}");
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Class<JSONPObject> class0 = JSONPObject.class;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSON.parseObject((InputStream) sequenceInputStream0, charset0, (Type) class0, parserConfig0, featureArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("[[true]]");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      Feature[] featureArray0 = new Feature[5];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      JSONArray jSONArray0 = (JSONArray)JSON.parse("[]", featureArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Feature feature0 = Feature.SortFeidFastMatch;
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[5];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      Object object0 = JSON.parse("", parserConfig0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Object object0 = JSON.parse("", parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray0 = (JSONArray)JSON.parse("[\"a string\",[],false,-99]", parserConfig0);
      assertEquals(4, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSON.parse("", (-3418));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = JSON.parse("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"fruit\":\"Apple\",\"sze\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      // Undeclared exception!
      try { 
        JSON.writeJSONStringTo(simplePropertyPreFilter0, outputStreamWriter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) charset0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = MockFile.createTempFile("fastjson.parser.autoTypeAccept", "fastjson.parser.deny.internal");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) charset0, (SerializeConfig) null, (SerializeFilter[]) null, "fastjson.parser.autoTypeAccept", 184, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#^ 88~U@:I`W *[J", "lzc/t}&[T/aCxF");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) "o7^BHGAD?Rp E=gIme", (SerializeConfig) null, (SerializeFilter[]) null, "o7^BHGAD?Rp E=gIme", (-10), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, charset0, (Object) charset0, serializeConfig0, serializeFilterArray0, "", 20, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-99");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) "-99", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      serializerFeatureArray0[6] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) charsetDecoder0, (-1025), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("", "");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        jSONObject1.toString(serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.toString((SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(simplePropertyPreFilter0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("", "", serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) javaBeanSerializer0, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) uTF8Decoder0, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) charsetDecoder0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class sun.nio.cs.UTF_8$Decoder, method : isCharsetDetected
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "Hu9", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class0, serializeConfig0, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[");
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      SerializeConfig serializeConfig0 = new SerializeConfig(139, true);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) mockFileOutputStream0, serializeConfig0, serializeFilterArray0, "[", (-1688), serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, write javaBean error, fastjson version 1.2.68, class org.evosuite.runtime.mock.java.io.MockFileOutputStream, fieldName : parent, write javaBean error, fastjson version 1.2.68, class java.io.FileDescriptor, fieldName : fd, Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2427, true);
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONPObject0, serializeConfig0, (SerializeFilter[]) null, "{\"fruit\":null,\"com.alibaba.fastjson.serializer.JavaBeanSerializer\":\"Large\",\"color\":true,\"value\":{},\"fastjson.asmEnable\":false,\"number\":\"1\",\"x\":true}", 1023, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      String[] stringArray0 = new String[5];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class0, serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[4];
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "EH0xV/$V|8#", 0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) uTF8Decoder0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "");
      // Undeclared exception!
      try { 
        jSONArray0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = new SerializeConfig(329);
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) charset0, serializeConfig0, (SerializeFilter[]) null, (String) null, 329, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      File file0 = MockFile.createTempFile("ct}ik1si`lWD/`F#ij=", "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) file0, (SerializeConfig) null, (SerializeFilter[]) null, "", (-12), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) class0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "true", serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "Qca", (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      String[] stringArray0 = new String[1];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) javaBeanSerializer0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPObject jSONPObject0 = new JSONPObject("}uil-");
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONPObject0, serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TreeMap<Method, String> treeMap0 = new TreeMap<Method, String>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) treeMap0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "T(xd=M{@7";
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) simplePropertyPreFilter0, serializeConfig0, (SerializeFilter[]) null, "com.alibaba.fastjson.JSON", 33, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializeConfig0, serializeConfig0, (SerializeFilter[]) null, "-99", 790, serializerFeatureArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      String[] stringArray0 = new String[1];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) javaBeanSerializer0, serializeConfig0, (SerializeFilter[]) null, "yyyy-MM-dd HH:mm:ss", 1723, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONObject0, (SerializeConfig) null, serializeFilterArray0, "@type", 1224736769, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<ParameterizedTypeImpl> linkedList0 = new LinkedList<ParameterizedTypeImpl>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      serializerFeatureArray0[6] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) linkedList0, (SerializeConfig) null, (SerializeFilter[]) null, 12, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      Class<InputStream> class0 = InputStream.class;
      String[] stringArray0 = new String[7];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) genericArrayTypeImpl0, (SerializeConfig) null, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "java.io.StringWriter@0000000005", serializeConfig0, 11, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) class0, 999999999, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject("1.2.68");
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONPObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[9];
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 4, (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 4, line 1, column 5\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature[] featureArray0 = new Feature[6];
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-1588), 3089, (CharsetDecoder) null, (Type) class1, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[1];
      featureArray0[3] = feature0;
      byte[] byteArray0 = new byte[7];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) 1, 1, charset0, (Type) null, parserConfig0, (ParseProcess) null, (int) 1, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, (-2325), 26085, (Charset) null, (Type) class0, parserConfig0, (ParseProcess) null, (-2552), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.SafeMode;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("true", featureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = feature0;
      featureArray0[3] = featureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.asmEnable", (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("[F", (Type) parameterizedTypeImpl0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = feature0;
      featureArray0[3] = featureArray0[2];
      featureArray0[4] = featureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.features.ErrorOnEnumNotMatch", (Type) class0, parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSON.parseObject("hsjH},N:T>-gK%", (Type) class1, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Feature feature0 = Feature.UseObjectArray;
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", (Type) null, parserConfig0, 989, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<JSONPObject> class0 = JSONPObject.class;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("Oo$lz", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      JSON.parseObject("Wr+", class0, (ParseProcess) null, featureArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSON.parseObject("[", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with float
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      JSON.parseObject("MQ'.3#s&^>zQsy", class0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      FieldInfo fieldInfo0 = new FieldInfo("java.lang.AutoCloseable", class0, class0, class0, (Field) null, 65536, 65536, 3392903);
      Feature[] featureArray0 = new Feature[2];
      try { 
        JSON.parseObject((InputStream) bufferedInputStream0, charset0, (Type) fieldInfo0.declaringClass, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[5];
      try { 
        JSON.parseObject((InputStream) mockFileInputStream0, charset0, (Type) class0, parserConfig0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      Feature[] featureArray0 = new Feature[8];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      featureArray0[7] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, (Type) class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3911), 139);
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, (Feature[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Feature feature0 = Feature.NonStringKeyAsString;
      byte[] byteArray0 = new byte[7];
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 7, line 1, column 8\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Feature feature0 = Feature.NonStringKeyAsString;
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)45;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte) (-13), 1380, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("lzc/t}&[T/aCxF", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2lzc/t}&[T/aCxF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", parserConfig0, (-886));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("true", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("1.2.68", 989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Type type0 = JSON.getMixInAnnotations((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      JSONPObject jSONPObject0 = new JSONPObject("ct}ik1si`lWD/`F#ij=");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("_vY2QRF-.6U#}", concurrentHashMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONStringWithDateFormat((Object) null, "/**/", serializerFeatureArray0);
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      JSONArray jSONArray0 = new JSONArray();
      JSON.isValid("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSON.parseObject((InputStream) sequenceInputStream0, (Type) class0, (Feature[]) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SerializeConfig serializeConfig0 = new SerializeConfig(3);
      Object object0 = JSON.toJSON((Object) stringWriter0, serializeConfig0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) "null", serializeConfig0);
      assertEquals("null", object0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, serializeConfig0);
      assertEquals(0, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Object object0 = JSON.toJSON((Object) null, serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      String[] stringArray0 = new String[5];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[3];
      serializerFeatureArray0[6] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) objectOutputStream0, charset0, (Object) mockFileInputStream0, serializeConfig0, serializeFilterArray0, stringArray0[4], (-2147483645), serializerFeatureArray0);
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, (SerializeFilter[]) null, "1.2.68", 3089, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) class0, serializeConfig0, serializeFilterArray0, (String) null, 989, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-99");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) mockFileOutputStream0, serializeConfig0, serializeFilterArray0, (String) null, (-3205), serializerFeatureArray0);
      assertEquals("[\n\t[\n\t\t'@type':'org.evosuite.runtime.mock.java.io.EvoFileChannel',\n\t\t[\n\t\t\t\n\t\t]\n\t]\n]", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(285, true);
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) "1.2.68", serializeConfig0, (SerializeFilter[]) null, "", 40, serializerFeatureArray0);
      assertEquals("\"1.2.68\"", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedHashMap<JSON, JSONArray> linkedHashMap0 = new LinkedHashMap<JSON, JSONArray>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) linkedHashMap0, (SerializeConfig) null, (SerializeFilter[]) null, "1.2.68", 2752, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.global;
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Feature[] featureArray0 = new Feature[9];
      JSON.parseObject((InputStream) sequenceInputStream0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 0, featureArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[2];
      Object object0 = JSON.parseObject(byteArray0, (int)  (-111), (int)  (-111), charset0, (Type) class0, parserConfig0, (ParseProcess) null, 23, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      Feature feature0 = Feature.SupportAutoType;
      Feature[] featureArray0 = new Feature[9];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      featureArray0[7] = feature0;
      featureArray0[8] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("V;B*(", (Type) class0, parserConfig0, (ParseProcess) null, (int) 10, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2V;B*(
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.autoTypeAccept", (Type) class0, parserConfig0, (ParseProcess) null, 120, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject("toJSON error", (Type) class0, parserConfig0, (ParseProcess) null, 120, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[7];
      JSONArray jSONArray0 = JSON.parseObject("", (Type) null, parserConfig0, (ParseProcess) null, 2, featureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray0 = JSON.parseObject((String) null, (Type) class0, parserConfig0, (ParseProcess) null, 120, (Feature[]) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse("lzc/t}&[TP/aCxF", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("can not cast to JSONObject.", (ParserConfig) null, (-123008));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.parse((String) null, parserConfig0, 51);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "true", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) pascalNameFilter0, (-8), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"_asm_deser__\":1000.0,\"\":{\"\":false},\"\":false}", (-5));
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) uTF8Decoder0, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3089);
      SerializeConfig serializeConfig0 = new SerializeConfig(3089, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONObject0, serializeConfig0, 1597, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "false", 96, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Feature[] featureArray0 = new Feature[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject((String) null, class0, featureArray0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 14, 857, charset0, (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "0wue", serializeConfig0, serializeFilterArray0, (-685), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(165);
      String string0 = jSONObject0.toJSONString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[7];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) serializerFeature0, serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Object) propertyNamingStrategy0, 3089, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[3];
      JSON.parseObject((InputStream) sequenceInputStream0, charset0, (Type) null, featureArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      JSON.removeMixInAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSON.removeMixInAnnotations((Type) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSON.addMixInAnnotations(class0, (Type) null);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      JSON.addMixInAnnotations(class1, class1);
      assertEquals("class com.alibaba.fastjson.serializer.PascalNameFilter", class1.toString());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSON.addMixInAnnotations((Type) null, (Type) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("[\" sring\",falsefalse,false]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("{\"\":null,\"\":A99}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("1.2.68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = JSON.isValid("[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = JSON.isValid("}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = JSON.isValid("{\"_asm_deser__\":1000.0}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = JSON.isValid(")Cykf3c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = JSON.isValid("(C)Ljava/math/BigDecimal;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = JSON.isValid("new");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = JSON.isValid("null,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = JSON.isValid("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = JSON.isValid("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = JSON.isValid("\"a string\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = JSON.isValid("1.2.68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = JSON.isValid(";Ljava/lang/reflect/Type;)Ljava/lang/Object;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = JSON.isValid("8\"C#&16)Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = JSON.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[8];
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) null, parserConfig0, (ParseProcess) null, (-10), featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject((TypeReference) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.PascalNameFilter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = new SerializeConfig(115);
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) classLoader0, serializeConfig0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Object object0 = JSON.toJSON((Object) propertyNamingStrategy0, serializeConfig0);
      assertEquals("PascalCase", object0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject("8UHs");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONPObject0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "H=a*r4A#[$rrK";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) simplePropertyPreFilter0, serializeConfig0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedList<ParameterizedTypeImpl> linkedList0 = new LinkedList<ParameterizedTypeImpl>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONArray jSONArray0 = (JSONArray)JSON.toJSON((Object) linkedList0, parserConfig0);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LinkedHashMap<JSONValidator.Type, String> linkedHashMap0 = new LinkedHashMap<JSONValidator.Type, String>();
      JSONValidator.Type jSONValidator_Type0 = JSONValidator.Type.Object;
      linkedHashMap0.put(jSONValidator_Type0, "(C)Z");
      JSON.toJSON((Object) linkedHashMap0, (ParserConfig) null);
      assertEquals(1, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = JSON.toJSONString((Object) null, false);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) "false", serializeConfig0, (SerializeFilter[]) null, "KgWk6e_i@_,]#6m", 790, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)102, (byte)97, (byte)108, (byte)115, (byte)101, (byte)39}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) parserConfig0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("<3", "<3", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      List<Object> list0 = JSON.parseArray((String) null, typeArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      // Undeclared exception!
      try { 
        JSON.parseArray("C34dE/", typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("/**/", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 4, line 1, column 5/**_/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.68", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but float, pos 3, line 1, column 41.2.68
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      List<ParameterizedTypeImpl> list0 = JSON.parseArray("null", class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = JSON.parseArray((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = JSON.parseArray("", class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, (Charset) null, (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[1];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 29, (Type) null, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = new char[0];
      Feature[] featureArray0 = new Feature[5];
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject(charArray0, 989, (Type) null, featureArray0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char[] charArray0 = new char[8];
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 34, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject((char[]) null, (-2227), (Type) null, featureArray0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 100, 628, (Charset) null, (Type) null, parserConfig0, (ParseProcess) null, 628, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("", (Type) class0, 1035, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Integer integer0 = JSON.parseObject((String) null, (Type) null, (-56), (Feature[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("EH0xV/$V|8#", (Type) null, 26, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2EH0xV/$V|8#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("[\"a string\",true,false,false]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 2400, 2400, (CharsetDecoder) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse(byteArray0, 44, 44, (CharsetDecoder) null, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Object object0 = JSON.parse((byte[]) null, 12, 12, (CharsetDecoder) uTF8Decoder0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-24);
      Feature[] featureArray0 = new Feature[1];
      Object object0 = JSON.parse(byteArray0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse((String) null, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse("lzct}&[T/aCxF", parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse("lzc/t}&[T/aCxF", parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2lzc/t}&[T/aCxF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("", (TypeReference<SimplePropertyPreFilter>) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      SimplePropertyPreFilter simplePropertyPreFilter0 = JSON.parseObject("", class0);
      assertNull(simplePropertyPreFilter0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      JSON.handleResovleTask(defaultJSONParser0, ")Ljava/lang/String;");
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = jSONObject0.toString(serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<StringWriter> class0 = StringWriter.class;
      StringWriter stringWriter0 = JSON.toJavaObject((JSON) jSONObject0, class0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0, (ParseProcess) null, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with float
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.writeJSONString((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSON.clearMixInAnnotations();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSON.setDefaultTypeKey("1.2.68");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) "=wtx_@", (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) charsetDecoder0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-9), (-9), (CharsetDecoder) uTF8Decoder0, (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      Integer integer0 = JSON.parseObject((String) null, (Type) null, (ParseProcess) null, featureArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (-1569), 44, (CharsetDecoder) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      LinkedHashMap<JSONValidator.Type, String> linkedHashMap0 = new LinkedHashMap<JSONValidator.Type, String>();
      SerializeConfig serializeConfig0 = new SerializeConfig(1);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) linkedHashMap0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "1.2.68", (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "true", serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[1];
      JavaBeanSerializer javaBeanSerializer0 = JSON.parseObject("", (Type) null, parserConfig0, featureArray0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object object0 = JSON.toJSON((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONObject0, serializeConfig0, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ((Object) null, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", (Type) null, parserConfig0, 989, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"_asm_deser__\":1000.0,\"\":-99,\"\":false,\"xx\":{}}");
      assertEquals(3, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "Z", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class java.lang.String, create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.safeMode", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) class0, serializeConfig0, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      Feature[] featureArray0 = new Feature[10];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        JSON.parseObject((InputStream) bufferedInputStream0, (Type) class0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 860);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      int int0 = JSON.writeJSONString((OutputStream) mockPrintStream0, charset0, (Object) null, serializerFeatureArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String[] stringArray0 = new String[5];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) simplePropertyPreFilter0, (SerializeFilter) simplePropertyPreFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) parserConfig0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 2, line 1, column 3\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
