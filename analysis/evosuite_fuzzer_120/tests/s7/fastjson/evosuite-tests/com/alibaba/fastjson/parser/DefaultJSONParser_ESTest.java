/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 23:37:59 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.StringCharacterIterator;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<HttpCookie> class0 = HttpCookie.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(throwableDeserializer0, jSONScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) class0, (Object) jSONScanner0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "{\"fruit\":\"Apple\",\"size\":99,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.text.DateFormatSymbols@658b5b8d.[1]");
      defaultJSONParser0.accept(1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"y\":7,\"z\":99,\"a\":[],\"b\":{}}", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"ynull,\"z\":true,\"a\"[],\"b\"{}}", 1171);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1372);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("oj^JD??-bVm_");
      TreeSet<StringCharacterIterator> treeSet0 = new TreeSet<StringCharacterIterator>();
      defaultJSONParser0.resolveStatus = 253;
      defaultJSONParser0.checkListResolve(treeSet0);
      assertEquals(253, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"NULL\":\"java/lang/Short\"}", parserConfig0);
      defaultJSONParser0.parseObject();
      Object object0 = defaultJSONParser0.getObject("fastjson.parser.deny");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}}", parserConfig0);
      defaultJSONParser0.setResolveStatus(357);
      assertEquals(357, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":[false,{},[null],99,\"a string\"],\"java.util.Map\":[{\"..\":null},false,{},\"a string\",null,null,false],\"javax.xml.bind.annotation.XmlAccessType\":[[\"a string\"],[]],\"$.ko.[1]\":\"a string\"}", parserConfig0, 484);
      Point point0 = new Point(42, (-1033));
      Object object0 = defaultJSONParser0.parse((Object) point0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 54);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[6];
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("h", 99);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 1241579778);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NOT_IN", parserConfig0, 6);
      defaultJSONParser0.setConfig((ParserConfig) null);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      IdentityHashMap<DateFormatSymbols, Long> identityHashMap0 = new IdentityHashMap<DateFormatSymbols, Long>();
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) collator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, line 1, column 1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@bc", parserConfig0, (-568));
      Hashtable<Byte, Boolean> hashtable0 = new Hashtable<Byte, Boolean>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) "$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@bc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, line 1, column 2$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@bc
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false", parserConfig0);
      defaultJSONParser0.parseObject((Type) null, (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[[],[],\"a string\"]", parserConfig0, 123);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      TreeSet<DecimalFormatSymbols> treeSet0 = new TreeSet<DecimalFormatSymbols>();
      defaultJSONParser0.parseArray((Type) null, (Collection) treeSet0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":{},\"\":\"width\",\"color\":\"Red\",\"value\":true,\"value2\":false}");
      HashMap<ThrowableDeserializer, BigInteger> hashMap0 = new HashMap<ThrowableDeserializer, BigInteger>();
      HashMap hashMap1 = (HashMap)defaultJSONParser0.parseObject((Map) hashMap0);
      assertEquals(5, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]", parserConfig0);
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      ImageCapabilities imageCapabilities0 = defaultJSONParser0.parseObject(class0);
      assertNull(imageCapabilities0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      char[] charArray0 = new char[7];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":{},\"java.util.Map\":[null,\"a string\"],\"javax.xml.bind.annotation.XmlAccessType\":[[],true]}", parserConfig0, 123);
      Locale locale0 = Locale.KOREAN;
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) dateFormatSymbols0);
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("setter not found, class ", parserConfig0);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = defaultJSONParser0.getLastResolveTask();
      assertNull(defaultJSONParser_ResolveTask0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"ynull,\"z\":true,\"a\"[],\"b\"{}}");
      Point point0 = new Point(4, 1171);
      MessageFormat messageFormat0 = new MessageFormat("$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@c1");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) messageFormat0, (Object) point0);
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      assertSame(parseContext1, parseContext0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"\":-99,\"z\":true,\"a\":[true],\"b\":{},\"xx\":true}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false", parserConfig0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      defaultJSONParser0.parseObject((Object) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"a string\"", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.[1]");
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      defaultJSONParser0.parseObject(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("create instance error", parserConfig0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(bigDecimal0, "[=|W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - r, info : pos 1, line 1, column 2create instance error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yIul[UtQ\"(W$00");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":[\"a string\",null],\"java.util.Map\":[null,\"a string\"],\"javax.xml.bind.annotation.XmlAccessType\":[[[]]]}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.JSONSerializer", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2com.alibaba.fastjson.serializer.JSONSerializer
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":99,\"syntax error, expect \":[],\"a\":[],\"b\":{\"x\":true}}", parserConfig0);
      defaultJSONParser0.parseObject();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$IntInSegement", parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[true],\"b\":{}}", 1171);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"MapSortField\":1.0E9,\"$.java.text.DateFormatSymbols@287b500c.$.java.text.DateFormatSymbols@1e39844d.javax.xml.bind.annotation.XmlAccessType\":{\"$.java.text.DateFormatSymbols@287b500c.$.java.text.DateFormatSymbols@1e39844d.javax.xml.bind.annotation.XmlAccessType\":\"a string\"},\"{\"\":[99,false],\"java.util.Map\":[[{}],\"a string\"],\"javax.xml.bind.annotation.XmlAccessType\":-99}\":[]}", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("$.java.text.DateFormatSymbols@bdbdd78d.java.util.Map");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 1, line 1, column 2{\"MapSortField\":1.0E9,\"$.java.text.DateFormatSymbols@287b500c.$.java.text.DateFormatSymbols@1e39844d.javax.xml.bind.annotation.XmlAccessType\":{\"$.java.text.DateFormatSymbols@287b500c.$.java.text.DateFormatSymbols@1e39844d.javax.xml.bind.annotation.XmlAccessType\":\"a string\"},\"{\"\":[99,false],\"java.util.Map\":[[{}],\"a string\"],\"javax.xml.bind.annotation.XmlAccessType\":-99}\":[]}
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 1, parserConfig0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 1, parserConfig0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.deny", parserConfig0, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("can not cast to Timestamp, value : ", (ParserConfig) null, (-4288));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("dG\"}fu8(w^", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny", (-2595));
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("htI");
      Locale locale0 = jSONReaderScanner0.locale;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(decimalFormatSymbols0, jSONReaderScanner0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.deny", 13);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]", parserConfig0, 123);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      defaultJSONParser0.parseArray(class0);
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":{},\"y\":\"a string\",\"z\":true,\"expect ':' at \":[{},null],\"{\"\":true,\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a7\":{},\"$\":null}\":{},\"x\":\"a string\"}", parserConfig0);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(feature0, defaultJSONParser0.lexer, parserConfig0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, feature0);
      defaultJSONParser0.parseExtra(renderingHints0, "(Ljava/lang/Class;");
      assertEquals(1, renderingHints0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"create instance error\":99,\"$.java.text.DateFormatSymbols@287b500c.\":false}", parserConfig0);
      defaultJSONParser0.parseObject();
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 76, line 1, column 77{\"create instance error\":99,\"$.java.text.DateFormatSymbols@287b500c.\":false}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"a string\"", parserConfig0, 123);
      Short short0 = new Short((short)34);
      Object object0 = defaultJSONParser0.parse((Object) short0);
      assertEquals("a string", object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$.java.text.DateFormatSymbols@287b500c");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yIul[UtQ\"(W$00");
      Long long0 = new Long(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yIul[UtQ\"(W$00
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true", parserConfig0);
      Time time0 = new Time(0);
      Object object0 = defaultJSONParser0.parse((Object) time0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Object object0 = defaultJSONParser0.parse((Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":{},\"y\":\"a string\",\"z\":true,\"expect ':' at \":[{},null],\"{\"\":true,\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a7\":{},\"$\":null}\":{},\"x\":\"a string\"}", parserConfig0);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(feature0, defaultJSONParser0.lexer, parserConfig0);
      Object object0 = defaultJSONParser1.parse((Object) null);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")Ljava/lang/Object;", parserConfig0);
      Insets insets0 = new Insets(44, (-1542), 350, 791);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false", parserConfig0, 123);
      Object object0 = defaultJSONParser0.parse((Object) "false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONScanner jSONScanner0 = new JSONScanner("{\"javax.xml.bind.annotation.XmlAccessType\":{},\"\":[[-99],true,null,false,[]],\"$.java.text.DateFormatSymbols@2dae70d4.java.util.Map[0][0]\":true,\"java.util.Map\":[],\"$.java.text.DateFormatSymbols@2dae70d4.java.util.Map[0]\":{}}", (-2595));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(classLoader0, jSONScanner0, parserConfig0);
      Insets insets0 = new Insets((-149), 0, (-149), 0);
      JSONObject jSONObject0 = (JSONObject)defaultJSONParser0.parse((Object) insets0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONScanner jSONScanner0 = new JSONScanner("-99", (-2595));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(classLoader0, jSONScanner0, parserConfig0);
      Insets insets0 = new Insets((-149), 1918, (-149), 1918);
      Object object0 = defaultJSONParser0.parse((Object) insets0);
      assertEquals((-99), object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONScanner jSONScanner0 = new JSONScanner("{\"javax.xml.bind.annotation.XmlAccessType\":{\"fastjson.parser.deny.internal\":null},\"\":[-99,true,null,false,[]],\"$.java.text.DateFormatSymbols@2dae70d4.java.util.Map[0][0]\":true,\"java.util.Map\":[],\"$.java.text.DateFormatSymbols@2dae70d4.java.util.Map[0]\":{}}", (-2595));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(classLoader0, jSONScanner0, parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"javax.xml.bind.annotation.XmlAccessType\":{\"fastjson.parser.deny.internal\":null},\"\":[-99,true,null,false,[]],\"$.java.text.DateFormatSymbols@2dae70d4.java.util.Map[0][0]\":true,\"java.util.Map\":[],\"$.java.text.DateFormatSymbols@2dae70d4.java.util.Map[0]\":{}}", jSONScanner0, parserConfig0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser1.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser2.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 43, line 1, column 44{\"javax.xml.bind.annotation.XmlAccessType\":{\"fastjson.parser.deny.internal\":null},\"\":[-99,true,null,false,[]],\"$.java.text.DateFormatSymbols@2dae70d4.java.util.Map[0][0]\":true,\"java.util.Map\":[],\"$.java.text.DateFormatSymbols@2dae70d4.java.util.Map[0]\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":[[],{}],\"java.util.Map\":[null],\"javax.xml.bind.annotation.XmlAccessType\":[[]],\"parseByte error, field : \":-99}", parserConfig0, 123);
      Locale locale0 = Locale.KOREAN;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      Short short0 = new Short((short)34);
      defaultJSONParser0.setContext((Object) short0, (Object) breakIterator0);
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) dateFormatSymbols0);
      assertEquals(4, linkedHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NOT_IN", parserConfig0, 6);
      Long long0 = new Long(3172L);
      defaultJSONParser0.setContext((ParseContext) null, (Object) long0, (Object) defaultJSONParser0);
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-99", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("z", parserConfig0);
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[false,-99,{\"syntax error,except start with { or [,but actually start with \":-99}]", parserConfig0);
      ArrayList<Rectangle> arrayList0 = new ArrayList<Rectangle>();
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("{*|zpm~*0EJ/", 0);
      defaultJSONParser0.parseArray((Collection) arrayList0, (Object) stringCharacterIterator0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"value\":true,\"value2\":null,\"number\":\"1\",\"x\":true,\"xx\":-99}", parserConfig0, 123);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedHashSet<JobAttributes> linkedHashSet0 = new LinkedHashSet<JobAttributes>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedHashSet0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual {, pos 0, fieldName sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a5\":{},\"\":99,\"$.Stroke normalization control key\":\"$.java.text.Da*eFormatSymbols@3257e5D1.javax.xml.bind.annotation.XmlAccessType[0][0]\",\"not close json text, token : \":[],\"(CLjava/lang/String;D)V\":99}");
      Hashtable<Double, MessageFormat> hashtable0 = new Hashtable<Double, MessageFormat>();
      defaultJSONParser0.checkMapResolve(hashtable0, (Object) null);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, position at ");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.checkListResolve(list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[null,[-99,true,[]],{\"syntax error,except start with { or [,but actually start with \":-99}]", parserConfig0);
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ArrayList<Rectangle> arrayList0 = new ArrayList<Rectangle>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class2, (Collection) arrayList0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 5, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-99,[99],{}]", parserConfig0);
      ArrayList<Rectangle> arrayList0 = new ArrayList<Rectangle>();
      Object object0 = new Object();
      defaultJSONParser0.parseArray((Type) null, (Collection) arrayList0, object0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.text.DateFormatSymbols@658b5b8d.[1]");
      Class<Float> class0 = Float.TYPE;
      HashSet<Timestamp> hashSet0 = new HashSet<Timestamp>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) hashSet0, (Object) "$.java.text.DateFormatSymbols@658b5b8d.[1]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2$.java.text.DateFormatSymbols@658b5b8d.[1]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false", parserConfig0);
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with false
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"C\":true}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Point point0 = new Point(598, 0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) point0);
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) parseContext0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(1, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"kotlin.reflect.KFunction\":76,\"\":{},\"\":{}}", parserConfig0, 123);
      Locale locale0 = Locale.KOREAN;
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) dateFormatSymbols0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(2, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":{},\"y\":\"a string\",\"z\":true,\"expect ':' at \":[{},null],\"{\"\":true,\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a7\":{},\"$\":null}\":{},\"x\":\"a string\"}", parserConfig0);
      LinkedHashMap<HttpCookie, GridBagConstraints> linkedHashMap0 = new LinkedHashMap<HttpCookie, GridBagConstraints>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 56, name {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"yyyy-MM-dd'T'HH:mm:ss.SSS\":100000.0}", parserConfig0, 123);
      Locale locale0 = Locale.KOREAN;
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) dateFormatSymbols0);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":false,\"java.util.Map\":\"a string\"}", parserConfig0, 123);
      Locale locale0 = Locale.KOREAN;
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) dateFormatSymbols0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(2, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"qalue\":true,wvalue2\":null,\"number\":\"1\",\"x\":true,\"xx\":-99}", parserConfig0, 11);
      Class<Long> class0 = Long.TYPE;
      LinkedHashMap<Rectangle, Dimension> linkedHashMap0 = new LinkedHashMap<Rectangle, Dimension>();
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      char[] charArray0 = new char[7];
      charArray0[1] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36, 36);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Hashtable<BigInteger, DecimalFormat> hashtable0 = new Hashtable<BigInteger, DecimalFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}", parserConfig0, 123);
      Locale locale0 = Locale.KOREAN;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      Short short0 = new Short((short)34);
      defaultJSONParser0.setContext((Object) short0, (Object) breakIterator0);
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) dateFormatSymbols0);
      assertTrue(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}", parserConfig0, 123);
      Locale locale0 = Locale.KOREAN;
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) dateFormatSymbols0);
      assertTrue(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":true,\"java.util.Map\":[null,\"a string\"],\"javax.xml.bind.annotation.XmlAccessType\":[[[]]]}", parserConfig0, 123);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      Byte byte0 = new Byte((byte)48);
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) byte0);
      assertEquals(0, linkedHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"kotlin.reflect.KFunction\":99,\"\":{\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a3\":\"a string\"}}", parserConfig0, 123);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      PageAttributes.OrientationRequestedType pageAttributes_OrientationRequestedType0 = PageAttributes.OrientationRequestedType.LANDSCAPE;
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) linkedHashMap0, (Object) pageAttributes_OrientationRequestedType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 27, line 1, column 28{\"kotlin.reflect.KFunction\":99,\"\":{\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a3\":\"a string\"}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("vog*l9Xe<c9Q(<dF,@", parserConfig0, (-1900));
      TreeSet<DecimalFormatSymbols> treeSet0 = new TreeSet<DecimalFormatSymbols>();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2vog*l9Xe<c9Q(<dF,@
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("HTgKsz^I_Y\"6Cy", parserConfig0, (-1576));
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException((-1576));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!{g)?iB0B+]lF> [0;");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a3\":0}", parserConfig0, 123);
      PageAttributes.OrientationRequestedType pageAttributes_OrientationRequestedType0 = PageAttributes.OrientationRequestedType.LANDSCAPE;
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      Object object0 = defaultJSONParser0.parse(propertyProcessable0, (Object) pageAttributes_OrientationRequestedType0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"qalue\":true,wvalue2\":null,\"number\":\"1\",\"x\":true,\"xx\":-99}", parserConfig0, 1);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "{\"fruit\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"qalue\":true,wvalue2\":null,\"number\":\"1\",\"x\":true,\"xx\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}", parserConfig0);
      Object object0 = defaultJSONParser0.parse((PropertyProcessable) null, (Object) "o|lYY47Vx{>nk%]f");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":{},\"y\":\"a string\",\"z\":true,\"expect ':' at \":[{},null],\"{\"\":true,\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a7\":{},\"$\":null}\":{},\"x\":\"a string\"}", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 56
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.[1]");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "$.[1]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName $.[1]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":{},\"y\":\"a string\",\"z\":true,\"expect ':' at \":[{},null],\"{\"\":true,\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a7\":{},\"$\":null}\":{},\"x\":\"a string\"}", parserConfig0);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("HTgKsz^I_Y\"6Cy", parserConfig0, (-1576));
      defaultJSONParser0.handleResovleTask(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$IntInSegement", parserConfig0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask(list0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":[\"a string\",{\"$.java.util.Map\":true},\"a string\"],\"java.util.Map\":[null,\"a string\",\"a string\",99],\"javax.xml.bind.annotation.XmlAccessType\":[[],-99]}", parserConfig0, 123);
      Locale locale0 = Locale.KOREAN;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      Short short0 = new Short((short)34);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) short0, (Object) breakIterator0);
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) dateFormatSymbols0);
      Class<Long> class0 = Long.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      defaultJSONParser0.setContext(parseContext0, (Object) locale0, (Object) javaBeanDeserializer0);
      Object object0 = defaultJSONParser0.resolveReference("{\"\":[\"a string\",{\"$.java.util.Map\":true},\"a string\"],\"java.util.Map\":[null,\"a string\",\"a string\",99],\"javax.xml.bind.annotation.XmlAccessType\":[[],-99]}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":{},\"\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"\":\"1\"}", parserConfig0);
      Object object0 = defaultJSONParser0.resolveReference("scanDouble");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"ynull,\"z\":true,\"a\"[],\"b\"{}}");
      Point point0 = new Point(4, 1171);
      MessageFormat messageFormat0 = new MessageFormat("$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@c1");
      defaultJSONParser0.setContext((Object) messageFormat0, (Object) point0);
      Object object0 = defaultJSONParser0.resolveReference("C");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.close();
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.text.DateFormatSymbols@658b5b8d.[1]");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false", parserConfig0, 0);
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&v/QOPW;P\"/c1DS}", parserConfig0, (-1688));
      defaultJSONParser0.accept(1, 91);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.text.DateFormatSymbols@658b5b8d.[1]");
      defaultJSONParser0.accept(1);
      Class<Float> class0 = Float.TYPE;
      HashSet<Timestamp> hashSet0 = new HashSet<Timestamp>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) hashSet0, (Object) "$.java.text.DateFormatSymbols@658b5b8d.[1]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ., pos 2, line 1, column 3$.java.text.DateFormatSymbols@658b5b8d.[1]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("EOk.of'nV[R~6s ~eS/");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0, 894);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      Object object0 = defaultJSONParser0.parse((Object) sunHints_Key0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parse((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONScanner jSONScanner0 = new JSONScanner("{\"javax.xml.bind.annotation.XmlAccessType\":{},\"\":null,\"$.java.text.DateFormatSymbols@2dae70d4.java.util.Map[0][0]\":true,\"java.util.Map\":[],\"$.java.text.DateFormatSymbols@2dae70d4.java.util.Map[0]\":{\"{\"\":[99,{},null],\"java.util.Map\":[null,\"a string\",\"a string\",[]],\"javax.xml.bind.annotation.XmlAccessType\":[[{}],-99]}\":{}}}", (-2575));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(classLoader0, jSONScanner0, parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 197, name {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.lang.Object@47daaad4");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("false", defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3$.java.lang.Object@47daaad4
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";`0:V*", parserConfig0, (-1535));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2;`0:V*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONScanner jSONScanner0 = new JSONScanner("SR%ZZ~4_hQ(@`x[['", 6);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      long[] longArray0 = new long[4];
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) bitSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3SR%ZZ~4_hQ(@`x[['
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":[false,{},[null],99],\"java.util.Map\":[{\"BeanToArray\":null},\"a string\",{},\"a string\",null,null,flse],\"javax.xml.bind.anntation.XmlAccessType\":[[\"a string\"]],\".ko.[1]\":\"a string\"}", parserConfig0, 480);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      defaultJSONParser1.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, line 1, column 5{\"\":[false,{},[null],99],\"java.util.Map\":[{\"BeanToArray\":null},\"a string\",{},\"a string\",null,null,flse],\"javax.xml.bind.anntation.XmlAccessType\":[[\"a string\"]],\".ko.[1]\":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<BitSet> class0 = BitSet.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      JSONScanner jSONScanner0 = new JSONScanner(", class ", 123);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(javaBeanDeserializer0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2, class 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("W]:C\"O$", parserConfig0, 13);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0.AUTO_SUPPORT);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3W]:C\"O$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")Ljava/lang/Object;", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"MapSortField\":1.0E9,\"$.java.text.DateFormatSymbols@287b500c.$.java.text.DateFormatSymbols@1e39844d.javax.xml.bind.annotation.XmlAccessType\":{\"$.java.text.DateFormatSymbols@287b500c.$.java.text.DateFormatSymbols@1e39844d.javax.xml.bind.annotation.XmlAccessType\":\"a string\"},\"{\"\":[99,false],\"java.util.Map\":[[{}],\"a string\"],\"javax.xml.bind.annotation.XmlAccessType\":-99}\":[]}", parserConfig0);
      Time time0 = new Time(1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) time0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 278, line 1, column 279{\"MapSortField\":1.0E9,\"$.java.text.DateFormatSymbols@287b500c.$.java.text.DateFormatSymbols@1e39844d.javax.xml.bind.annotation.XmlAccessType\":{\"$.java.text.DateFormatSymbols@287b500c.$.java.text.DateFormatSymbols@1e39844d.javax.xml.bind.annotation.XmlAccessType\":\"a string\"},\"{\"\":[99,false],\"java.util.Map\":[[{}],\"a string\"],\"javax.xml.bind.annotation.XmlAccessType\":-99}\":[]}
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NE", parserConfig0);
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("NE", object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&v/QOPW;P\"/c1DS}", parserConfig0, (-1672));
      Class<Double> class0 = Double.TYPE;
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) parserConfig0, (Object) class0);
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("zj", parserConfig0, (-889275714));
      Locale locale0 = Locale.KOREAN;
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) locale0, (Object) locale0);
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, position at ");
      defaultJSONParser0.getExtraTypeProviders();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":{},\"\":[],\"color\":\"$.java.text.DateFormatSymbols@3257e541.javax.xml.bind.annotation.XmlAccessType[0][0]\",\"not close json text, token : \":false,\"value2\":false}", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":{},\"y\":\"a string\",\"z\":true,\"expect ':' at \":[{},null],\"{\"\":true,\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a7\":{},\"$\":null}\":{},\"x\":\"a string\"}", parserConfig0);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[I", parserConfig0, 163);
      Feature feature0 = Feature.IgnoreNotMatch;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[I
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":[false,{},[null],99],\"java.util.Map\":[{},\"a string\",{},\"a string\",null,-99,false],\"javax.xml.bind.annotation.XmlAccessType\":[[]],\"$.ko.[1]\":\"a string\"}", parserConfig0, 409);
      Locale locale0 = Locale.CANADA;
      LinkedHashMap<Rectangle, Dimension> linkedHashMap0 = new LinkedHashMap<Rectangle, Dimension>();
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) locale0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(4, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("X9.X]ayie M[A_");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2X9.X]ayie M[A_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("InitStringFieldAsEmpty");
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"com.alibaba.fastjson.util.GenericArrayTypeImpl\":true}", parserConfig0);
      Time time0 = new Time(0);
      defaultJSONParser0.parseObject((Object) time0);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36, 36);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class java.lang.String, property null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "|d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, line 1, column 2{
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}", parserConfig0);
      Time time0 = new Time(0);
      defaultJSONParser0.parseObject((Object) time0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 54);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[{},false]", parserConfig0, 123);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual false, pos 4, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[null]", parserConfig0, 123);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      List<DecimalFormatSymbols> list0 = defaultJSONParser0.parseArray(class0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("InitStringFieldAsEmpty");
      Class<Insets> class0 = Insets.class;
      ArrayDeque<NumberFormat> arrayDeque0 = new ArrayDeque<NumberFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2InitStringFieldAsEmpty
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"qalue\":true,wvalue2\":null,\"number\":\"1\",\"x\":true,\"xx\":-99}", parserConfig0, 7);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "{\"fruit\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"qalue\":true,wvalue2\":null,\"number\":\"1\",\"x\":true,\"xx\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 53, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@bb\":\"{\"\":99,\"java.util.Map\":[null],\"javax.xml.bind.annotation.XmlAccessType\":[[]]}\"}", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, position at 0, name $.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@bb
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[null,-99,{\"syntax error,except start with { or [,but actually start with \":{},\"$.java.text.DateFormatSymbols@287b500c.javax.xml.bind.annotation.XmlAccessType[0]\":null}]", parserConfig0);
      ArrayList<Rectangle> arrayList0 = new ArrayList<Rectangle>();
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("fastjson.parser.autoTypeSupport", 0);
      defaultJSONParser0.parseArray((Collection) arrayList0, (Object) stringCharacterIterator0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":{}\"\":false,\"color\":\"Red\",\"vale\":true,\"value2\":false,\"\":\"1\"}");
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"qalue\":true,wvalue2\":null,\"number\":\"1\",\"x\":true,\"xx\":-99}", parserConfig0, 7);
      Short short0 = new Short((short)34);
      defaultJSONParser0.setContext((Object) short0, (Object) "{\"fruit\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"qalue\":true,wvalue2\":null,\"number\":\"1\",\"x\":true,\"xx\":-99}");
      IdentityHashMap<BufferCapabilities, HttpCookie> identityHashMap0 = new IdentityHashMap<BufferCapabilities, HttpCookie>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) "{\"fruit\":\"Apple\",\"size\":\"\",\"color\":\"Red\",\"qalue\":true,wvalue2\":null,\"number\":\"1\",\"x\":true,\"xx\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 53, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-99,{\"syntax error,except start with { or [,but actually start with \":-99}]", parserConfig0);
      JSONObject jSONObject0 = new JSONObject(true);
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.autoTypeSupport", jSONObject0.defaultLocale);
      JSONArray jSONArray0 = (JSONArray)defaultJSONParser0.parse((Object) messageFormat0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":{\"$.java.time.\":99},\"$.java.time.\":-99}", parserConfig0, 123);
      Locale locale0 = Locale.KOREAN;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      defaultJSONParser0.setContext((Object) null, (Object) breakIterator0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal ref, {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":{\"$.java.time.\":-99},\"$.java.time.\":[]}", parserConfig0, 123);
      Locale locale0 = Locale.KOREAN;
      LinkedHashMap<NumberFormat, DecimalFormat> linkedHashMap0 = new LinkedHashMap<NumberFormat, DecimalFormat>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) dateFormatSymbols0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(2, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{8kotlin8reflect.KFunction\":;;}", parserConfig0, 123);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, line 1, column 3{8kotlin8reflect.KFunction\":;;}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{8kotlin8reflect.KFunction\":;;}", parserConfig0, 123);
      Type[] typeArray0 = new Type[4];
      LinkedHashMap<Rectangle, Dimension> linkedHashMap0 = new LinkedHashMap<Rectangle, Dimension>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) typeArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, line 1, column 3{8kotlin8reflect.KFunction\":;;}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36, 36);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Hashtable<BigInteger, DecimalFormat> hashtable0 = new Hashtable<BigInteger, DecimalFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{", parserConfig0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.deny");
      IdentityHashMap<BufferCapabilities, HttpCookie> identityHashMap0 = new IdentityHashMap<BufferCapabilities, HttpCookie>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) choiceFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"ynull,\"z\":true,\"a\"[],\"b\"{}}");
      LinkedHashMap<Double, Point> linkedHashMap0 = new LinkedHashMap<Double, Point>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, name ynull,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"hello\",\"syntax error, \":7,\"z\":99,\"{\"\":true,\"$.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@a7\":{},\"$\":null}\":[],\"b\":true,\"xx\":false}", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser((Object) null, defaultJSONParser0.lexer, parserConfig0);
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.text.DateFormatSymbols@658b5b8d.[1]");
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!{g)?iB0B+]lF> [0;");
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"C\":true}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      defaultJSONParser0.getDateFormat();
      assertEquals(12, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("%&p|mzW", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, (String) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("HTgKsz^I_Y\"6Cy", parserConfig0, (-1576));
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"y\":null,\"z\":true,\"a\":[],\"b\":{}}", parserConfig0);
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 1, parserConfig0, 1489);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"hello\",\"\":-99,\"$.java.text.DateFormatSymbols@e9beae01.javax.xml.bind.annotation.XmlAccessType[0]\":false,\"a\":[[null],true],\"com.alibaba.fastjson.parser.DefaultJSONParser\":{},\"xx\":true}");
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      ImageCapabilities imageCapabilities0 = defaultJSONParser0.parseObject(class0);
      assertFalse(imageCapabilities0.isAccelerated());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false", parserConfig0);
      Feature feature0 = Feature.NonStringKeyAsString;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.text.DateFormatSymbols@658b5b8d.[1]");
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!{g)?iB0B+]lF> [0;");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"a string\",\"can not cast oracle.sql.TIMESTAMP to Date\":null,\"z\":true,\"a\":[],\"b\":{}}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1005, 2371);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.Collections$EmptyMap", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("W]:C\"O$", parserConfig0, 13);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&v/QOPW;P\"/c1:S}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getLexer();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":{},\"\":false,\"color\":\"Red\",\"value\":true,\"value2\":false,\"\":\"1\"}");
      defaultJSONParser0.setDateFormat("n2&}BPUD");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(12, jSONScanner0.token());
  }
}
