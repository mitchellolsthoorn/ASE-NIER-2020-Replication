/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 03:15:01 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.util.FieldInfo;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import sun.awt.SunHints;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"com.alibaba.fastjson.JSONPath$ntOpSegement\":\"a string\",\"\":[{\"com.ibaba.fastjson.JSONObject\":{}}],\"not close json text, token : \":-99,\"com.alibaba.fastjson.JSONObject\":true,\"illegal ref, \":{}}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(18, (-3057));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ident, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":true,\"size\":\"Large\",fcolor\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", parserConfig0, (-1047));
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect true, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":0.0,\"null:\":{}}", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) null);
      defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) "syntax error");
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer((-2050176345));
      JSONScanner jSONScanner0 = new JSONScanner("=;:L+BKkv=dP|01p/X", (-2050176345));
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(integer0, jSONScanner0, parserConfig0);
      jSONScanner0.nextToken();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 2, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":null,\"java.util.Collections$UnmodifiableMap\":[-99,null],\"$\":-99,\"\":{\"not support type \":[],\"$.x\":null}}");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      BitSet bitSet0 = new BitSet();
      defaultJSONParser0.setResolveStatus(3811);
      defaultJSONParser0.parse(propertyProcessable0, (Object) bitSet0);
      assertEquals(3811, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SupportAutoType");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7Yv`1fY");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "fastjson.parser.deny.internal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not close json text, token : \":-99,\"\":\"a string\",\"@\":-99,\"}\":7,\"xx\":[99]}");
      defaultJSONParser0.parseObject((Type) null);
      Type[] typeArray0 = new Type[2];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"com.alibaba.fastjson.JSONPath$ntOpSegement\":\"a string\",\"\":[{\"com.ibaba.fastjson.JSONObject\":[[]],\"not close json text, token : \":false}],\"com.alibaba.fastjson.JSONObject\":true,\"syntax error, expect \":[]}");
      defaultJSONParser0.parseObject((Type) null);
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 205, line 1, column 206{\"com.alibaba.fastjson.JSONPath$ntOpSegement\":\"a string\",\"\":[{\"com.ibaba.fastjson.JSONObject\":[[]],\"not close json text, token : \":false}],\"com.alibaba.fastjson.JSONObject\":true,\"syntax error, expect \":[]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<Insets> class0 = Insets.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(throwableDeserializer0, jSONScanner0, parserConfig0);
      Byte byte0 = new Byte((byte)102);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"com.alibaba.fastjson.JSONPath$IntObjInSegement\":NaN}");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      defaultJSONParser0.setConfig(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 3, line 1, column 4NaN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bM!AQTav");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, line 1, column 2bM!AQTav
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"context is null\":-Infinity}", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[null,{}]");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      defaultJSONParser0.parseArray((Collection) linkedHashSet0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[false,false]");
      Class<Double> class0 = Double.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class1, (Collection) null, (Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$.number\":true,\"\":true,\"setter not found, class \":true,\"not close json text, token : \":-99,\"java.util.Hashtable\":[],\"xxx\":[]}");
      LocalTime localTime0 = MockLocalTime.of(13, 17, 39, 59);
      Time time0 = Time.valueOf(localTime0);
      JSONObject jSONObject0 = (JSONObject)defaultJSONParser0.parseObject((Type) null, (Object) time0);
      assertEquals(6, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"y\":true,\"\":true,\"a\":99,\"b\":{}}", parserConfig0);
      Class<Dimension> class0 = Dimension.class;
      Dimension dimension0 = defaultJSONParser0.parseObject(class0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<Insets> class0 = Insets.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(throwableDeserializer0, jSONScanner0, parserConfig0);
      Object object0 = defaultJSONParser0.parseKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NaN");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"y\":true,\"\":true,\"a\":99,\"b\":{}}", parserConfig0);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support Type Annotation.\":\"hello\",\"\":7,\"java.util.Hashtable\":true,\"a\":\"a string\",\"xx\":true,\"xxx\":[]}", parserConfig0);
      defaultJSONParser0.parse();
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(106, jSONLexer0.pos());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3xJgngCjU", parserConfig0, (-3223));
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":false,\"java.util.Map\":true}", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) null);
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      assertSame(parseContext1, parseContext0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":false,\"uP\":99,\"com.alibaba.fastjson.JSONObject\":false,\"java.util.Collections$UnmodifiableMap\":true,\"$\":false,\"=_s{|30{\":true,\"\":null}");
      Hashtable<ImageCapabilities, MockCalendar> hashtable0 = new Hashtable<ImageCapabilities, MockCalendar>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":false,\"null\":99,\"com.alibaba.fastjson.JSONObject\":false,\"java.util.Collections$UnmodifiableMap\":true,\"$\":false,\"=_s{|30{\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":{}},\"{\"not support type \":false,\"\":{\"not support type \":[],\"$.x\":null},\"java.util.Collections$UnmodifiableMap\":[-99],\"$\":null,\"unsupported set operation.\":false}\":[]}");
      // Undeclared exception!
      defaultJSONParser0.parseObject((Object) defaultJSONParser0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support Type Annotation.\":{},\"\":7,\"java.util.Hashtable\":null,\", fieldName \":true,\"NaN\":null,\"null:\":true,\"syntax error, \":[\"a string\"],\"x\":-99}", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[nul],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter notfound, class \":true,\"\":{\"x\":{}}}\":-99}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("IQ)}S", "IQ)}S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 1, line 1, column 2{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[nul],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter notfound, class \":true,\"\":{\"x\":{}}}\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)J");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter not found, class \":true,\"\":{\"x\":{}}}\":-99}");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual {, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"yg&CqMQ7:;4A\":null}", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-99");
      ParserConfig parserConfig0 = ParserConfig.global;
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) "-99");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO :J");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("99");
      // Undeclared exception!
      try { 
        defaultJSONParser0.config((Feature) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"a string\"");
      defaultJSONParser0.parseObject((Type) null);
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 197, parserConfig0, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("/Z4O*PAfV", parserConfig0, (-2464));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("[-99,true,true,[true],-99]", (ParserConfig) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.safeMode", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/Object;)Z", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.deny.internal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      TimeZone timeZone0 = TimeZone.getDefault();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport", (-2015));
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(timeZone0, jSONReaderScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Point point0 = new Point(989, 989);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(point0, (JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/?|PJC8M4", 48);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Qpfkr\"!_3%q_!0#qk)h");
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]");
      defaultJSONParser0.parseObject((Type) null);
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0);
      Object object0 = new Object();
      Object object1 = defaultJSONParser0.parse(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!rPWx");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "!rPWx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2!rPWx
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true", parserConfig0);
      Object object0 = defaultJSONParser0.parse((Object) null);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null:", parserConfig0);
      Object object0 = defaultJSONParser0.parse((Object) propertyProcessable0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(w$tG*yHMoU", parserConfig0, (-1899));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2(w$tG*yHMoU
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter not found, class \":true,\"\":{\"x\":{}}}\":-99}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object object0 = defaultJSONParser1.parse((Object) classLoader0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false", parserConfig0);
      ArrayList<ExtraProcessor> arrayList0 = new ArrayList<ExtraProcessor>();
      Object object0 = defaultJSONParser0.parse((Object) arrayList0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null:", parserConfig0);
      defaultJSONParser0.parseObject();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, line 1, column 6null:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"value2\":false,\"null\":{},\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"fruit\":true,\"x\":true}");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      BitSet bitSet0 = new BitSet();
      defaultJSONParser0.parse(propertyProcessable0, (Object) bitSet0);
      Class<Long> class0 = Long.TYPE;
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) class0, (Object) class0);
      assertEquals(0, parseContext0.level);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":true,\"size\":\"Large\",fcolor\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", parserConfig0, (-1047));
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) class0, (Object) null);
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":true,\"size\":\"Large\",fcolor\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", parserConfig0, (-1047));
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) class0, (Object) "bpz1!UXB=");
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"not support type \":false,\"\":{\"not support type \":{\"x\":null},\"$.x\":99},\"java.util.Collections$UnmodifiableMap\":[-99],\"$\":null,\"$ref\":false}", (-1497));
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO : ");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[a]");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<BreakIterator> class0 = BreakIterator.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedHashSet0, (Object) throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[a]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[{},true]");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      defaultJSONParser0.parseArray((Collection) linkedHashSet0, (Object) null);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[\"a string\",[]]");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      defaultJSONParser0.parseArray((Collection) linkedHashSet0, (Object) null);
      assertEquals(2, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[99,null,\"a string\",false]");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.parseArray((Collection) linkedHashSet0, (Object) stringCharacterIterator0);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedHashSet0, (Object) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("META-INF/services/");
      HashSet<Float> hashSet0 = new HashSet<Float>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) hashSet0, (Object) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName []
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":99}");
      LinkedHashMap<StringCharacterIterator, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, MockSimpleDateFormat>();
      defaultJSONParser0.checkMapResolve(linkedHashMap0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":99}");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<Insets> class0 = Insets.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(throwableDeserializer0, jSONScanner0, parserConfig0);
      TreeSet<DecimalFormatSymbols> treeSet0 = new TreeSet<DecimalFormatSymbols>();
      defaultJSONParser0.checkListResolve(treeSet0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[null]");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) null, (Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":false,\"null\":99,\"com.alibaba.fastjson.JSONObject\":false,\"java.util.Collections$UnmodifiableMap\":true,\"$\":false,\"=_s{|30{\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":{}},\"{\"not support type \":false,\"\":{\"not support type \":[],\"$.x\":null},\"java.util.Collections$UnmodifiableMap\":[-99],\"$\":null,\"unsupported set operation.\":false}\":[]}");
      LinkedHashSet<RuleBasedCollator> linkedHashSet0 = new LinkedHashSet<RuleBasedCollator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) linkedHashSet0, (Object) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but {, pos 1, line 1, column 2{\"not support type \":false,\"null\":99,\"com.alibaba.fastjson.JSONObject\":false,\"java.util.Collections$UnmodifiableMap\":true,\"$\":false,\"=_s{|30{\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":{}},\"{\"not support type \":false,\"\":{\"not support type \":[],\"$.x\":null},\"java.util.Collections$UnmodifiableMap\":[-99],\"$\":null,\"unsupported set operation.\":false}\":[]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"\",\"\":true,\"setter not found,class \":{},\"not close json text, token : \":-99,\"java.util.Hastable\":[],\"xxx\":[]}");
      Class<Long> class0 = Long.TYPE;
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1);
      Time time0 = Time.valueOf(localTime0);
      Object object0 = defaultJSONParser0.parseObject((Type) class0, (Object) time0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[nul],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter notfound, class \":true,\"\":{\"x\":{}}}\":-99}");
      Class<Double> class0 = Double.TYPE;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      Insets insets0 = new Insets(452, 796, 2, (-1200));
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject(type0, (Object) insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support Type Annotation.\":{},\"java.util.Hashtable\":false,\", \":{},\"syntax error :\":\"a string\",\"not support : \":null,\"com.alibaba.fastjson.JSONObject\":null}");
      TreeMap<Date, Properties> treeMap0 = new TreeMap<Date, Properties>();
      TreeMap treeMap1 = (TreeMap)defaultJSONParser0.parseObject((Map) treeMap0, (Object) null);
      assertEquals(6, treeMap1.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"\",\"\":\"a string\",\"\":true,\"setter not found, class \":7,\"not close json text, token : \":-99,\"xx\":[]}");
      Hashtable<ImageCapabilities, MockCalendar> hashtable0 = new Hashtable<ImageCapabilities, MockCalendar>();
      Hashtable hashtable1 = (Hashtable)defaultJSONParser0.parseObject((Map) hashtable0, (Object) "");
      assertFalse(hashtable1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"\",\"\":true,\"setter not found, class \":{\"x\":null},\"not close json text, token : \":-99,\"java.util.Hashtable\":[],\"syntax error : \":[],\"xx\":-99}");
      LinkedHashMap<Double, GridBagConstraints> linkedHashMap0 = new LinkedHashMap<Double, GridBagConstraints>();
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) null);
      assertEquals(7, linkedHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":0.0}", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) null);
      LinkedHashMap<Double, GridBagConstraints> linkedHashMap0 = new LinkedHashMap<Double, GridBagConstraints>();
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) parseContext0);
      assertFalse(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"java.util.Map\":false,\"{\"not support type \":false,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"fruit\":true,\"\":{\"x\":{}}}\":-99}", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) null);
      LinkedHashMap<Double, GridBagConstraints> linkedHashMap0 = new LinkedHashMap<Double, GridBagConstraints>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) parseContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 22, name {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":[],\"\":\"null:\",\"color\":\"Red\",\"value\":{},\"value2\":false,\"number\":99}");
      Hashtable<ImageCapabilities, MockCalendar> hashtable0 = new Hashtable<ImageCapabilities, MockCalendar>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Hashtable hashtable1 = (Hashtable)defaultJSONParser0.parseObject((Map) hashtable0, (Object) gridBagConstraints0);
      assertEquals(6, hashtable1.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[[],{}]");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Insets insets0 = new Insets(0, 0, 0, (-1060));
      Object object0 = defaultJSONParser0.parse((Object) insets0);
      Hashtable<Double, Float> hashtable0 = new Hashtable<Double, Float>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) hashtable0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 7, line 1, column 8[[],{}]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      HashMap<DecimalFormat, Long> hashMap0 = new HashMap<DecimalFormat, Long>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}");
      HashMap<DecimalFormat, Long> hashMap0 = new HashMap<DecimalFormat, Long>();
      HashMap hashMap1 = (HashMap)defaultJSONParser0.parseObject((Map) hashMap0, (Object) hashMap0);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TreeSet<HttpCookie> treeSet0 = new TreeSet<HttpCookie>();
      ParserConfig parserConfig0 = ParserConfig.global;
      Hashtable<ImageCapabilities, MockCalendar> hashtable0 = new Hashtable<ImageCapabilities, MockCalendar>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":true,\"size\":\"Large\",fcolor\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", parserConfig0, (-1047));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":false,\"$ref\":99,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":false,\"fruit\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":\"a string\"}}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"not support type \":false,\"$ref\":99,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":false,\"fruit\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":\"a string\"}}");
      JSONObject jSONObject0 = (JSONObject)defaultJSONParser0.parse();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("{\"com.alibaba.fastjson.JSONPath$ntOpSegement\":\"a string\",\"\":[{\"com.ibaba.fastjson.JSONObject\":[-99]}],\"not close json text, token : \":-99,\"syntax error, expect \":{}}");
      JSONObject jSONObject1 = (JSONObject)defaultJSONParser1.parseObject((Map) jSONObject0, (Object) zoneInfo0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter not found, class \":true,\"\":{\"x\":{}}}\":-99}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser1.parseExtra("IQ)}S", "IQ)}S");
      Hashtable<ImageCapabilities, MockCalendar> hashtable0 = new Hashtable<ImageCapabilities, MockCalendar>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) "{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter not found, class \":true,\"\":{\"x\":{}}}\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 57, name {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"java.util.Hashtable\":false}", parserConfig0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      Hashtable<ImageCapabilities, MockCalendar> hashtable0 = new Hashtable<ImageCapabilities, MockCalendar>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) hashtable0, (Object) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 22, line 1, column 23{\"java.util.Hashtable\":false}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter not found, class \":true,\"\":{\"x\":{}}}\":-99}");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      IdentityHashMap<Rectangle, Properties> identityHashMap0 = new IdentityHashMap<Rectangle, Properties>();
      IdentityHashMap identityHashMap1 = (IdentityHashMap)defaultJSONParser1.parseObject((Map) identityHashMap0, (Object) "{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter not found, class \":true,\"\":{\"x\":{}}}\":-99}");
      assertEquals(0, identityHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[null]", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      HashMap<DecimalFormatSymbols, Date> hashMap0 = new HashMap<DecimalFormatSymbols, Date>();
      Hashtable<DecimalFormatSymbols, Date> hashtable0 = new Hashtable<DecimalFormatSymbols, Date>(hashMap0);
      JobAttributes jobAttributes0 = new JobAttributes();
      Object object0 = defaultJSONParser1.parseObject((Map) hashtable0, (Object) jobAttributes0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO : ");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":true,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      Class<String> class0 = String.class;
      TreeSet<HttpCookie> treeSet0 = new TreeSet<HttpCookie>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but {, pos 1, line 1, column 2{\"fruit\":true,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7nYv`1+Y");
      Class<Boolean> class0 = Boolean.TYPE;
      TreeSet<Time> treeSet0 = new TreeSet<Time>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but int, pos 1, line 1, column 27nYv`1+Y
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(946);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyProcessable0).toString();
      Object object0 = defaultJSONParser0.parse(propertyProcessable0, (Object) parserConfig0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":true,\"size\":\"Large\",fcolor\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      BitSet bitSet0 = new BitSet();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) bitSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 21, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[{\"write\":-99}]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = (JSONObject)defaultJSONParser0.parse(propertyProcessable0, (Object) classLoader0);
      assertEquals(1, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-99]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 1, line 1, column 2[-99]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[[-99],false,\"a string\"]");
      Byte byte0 = new Byte((byte)9);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 1, line 1, column 2[[-99],false,\"a string\"]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("dwD");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "dwD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName dwD
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support Type Annotation.\":{\"null:\":true},\"\":false,\"java.util.Hashtable\":null,\"syntax error : \":true,\"com.alibaba.fastjson.JSONPath$RangeSegment\":-99,\"null:\":true,\"unclosed jsonArray\":false}", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, null, public java.text.RuleBasedCollator(java.lang.String) throws java.text.ParseException
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\":99}");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) locale_Category0, (Object) "{\";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\":99}");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "{\";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\":99}");
      defaultJSONParser_ResolveTask0.ownerContext = parseContext0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask(defaultJSONParser_ResolveTask0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\":99}");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) locale_Category0, (Object) "{\";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\":99}");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "{\";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\":99}");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter not found, class \":true,\"\":{\"x\":{}}}\":-99}");
      Class<Double> class0 = Double.TYPE;
      defaultJSONParser0.handleResovleTask(class0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}", parserConfig0);
      TreeMap<MessageFormat, Collator> treeMap0 = new TreeMap<MessageFormat, Collator>();
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask(treeMap0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":false,\"java.util.Collections$UnmodifiableMap\":[-99,null],\"$\":-99,\"\":{\"not support type \":[],\"$.x\":null},\"unsupported set operation.\":false}");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      BitSet bitSet0 = new BitSet();
      defaultJSONParser0.parse(propertyProcessable0, (Object) bitSet0);
      Object object0 = defaultJSONParser0.resolveReference("{\"not support type \":false,\"java.util.Collections$UnmodifiableMap\":[-99,null],\"$\":-99,\"\":{\"not support type \":[],\"$.x\":null},\"unsupported set operation.\":false}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"\",\"\":\"a string\",\"\":true,\"setter not found, class \":7,\"not close json text, token : \":-99,\"xx\":[]}");
      Object object0 = defaultJSONParser0.resolveReference("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"com.alibaba.fastjson.JSONPath$ntOpSegement\":\"a string\",\"\":[{\"com.ibaba.fastjson.JSONObject\":[[]],\"not close json text, token : \":false}],\"com.alibaba.fastjson.JSONObject\":true,\"syntax error, expect \":[]}");
      defaultJSONParser0.parseObject((Type) null);
      Object object0 = defaultJSONParser0.resolveReference("{\"com.alibaba.fastjson.JSONPath$ntOpSegement\":\"a string\",\"\":[{\"com.ibaba.fastjson.JSONObject\":[[]],\"not close json text, token : \":false}],\"com.alibaba.fastjson.JSONObject\":true,\"syntax error, expect \":[]}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : false
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[[true],false,\"a string\",{}]");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated");
      Float float0 = new Float((float) 96);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 12, line 1, column 13unterminated
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Float float0 = new Float((float) 80);
      Object object0 = defaultJSONParser0.parse((Object) float0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":true,\"size\":\"Large\",fcolor\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", parserConfig0, (-1047));
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(452);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(type0, (Object) timeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";+43_U-9,d0H8m");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2;+43_U-9,d0H8m
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      TreeMap<MessageFormat, Collator> treeMap0 = defaultJSONParser0.parseObject((Type) null);
      assertNull(treeMap0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[{},[],[99,false],\"a string\"]");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Insets insets0 = new Insets(0, 0, 0, (-1060));
      Class<RenderingHints.Key> class0 = RenderingHints.Key.class;
      defaultJSONParser0.parseObject(class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, line 1, column 5[{},[],[99,false],\"a string\"]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6]|Z/R8&@u:b2%xxS\"");
      defaultJSONParser0.accept(2, 2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 36]|Z/R8&@u:b2%xxS\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) sunHints_Key0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3{}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Feature feature0 = Feature.SortFeidFastMatch;
      Feature[] featureArray0 = new Feature[6];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(")}c_{CG(d6.I", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2)}c_{CG(d6.I
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"parse number key error\":-1.0}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"parse number key error\":-1.0}");
      defaultJSONParser0.parseObject((Object) jSONReaderScanner0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0);
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("NaN", object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7nYv`1+Y");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":false,\"null\":99,\"com.alibaba.fastjson.JSONObject\":false,\"java.util.Collections$UnmodifiableMap\":true,\"$\":false,\"=_s{|30{\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":{}},\"{\"not support type \":false,\"\":{\"not support type \":[],\"$.x\":null},\"java.util.Collections$UnmodifiableMap\":[-99],\"$\":null,\"unsupported set operation.\":false}\":[]}");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 205
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":false,\"null\":99,\"com.alibaba.fastjson.JSONObject\":false,\"java.util.Collections$UnmodifiableMap\":true,\"$\":false,\"=_s{|30{\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":{}},\"{\"not support type \":false,\"\":{\"not support type \":[],\"$.x\":null},\"java.util.Collections$UnmodifiableMap\":[-99],\"$\":null,\"unsupported set operation.\":false}\":[]}");
      BigInteger bigInteger0 = BigInteger.ZERO;
      defaultJSONParser0.setContext((Object) "{\"not support type \":false,\"null\":99,\"com.alibaba.fastjson.JSONObject\":false,\"java.util.Collections$UnmodifiableMap\":true,\"$\":false,\"=_s{|30{\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":{}},\"{\"not support type \":false,\"\":{\"not support type \":[],\"$.x\":null},\"java.util.Collections$UnmodifiableMap\":[-99],\"$\":null,\"unsupported set operation.\":false}\":[]}", (Object) bigInteger0);
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58, 3268);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.popContext();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7nYv`1+Y");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[{}]");
      defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("kotlin.reflect.jvm.internal.KClassImpl", parserConfig0, 3);
      defaultJSONParser0.getResolveTaskList();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7nYv`1+");
      Object object0 = defaultJSONParser0.getObject("{\"not support type \":false,\"java.util.Collections$UnmodifiableMap\":99,\"$\":-99,\"\":{\"not support type \":[],\"$.x\":null},\"unsupported set operation.\":false}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":false,\"$ref\":99,\"com.alibaba.fastjson.JSONObject\":99,\"$\":false,\"fruit\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":\"a string\"},\"illegal ref, \":\"a string\"}");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"not support type \":false,\"$ref\":99,\"com.alibaba.fastjson.JSONObject\":99,\"$\":false,\"fruit\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":\"a string\"},\"illegal ref, \":\"a string\"}", parserConfig0);
      Object object0 = defaultJSONParser0.parse();
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(object0, defaultJSONParser1.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser2.acceptType("1.2.68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter not found, class \":true,\"\":{\"x\":{}}}\":-99}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("{\"not support type \":false,\"\":{\"not support type \":[\"a string\"],\"$.x\":null,\"$[0].com.ibaba.fastjson.JSONObject\":-99},\"java.util.Collections$UnmodifiableMap\":[-99],\"$\":-99,\"unsupported set operation.\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Fc(f_OyPOA");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2Fc(f_OyPOA
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null:", parserConfig0);
      Object object0 = defaultJSONParser0.parseArrayWithType(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false");
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{m)5,tP");
      Feature feature0 = Feature.IgnoreNotMatch;
      defaultJSONParser0.config(feature0, false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class com.alibaba.fastjson.parser.ParserConfig, property m
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{}");
      defaultJSONParser0.parseObject((Object) jSONReaderScanner0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 6, line 1, column 7, pos 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support Type Annotation.\":{\"null:\":true},\"\":7,\"java.util.Hashtable\":null,\"syntax error : \":true,\"com.alibaba.fastjson.JSONPath$RangeSegment\":99,\"null:\":-99,\"syntax error, \":[[]],\"unclosed jsonArray\":true}", parserConfig0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.parseObject((Object) list0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[null,{}2^,{}]");
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : false
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[null,{},{}]");
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      defaultJSONParser0.parseArray(class0);
      Object object0 = defaultJSONParser0.getObject("{\"java.util.Collections$UnmodifiableMap\":[false,null],\"$\":-99,\"\":{\"not support type \":[],\"$.x\":\"a string\"},\"unsupported set operation.\":false}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]");
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      List<GridBagConstraints> list0 = defaultJSONParser0.parseArray(class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[{\"$.java.awt.GridBagConstraints@4ca48c05\":{},\", fieldName \":false},\"a string\",\"a string\",true]");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) null, (Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      Class<MockCalendar> class0 = MockCalendar.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null:", parserConfig0);
      Timestamp timestamp0 = defaultJSONParser0.parseObject((Type) class0, (Object) propertyProcessable0);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"{\"\":0.0,\"x\":-99}\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{\"x\":\"a string\"}}");
      Hashtable<ImageCapabilities, MockCalendar> hashtable0 = new Hashtable<ImageCapabilities, MockCalendar>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) "{\"x\":\"{\"\":0.0,\"x\":-99}\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{\"x\":\"a string\"}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, position at 0, name x
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[{},[],{}]");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Insets insets0 = new Insets(0, 0, 0, (-1060));
      defaultJSONParser0.parse((Object) insets0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"com.alibaba.fastjson.JSONPath$ntOpSegement\":\"a string\",\"\":[{\"com.ibaba.fastjson.JSONObject\":{}}],\"not close json text, token : \":-99,\"com.alibaba.fastjson.JSONObject\":true,\"illegal ref, \":{}}");
      defaultJSONParser0.parseObject((Type) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(18, (-3057));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ident, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":false,\"java.util.Collections$UnmodifiableMap\":[-99,null],\"$\":-99,\"\":{\"not support type \":[99],\"$.x\":{}},\"unsupported set operation.\":false,\"Ljava/lang/Object;Ljava/lang/Object;)\":-99,\"object key level > 512\":false}", parserConfig0, (-1047));
      assertEquals(0, defaultJSONParser0.resolveStatus);
      
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.JSONPath$ntOpSegement\":\"a string\",\"\":[{\"com.ibaba.fastjson.JSONObject\":[[]],\"not close json text, token : \":false,\"fastjson.parser.autoTypeAccept\":false}],\"com.alibaba.fastjson.JSONObject\":true,\"syntax error, expect \":{\"java.util.Collections$EmptyMap\":{},\"$.\":99}}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 287, line 1, column 288{\"com.alibaba.fastjson.JSONPath$ntOpSegement\":\"a string\",\"\":[{\"com.ibaba.fastjson.JSONObject\":[[]],\"not close json text, token : \":false,\"fastjson.parser.autoTypeAccept\":false}],\"com.alibaba.fastjson.JSONObject\":true,\"syntax error, expect \":{\"java.util.Collections$EmptyMap\":{},\"$.\":99}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":{}}");
      IdentityHashMap<DefaultJSONParser.ResolveTask, Point> identityHashMap0 = new IdentityHashMap<DefaultJSONParser.ResolveTask, Point>();
      defaultJSONParser0.parseObject((Map) identityHashMap0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[{},[],[true]]");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Insets insets0 = new Insets(0, 0, 0, (-1060));
      defaultJSONParser0.parse((Object) insets0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-99,{}]");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Insets insets0 = new Insets(0, 0, 0, (-1060));
      defaultJSONParser0.parse((Object) insets0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 8, line 1, column 9[-99,{}]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[{},99]");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Insets insets0 = new Insets(0, 0, 0, (-1060));
      defaultJSONParser0.parse((Object) insets0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 6, line 1, column 7[{},99]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":true,\"size\":\"Large\",fcolor\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 13, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter not found, class \":true,\"\":{\"x\":{}}}\":-99}", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) "syntax error, expect {, actual ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 57, name {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"setter not found, class \":true,\"\":{\"x\":{}}}\":-99}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}", parserConfig0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      
      Hashtable<ImageCapabilities, MockCalendar> hashtable0 = new Hashtable<ImageCapabilities, MockCalendar>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      Object object0 = defaultJSONParser1.parseObject((Map) hashtable0, (Object) list0);
      assertNotNull(object0);
      assertEquals(0, defaultJSONParser1.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7nYv`1+Y");
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      defaultJSONParser0.getDateFormat();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$\":\"\",\"\":true,\"setter not found, class \":7,\"not close json text, token : \":-99,\"xx\":[true]}");
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unterminated json string, \":7,\"a\":[null],\"b\":-99}");
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true", parserConfig0);
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 1);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertNotNull(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":99}");
      Feature feature0 = Feature.NonStringKeyAsString;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("mfxpnST6<$iW");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]UT~}I'csp),&!", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"not support type \":false,\"{\"com.alibaba.fastjson.JSONPath$ntOpSegement\":\"a string\",\"\":[{\"com.ibaba.fastjson.JSONObject\":[-99]}],\"not close json text, token : \":-99,\"syntax error, expect \":{}}\":99,\"com.alibaba.fastjson.JSONObject\":false,\"java.util.Collections$UnmodifiableMap\":true,\"$\":false,\"=_s{|30{\":true,\"\":{\"com.alibaba.fastjson.serializer.ArraySerializer\":{}},\"x\":-99}");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"\":\"a string\",\"unteminated json string, \":-99,\"a\":[null],\"{\"not support type \":99,\"null\":true,\"com.alibaba.fastjson.JSONObject\":99,\"java.util.Collections$UnmodifiableMap\":true,\"$\":null,\"sette not found, class \":true,\"\":{\"x\":{}}}\":-99}");
      defaultJSONParser0.setDateFormat("{\"not support type \":false,\"java.util.Collections$UnmodifiableMap\":[-99,\"a string\"],\"$\":-99,\"\":{\"not support type \":-99,\"$.x\":null},\"unsupported set operation.\":false}");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }
}
