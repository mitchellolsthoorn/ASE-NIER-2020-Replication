/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 00:57:36 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[6];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":\"a string\"}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(9L, true);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"getFieldDeserializer\":null,\"\":-99,\"z\":true,\"a\":[],\"b\":{\"getFieldDeserializer\":null}}");
      jSONScanner0.setToken(394);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(3116L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4A[");
      jSONScanner0.next();
      jSONScanner0.scanBoolean('A');
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json.
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~L", 101);
      jSONScanner0.token = 2204;
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(101);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      jSONScanner0.next();
      jSONScanner0.scanDate('^');
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"rU;q[<;#*iH9");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals('r', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",[],true]");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(2610);
      jSONScanner0.scanFieldStringArray(charArray0, 2610, symbolTable0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("65n0");
      double double0 = jSONScanner0.scanDouble('0');
      assertEquals(65.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0D@w/@!I");
      double double0 = jSONScanner0.scanDouble('(');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.next();
      jSONScanner0.scanBoolean('9');
      jSONScanner0.scanDate('T');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      jSONScanner0.next();
      jSONScanner0.scanBoolean('9');
      jSONScanner0.scanDate('T');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,{}]");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem(9);
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(15, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,\"a string\",{}]");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem(9);
      jSONScanner0.scanFieldDate(charArray0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '%', '0', 32, 98);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '7', '9', 'y', '^', '9', (-2792), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,{\"illegal json, \":true}]");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('\'', '\'', 'S');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[],true,true]");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"a strin
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\"a string\"", 1160);
      jSONScanner0.setToken(1160);
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!|5%QEoK+]P//S[C");
      jSONScanner0.skipArray();
      assertEquals(10, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"/!d3/O");
      char[] charArray0 = new char[20];
      jSONScanner0.copyTo(3, 3, charArray0);
      assertEquals(20, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[7];
      jSONScanner0.arrayCopy(0, charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<p}<vwU{B@o%1~");
      char[] charArray0 = jSONScanner0.sub_chars(2, 2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'}', '<'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",{}]");
      char[] charArray0 = jSONScanner0.sub_chars(0, 0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false,false,-99,true]");
      String string0 = jSONScanner0.subString(0, 12);
      assertEquals("[false,false", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",3|nZ[{2P-+p[!p");
      String string0 = jSONScanner0.subString(2, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,99,-99,{\"com.alibaba.fastjson.parser.JSONScanner\":null},[]]");
      jSONScanner0.sp = 32;
      String string0 = jSONScanner0.stringVal();
      assertEquals("true,99,-99,{\"com.alibaba.fastjs", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",99,-99,true]");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("FLG9d^*jhcMd}");
      char[] charArray0 = new char[4];
      jSONScanner0.stringDefaultValue = "FLG9d^*jhcMd}";
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = JSONLexerBase.typeFieldName;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2));
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\")!;s}3[4O^Ic]8O");
      String string0 = jSONScanner0.info();
      assertEquals("pos 0, line 1, column 1\"@type\":\")!;s}3[4O^Ic]8O", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"/!d3/O");
      int int0 = jSONScanner0.indexOf('\"', 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,-99,\"a string\",true,false]");
      jSONScanner0.nextToken();
      jSONScanner0.seekArrayToItem(0);
      assertEquals(1, jSONScanner0.pos());
      
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short) (-99), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,99,-99,{\"com.alibaba.fastjson.parser.JSONScanner\":null},[]]");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('[', char0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",false]");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}SK/SZF7AdNDG<F+");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertArrayEquals(new byte[] {(byte)72}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false,false,-99,true]");
      SymbolTable symbolTable0 = new SymbolTable(49);
      String string0 = jSONScanner0.addSymbol(0, 14, (-2026), symbolTable0);
      assertEquals("[false,false,-", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.addSymbol(0, 0, 1, defaultJSONParser0.symbolTable);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", (-3336));
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-3336), (-3336));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}");
      jSONScanner0.sp = 32;
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!|5%QEoK+]P//S[C");
      jSONScanner0.bp = (-732);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"l", (-759));
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('J', 'i', 'J', 'J', 'J');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",3\"C|nZ[{2P-+p[!p");
      jSONScanner0.bp = 753;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"e\"4/!d3/-O");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName((SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      jSONScanner0.bp = (-1034);
      // Undeclared exception!
      try { 
        jSONScanner0.scanLong('b');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SE},E3", 775);
      jSONScanner0.bp = (-1695);
      // Undeclared exception!
      try { 
        jSONScanner0.scanISO8601DateIfMatch();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("vJx", 165);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":false,\"ull)(Dz%7Dn`>Iq@a>A4n\":[],\";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\":[],\"\"@type\":\"[null,null,-99,[true],[]]\":-99}");
      Class<String> class0 = String.class;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      Class<Object> class0 = Object.class;
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, 2711, parserConfig0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,-99]");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("AU7tnJLEU]T|i");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,-99,null,true]");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,{},99,true,-99]");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-4943));
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"CU0b)C,");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("KSoqw");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-3012));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("Zsc", 51, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.sp = 184;
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport", 52);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(1, charArray0, 65535, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0D@w/@!I");
      SymbolTable symbolTable0 = new SymbolTable(39);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(39, 39, 39, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,null,\"a string\",\"a string\",true,-99]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-2846), (-2846), (-2846), defaultJSONParser0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 78, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 40);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 1290);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"\"(");
      jSONScanner0.skipString();
      assertEquals('(', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("AU7tnJLEU]T|i", 42);
      jSONScanner0.skipArray(true);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",3|nZ[{2P-+p[!p");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1,3|nZ[{2P-+p[!p
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', char0);
      
      jSONScanner0.skipObject(true);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fastjson.\":{}}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(9L, true);
      jSONScanner0.skipObject(false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{},-99,\"a string\",{\"[-99,99,t\":{}}]");
      jSONScanner0.next();
      jSONScanner0.scanBoolean('{');
      jSONScanner0.skipObject(false);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(Ljava/lang/String;)\":null}");
      jSONScanner0.nextToken();
      jSONScanner0.skipObject(true);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false,99,-99,{\"\"@type\":\"{\"\":-99,\"fruit\":\"(J)Ljava/lang/Long;\",\"size\":\"a string\",\"value2\":false,\"syntax error, position at \":\"a string\",\"pos \":\"1\"}\":true}]");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1[false,99,-99,{\"\"@type\":\"{\"\":-99,\"fruit\":\"(J)Ljava/lang/Long;\",\"size\":\"a string\",\"value2\":false,\"syntax error, position at \":\"a string\",\"pos \":\"1\"}\":true}]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",3\"C|nZ[{2P-+p[!p");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1,3\"C|nZ[{2P-+p[!p
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1e\"4/!d3/-O
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("AU7tnJLEU]T|i", 42);
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('s');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match s - U, info : pos 1, line 1, column 2AU7tnJLEU]T|i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JdHBP. 9nGS*VqPc", 20);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(20, 20);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = JSONScanner.charArrayCompare("fastjson.parser.autoTypeAccept", 1, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      boolean boolean0 = JSONScanner.charArrayCompare("-99", 1, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("+", (-179), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = JSONScanner.charArrayCompare("{uh].s+", 1355, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = JSONLexerBase.typeFieldName;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2));
      jSONScanner0.longValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}");
      int int0 = jSONScanner0.indexOf('}', 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("j0[1%&EjP", 2083);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"[\"a string\",\"a string\",{},true,-99]");
      String string0 = jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{");
      SymbolTable symbolTable0 = new SymbolTable(75);
      String string0 = jSONScanner0.scanTypeName(symbolTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":true,\"b\":{}}", (-4199));
      String string0 = jSONScanner0.scanTypeName((SymbolTable) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"S\":100.0}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[6];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":false,\"ull)(Dz%7Dn`>Iq@a>A4n\":false,\"x\":[],\"\"/!d3/O\":-99}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":99,\"(Ljava/lang/String;)\":{},\"com.alibaba.fastjson.serializer.FieldSerializer\":{}}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[6];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.FieldSerializer\":1000000.0,\"(Ljava/lang/String;)\":{},\"illegal json.\":-99}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[6];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":-99,\"(Ljava/lang/String;)\":{\"{\"index m\":[]},\"com.alibaba.fastjson.serializer.FieldSerializer\":{}}");
      jSONScanner0.nextToken();
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 48, line 1, column 49{\"illegal json.\":-99,\"(Ljava/lang/String;)\":{\"{\"index m\":[]},\"com.alibaba.fastjson.serializer.FieldSerializer\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":99,\"ull)(Dz%7Dn`>Iq@a>A4n\":{}}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(9L, true);
      assertEquals(12, jSONScanner0.token());
      
      jSONScanner0.seekObjectToField((long[]) null);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"?M");
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"()[C\":99,\"\"@type\":\"\"@type\":\"\"a string\"\":-99,\"xx\":\"a string\"}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":false}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((long) 0, true);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal stage. \":fal;D}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(40L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"can not cast to long, value : \":null,\"}\":[]}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(2078113382421334967L, false);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"null,null\":\"a string\",\"illegal str, \":[],\"ull)(Dz%7Dn`>Iq@a>A4n\":true,\"|5%QEoK+]\":true}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField((-1589194880214235129L), false);
      assertEquals(89, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"null,null\":\"a string\",\"illegal str, \":[],\"ull)(Dz%7Dn`>Iq@a>A4n\":true,\"|5%QEoK+]\":null}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-1589194880214235129L), false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":-1.0}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((long) 0, true);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"can not cast to long, value : \":\"org.joda.time.tz.FixedDateTimeZone\",\"als\":-99}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(2078113382421334967L, false);
      jSONScanner0.skipObject(false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.serializer.FieldSerializer\":1000000.0,\"illegal json.\":[[-99],null],\"(Ljava/lang/String;)\":-99,\"com.alibaba.fastjson.util.ASMClassLoader\":{\"\"@type\":\" U'Y.8Gr3c&xN?\":{}}}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-257L), true);
      assertEquals(14, jSONScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"()[C\":99,\"\"@type\":\"\"@type\":\"\"a string\"\":-99,\"xx\":\"a string\"}");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(4578L, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 13, line 1, column 14{\"()[C\":99,\"\"@type\":\"\"@type\":\"\"a string\"\":-99,\"xx\":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":{\"\"@type\":\"{\"\"@type\":\"{\"\":-99,\"fruit\":\"(J)Ljava/lang/Long;\",\"size\":\"a string\",\"value2\":false,\"syntax error, position at \":\"a string\",\"pos \":\"1\"}\":\"(J)Ljava/lang/Long;\",\"size\":\"a string\",\"syntax error, position at \":\"a string\",\"\":null,\"value2\":true,\"number\":\"1\"}\":false},\"com.alibaba.fastjson.parser.JSONScanner\":-99,\"\"@type\":\"{\"\"@type\":\"{\"\":-99,\"fruit\":\"(J)Ljava/lang/Long;\",\"size\":\"a string\",\"value2\":false,\"syntax error, position at \":\"a string\",\"pos \":\"1\"}\":\"(J)Ljava/lang/Long;\",\"size\":\"a string\",\"syntax error, position at \":\"a string\",\"\":null,\"value2\":true,\"number\":\"1\"}\":99}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((-3750763034362895579L), false);
      assertEquals('@', jSONScanner0.getCurrent());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]Q");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField(1582L, true);
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}VQD2mE4=o4%)=w#");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField(5005334666125001149L, false);
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, '\u0000');
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.seekObjectToField((long) 0, true);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), int0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,\"a string\",{\"\"@type\":\"\":99},99]");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(99);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[-99,true],-99,null,-99]");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(7);
      assertEquals(20, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,\"a string\"]");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(833);
      assertEquals(20, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~5;F*dkqHGPNXO");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(36);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[18];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, '\u0000');
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.seekArrayToItem(541);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("AU7tnJLEU]T|i");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"()[C\":99,\"\"@type\":\"\"@type\":\"\"a string\"\":-99,\"xx\":\"a string\"}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 1193);
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', char0);
      
      jSONScanner0.skipArray(true);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,\"a string\",99,true,-99]");
      jSONScanner0.next();
      jSONScanner0.skipArray(true);
      jSONScanner0.scanDate('\u001A');
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":true,\"illegal str, \":\"a string\",\"\"@type\":\"{}\":\"a string\",\"xx\":[]}", 42);
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 76, line 1, column 77{\", line \":true,\"illegal str, \":\"a string\",\"\"@type\":\"{}\":\"a string\",\"xx\":[]}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[99],\"illegal json, \":true,\"j0[1%&EjP\":99,\"(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z\":\"a string\",\"\"@type\":\"\"@type\":\"{\":-99}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"\":[99],\"illegal json, \":true,\"j0[1%&EjP\":99,\"(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z\":\"a string\",\"\"@type\":\"\"@type\":\"{\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=z[)SGE");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1=z[)SGE
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"createCollection\":\"serialize exceeded MAX_OUTPUT_LENGTH=\",\"ull\":{}}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(2078113382421334967L, false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SE},E3");
      jSONScanner0.skipObject();
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("l!/zj}K0");
      jSONScanner0.skipObject(false);
      assertEquals(6, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\"\":-99,\"fruit\":\"(J)Ljava/lang/Long;\",\"size\":\"a string\",\"value2\":false,\"syntax error, position at \":\"a string\",\"pos \":\"1\"}\":\"(J)Ljava/lang/Long;\",\"size\":\"a string\",\"syntax error, position at \":\"a string\",\"\":null,\"value2\":true,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"\"@type\":\"{\"\":-99,\"fruit\":\"(J)Ljava/lang/Long;\",\"size\":\"a string\",\"value2\":false,\"syntax error, position at \":\"a string\",\"pos \":\"1\"}\":\"(J)Ljava/lang/Long;\",\"size\":\"a string\",\"syntax error, position at \":\"a string\",\"\":null,\"value2\":true,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[99],\"illegal json, \":true,\"j0[1%&EjP\":99,\"(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z\":\"a string\",\"\"@type\":\"\"@type\":\"{\":-99}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" U'Y.8Gr3c&xN?");
      char[] charArray0 = JSONLexerBase.typeFieldName;
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"rU;q[<;#*iH9");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,null,true,true'99null]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ull99", parserConfig0, 0);
      jSONScanner0.scanFieldStringArray((char[]) null, 1, defaultJSONParser0.symbolTable);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONScanner jSONScanner0 = new JSONScanner("oracle.sql.TIMESTAMP");
      jSONScanner0.scanFieldStringArray((char[]) null, 2, parserConfig0.symbolTable);
      assertEquals('o', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" column ", 110);
      char[] charArray0 = new char[1];
      SymbolTable symbolTable0 = new SymbolTable(66);
      jSONScanner0.scanFieldStringArray(charArray0, 1220, symbolTable0);
      assertEquals('c', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      SymbolTable symbolTable0 = new SymbolTable(52);
      jSONScanner0.scanFieldStringArray(charArray0, 52, symbolTable0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9}");
      jSONScanner0.scanDate('>');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,\"a string\",99,true,-99]");
      jSONScanner0.next();
      jSONScanner0.scanDate('\u001A');
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nf1q{+~OmED\"[~y>");
      jSONScanner0.scanDate('@');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("65n0");
      jSONScanner0.scanDate('m');
      assertEquals('6', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,-99,true,99,99]");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanDate('}');
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("CU0b)6R");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.scanLong('b');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,null,true,[true],null]");
      jSONScanner0.next();
      long long0 = jSONScanner0.scanLong('n');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nf1q{+~OmED\"[~y>");
      long long0 = jSONScanner0.scanLong('f');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      long long0 = jSONScanner0.scanLong('f');
      assertEquals(1, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8[&/>^re", (-1));
      long long0 = jSONScanner0.scanLong('`');
      assertEquals('8', jSONScanner0.getCurrent());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,{},[],{}]");
      jSONScanner0.next();
      long long0 = jSONScanner0.scanLong('C');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":-99,\"y\":7,\"\"@type\":\"\":true,\"a\":true,\"b\":{}}");
      jSONScanner0.scanLong('E');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!|5%QEoK+AP//S[K");
      long long0 = jSONScanner0.scanLong('l');
      assertEquals('!', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      double double0 = jSONScanner0.scanDouble('\u001A');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(99.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,null,\"a string\"\"a striSg\",true,-99]");
      jSONScanner0.next();
      double double0 = jSONScanner0.scanDouble('5');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n1q{~OmED\"[~y>");
      double double0 = jSONScanner0.scanDouble('t');
      assertEquals(0.0, double0, 0.01);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("XvJx");
      double double0 = jSONScanner0.scanDouble('b');
      assertEquals('X', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, '\u0000');
      double double0 = jSONScanner0.scanDouble('W');
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,true,flse,99]");
      jSONScanner0.next();
      double double0 = jSONScanner0.scanDouble('-');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      jSONScanner0.next();
      double double0 = jSONScanner0.scanDouble('\"');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("CU0b)C,");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('b');
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"null,null\":\"a string\",\"illegal str, \":[[]],\"ull)(Dz%7Dn`>Iq@a>A4n\":true,\"|5%QEoK+]\":true}");
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('c');
      assertEquals(5, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,\"a string\",99,true,-99,99,true]");
      jSONScanner0.next();
      int int0 = jSONScanner0.scanInt('h');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("65n0");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanInt('c');
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3-O");
      assertEquals('e', jSONScanner0.getCurrent());
      
      jSONScanner0.scanIdent();
      int int0 = jSONScanner0.scanInt('B');
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("65n0");
      int int0 = jSONScanner0.scanInt('h');
      assertEquals(65, int0);
      assertEquals('6', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('y');
      assertEquals(4, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      int int0 = jSONScanner0.scanInt('<');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" U'Y.8Gr3c&xN?");
      int int0 = jSONScanner0.scanInt('h');
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n1q{~OmED\"[~y>");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nf1q{+~OmED\"[~y>");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false,-99,-99,\"a string\",99,99]");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,-99,-99,\"a string\",99,99]");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" U'Y.8Gr3c&xN?");
      char[] charArray0 = JSONLexerBase.typeFieldName;
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("8zgaa`I8If");
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false,-99,-99,99]");
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,\"a string\",{}]");
      jSONScanner0.next();
      jSONScanner0.scanDate('T');
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals((-99L), long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,null,null]");
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[nill]");
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",false]");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" U'Y.8Gr3c&xN?");
      char[] charArray0 = JSONLexerBase.typeFieldName;
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"]$M_!07g", (-1));
      jSONScanner0.scanFieldSymbol(charArray0);
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d~3/mO");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",3|nZ[{2P-+p[!p");
      char[] charArray0 = JSONLexerBase.typeFieldName;
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d~3/mO");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(":\"");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,-99,true,99,99]");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"can not cast to long, value : \":99}");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8zgaa`I8If");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"fastjson.parser.deny");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", in");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[4];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,99,99,99,{}]");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,null,true,true'99null]");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("8zgaa`I8If");
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"can not cast to long, value : \":\"org.joda.time.tz.FixedDateTimeZone\",\"hashCode\":true}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,-99,true]");
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O", 52);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SE},E3");
      char[] charArray0 = new char[4];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-1677));
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3/-O");
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals('e', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals(2, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('6', '6', '6', '6', '6', '6', '6', 66);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', '1', '1', '1', '1', '1', '1', 1617);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '0', '0', '/', '7', '/', 56, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('5', '5', 'T', 'G', 'T', '5', 'T', 'G');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('3', '3', '*', '3', '3', '\u001D', 1001, '\u001D');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('3', ';', '3', ';', '3', ')', (-1884), 97);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', ',', ',', 'L', ',', '1', 59, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '0', '0', '0', '0', '0', '0', '0');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[false,\"a string\",\"a string\",{}]");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', 'o', '-');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("GO)O/xAVTtkeZ(%-");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('G', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5E-$D8sX-IN=x");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('5', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.ASMClassLoader");
      jSONScanner0.next();
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('o', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal str, \":false,\"ull)(Dz%7Dn`>Iq@a>A4n\":false,\"x\":[],\"\"/!d3/O\":-99}");
      jSONScanner0.nextToken();
      jSONScanner0.seekObjectToField(9L, true);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('y', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">7cq-!)v~W", 873);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('>', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,-99,{},99,99]");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[falsD,-99,-99,{}]");
      jSONScanner0.next();
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0D@w/@!I");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("array level > 512", 13);
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3-O");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('e', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a sVrig\"");
      jSONScanner0.sp = 3108;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0D@w/@!I");
      jSONScanner0.nextToken();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SE},E3");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.decimalValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0D@w/@!I");
      jSONScanner0.nextToken();
      jSONScanner0.numberString();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SE},E3");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8zgaa`I8If");
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
      
      String string0 = jSONScanner0.numberString();
      assertEquals("8", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("on18VOOF*Y", 2707);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(2707, 2707);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e\"4/!d3-O");
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"illegal str, \":false,\"ull)(Dz%7Dn`>Iq@a>A4n\":[]T\";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;\":[],\"\"@type\":\"[null,null,-99,[true],[]]\":-99}");
      char[] charArray0 = JSONLexerBase.typeFieldName;
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8zgaa`I8If");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, unexpect token ", (-1415));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-1415), (-1415), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y", 1193);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('N', 'N', 'N', 'N', 'N', 'N');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-1677));
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-4985), charArray0, (-1190), 45380);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]__~@4+KY", (-611));
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(91, (-611), 91, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"[\"a string\",\"a string\",{},true,-99]", 56);
      jSONScanner0.scanDate('D');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, '\u0000');
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" U'Y.8Gr3c&xN?");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(' ', jSONScanner0.getCurrent());
  }
}
