/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 21:43:57 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ", 2470);
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 12);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-1021L), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L");
      jSONScanner0.setToken(93);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(906882377511318909L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.safeMode");
      jSONScanner0.setToken(123);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(3883);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[9i,-99]");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E~ciPwima");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1E~ciPwima
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("9=$+r4'");
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0.0}", (-794));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-794), parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"0000-00-00T00:00:00\":\"a string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":null,\"\"@type\":\"\"a string\"\":-99,\"java.util.OptionalDouble\":null}");
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.scanLong('N');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      long long0 = jSONScanner0.scanLong('W');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"0000-00-00T00:00:00\":\"a string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":null,\"\"@type\":\"\"a string\"\":-99,\"java.util.OptionalDouble\":null}");
      jSONScanner0.nextIdent();
      double double0 = jSONScanner0.scanDouble('L');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"0000-00-00T00:00:00\":\"a string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":null,\"\"@type\":\"\"a string\"\":-99,\"java.util.OptionalDouble\":null}", 108);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.scanInt('8');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0.0,\"\"@type\":\"\":{},\"ull{}\":null,\"isWriteClassName\":-99}", (-832));
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("77!R8t<<g]");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EI-zP/.C;m-wB<U");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("", (-1));
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":true,\"z\":true,\"a\":[],\"b\":{}}", (-1923));
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('z', 'z', '}');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"0000-00-00T00:00:00\":\"a string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":null,\"\"@type\":\"\"a string\"\":-99,\"java.util.OptionalDouble\":null}");
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"0000-00-\":\"a string\"}", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", 101);
      jSONScanner0.setToken(4346);
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,false,{},[],{}]", (-338));
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,false,{}]", (-338));
      char char0 = jSONScanner0.charAt(16);
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9l.8@Ho#w-miSj");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 19l.8@Ho#w-miSj
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("G^=[EX%`yb)sX}");
      jSONScanner0.skipObject();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.arrayCopy(0, charArray0, 0, 0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[false,-99],\"syntax error : \":{\"\"@type\":\"{\"0000-00-00T00:00:00\":\"a string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":null,\"\"@type\":\"\"a string\"\":-99,\"java.util.OptionalDouble\":null}\":-99}}", (-794));
      char[] charArray0 = jSONScanner0.sub_chars(101, 101);
      assertEquals(101, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char[] charArray1 = jSONScanner0.sub_chars(0, 0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json, \":\":VDx_^{v@\",\"com.alibaba.fastjson.serializer.SerialContext\":true,\"x\":false}", (-794));
      String string0 = jSONScanner0.subString(0, 69);
      assertEquals("{\"illegal json, \":\":VDx_^{v@\",\"com.alibaba.fastjson.serializer.Serial", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      String string0 = jSONScanner0.subString(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e?,iJ#M8<1Rbdy]9=2 ", 42);
      jSONScanner0.skipArray();
      String string0 = jSONScanner0.stringVal();
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner", (-799));
      jSONScanner0.stringDefaultValue = "[C";
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1>6)", 0);
      jSONScanner0.nextIdent();
      String string0 = jSONScanner0.numberString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":false,\"[-99,[]]\":false,\"-99\":[\"a string\"]}", (-804));
      jSONScanner0.nextIdent();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONScanner0, parserConfig0);
      String string0 = jSONScanner0.numberString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 122);
      char char0 = jSONScanner0.next();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char char0 = jSONScanner0.next();
      assertEquals('a', char0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pm-arseIa eror:u");
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"create\":\"a string\",\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\":\"ull\",\"fastjson.\":\"\",\"\":\"a string\",\"com.google.common.collect.LinkedListMultimap\":null,\"x\":-99,\"java.util.OptionalDouble\":null,\"illegal str, \":[]}");
      int int0 = jSONScanner0.indexOf(',', (-133));
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 1566);
      jSONScanner0.nextIdent();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short) (-99), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", 122);
      char char0 = jSONScanner0.charAt(16);
      assertEquals(',', char0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"a string\",\"size\":\"\",\"\":99,\"value\":true,\"value2\":-99,\"number\":\"1\",\"x\":99}");
      char char0 = jSONScanner0.charAt(34);
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"a string\",\"size\":\"\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      char char0 = jSONScanner0.charAt(34);
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner", (-799));
      jSONScanner0.nextIdent();
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertArrayEquals(new byte[] {(byte)114, (byte) (-119)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"0000-00-00T00:00:00\":\"a string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":null,\"\"@type\":\"\"a string\"\":-99,\"java.util.OptionalDouble\":null}");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONScanner0, parserConfig0);
      String string0 = jSONScanner0.addSymbol(26, 93, 26, defaultJSONParser0.symbolTable);
      assertEquals("string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultim", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pm-arseIa eror:u");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(1058, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"double\":[],\"illegal json, \":\":VDx_^{v@\",\"\"@type\":\" m\":false}", (-794));
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9(GTrsZ");
      jSONScanner0.bp = (-1458);
      // Undeclared exception!
      try { 
        jSONScanner0.scanInt('U');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      jSONScanner0.bp = (-1813);
      // Undeclared exception!
      try { 
        jSONScanner0.scanISO8601DateIfMatch();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("; ?sQ2E'w2d*Mzd");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m");
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-1));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, (-715), defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseInt error : \":99,\"pos \":true}", (-794));
      char[] charArray0 = new char[0];
      jSONScanner0.bp = (-794);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclose");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.bp = (-3191);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pm-arseIa eror:u");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pm-arseIa eror:u");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"0000-00-00T00:00:00\":\"a string\",\"unclosed str, \":[null],\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":\"a string\",\"{\"index m\":-99,\"java.util.OptionalDouble\":false}");
      char[] charArray0 = new char[7];
      jSONScanner0.bp = (-1413);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E~UiPwima");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pm-arseIa eror:u");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-~V>O", (-319));
      jSONScanner0.bp = (-3995);
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('T');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<\"99]", (-794));
      jSONScanner0.bp = 91;
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'W';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      jSONScanner0.close();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("9=$+r4'");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-887), (-887), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("_ww/n]e8QR6D'gG,@*g");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(4, 4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1615));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("\"@type\":\"k`}Hv,EF!=kHq", (-2753), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m");
      JSONScanner jSONScanner1 = new JSONScanner("9=$+r4'");
      jSONScanner1.matchField(jSONScanner0.sbuf);
      byte[] byteArray0 = jSONScanner1.bytesValue();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QeoI4FzW/&G/'", 1047);
      SymbolTable symbolTable0 = new SymbolTable(117);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(117, 117, 1047, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(123);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(123, (-1203), 2492, symbolTable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-373), (-373));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"0000-00-00T00:00:00\":\"a string\",\"unclosed str, \":[null],\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":\"a string\",\"{\"index m\":-99,\"java.util.OptionalDouble\":false}");
      jSONScanner0.nextIdent();
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]i(");
      jSONScanner0.skipArray(false);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"C:VDx_^{v\":\"Apple\",\"illegal json, \":-99,\"illegal state : \":\"Red\",\"value\":true,\"value2\":false,\"Negative initial size: \":\"1\",\"x\":[]}", (-794));
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"\"@type\":\"C:VDx_^{v\":\"Apple\",\"illegal json, \":-99,\"illegal state : \":\"Red\",\"value\":true,\"value2\":false,\"Negative initial size: \":\"1\",\"x\":[]}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":[],\"size\":\"Large\",\"scan true error\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":false}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"fruit\":[],\"size\":\"Large\",\"scan true error\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":false}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 486);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 3, line 1, column 4\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.skipObject(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zL[pQ,{z", (-942));
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1zL[pQ,{z
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,false,{},[],{}]", (-338));
      jSONScanner0.nextIdent();
      String string0 = jSONScanner0.info();
      assertEquals("pos 1, line 1, column 2[null,false,{},[],{}]", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oB");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yyyy-MM-dd HH:mm:ss,SSS");
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-89), (-1246));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = JSONScanner.charArrayCompare("s)@3Bd9NAu+m", 0, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("C:VDx_^{v", (-794), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("", (-1), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = JSONScanner.charArrayCompare("", 0, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":{}}", 122);
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-2), (char[]) null, 122, 1657);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E~ciPwima");
      int int0 = jSONScanner0.indexOf(':', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"\":-99,\"color\":-99,\"C:VDx_^{v\":true,\"\"@type\":\"GD[~n`&y_nD~!6k\":{},\"number\":null}", 68);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName((SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"fastjson.parser.safeMode");
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("h]h=ZezZzn*]R", (-794));
      String string0 = jSONScanner0.scanTypeName((SymbolTable) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json.\":\"a string\"}", (-794));
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[6];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0.0}", (-794));
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[6];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json, \":-7VDx_^{v@\",\"color\":true,\"\":true,\"x\":false}", (-794));
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull[-99]\":2}", (-804));
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[4];
      jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(I)V\":116}", (-794));
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[3];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(12, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0.0,\"\"@type\":\"\":{},\"ull{}\":null,\"isWriteClassName\":-99}", (-832));
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[6];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 10, line 1, column 11{\"\":0.0,\"\"@type\":\"\":{},\"ull{}\":null,\"isWriteClassName\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"0000-00-00T00:00:00\":\"a string\",\"unclosed str, \":[null],\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":\"a string\",\"{\"index m\":-99,\"java.util.OptionalDouble\":false}");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{},\"[-99,[]]\":false,\"-99\":[]}", (-804));
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":false,\"[-99,[]]\":\"a string\",\"-99\":99,\"pos \":true}", (-804));
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[5];
      longArray0[1] = (-3750763034362895579L);
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\"a string\",\"-99\":true}", (-804));
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[5];
      longArray0[4] = (-3750763034362895579L);
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":99,\"size\":\"Large\",\"\"true,\"\":true,\"value2\":null,\"number\":\"1\",\"x\":fale}");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[9];
      longArray0[8] = 8053676751900894641L;
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":99,\"size\":\"Large\",\"\"true,\"\":true,\"value2\":null,\"number\":\"1\",\"x\":fale}");
      jSONScanner0.nextIdent();
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 29, line 1, column 30{\"fruit\":99,\"size\":\"Large\",\"\"true,\"\":true,\"value2\":null,\"number\":\"1\",\"x\":fale}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.setToken(12);
      int int0 = jSONScanner0.seekObjectToField((long[]) null);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,true,null]", (-794));
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9=$+r4'");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\"a string\",\"[-99,[]]\":[{}]}", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((long) (-794), false);
      jSONScanner0.scanInt('y');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[false,-99],\"syntax error : \":{\"\"@type\":\"{\"0000-00-00T00:00:00\":\"a string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":null,\"\"@type\":\"\"a string\"\":-99,\"java.util.OptionalDouble\":null}\":-99}}");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) (-794), true);
      assertEquals(14, jSONScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0.0,\"not support type \":{},\"\"@type\":\"\":\"a string\"}", (-794));
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) (-794), true);
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":true,\"java/lang/Integer\":null,\"99]\":false}");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) (-794), false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":\"a string\",\"java/lang/Integer\":null}", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((long) (-794), false);
      boolean boolean0 = jSONScanner0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":true}", (-794));
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) (-794), false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull\":\"\"@type\":\"\"}", (-794));
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-794), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"^I9~k^T}\":0.0}", (-794));
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) (-794), true);
      assertEquals(17, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"WriteDateUseDateFormat\":null,\"illegal json, \":null,\"illegal state : \":\"u.*R['SfK\",\"C:VDx_^{v\":[],\"com.aliba\":\"a string\",\"Negative initial size: \":\"illegal str, \",\"can not cast to JSONObject.\":99,\"xxx\":\"a string\",\"x\":[],\"\"@type\":\"\"a string\"\":\"a string\",\"xxxx\":\"a string\"}");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 223, line 1, column 224{\"WriteDateUseDateFormat\":null,\"illegal json, \":null,\"illegal state : \":\"u.*R['SfK\",\"C:VDx_^{v\":[],\"com.aliba\":\"a string\",\"Negative initial size: \":\"illegal str, \",\"can not cast to JSONObject.\":99,\"xxx\":\"a string\",\"x\":[],\"\"@type\":\"\"a string\"\":\"a string\",\"xxxx\":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull[-99]\":2,\"\"@type\":\"[-99,{},false]\":[]}", (-804));
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-804), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 16, line 1, column 17{\"ull[-99]\":2,\"\"@type\":\"[-99,{},false]\":[]}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"syntax error, expect [, actual \":162}", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((long) (-794), false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":[],\"unclosed str, \":false,\"ull{}\":true,\"l.8@Ho#\":\"a string\"}", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((long) (-794), false);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclose");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 1, line 1, column 2{\"unclose
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json, \":-7VDx_^{v@\",\"color\":true,\"\":true,\"x\":false}", (-794));
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-794), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":[false,-99],\"syntax error : \":{\"\"@type\":\"{\"0000-00-00T00:00:00\":\"a string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":null,\"\"@type\":\"\"a string\"\":-99,\"java.util.OptionalDouble\":null}\":-99}}", (-794));
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) (-794), false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,\"a string\",-99]", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.scanLong('R');
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 116, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 16, line 1, column 17[null,\"a string\",-99]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9(3TrsZ");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(6252L, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((-7646397334795463490L), true);
      assertEquals(2, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ", 43);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField(1815L, true);
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"unclosed str, \":true,\"}\":{}},{\"\"@type\":\"pm-abseIa r#}or:u\":true}]", (-794));
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(116);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"ull99\":\"a string\"}]", (-794));
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.seekArrayToItem(116);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[9i,-99]");
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.seekArrayToItem(14);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", (-804));
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json.
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[],99,false,-99]", (-804));
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.seekArrayToItem(1);
      assertEquals(',', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,\"a string\"]", (-794));
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.seekArrayToItem(116);
      assertEquals(20, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-804));
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.seekArrayToItem(1);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal json, ");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull[null,\"a string\",{\"\"9(GTrsZ\":[]}]\":-99}", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.skipObject(false);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",\"a string\"]", (-804));
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.seekArrayToItem(1);
      assertEquals(']', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ", 125);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', char0);
      
      jSONScanner0.skipArray(true);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("77!R8t<<g]");
      jSONScanner0.skipArray(true);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ul/[-99]\" 2", 17);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"ul/[-99]\" 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "@e/''5aPwJ\\um/k";
      JSONScanner jSONScanner0 = new JSONScanner(string0, (-89));
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1@e/''5aPwJ\\um/k
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":true,\"not support type \":{\"ull-99\":99}}");
      jSONScanner0.nextIdent();
      jSONScanner0.seekObjectToField((long) (-794), false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pV*F^}#\"");
      jSONScanner0.skipObject(true);
      assertEquals(6, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":0.0,\"\"@type\":\"\":{},\"ull{}\":null,\"isWriteClassName\":-99}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"\":0.0,\"\"@type\":\"\":{},\"ull{}\":null,\"isWriteClassName\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.skipObject(false);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", (-794));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanFieldStringArray((char[]) null, (-108), parserConfig0.symbolTable);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[9i,-99]");
      SymbolTable symbolTable0 = new SymbolTable(2226);
      jSONScanner0.scanFieldStringArray((char[]) null, 185, symbolTable0);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("C:VDx_^{v@r~x&f^");
      assertEquals('C', jSONScanner0.getCurrent());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanSymbolUnQuoted(parserConfig0.symbolTable);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, 1557, parserConfig0.symbolTable);
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner("\"9(3TrsZ");
      SymbolTable symbolTable0 = new SymbolTable(1);
      jSONScanner0.scanFieldStringArray(charArray0, 1, symbolTable0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal str, ", 0);
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldStringArray((char[]) null, (-1), (SymbolTable) null);
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":{\"()[C\":99,\"unclosed str\":-99},\"unclosed str\":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      jSONScanner0.scanDate('q');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,false,{},null,true]", (-338));
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate('v');
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nA2$lp", 130);
      jSONScanner0.scanDate('Y');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8]S.w`\"jT0}&`|$?HOM");
      jSONScanner0.scanDate('8');
      assertEquals('8', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,null,{\"yyyy\u5E74M\u6708d\u65E5 HH:mm:ss\":null}]");
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate('A');
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pm-arse5Ia eror:u");
      jSONScanner0.scanDate('l');
      assertEquals('p', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-~V>O", (-319));
      jSONScanner0.scanDate('T');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ", 43);
      jSONScanner0.scanDate('u');
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99]", (-794));
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.scanLong(']');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 747);
      long long0 = jSONScanner0.scanLong('z');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null]", (-794));
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.scanLong(']');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nJ5(:0~n;#96VSDq4^");
      long long0 = jSONScanner0.scanLong('a');
      assertEquals(0L, long0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0Slh|yjR+-u,$h;UJgh");
      long long0 = jSONScanner0.scanLong('n');
      assertEquals(0L, long0);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      long long0 = jSONScanner0.scanLong('n');
      assertEquals(99L, long0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[35];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = ',';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 26);
      double double0 = jSONScanner0.scanDouble(',');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(88.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null]", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.scanDouble(' ');
      assertEquals(5, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,false]", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.scanDouble(' ');
      assertEquals(5, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nA2$lp", 130);
      double double0 = jSONScanner0.scanDouble('3');
      assertEquals(0.0, double0, 0.01);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9=$+r4'");
      double double0 = jSONScanner0.scanDouble('l');
      assertEquals(9.0, double0, 0.01);
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"uuu");
      jSONScanner0.scanDouble('{');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      double double0 = jSONScanner0.scanDouble('\"');
      assertEquals((-99.0), double0, 0.01);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      double double0 = jSONScanner0.scanDouble('K');
      assertEquals(0.0, double0, 0.01);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("77!R8t<<g]", ' ');
      int int0 = jSONScanner0.scanInt(' ');
      assertEquals(77, int0);
      assertEquals('7', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,false,{},[],{}]", (-338));
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.scanInt('@');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n{^ruQGk9|5n?/", 475);
      int int0 = jSONScanner0.scanInt('3');
      assertEquals(0, int0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4U");
      int int0 = jSONScanner0.scanInt('U');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 1566);
      int int0 = jSONScanner0.scanInt('o');
      assertEquals((-99), int0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m");
      int int0 = jSONScanner0.scanInt('$');
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"fastjson.parser.safeMode");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9l.8@Ho#");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"WriteDateUseDateFormat\":true}", (-794));
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[1];
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,null]", (-794));
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[]]", (-794));
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")[)=5JETN;Yd2", (-794));
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EI-zP/.C;m-wB<U");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m");
      char[] charArray0 = new char[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(" ", 43);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9=$+r4'");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"\u0000\u0000\u0000");
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",\"a string\"]", (-804));
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(14, jSONScanner0.token());
      assertEquals((-2478609061457174971L), long0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("59}?<za%ai", (-1252));
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m");
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E~UiPwima");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"WC+{{DT!IrzT).`");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ZTF-M", 1967);
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9l.8@Ho#");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"P5N5.<!`/:m7x");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(" ", 46);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,[]]", (-794));
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"0000-00-00T00:00:00\":\"a string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":null,\"\"@type\":\"\"a string\"\":-99,\"java.util.OptionalDouble\":null}");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9=$+r4'");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" m");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal json, \":\"Large\",\"color\":true,\"\":true,\"utf8 decode error, \":false,\"Negative initial size: \":[],\"x\":false}", (-794));
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', '9', '9', '9', 352, 103);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('6', '6', '6', 'v', 'U', ']', 12, 'U');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('6', '6', 'S', 'v', 'U', ']', 12, 1507);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,true]", (-794));
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('3', ' ', 'S', 'Y', 'Y', 'Y', (-1), 475);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('.', 'H', 'C', 'H', '.', 'H', (-800), (-800));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("u+=,1B[uC|x");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', '.', '-', '\'', '.');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hR^9~k^T}YS", 1396);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('h', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0000-0-00T00:00:00.000");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ul/[-99]\" 2", (-804));
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"0000-00-00T00:00:00\":\"a string\",\"size\":\"a string\",\"fastjson.\":\"\",\"\":false,\"com.google.common.collect.LinkedListMultimap\":null,\"\"@type\":\"\"a string\"\":-99,\"java.util.OptionalDouble\":null}");
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate('E');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99,\"color\":-99,\"C:VDx_^{v\":true,\"\"@type\":\"GD[~n`&y_nD~!6k\":{},\"number\":null}");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":-99}", (-794));
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pm-arseIa ero`r:u");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('p', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pm-arseIa eror:u");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('p', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str, ");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/eaU2dbl;RAEmDe", (-764));
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9l.8@Ho#");
      jSONScanner0.nextIdent();
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short)9, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PlSz'?I^\"(N,z\"%g83");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("dd/MM/yyyy HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(2467, (-3995));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.hasSpecial = true;
      String string0 = jSONScanner0.stringVal();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eCQ{8v=>x]", 24);
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanFieldStringArray(charArray0, (-684), defaultJSONParser0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"\":[],\"[-99,[]]\":99,\"-99\":[]}");
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 475);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.copyTo(0, 0, charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-[m|Ec$C_oQaKzs");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("P5N5.<!`/:m7x", 3);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('%', '%', '%');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ", 43);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('C', 'C', 'C', 'C', ')', ')');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9(GTrsZ");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-2664), (-2664), (-2664), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"9(GTrsZ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('U');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-794));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9l.8@Ho#");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('9', jSONScanner0.getCurrent());
  }
}
