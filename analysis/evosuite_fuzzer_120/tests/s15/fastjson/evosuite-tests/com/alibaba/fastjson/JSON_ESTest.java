/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 02:43:19 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamClass;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.AbstractMap;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray(",");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject(",");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      // Undeclared exception!
      try { 
        JSON.parseArray(";Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/Object;I[I)Ljava/lang/Object;", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ;, pos 1, line 1, column 2;Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/Object;I[I)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray(";Ljava/lang/Object;C)C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(3089);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeature0;
      JSON.writeJSONString((Writer) stringWriter0, (Object) jSONObject0, serializerFeatureArray0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray(65536);
      jSONArray0.writeJSONString((Appendable) stringWriter0);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[false],\"b\":{}}", false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[3];
      serializerFeatureArray0[6] = serializerFeatureArray0[5];
      JSON.writeJSONStringTo(pascalNameFilter0, mockFileWriter0, serializerFeatureArray0);
      assertEquals(7, serializerFeatureArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeature0;
      JSON.writeJSONString((Writer) serializeWriter0, (Object) serializeWriter0, 12, serializerFeatureArray0);
      assertEquals(15563, serializeWriter0.getBufferLength());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("[99]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("toJSON error");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = JSON.isValid("[99]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2520);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      int int0 = JSON.writeJSONString((OutputStream) pipedOutputStream0, charset0, (Object) serializerFeature0, serializerFeatureArray0);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tWd2%_ZcH+{\"M~X5-q", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = new SerializeConfig(16);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      int int0 = JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) mockFile0, serializeConfig0, serializeFilterArray0, "Z", 16, serializerFeatureArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1);
      Class<JSONObject> class0 = JSONObject.class;
      JSONObject jSONObject1 = jSONObject0.toJavaObject(class0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSON> class0 = JSON.class;
      JSONArray jSONArray1 = (JSONArray)JSON.toJavaObject((JSON) jSONArray0, class0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(180, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeatureArray0[2];
      serializerFeatureArray0[7] = serializerFeature0;
      String string0 = JSON.toJSONStringZ((Object) null, serializeConfig0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer integer0 = new Integer(8);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) integer0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(107);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[9];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      String string0 = JSON.toJSONString((Object) stringWriter0, serializeFilterArray0, serializerFeatureArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) null, serializeConfig0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JSONObject> class0 = JSONObject.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) class1, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals("\"com.alibaba.fastjson.JSONObject\"", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) "true", (-3895), serializerFeatureArray0);
      assertEquals("[\n\t\n]", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[4];
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, (SerializeFilter[]) null, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[8];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeatureArray0[5];
      serializerFeatureArray0[8] = serializerFeatureArray0[5];
      byte[] byteArray0 = JSON.toJSONBytes(object0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeConfig0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, 126, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1606);
      SerializeConfig serializeConfig0 = new SerializeConfig(989, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) stringWriter0, serializeConfig0, 989, serializerFeatureArray0);
      assertEquals(33, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Object object0 = JSON.toJSON((Object) null, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSON.toJSON((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-112);
      Feature[] featureArray0 = new Feature[7];
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject(byteArray0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 406, featureArray0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      JSONObject jSONObject0 = JSON.parseObject("", featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      featureArray0[4] = featureArray0[1];
      featureArray0[5] = featureArray0[2];
      featureArray0[6] = featureArray0[0];
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":99,\"value2\":false,\"number\":\"1\"}", featureArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<JSON> class0 = JSON.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[5];
      AbstractMap.SimpleImmutableEntry<PascalNameFilter, Method> abstractMap_SimpleImmutableEntry0 = JSON.parseObject("", (Type) class0, parserConfig0, featureArray0);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      featureArray0[4] = featureArray0[3];
      featureArray0[5] = feature0;
      AbstractMap.SimpleImmutableEntry<PascalNameFilter, Method> abstractMap_SimpleImmutableEntry0 = JSON.parseObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":99,\"value\":true,\"value2\":false,\"number\":\"1\"}", (Type) null, parserConfig0, featureArray0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      HashMap<StringWriter, JSONPObject> hashMap0 = JSON.parseObject("{\"com.alibaba.fastjson.serializer.BigIntegerCodec\":false,\"color\":\"Red\",\"value\":99,\"true\":false,\"number\":\"1\",\"x\":-99}", (Type) null, 327, featureArray0);
      assertNotNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = featureArray0[0];
      featureArray0[4] = featureArray0[0];
      featureArray0[5] = feature0;
      featureArray0[6] = featureArray0[0];
      featureArray0[7] = featureArray0[6];
      featureArray0[8] = featureArray0[5];
      PascalNameFilter pascalNameFilter0 = JSON.parseObject("{\"fruit\":false,\"color\":\"Red\",\"value\":99,\"true\":false,\"number\":\"1\"}", class0, featureArray0);
      assertNotNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<String> class0 = String.class;
      Feature[] featureArray0 = new Feature[4];
      String string0 = JSON.parseObject("", class0, (ParseProcess) null, featureArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSON.parseObject("", class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<JSON> class0 = JSON.class;
      JSONObject jSONObject0 = (JSONObject)JSON.parseObject("{\"\":\"a string\",\"siz\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"\":\"1\",\"x\":\"a string\"}", class0);
      assertEquals(6, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"fruit\":false,\"json-path can not be null or empty\":true,\"not support type : \":-99,\"\":false}");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 3089);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[0];
      JSONArray jSONArray0 = JSON.parseObject((InputStream) pushbackInputStream0, charset0, (Type) class0, featureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Feature[] featureArray0 = new Feature[3];
      GenericArrayTypeImpl genericArrayTypeImpl0 = JSON.parseObject((InputStream) sequenceInputStream0, (Type) class0, featureArray0);
      assertNull(genericArrayTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("[]");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("[null]");
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Feature feature0 = Feature.SafeMode;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      Object object0 = JSON.parse("", featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      Feature[] featureArray0 = new Feature[7];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = featureArray0[1];
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"fruit\":false,\"color\":\"Red\",\"value\":99,\"true\":false,\"number\":\"1\"}", featureArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONArray jSONArray0 = (JSONArray)JSON.parse("[-99]", parserConfig0, featureArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"fruit\":99,\"color\":\"Red\",\"\":99,\"true\":false,\"number\":\"1\"}", parserConfig0, 26);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Object object0 = JSON.parse("", parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSON.parse("", 2990);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = JSON.parse("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = (JSONObject)JSON.parse("{\"childContext\":\"(I)C\",\", fieldName \":[]}");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(107);
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONStringTo("4*WKFhx5", stringWriter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        jSONArray0.writeJSONString((Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9#B`uD*%SS@");
      Charset charset0 = Charset.defaultCharset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[3];
      serializerFeatureArray0[7] = serializerFeatureArray0[1];
      serializerFeatureArray0[8] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) "9#B`uD*%SS@", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("And");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[4];
      serializerFeatureArray0[7] = serializerFeatureArray0[0];
      serializerFeatureArray0[8] = serializerFeatureArray0[3];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Charset) null, (Object) "And", serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tWd2%_ZcH+{\"M~X5-q", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = new SerializeConfig(16);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      mockFile0.delete();
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) mockFile0, serializeConfig0, serializeFilterArray0, "Z", 16, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}<");
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, linkedHashMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[3];
      serializerFeatureArray0[6] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) javaBeanSerializer0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) filterOutputStream0, (Object) serializerFeature0, (int) (byte)8, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Feature[] featureArray0 = new Feature[7];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) featureArray0[0], (int) (byte)0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentPut("jWSs_z{^W!eiX", "");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        jSONObject1.toString(serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      // Undeclared exception!
      try { 
        jSONObject0.toString(serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("9[", (Object) "9[");
      // Undeclared exception!
      try { 
        jSONObject0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      String[] stringArray0 = new String[6];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[3];
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) uTF8Decoder0, serializerFeatureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) uTF8Decoder0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.util.UTF8Decoder, method : isCharsetDetected
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) uTF8Decoder0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[5];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "META-INF/services/", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[3];
      serializerFeatureArray0[7] = serializerFeatureArray0[3];
      serializerFeatureArray0[8] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) pascalNameFilter0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) serializeConfig0, serializeConfig0, serializeFilterArray0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "\"CamelCase\"", serializeConfig0, serializeFilterArray0, "W|Q", 16, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      String[] stringArray0 = new String[9];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) javaBeanSerializer0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString(object0, (SerializeConfig) null, (SerializeFilter) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "isInitialized", 509, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1602);
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      String[] stringArray0 = new String[3];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      jSONObject0.put((String) null, (Object) javaBeanSerializer0);
      // Undeclared exception!
      try { 
        jSONObject0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = new SerializeConfig(22);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) charset0, serializeConfig0, serializeFilterArray0, "|kz^g:oGq*lk", 26, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "1.2.68", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "false", serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      serializerFeatureArray0[7] = serializerFeatureArray0[1];
      serializerFeatureArray0[8] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "false", (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      String[] stringArray0 = new String[5];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "=Z", serializeConfig0, serializeFilterArray0, stringArray0[3], 0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializeConfig serializeConfig0 = new SerializeConfig(3);
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeConfig0, (SerializeFilter[]) null, "LH6TA$VZ", 0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      serializerFeatureArray0[6] = serializerFeatureArray0[4];
      serializerFeatureArray0[7] = serializerFeatureArray0[1];
      serializerFeatureArray0[8] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "false", (SerializeConfig) null, serializeFilterArray0, 8, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      String[] stringArray0 = new String[4];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) simplePropertyPreFilter0, 351, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializerFeature0, (-704), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) class0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 8, (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 8, line 1, column 9\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Type[] typeArray0 = new Type[9];
      ParserConfig parserConfig0 = new ParserConfig(true);
      byte[] byteArray0 = new byte[2];
      Charset charset0 = Charset.defaultCharset();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, charset0, typeArray0[4], parserConfig0, (ParseProcess) null, (-6105), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 2, line 1, column 3\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-820), 4, (CharsetDecoder) uTF8Decoder0, (Type) null, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      Charset charset0 = Charset.defaultCharset();
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, 989, (-483), charset0, (Type) class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      byte[] byteArray0 = new byte[8];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[9];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-1825), 590, charset0, (Type) class0, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1825
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("=y", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("false", featureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[1];
      featureArray0[3] = feature0;
      featureArray0[4] = featureArray0[0];
      featureArray0[5] = featureArray0[3];
      // Undeclared exception!
      try { 
        JSON.parseObject("g:x,y>9kp9e_'WNok3W", type0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      ObjectStreamClass objectStreamClass0 = ObjectStreamClass.lookupAny(class0);
      Class<?> class1 = objectStreamClass0.forClass();
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSON.parseObject("vg", (Type) class1, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Feature feature0 = Feature.InternFieldNames;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("N_-B>Y7f;Qx%wM|EsG", (Type) null, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2N_-B>Y7f;Qx%wM|EsG
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSON.parseObject("toJSON error", (Type) null, (ParseProcess) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature feature0 = Feature.AutoCloseSource;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.deny.internal", (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<JSONPObject> class0 = JSONPObject.class;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("[\n\t\n]", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      // Undeclared exception!
      JSON.parseObject("@type", class0, featureArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) class0, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3089);
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[7];
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 989, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, (Type) class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 2, line 1, column 3\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte)29, (int) (byte)29, (CharsetDecoder) uTF8Decoder0, (int) (byte)15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeSupport", parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("1.2.68", (ParserConfig) null, (-3981));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("a^=(`@zR- ", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Type type0 = JSON.getMixInAnnotations((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Object object0 = JSON.toJSON((Object) "fastjson.parser.deny.internal", serializeConfig0);
      assertEquals("fastjson.parser.deny.internal", object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      Object object0 = JSON.toJSON((Object) feature0, serializeConfig0);
      assertEquals("AllowUnQuotedFieldNames", object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1);
      Object object0 = JSON.toJSON((Object) null, serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      LinkedHashMap<Object, JSONPath.Operator> linkedHashMap0 = new LinkedHashMap<Object, JSONPath.Operator>();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) linkedHashMap0, serializeConfig0, serializeFilterArray0, (String) null, 22, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "ne#}L", serializeConfig0, (SerializeFilter[]) null, "", 89, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      String string0 = JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter[]) null, "parser.features.ErrorOnEnumNotMatch", 1331, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) null, parserConfig0, (ParseProcess) null, 1, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Charset charset0 = Charset.defaultCharset();
      Class<JSONArray> class0 = JSONArray.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 1744, 52, charset0, (Type) class1, parserConfig0, (ParseProcess) null, (-3), featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1744
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 999999, 989, (Charset) null, (Type) null, parserConfig0, (ParseProcess) null, 213, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999999
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      Feature feature0 = Feature.AllowISO8601DateFormat;
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      LinkedList<ParameterizedTypeImpl> linkedList0 = JSON.parseObject("null", (Type) class0, parserConfig0, (ParseProcess) null, 2, featureArray0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.autoTypeSupport", (Type) class1, parserConfig0, (ParseProcess) null, 2, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.asmEnable", (Type) class1, parserConfig0, (ParseProcess) null, 65535, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[1];
      JSONPObject jSONPObject0 = JSON.parseObject("", (Type) null, parserConfig0, (ParseProcess) null, 0, featureArray0);
      assertNull(jSONPObject0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse("", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(":Wx", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2:Wx
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse("@type", parserConfig0, 165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.parse((String) null, parserConfig0, 3694);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) serializerFeature0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("=Z", 4784);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2=Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TreeMap<PipedInputStream, JSONObject> treeMap0 = new TreeMap<PipedInputStream, JSONObject>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) treeMap0, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializeConfig serializeConfig0 = new SerializeConfig(125, true);
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializerFeature0, serializeConfig0, 857, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONArray0, 989, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      Feature[] featureArray0 = new Feature[4];
      StringWriter stringWriter0 = JSON.parseObject("", class0, featureArray0);
      assertNull(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((Writer) serializeWriter0, (Object) serializeWriter0, 12, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[2];
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializeConfig0, serializeConfig0, serializeFilterArray0, 1690, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1602);
      String string0 = jSONObject0.toJSONString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[5];
      LinkedHashMap<JSONPath.Operator, JavaBeanSerializer> linkedHashMap0 = JSON.parseObject("", (Type) class0, parserConfig0, 2639, featureArray0);
      assertNull(linkedHashMap0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) parserConfig0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSON.removeMixInAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSON.removeMixInAnnotations((Type) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      JSON.addMixInAnnotations(genericArrayTypeImpl0, (Type) null);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class0);
      JSON.addMixInAnnotations(genericArrayTypeImpl0, genericArrayTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSON.addMixInAnnotations((Type) null, (Type) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("[-99]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("parser.features.NonStringKeyAsString");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("{Y+s)n8pq,X}|]6GU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("{\"\":true,\"yyyy/MM/dd\":[\"a string\",false],\"\":false}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("parser.features.NonStringKeyAsString");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = JSON.isValid("=Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = JSON.isValid("[!Ev>EM1 Bi ;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = JSON.isValid("{\"\":true,\"yyyy/MM/dd\":[\"a string\",false],\"\":false}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = JSON.isValid(")vKfB+O3w/G3^F@Crc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = JSON.isValid("([C)[I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = JSON.isValid("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = JSON.isValid("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = JSON.isValid("\"a string\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = JSON.isValid("1.2.68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = JSON.isValid("0ZX\"4S OP-q7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = JSON.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = JSON.isValid(" }[NorXvW3]aH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = JSON.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      parserConfig0.checkAutoType(class0);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "fastjson.parser.deny");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((TypeReference) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(17);
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.SimplePropertyPreFilter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(parameterizedTypeImpl0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) genericArrayTypeImpl0, serializeConfig0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Object object0 = JSON.toJSON((Object) propertyNamingStrategy0);
      assertEquals("KebabCase", object0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2L}\" m11SL n@d";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) simplePropertyPreFilter0, serializeConfig0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3600);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Charset) null, (Object) parserConfig0.propertyNamingStrategy, serializeConfig0, serializeFilterArray0, "fastjson.parser.safeMode", 4, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) pipedOutputStream0, 3, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      TreeMap<Integer, ParameterizedTypeImpl> treeMap0 = new TreeMap<Integer, ParameterizedTypeImpl>();
      SerializeConfig serializeConfig0 = new SerializeConfig(1);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) treeMap0, serializeConfig0, serializeFilterArray0, "", 3089, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", (SerializeConfig) null, (SerializeFilter[]) null, "4&K^zo[z@JQ#*@", 0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JSONSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      String string0 = JSON.toJSONStringWithDateFormat(pascalNameFilter0, "", serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat(class1, "fastjson.parser.deny.internal", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      List<Object> list0 = JSON.parseArray((String) null, (Type[]) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("false", (Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : false
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("false", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but false, pos 5, line 1, column 6false
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      List<PascalNameFilter> list0 = JSON.parseArray((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      List<GenericArrayTypeImpl> list0 = JSON.parseArray("", class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("null");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual false, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Feature[] featureArray0 = new Feature[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, (Charset) null, (Type) null, parserConfig0, (ParseProcess) null, 1, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      SimplePropertyPreFilter simplePropertyPreFilter0 = JSON.parseObject((InputStream) byteArrayInputStream0, (Charset) null, (Type) null, parserConfig0, (ParseProcess) null, 1711, featureArray0);
      assertNull(simplePropertyPreFilter0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Feature feature0 = Feature.InternFieldNames;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 16, (Type) null, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      char[] charArray0 = new char[0];
      JSON.parseObject(charArray0, 16, (Type) null, featureArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Feature[] featureArray0 = new Feature[12];
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 16, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject((char[]) null, (-830), (Type) class1, featureArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      Enum<JSONPath.Operator> enum0 = JSON.parseObject(byteArray0, (Type) null, featureArray0);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject(byteArray0, (int)  (-112), (int)  (-61), (Charset) null, (Type) null, featureArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("2L}\" m11SL n@d", (Type) parameterizedTypeImpl0, (-33), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("-H_IZ@zhM$JwG@'  L]", (Type) null, (-1), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      HashMap<StringWriter, JSONPObject> hashMap0 = JSON.parseObject((String) null, (Type) null, 327, featureArray0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{}");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 113, 113, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Feature[] featureArray0 = new Feature[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 3559, 3559, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Object object0 = JSON.parse(byteArray0, 3559, 3559, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[1];
      Object object0 = JSON.parse((byte[]) null, (-1901), (-1901), (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse(byteArray0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Object object0 = JSON.parse((String) null, parserConfig0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.safeMode", parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("lse", (TypeReference<LinkedHashMap<PropertyNamingStrategy, JSONObject>>) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yyyy-MM-dd HH:mm:ss");
      JSON.handleResovleTask(defaultJSONParser0, (Method) null);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(75);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = jSONObject0.toString(serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("false", "false", (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) pascalNameFilter0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1268, false);
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with float
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(11);
      // Undeclared exception!
      try { 
        jSONArray0.writeJSONString((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSON.clearMixInAnnotations();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSON.setDefaultTypeKey("k");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) pascalNameFilter0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Feature[] featureArray0 = new Feature[6];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, 1031, 394, (CharsetDecoder) uTF8Decoder0, (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      JSON.parseObject("", (Type) null, (ParseProcess) null, featureArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, 1, 1614, (CharsetDecoder) uTF8Decoder0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) "", (-1981), serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)10, (byte)9, (byte)10, (byte)93}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) serializeConfig0.propertyNamingStrategy, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.deny.internal", (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      TreeMap<Integer, SimplePropertyPreFilter> treeMap0 = new TreeMap<Integer, SimplePropertyPreFilter>();
      String string0 = JSON.toJSONString((Object) treeMap0, false);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(stringWriter0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Feature[] featureArray0 = new Feature[4];
      AbstractMap.SimpleEntry<PropertyNamingStrategy, JSONArray> abstractMap_SimpleEntry0 = JSON.parseObject((String) null, (Type) null, featureArray0);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("");
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("=Z", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2=Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(26);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      // Undeclared exception!
      try { 
        JSON.writeJSONStringTo(serializerFeature0, stringWriter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) "true", serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      assertEquals("\"true\"", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) filterOutputStream0, charset0, (Object) charset0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) null, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 16, line 1, column 17\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
