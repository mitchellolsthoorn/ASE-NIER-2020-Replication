/*
 * This file was automatically generated by EvoSuite
 * Thu May 21 21:38:04 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Authenticator;
import java.security.CryptoPrimitive;
import java.sql.JDBCType;
import java.sql.RowIdLifetime;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.DropMode;
import javax.swing.JTable;
import javax.tools.DocumentationTool;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("].");
      JSONObject.indent(mockFileWriter0, (-2659));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("&=:;MI2}?q");
      assertEquals("&=:;MI2}?q", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("6K_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6K_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~a&+dRXNczr{s!@sF");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject.indent((Writer) null, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<CryptoPrimitive, Float> hashMap0 = new HashMap<CryptoPrimitive, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9HgC7xf6~x9M}G*k:");
      assertEquals("9HgC7xf6~x9M}G*k:", object0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("~8mD9@?(MRl:PNtO]");
      try { 
        jSONObject1.getBigInteger("~8mD9@?(MRl:PNtO]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintStream mockPrintStream0 = new MockPrintStream("toBigIntegserExact");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      jSONObject0.putOnce("99", mockPrintWriter0);
      Object object0 = jSONObject0.remove("99");
      assertSame(object0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(30);
      Object object0 = jSONObject0.query("");
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.optQuery("#/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("null", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<BigDecimal, LineNumberReader> hashMap0 = new HashMap<BigDecimal, LineNumberReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Number number0 = jSONObject0.optNumber((String) null, (Number) bigDecimal0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-3078L));
      Number number0 = jSONObject0.optNumber((String) null, (Number) bigDecimal0);
      assertEquals((short) (-3078), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("t5[{`'.T>#", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("&=:;MI2}?q", (-592));
      assertEquals((-592), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3245);
      JSONObject jSONObject1 = jSONObject0.increment("Vj,GevqQLMcv");
      int int0 = jSONObject1.optInt("Vj,GevqQLMcv");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("99", (float) (-2441L));
      assertEquals((-2441.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      double double0 = jSONObject0.optDouble("gettoString", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      double double0 = jSONObject0.optDouble("99J", (-3387.651701));
      assertEquals((-3387.651701), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{", 0L);
      double double0 = jSONObject0.optDouble("{");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("{", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("qeV]g'-ZY3ed[P", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<PipedReader, Dialog.ModalityType> hashMap0 = new HashMap<PipedReader, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("7n:rY#N9h|In@GwE6<", (-27));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("7n:rY#N9h|In@GwE6<", bigInteger0);
      assertEquals((byte) (-27), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("getcheckError", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-1479L));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("0000", bigDecimal0);
      assertEquals((byte)57, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("int", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, MockFileInputStream> hashMap0 = new HashMap<Month, MockFileInputStream>();
      jSONObject0.put("x", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.opt("x");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<PipedReader, Dialog.ModalityType> hashMap0 = new HashMap<PipedReader, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("get", 34);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("AT$6Ya<~%DLkyooLP*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<PipedReader, Dialog.ModalityType> hashMap0 = new HashMap<PipedReader, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("7n:rY#N9h|In@GwE6<", (-27));
      float float0 = jSONObject0.getFloat("7n:rY#N9h|In@GwE6<");
      assertEquals((-27.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<PipedReader, Dialog.ModalityType> hashMap0 = new HashMap<PipedReader, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 32);
      double double0 = jSONObject1.getDouble("");
      assertEquals(32.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Misplaced array.", (Object) "Misplaced array.");
      Object object0 = jSONObject0.get("Misplaced array.");
      assertEquals("Misplaced array.", object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, jSONObject0, 2285, 2285);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, "0000", 44, 44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, (-2057), (-2057));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (int) (byte)105, 1914);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("gk", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gettoString");
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(24);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<BigDecimal, LineNumberReader> hashMap0 = new HashMap<BigDecimal, LineNumberReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-6));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<CardTerminals.State, JTable.PrintMode> hashMap0 = new HashMap<CardTerminals.State, JTable.PrintMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-2096.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation(stringArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      try { 
        jSONObject0.getInt("available");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("{]h`ojd+z6MCQ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Unable to write JSONArray value at index: ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("z1$", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name z1$, locale ko
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~0", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(boolean0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-99));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -99
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("true");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write((Writer) stringWriter0, (-1037), (-676));
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, (-2284), (-576));
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("true");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, 935, 9);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "7t@^");
      MockFileWriter mockFileWriter0 = new MockFileWriter("7t@^", false);
      jSONObject0.write((Writer) mockFileWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gettoString");
      Object object0 = JSONObject.wrap(stringReader0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = new Byte((byte)115);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)115, object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = JSONObject.wrap("&=:;MI2}?q");
      assertEquals("&=:;MI2}?q", object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_VALID_OTHER;
      linkedList0.add(rowIdLifetime0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double((-1513.114394));
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("c;r|$/G0}{ge*77A4+A");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Writer writer0 = JSONObject.quote("c;r|$/G0}{ge*77A4+A", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter((byte)10);
      JSONObject.quote("", (Writer) stringWriter0);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/ytiN3xlb**{7j/@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = JSONObject.quote((String) null, (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<StandardLocation, BigDecimal> hashMap0 = new HashMap<StandardLocation, BigDecimal>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, charArrayReader0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("CiBJaLm<Z5 ;:", true);
      String string0 = jSONObject1.optString("CiBJaLm<Z5 ;:", "h@0BQ\"%^$gs6O<");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("h@0BQ\"%^$gs6O<", "h@0BQ\"%^$gs6O<");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-1438L));
      jSONObject0.put("99J", (-1772));
      Number number0 = jSONObject0.optNumber("99J", (Number) bigDecimal0);
      assertEquals((-1772), number0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Authenticator.RequestorType, JDBCType> hashMap0 = new HashMap<Authenticator.RequestorType, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 44);
      Number number0 = jSONObject0.optNumber((String) null, (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<BufferedWriter, ObjectOutputStream> hashMap0 = new HashMap<BufferedWriter, ObjectOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("~8mD9@?(MRl:PNtO]");
      long long0 = jSONObject1.optLong("~8mD9@?(MRl:PNtO]", 99L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("NhHbXc{5c:z:=", (-2441L));
      assertEquals((-2441L), long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      JSONObject jSONObject1 = jSONObject0.put("99J", (Object) "99J");
      int int0 = jSONObject1.optInt("99J", 11);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      int int0 = jSONObject0.optInt("y.,hBxzyZ/:", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Authenticator.RequestorType, JDBCType> hashMap0 = new HashMap<Authenticator.RequestorType, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("0.00", (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<PipedReader, Dialog.ModalityType> hashMap0 = new HashMap<PipedReader, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("] is not an int.", (double) 1787L);
      assertEquals(1787.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      JSONObject jSONObject1 = jSONObject0.put("99J", (Object) "99J");
      boolean boolean0 = jSONObject1.optBoolean("99J", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{]h`ojd+z6MCQ ", (Object) "{]h`ojd+z6MCQ ");
      Class<Thread.State> class0 = Thread.State.class;
      Thread.State thread_State0 = Thread.State.BLOCKED;
      Thread.State thread_State1 = jSONObject0.optEnum(class0, "{]h`ojd+z6MCQ ", thread_State0);
      assertEquals(Thread.State.BLOCKED, thread_State1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "t5[{`'.T>#");
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      jSONObject0.optEnum(class0, "t5[{`'.T>#", resource_AuthenticationType0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("x");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float(2311.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-104));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.put("{", 2031);
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0, stringArray0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject0.optEnum(class0, "mx:rS}r");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3245);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("99");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "~8mD9@?(MRl:PNtO]");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(192);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      jSONObject0.accumulate("Expected a ':' after a key", locale_FilteringMode0);
      jSONObject0.toString(192);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Stepping back two steps is not supported");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, linkedList0, (-1239), (-1239));
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<MockFileReader, Desktop.Action> hashMap0 = new HashMap<MockFileReader, Desktop.Action>();
      jSONObject0.accumulate("?58[q{", hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, MockFileInputStream> hashMap0 = new HashMap<Month, MockFileInputStream>();
      jSONObject0.put("x", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Stepping back two steps is not supported");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, (Object) null, 'c', 'c');
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(object0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<CryptoPrimitive, Float> hashMap0 = new HashMap<CryptoPrimitive, Float>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.PUBLIC_KEY_ENCRYPTION;
      Float float0 = new Float(1.0F);
      hashMap0.put(cryptoPrimitive0, float0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Long long0 = new Long(1L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(1L, object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Character character0 = new Character('e');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('e', object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1301);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1301);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0000");
      assertEquals("0000", object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("6");
      assertEquals(6, object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("getDeclaringClass");
      assertEquals("getDeclaringClass", object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [!] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("7n:rY#N9h|In@GwE6<");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("islongValue");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar("{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("{");
      Writer writer0 = JSONObject.quote("|@4h>\u0001OA0zS\")wm", (Writer) mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("ha", "NhHbXc{5c:z:=");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("u='Q9}}::hp:yfra3B", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Authenticator.RequestorType, JDBCType> hashMap0 = new HashMap<Authenticator.RequestorType, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, ">*0$p;/:OiI&5mW-8&");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("~8mD9@?(MRl:PNtO]");
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject1.putOnce("~8mD9@?(MRl:PNtO]", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"~8mD9@?(MRl:PNtO]\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("Kw @_*", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("Kw @_*", stringArray0[0]);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#<");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      jSONObject0.toString(31);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{", 2031);
      String string0 = jSONObject0.optString("{");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      MockFileWriter mockFileWriter0 = new MockFileWriter("&=:;MI2}?q");
      jSONObject0.accumulate("&=:;MI2}?q", mockFileWriter0);
      Short short0 = new Short((short)37);
      jSONObject0.optNumber("&=:;MI2}?q", (Number) short0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      JSONObject jSONObject1 = jSONObject0.put("99J", (Object) "99J");
      BigDecimal bigDecimal0 = new BigDecimal((long) 31);
      Number number0 = jSONObject1.optNumber("99J", (Number) bigDecimal0);
      assertEquals((short)31, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", 13);
      Number number0 = jSONObject1.optNumber("{");
      assertNotNull(number0);
      assertEquals(13, number0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      JSONObject jSONObject1 = jSONObject0.put("99J", (Object) "99J");
      long long0 = jSONObject1.optLong("99J", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", 107);
      long long0 = jSONObject1.optLong("{");
      assertEquals(107L, long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("JSONObject[");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<PipedReader, Dialog.ModalityType> hashMap0 = new HashMap<PipedReader, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("get", hashMap0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("get");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<BufferedWriter, ObjectOutputStream> hashMap0 = new HashMap<BufferedWriter, ObjectOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("~8mD9@?(MRl:PNtO]");
      int int0 = jSONObject0.optInt("~8mD9@?(MRl:PNtO]", 1030);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      jSONObject0.put("99J", (Object) "99J");
      int int0 = jSONObject0.optInt("99J");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      jSONObject0.putOnce("] is not a JSONObject.", "] is not a JSONObject.");
      float float0 = jSONObject0.optFloat("] is not a JSONObject.", (float) 1L);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintStream mockPrintStream0 = new MockPrintStream("toBigIntegerExact");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      jSONObject0.putOnce("A", mockPrintWriter0);
      float float0 = jSONObject0.optFloat("A", (float) '!');
      assertFalse(jSONObject0.isEmpty());
      assertEquals(33.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.putOnce("int", float0);
      float float1 = jSONObject1.optFloat("int", 777.0F);
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFile mockFile0 = new MockFile("{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      JSONObject jSONObject1 = jSONObject0.accumulate("{", mockPrintWriter0);
      double double0 = jSONObject1.optDouble("{");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<BufferedWriter, ObjectOutputStream> hashMap0 = new HashMap<BufferedWriter, ObjectOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("~8mD9@?(MRl:PNtO]");
      double double0 = jSONObject0.optDouble("~8mD9@?(MRl:PNtO]", (double) 99L);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      JSONObject jSONObject1 = jSONObject0.put("99J", (Object) "99J");
      double double0 = jSONObject1.optDouble("99J", (double) 11);
      assertEquals(11.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)92);
      JSONObject jSONObject1 = jSONObject0.put("get", (Object) short0);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject1.optBigInteger("get", bigInteger0);
      assertEquals((byte)92, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) "");
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<FilterInputStream, Component.BaselineResizeBehavior> hashMap0 = new HashMap<FilterInputStream, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isisEmpty", 0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("isisEmpty", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      BigDecimal bigDecimal0 = new BigDecimal((double) 31);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", 2031);
      BigDecimal bigDecimal0 = new BigDecimal((double) 2031);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("{", bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte) (-17), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("tG(C;4LP7o9a/<h", false);
      boolean boolean0 = jSONObject0.optBoolean("tG(C;4LP7o9a/<h", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Long long0 = new Long(2405L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (double) (byte)105);
      JSONObject jSONObject2 = jSONObject0.increment("");
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", 2031);
      JSONObject jSONObject2 = jSONObject0.increment("{");
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("in", true);
      try { 
        jSONObject1.increment("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("hashCode", true);
      boolean boolean0 = jSONObject1.has("hashCode");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("gk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(24);
      jSONObject0.put("getspliterator", 24);
      try { 
        jSONObject0.getString("getspliterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("getSuperclass");
      String[] stringArray0 = JSONObject.getNames((Object) mockFileWriter0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.increment("~8mD9@?(MRl:PNtO]");
      JSONObject.getNames(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{", 107);
      long long0 = jSONObject0.getLong("{");
      assertEquals(107L, long0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      JSONObject jSONObject1 = jSONObject0.put("99J", (Object) "99J");
      try { 
        jSONObject1.getLong("99J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("tG(C;4LP7o9a/<h", true);
      try { 
        jSONObject0.getJSONObject("tG(C;4LP7o9a/<h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      Float float0 = new Float(0.0);
      jSONObject0.accumulate("", float0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("");
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", 2031);
      int int0 = jSONObject1.getInt("{");
      assertEquals(2031, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", 19);
      Number number0 = jSONObject1.getNumber("{");
      assertEquals(19, number0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      jSONObject0.put("99J", (Object) "99J");
      try { 
        jSONObject0.getNumber("99J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("~8mD9@?(MRl:PNtO]");
      float float0 = jSONObject0.getFloat("~8mD9@?(MRl:PNtO]");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{\"x\":\"unable to write jsonarray value at index: \",\"y\":7,\"Duplicate key \"\":\"a string\",\"a\":[[]],\"b\":99}", (-889));
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("{\"x\":\"unable to write jsonarray value at index: \",\"y\":7,\"Duplicate key \"\":\"a string\",\"a\":[[]],\"b\":99}");
      assertEquals((-889.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      jSONObject0.put("{\"x\":\"unable to write jsonarray value at index: \",\"y\":7,\"Duplicate key \"\":\"a string\",\"a\":[[]],\"b\":99}", (Object) locale_FilteringMode0);
      try { 
        jSONObject0.getDouble("{\"x\":\"unable to write jsonarray value at index: \",\"y\":7,\"Duplicate key \"\":\"a string\",\"a\":[[]],\"b\":99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("#/", 70);
      try { 
        jSONObject1.getBigDecimal("#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<PipedReader, Dialog.ModalityType> hashMap0 = new HashMap<PipedReader, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("7n:rY#N9h|In@GwE6<", (-27));
      boolean boolean0 = jSONObject1.optBoolean("7n:rY#N9h|In@GwE6<");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("x*/(^W", "x*/(^W");
      try { 
        jSONObject1.getBoolean("x*/(^W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = JSONObject.doubleToString(12.019710058607838);
      assertEquals("12.019710058607838", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(30);
      Class<WebParam.Mode> class0 = WebParam.Mode.class;
      LinkedList<BufferedReader> linkedList0 = new LinkedList<BufferedReader>();
      jSONObject0.put("", (Collection<?>) linkedList0);
      jSONObject0.append("", class0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(11);
      jSONObject0.put("99J", (float) 11);
      try { 
        jSONObject0.append("99J", "99J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[99J] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":[],\"size\":null,\"toC\":\"Red\",\" line \":true,\"number\":\"1\"}");
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"fruit\":\"toS\",\"size\":{},\"Duplicate key \"\":\"Red\",\"value\":true,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 42 [character 43 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HashMap<Authenticator.RequestorType, JDBCType> hashMap0 = new HashMap<Authenticator.RequestorType, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("7t@^", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      Object[] objectArray0 = new Object[8];
      Object object0 = JSONObject.wrap((Object) null);
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("{\"fruit\":\"toS\",\"size\":null,\"toC\":\"value [%s] is not an array or object therefore its key %s cannot be resolved\",\"value\":true,\"number\":null}", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Kw @_*", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      HashMap<CryptoPrimitive, Double> hashMap0 = new HashMap<CryptoPrimitive, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("1)");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, MockFileInputStream> hashMap0 = new HashMap<Month, MockFileInputStream>();
      jSONObject0.put("x", (Map<?, ?>) hashMap0);
      jSONObject0.optJSONObject("x");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("#/");
      Object object0 = jSONObject0.query(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HashMap<PipedReader, Dialog.ModalityType> hashMap0 = new HashMap<PipedReader, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query("get");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 9L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("XgwCDs#", (-1713.772F));
      boolean boolean0 = jSONObject1.isNull("XgwCDs#");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("NhHbXc{5c:z:=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat((String) null);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HashMap<BufferedWriter, ObjectOutputStream> hashMap0 = new HashMap<BufferedWriter, ObjectOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.optNumber("] is not an enum of type ");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      HashMap<Integer, DropMode> hashMap0 = new HashMap<Integer, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("' and instead saw '");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0", 69);
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
