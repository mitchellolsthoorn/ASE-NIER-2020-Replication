/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 01:13:13 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.TrayIcon;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Authenticator;
import java.nio.charset.Charset;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.RowIdLifetime;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.swing.DropMode;
import javax.swing.JTable;
import javax.swing.SortOrder;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.stringToValue("\"");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.stringToNumber("99");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("0.7597656020365382.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"]}not found.\":true,\"] ks not an int.\":\"a string\",\"ha\":true,\",:]}/\"[{;=#\":false,\"gettoList\":\"1\",\"get\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 69 [character 70 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ftG?DW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.indent(stringWriter0, 123);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      jSONObject0.entrySet();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getBigInteger("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "\"");
      JSONObject jSONObject0 = new JSONObject("\"", stringArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(27);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      JSONObject.writeValue(mockPrintWriter0, byteArrayOutputStream0, (-2028178998), 27);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3509L);
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4{[Ho6?q@+rp}[k");
      jSONObject0.write((Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject.stringToNumber("-470.135709216730730");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject.stringToNumber("2065.691515195529");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject.stringToNumber("3814.503561838666");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<Thread.State, Double> hashMap0 = new HashMap<Thread.State, Double>();
      jSONObject0.put("VlHrc", (Map<?, ?>) hashMap0);
      jSONObject0.remove("VlHrc");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "false");
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("false");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      jSONObject0.query(jSONPointer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("]boL{Y[Ivpc2b\"D", (String) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Double> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optString("] could not be converted to BigInteger.", "");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"a string\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", (Map<?, ?>) null);
      jSONObject0.optString("{\"fruit\":\"Apple\",\"size\":\"a string\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 125);
      JSONObject jSONObject0 = new JSONObject(bufferedOutputStream0);
      jSONObject0.optNumber("x:Z t}cLQPKAcrw5Aa+", (Number) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Float, ClientInfoStatus> hashMap0 = new HashMap<Float, ClientInfoStatus>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((-470));
      jSONObject0.optNumber("", (Number) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optNumber("0000", (Number) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":true}");
      jSONObject0.optLong("java.", (long) 0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(100);
      JSONObject jSONObject1 = jSONObject0.increment("rWQ@_I?$m$fuJ2Y");
      jSONObject1.optLong("rWQ@_I?$m$fuJ2Y");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(100);
      jSONObject0.put("true", (-1.0F));
      jSONObject0.optLong("true");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(47);
      jSONObject0.optInt((String) null, (-345));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      JSONObject jSONObject1 = jSONObject0.put("javax.org.evosuite.runtime.mock.java.io", 44);
      jSONObject1.optInt("javax.org.evosuite.runtime.mock.java.io");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (-1739));
      jSONObject1.optInt("A JSONArray text must start with '['");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optFloat("false", 0.0F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optFloat("Unable to increment [", (-2336.0F));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("rea", 0.0);
      jSONObject0.optFloat("rea");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("\"1+-XX?_65/Mi9qcq1P^");
      jSONObject1.optFloat("\"1+-XX?_65/Mi9qcq1P^");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\t", (-2000.3541));
      jSONObject1.optFloat("\t");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, 0.0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"color\":\"Red\",\"%s is not an array index\":99,\"value2\":false,\"number\":\"1\"}");
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-70);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBigDecimal("4{[Ho6?q@+rp}[k", (BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":true}");
      jSONObject0.length();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject.isDecimalNotation("4{[Ho6?q@+rp}[k");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "\"");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"", bigDecimal0);
      jSONObject1.getInt("\"");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      JSONObject jSONObject1 = jSONObject0.put("{\"] is not a JSONObject.\":null,\"color\":\"Red\",\"value2\":false,\"number\":\"a string\",\"Unable to write JSONArray value at index: \":-99}", 0.0F);
      jSONObject1.getDouble("{\"] is not a JSONObject.\":null,\"color\":\"Red\",\"value2\":false,\"number\":\"a string\",\"Unable to write JSONArray value at index: \":-99}");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (-4505));
      jSONObject1.getDouble("A JSONArray text must start with '['");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      JSONObject jSONObject2 = jSONObject1.append("-1", jSONObject0);
      // Undeclared exception!
      jSONObject2.write((Writer) bufferedWriter0, 8192, 47);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (-1566), (-4018));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Double> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Double>();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      Double double0 = new Double(Double.NaN);
      hashMap0.put(component_BaselineResizeBehavior0, double0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.toString(48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: CONSTANT_DESCENT
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 82.51);
      JSONArray jSONArray0 = jSONObject0.names();
      jSONArray0.put(1133L);
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote(":)l&C", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      // Undeclared exception!
      try { 
        jSONObject0.query("+fJ}}uC v]g|Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<RowIdLifetime, ClientInfoStatus> hashMap0 = new HashMap<RowIdLifetime, ClientInfoStatus>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JSONObject jSONObject0 = new JSONObject(pushbackInputStream0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1796L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"-470.135709216730730\":{\"-470.135709216730730\":true}}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 2449);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("[3'o=v7lU0Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-1486L));
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("isshortValue");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("99", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name 99, locale zh_TW
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("/]%&Y<", true);
      jSONObject0.write((Writer) mockFileWriter0, (-390), (-1249));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      HashMap<Thread.State, ByteArrayInputStream> hashMap0 = new HashMap<Thread.State, ByteArrayInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      jSONObject0.append("!EHFx0", bufferedWriter0);
      jSONObject0.write((Writer) mockFileWriter0, (int) (byte)9, (int) (byte)11);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("is", true);
      HashMap<Thread.State, ByteArrayInputStream> hashMap0 = new HashMap<Thread.State, ByteArrayInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      JSONObject jSONObject1 = jSONObject0.append("Unable to write JSONObject value for key: ", bufferedWriter0);
      jSONObject1.write((Writer) mockFileWriter0, (-2082600909), 47);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject.wrap(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.wrap(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<SortOrder> linkedList0 = new LinkedList<SortOrder>();
      JSONObject.wrap(linkedList0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject.wrap(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject.wrap(double0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer((-1357));
      JSONObject.wrap(integer0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Byte byte0 = new Byte((byte)64);
      JSONObject.wrap(byte0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject.wrap("-1082.899786933014");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      JSONObject.wrap(locale_Category0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject.stringToValue("-1");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject.stringToValue("null");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject.stringToValue("false");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject.stringToValue("true");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("2Ag=tF/wV/%GE(|C~$", (Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("|LY#;/[fr74D+mvp", false);
      JSONObject.quote("", (Writer) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.putOnce("{\"fruit\":\"Apple\",\"size\":\"a string\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}", (Object) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      jSONObject0.putOnce(stringArray0[3], "");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("QGoWuiq[Dkz?md*9", (Object) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "Duplicate key \"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("intern", "getreadShort");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(30);
      JSONObject jSONObject1 = jSONObject0.put("'w^Gbk_>R-$(?Z~$N", (Map<?, ?>) null);
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      jSONObject1.optNumber("'w^Gbk_>R-$(?Z~$N", (Number) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      JSONObject jSONObject1 = jSONObject0.put("{\"] is not a JSONObject.\":null,\"getreadBoolean\":\"Red\",\"value2\":-99,\"number\":\"1\",\"x\":false}", 2449);
      Byte byte0 = new Byte((byte)46);
      jSONObject1.optNumber("{\"] is not a JSONObject.\":null,\"getreadBoolean\":\"Red\",\"value2\":-99,\"number\":\"1\",\"x\":false}", (Number) byte0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("-0", (-2778L));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.accumulate("\"", "\"");
      jSONObject0.optInt("\"", 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("VlHrc", 55);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optFloat("", 643.80115F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"Apple\",\"] is not an int.\":99,\"value\":true,\"value2\":false,\"gettoList\":\"1\",\"x\":99}");
      jSONObject0.optDouble("$:dn+Z'c>+D50X", (-614.0201385087802));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((long) (byte)9);
      jSONObject0.optBigDecimal("7s'mY_IBP544Dii", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"Apple\",\"color\":null,\"pos\":-99,\"value2\":false,\"number\":\"1\"}");
      Byte byte0 = new Byte((byte)9);
      JSONObject jSONObject1 = jSONObject0.accumulate("null", byte0);
      jSONObject1.optBoolean("null", false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"Apple\",\"color\":null,\"value\":null,\"value2\":false,\"number\":\"1\"}");
      jSONObject0.optBoolean("{\"] not found.\":\"Apple\",\"color\":null,\"value\":null,\"value2\":false,\"number\":\"1\"}", true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "false");
      JSONObject jSONObject1 = jSONObject0.put("false", 84.1933388136985);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      jSONObject1.optEnum(class0, "false", locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      jSONObject0.optEnum(class0, "4GFEXNm1gn]A-%F#V]", locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":true}");
      jSONObject0.opt("2ON9w1$0]?");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject0 = new JSONObject(pipedWriter0);
      jSONObject0.opt((String) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.numberToString(double0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      jSONObject0.put("] not a string.", 2449);
      try { 
        jSONObject0.getBoolean("] not a string.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", 94.97830217990494);
      jSONObject0.get("false");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Double> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Double>();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      hashMap0.put(component_BaselineResizeBehavior0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<BufferedWriter, Long> hashMap0 = new HashMap<BufferedWriter, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      jSONObject0.optEnum(class0, (String) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject.quote("poXJ");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":true}");
      StringWriter stringWriter0 = new StringWriter(0);
      jSONObject0.write((Writer) stringWriter0, 1640, (-1963));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("\"1+-XX_65/Mi9Ncq1P^");
      jSONObject1.toString(92);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("\"1+-XX?_65/Mi9qcq1P^");
      jSONObject1.toString();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"Apple\",\"] is not an int.\":99,\"value\":true,\"value2\":false,\"gettoList\":\"1\",\"x\":99}");
      StringWriter stringWriter0 = new StringWriter(1726);
      jSONObject0.write((Writer) stringWriter0, (-1), 128);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"Apple\",\"color\":null,\"JSONArray initial value should be a string or collection or array.\":-99,\"value2\":{},\"number\":\"1\",\"org.json.JSONObject\":99,\"xx\":true}");
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONObject.valueToString(map0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, locale_Category0, 61, 110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 0, (-942));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject.wrap(hashMap0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"Apple\",\"color\":null,\"JSONArray initial value should be a string or collection or array.\":\"a string\",\"value2\":false,\"getkeys\":\"1\",\"x\":99,\"xx\":true,\"xxx\":[]}");
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONObject.valueToString(map0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject.wrap(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject.wrap(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Double> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Double>();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      Double double0 = new Double(Double.NaN);
      hashMap0.put(component_BaselineResizeBehavior0, double0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject.wrap(float0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Long long0 = new Long(279L);
      JSONObject.wrap(long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer(78);
      Short short0 = Short.valueOf((short)18);
      hashMap0.put(integer0, short0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Character character0 = Character.valueOf('4');
      JSONObject.wrap(character0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.wrap(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.wrap(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      JSONObject.wrap(object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 82.51);
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject1.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("-470.13570921673073", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("\"1+-XX?_65/Mi9qcq1P^", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject.stringToValue("00");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject.stringToValue("");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject.stringToNumber("2066.061");
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject.stringToValue("-0");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("2Ag=tF/wV/%GE(|C~$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject.isDecimalNotation("[Zg?}P0{ep5]T@qt0D");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject0.similar(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject0.similar(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.similar(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.similar(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.similar((Object) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("{\"color\":null,\"pos\":-99,\"\f\":false,\"number\":\"-0\"}", (Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<InputStreamReader, DayOfWeek> hashMap0 = new HashMap<InputStreamReader, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("false", (Object) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      jSONObject0.putOpt("javax.org.evosuite.runtime.mock.java.io", "javax.org.evosuite.runtime.mock.java.io");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"Apple\",\"color\":null,\"value\":null,\"value2\":false,\"number\":\"1\"}");
      jSONObject0.putOpt((String) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Duplicate key \"", (Object) jSONArray0);
      try { 
        jSONObject0.putOnce("Duplicate key \"", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"Duplicate key \"\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<InputStreamReader, DayOfWeek> hashMap0 = new HashMap<InputStreamReader, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("-470.13570921673073", (Object) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("99");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      JSONObject jSONObject1 = jSONObject0.put("ZXi;P\"DeIj%,csM(", true);
      jSONObject1.optString("ZXi;P\"DeIj%,csM(", "C;v@u#+n,5D,45");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.accumulate("\"", "\"");
      BigDecimal bigDecimal0 = new BigDecimal(2980);
      jSONObject0.optNumber("\"", (Number) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      jSONObject0.put("2064.988084450666", (Collection<?>) linkedList0);
      jSONObject0.optNumber("2064.988084450666");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.accumulate("\"", "\"");
      jSONObject0.optLong("\"");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Double> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("0uolv", hashMap0);
      jSONObject1.optLong("0uolv");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("\"1+-XX_65/Mi9Ncq1P^");
      jSONObject1.optLong("\"1+-XX_65/Mi9Ncq1P^", (-1L));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, MockFileWriter> hashMap0 = new HashMap<Month, MockFileWriter>();
      JSONObject jSONObject1 = jSONObject0.put("\"1+-XX?_65/Mi9qcq1P^", (Map<?, ?>) hashMap0);
      jSONObject1.optJSONObject("\"1+-XX?_65/Mi9qcq1P^");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("P(0K)}taI{nPf");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-227), (byte) (-57));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(dataInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("-470.13570921673073", (Object) null);
      jSONObject1.optJSONArray("-470.13570921673073");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("L^^]%>/Q`ACyp");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Double> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Double>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("0uolv", hashMap0);
      jSONObject0.optInt("0uolv", 10);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"", "\"");
      jSONObject1.optInt("\"");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("\"1+-XX?_65/Mi9qcq1P^");
      jSONObject1.optInt("\"1+-XX?_65/Mi9qcq1P^", 561);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.accumulate("\"", "\"");
      jSONObject0.optFloat("\"");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, MockFileWriter> hashMap0 = new HashMap<Month, MockFileWriter>();
      jSONObject0.put("\"1+-XX?_65/Mi9qcq1P^", (Map<?, ?>) hashMap0);
      jSONObject0.optFloat("\"1+-XX?_65/Mi9qcq1P^");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("not", 1789);
      jSONObject0.optFloat("not", 1905.0795F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, MockFileWriter> hashMap0 = new HashMap<Month, MockFileWriter>();
      jSONObject0.put("0Uq<*", (Map<?, ?>) hashMap0);
      jSONObject0.optDouble("0Uq<*", Double.NaN);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("4{[Ho6?q@+rp}[k", 576.6707908941066);
      jSONObject0.optDouble("4{[Ho6?q@+rp}[k", 576.6707908941066);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("\"1+-XX_65/Mi9Ncq1P^", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Duplicate key \"", (Object) "1");
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject1.optBigInteger("Duplicate key \"", bigInteger0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      JSONObject jSONObject1 = jSONObject0.put("javax.org.evosuite.runtime.mock.java.io", 44);
      BigDecimal bigDecimal0 = new BigDecimal((long) 44);
      jSONObject1.optBigDecimal("javax.org.evosuite.runtime.mock.java.io", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", 82.51);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optBigDecimal("false", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Double> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.put("gettrim", 0.0F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("gettrim", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, MockFileWriter> hashMap0 = new HashMap<Month, MockFileWriter>();
      jSONObject0.put("4{[Ho6?q@+rs}[k", (Map<?, ?>) hashMap0);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject0.getEnum(class0, "4{[Ho6?q@+rs}[k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not an enum of type java.io.StringWriter@0000000009.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("A JSONArray text must start with '['", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.increment("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      jSONObject0.put("{\"] is not a JSONObject.\":null,\"getreadBoolean\":\"Red\",\"value2\":-99,\"number\":\"1\",\"x\":false}", 2025.0F);
      jSONObject0.increment("{\"] is not a JSONObject.\":null,\"getreadBoolean\":\"Red\",\"value2\":-99,\"number\":\"1\",\"x\":false}");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject value for key: ", (-1715));
      jSONObject1.increment("Unable to write JSONObject value for key: ");
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("4{[Ho6?q@+rs}[k", 576.6707908941066);
      jSONObject0.increment("4{[Ho6?q@+rs}[k");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("\"1+-XX_65/Mi9Ncq1P^");
      jSONObject0.has("\"1+-XX_65/Mi9Ncq1P^");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("[Zg?}P0{ep5]T@qt0D");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject.getNames((Object) null);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject.getNames(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment(" A@`)p7bO!A ");
      jSONObject0.getLong(" A@`)p7bO!A ");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      jSONObject0.append("javax.org.evosuite.runtime.mock.java.io", jSONObject0);
      try { 
        jSONObject0.getLong("javax.org.evosuite.runtime.mock.java.io");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000002993] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("\"1+-XX_65/Mi9Ncq1P^");
      try { 
        jSONObject1.getJSONObject("\"1+-XX_65/Mi9Ncq1P^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      HashMap<DropMode, ObjectOutputStream> hashMap0 = new HashMap<DropMode, ObjectOutputStream>();
      jSONObject0.put("mwie(H\"Gg:Is~6A7r$", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONArray("mwie(H\"Gg:Is~6A7r$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "false");
      jSONObject0.put("false", 82.51);
      int int0 = jSONObject0.getInt("false");
      assertEquals(3, jSONObject0.length());
      assertEquals(82, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("fase", 94.97830217990494);
      Number number0 = jSONObject1.getNumber("fase");
      assertEquals(94.97830217990494, number0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000005", (Map<?, ?>) null);
      try { 
        jSONObject1.getNumber("java.io.StringWriter@0000000005");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("-470.13570921673073");
      float float0 = jSONObject1.getFloat("-470.13570921673073");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject1 = jSONObject0.append("'2TC", linkedList0);
      try { 
        jSONObject1.getFloat("'2TC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] not a string.", 2449);
      assertFalse(jSONObject0.isEmpty());
      
      double double0 = jSONObject1.getDouble("] not a string.");
      assertEquals(2449.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4398);
      JSONObject jSONObject1 = jSONObject0.put("-470.135709216730730", (Object) "-470.135709216730730");
      try { 
        jSONObject1.getDouble("-470.135709216730730");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"");
      HashMap<Thread.State, ByteArrayInputStream> hashMap0 = new HashMap<Thread.State, ByteArrayInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      jSONObject0.append("!EHFx0", bufferedWriter0);
      boolean boolean0 = jSONObject0.optBoolean("!EHFx0");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-470.13570921673073));
      assertEquals("-470.13570921673073", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"", (Collection<?>) null);
      jSONObject1.append("\"", jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("\"1+-XX_65/Mi9Ncq1P^");
      try { 
        jSONObject1.append("\"1+-XX_65/Mi9Ncq1P^", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1+-XX_65/Mi9Ncq1P^] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 82.51);
      JSONObject jSONObject2 = jSONObject1.accumulate("false", jSONObject0);
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      jSONObject2.optBigDecimal("false", bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("getreadShort", jSONArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"", "\"");
      double double0 = jSONObject1.optDouble("\"", (double) (-1L));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("QA-v", jSONArray0);
      Byte byte0 = new Byte((byte) (-92));
      jSONObject1.accumulate("QA-v", byte0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      HashMap<InputStreamReader, DayOfWeek> hashMap0 = new HashMap<InputStreamReader, DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.THURSDAY;
      hashMap0.put((InputStreamReader) null, dayOfWeek0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"] not foun/.\":\"Apple\",\"color\":null,\"JSNArray initial value should be a string or collection or arraX.\":-99d\"value2\":false,numbeb\":\"1\",\"x\":99,\"xx\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 110 [character 111 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"] not foun/.\":\"Apple\",\"color\":null,\"JSNArray initial value should be a string or collection or arraX.\":-99,\"value2\":false,numbeb\":\"1\",\"x\":99,\"xx\":true}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 131 [character 132 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Character> hashMap0 = new HashMap<JavaFileObject.Kind, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.remove("M!RR,AB7Zz");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Double> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("d)f-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      String string0 = jSONObject0.optString("9value");
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Month, MockFileWriter> hashMap0 = new HashMap<Month, MockFileWriter>();
      JSONObject jSONObject1 = jSONObject0.put("\"1+-XX?_65/Mi9qcq1P^", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getInt("\"1+-XX?_65/Mi9qcq1P^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(fileSystemHandling0);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-160));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -160
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("L^^]%JCQ`ACyp");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = (String)JSONObject.stringToValue("poll");
      HashMap<SortOrder, Character> hashMap0 = new HashMap<SortOrder, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put(string0, (-1442L));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      boolean boolean0 = jSONObject0.isNull("getkeySet");
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", 84.48736507602102);
      jSONObject0.names();
      Long long0 = new Long(2500L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      HashMap<JTable.PrintMode, MockPrintWriter> hashMap0 = new HashMap<JTable.PrintMode, MockPrintWriter>(99);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] not found.\":\"Apple\",\"] is not an int.\":null,\"value\":true,\"is\":false,\"number\":\"1\",\"x\":false,\"xx\":99}");
      jSONObject0.toString((-2571));
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("\"1+-XX?_65/Mi9qcq1P^");
      try { 
        jSONObject0.getBigDecimal("\"1+-XX?_65/Mi9qcq1P^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
