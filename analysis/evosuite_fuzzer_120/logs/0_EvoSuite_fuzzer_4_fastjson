* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONObject
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONPath
* Starting Client-0
* Connecting to master process on port 2765
* Starting Client-0
* Connecting to master process on port 2766
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 00:17:37.386 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 00:17:37.386 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONObject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1211
* Using seed 4
* Starting evolution
* Initial Number of Goals in DynaMOSA = 496 / 1211
[MASTER] 00:17:38.324 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 00:17:38.325 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 00:17:38.325 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 00:17:38.325 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 00:17:41.751 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 00:17:41.752 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONPath
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7058
* Using seed 4
* Starting evolution
* Initial Number of Goals in DynaMOSA = 865 / 7058
[MASTER] 00:17:44.399 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 00:17:44.431 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 00:17:44.431 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 00:17:44.431 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 00:17:44.431 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 00:17:44.440 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 00:17:44.440 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 00:17:44.447 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 00:17:44.447 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 00:17:44.447 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 00:17:44.448 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 00:17:44.452 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 00:17:44.459 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 00:17:44.464 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 00:17:44.466 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 00:17:53.242 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 00:18:36.437 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 122s and 97 generations, 31889 statements, best individual has fitness: 532.0
* Minimizing test suite
* Search finished after 125s and 112 generations, 88423 statements, best individual has fitness: 3940.0
[MASTER] 00:19:52.463 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_3_String.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsListener.lambda$new$0(StatisticsListener.java:69) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_3_String.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	... 1 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_3_String.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor16.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_3_String.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 60%
* Total number of goals: 254
* Number of covered goals: 153
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 51%
* Total number of goals: 172
* Number of covered goals: 87
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 58%
* Total number of goals: 333
* Number of covered goals: 192
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 38%
* Total number of goals: 162
* Number of covered goals: 62
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 95%
* Total number of goals: 59
* Number of covered goals: 56
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 59
* Number of covered goals: 54
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 51%
* Total number of goals: 172
* Number of covered goals: 87
* Generated 84 tests with total length 209
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 00:19:56.424 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_3_String.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.executedAndThenSendIndividualToMaster(StatisticsSender.java:98) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTests(TestSuiteGenerator.java:687) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:245) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_3_String.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	... 3 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_3_String.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor16.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_3_String.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
[MASTER] 00:19:56.682 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 12 seconds more than allowed.
* Minimizing test suite
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 00:20:35.124 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 00:20:35.125 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONObject jSONObject0 = new JSONObject(2147483645, false);
jSONObject0.fluentPut("syntax error, expect {, actual ", "syntax error, expect {, actual ");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'JSONObject_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s4/fastjson/evosuite-tests
* Done!

* Computation finished
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 51%
* Total number of goals: 2079
* Number of covered goals: 1051
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 39%
* Total number of goals: 1850
* Number of covered goals: 716
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 96%
* Total number of goals: 93
* Number of covered goals: 89
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 56%
* Total number of goals: 913
* Number of covered goals: 508
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 65%
* Total number of goals: 114
* Number of covered goals: 74
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 126
* Number of covered goals: 125
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 126
* Number of covered goals: 115
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 36%
* Total number of goals: 1850
* Number of covered goals: 661
* Generated 285 tests with total length 959
* Resulting test suite's coverage: 48% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
[MASTER] 00:22:27.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: illeal jsonpath syntax. #?j~V7v
[MASTER] 00:22:27.290 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.set((Object) "9\"GbzsQZ{._d", "#?j~V7v", (Object) "#?j~V7v");

[MASTER] 00:22:28.701 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: not support jsonpath : fl-'L$, r9p'N}
[MASTER] 00:22:28.701 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.eval((Object) "29{Z;", "fl-'L$, r9p'N}");

[MASTER] 00:22:29.063 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: not support jsonpath : A@XZ9kMGC
[MASTER] 00:22:29.063 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.remove((Object) ";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;", "A@XZ9kMGC");

[MASTER] 00:22:29.602 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.alibaba.fastjson.parser.DefaultJSONParser but in com.alibaba.fastjson.JSONPath$JSONPathParser.readName(JSONPath.java:1683): org.evosuite.runtime.mock.java.lang.MockThrowable: illeal jsonpath syntax. $6!-2$RH4
[MASTER] 00:22:29.602 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.extract("com", "$6!-2$RH4");

[MASTER] 00:22:47.084 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: illeal jsonpath syntax. {"fruit":"Apple","size":"Large","color":"Red","value":true,"value2":false,"number":"1","x":99}
[MASTER] 00:22:47.085 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.contains((Object) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}", "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}");

[MASTER] 00:22:47.466 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<267> but was:<249>
[MASTER] 00:22:47.467 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", hashMap0, sQLClientInfoException0);
SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("parser", sQLClientInfoException1);
Map<String, Object> map0 = JSONPath.paths((Object) sQLSyntaxErrorException0);
assertEquals(267, map0.size());


[MASTER] 00:22:47.884 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<178> but was:<166>
[MASTER] 00:22:47.884 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath jSONPath0 = JSONPath.compile("java.time.ZonedDateTime");
SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.");
SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLNonTransientConnectionException0);
Map<String, Object> map0 = JSONPath.paths((Object) collection0);
assertEquals(178, map0.size());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'JSONPath_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s4/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONReaderScanner
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONWriter
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONArray
* Starting Client-0
* Connecting to master process on port 2765
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 2767
* Connecting to master process on port 2768
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 429
* Using seed 4
* Starting evolution
* Initial Number of Goals in DynaMOSA = 130 / 429
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONReaderScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1110
* Using seed 4
* Starting evolution
* Initial Number of Goals in DynaMOSA = 338 / 1110
[MASTER] 00:24:58.342 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 00:24:58.344 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 00:24:58.872 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 00:24:58.872 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONArray
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1055
* Using seed 4
* Starting evolution
* Initial Number of Goals in DynaMOSA = 674 / 1055
[MASTER] 00:24:59.976 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 00:24:59.976 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 00:24:59.982 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 00:25:01.889 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 00:25:10.962 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 121s and 1349 generations, 494818 statements, best individual has fitness: 29.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 97
* Number of covered goals: 97
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 148
* Number of covered goals: 146
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Generated 28 tests with total length 114
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
* Search finished after 122s and 40 generations, 24727 statements, best individual has fitness: 184.0
* Minimizing test suite
* Search finished after 122s and 61 generations, 21330 statements, best individual has fitness: 263.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 156
* Number of covered goals: 129
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 76%
* Total number of goals: 104
* Number of covered goals: 79
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 662
* Number of covered goals: 598
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 75%
* Total number of goals: 40
* Number of covered goals: 30
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 104
* Number of covered goals: 79
* Generated 79 tests with total length 226
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Minimizing test suite
* Writing tests to file
* Writing JUnit test case 'JSONWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s4/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 00:27:15.840 [main] ERROR RuntimeVariable - Obtained invalid goal count: covered 437 out of 429
[MASTER] 00:27:15.841 [main] ERROR SearchStatistics - Not going to write down statistics data, as some data is invalid
[MASTER] 00:27:15.942 [main] ERROR TestGeneration - failed to write statistics data
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 82%
* Total number of goals: 173
* Number of covered goals: 141
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 78%
* Total number of goals: 101
* Number of covered goals: 79
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 93%
* Total number of goals: 94
* Number of covered goals: 87
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 325
* Number of covered goals: 289
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 38%
* Total number of goals: 219
* Number of covered goals: 83
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 87%
* Total number of goals: 68
* Number of covered goals: 59
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 101
* Number of covered goals: 79
* Generated 157 tests with total length 421
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
* Resulting test suite's mutation score: 50%
* Compiling and checking tests
[MASTER] 00:27:57.969 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 00:27:57.970 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONArray jSONArray0 = new JSONArray();
jSONArray0.set(989, jSONArray0);
jSONArray0.fluentRetainAll(jSONArray0);
assertFalse(jSONArray0.isEmpty());


[MASTER] 00:28:19.744 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test50 -> class java.lang.NegativeArraySizeException: null
[MASTER] 00:28:19.744 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("99", 137);
jSONReaderScanner0.scanNumber();
jSONReaderScanner0.scanNumber();
jSONReaderScanner0.bytesValue();

* Writing tests to file
* Writing JUnit test case 'JSONReaderScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s4/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 00:28:25.527 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 00:28:25.527 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONArray jSONArray0 = new JSONArray(1443168256);

* Writing tests to file
* Writing JUnit test case 'JSONArray_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s4/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONScanner
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSON
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.DefaultJSONParser
* Starting Client-0
* Connecting to master process on port 2767
* Starting Client-0
* Connecting to master process on port 2769
* Starting Client-0
* Connecting to master process on port 2765
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 00:29:42.394 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 00:29:42.395 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSON
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2080
* Using seed 4
* Starting evolution
* Initial Number of Goals in DynaMOSA = 747 / 2080
[MASTER] 00:29:43.861 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 00:29:43.861 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 00:29:43.866 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 00:29:43.866 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 00:29:43.866 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 00:29:46.742 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 00:29:46.743 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Total number of test goals for DYNAMOSA: 5652
* Using seed 4
* Starting evolution
* Initial Number of Goals in DynaMOSA = 470 / 5652
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.DefaultJSONParser
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 00:29:47.378 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Total number of test goals for DYNAMOSA: 3512
* Using seed 4
* Starting evolution
[MASTER] 00:29:47.677 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 00:29:47.678 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Initial Number of Goals in DynaMOSA = 650 / 3512
[MASTER] 00:29:48.477 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 00:29:48.480 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 00:29:48.502 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 00:29:48.502 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 00:29:48.503 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumMap<K, V> : Type points to itself
[MASTER] 00:29:48.504 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 00:29:48.505 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 00:29:48.505 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Hashtable<K, V> : Type points to itself
[MASTER] 00:29:48.506 [logback-2] ERROR TestCluster - Failed to check cache for java.util.IdentityHashMap<K, V> : Type points to itself
[MASTER] 00:29:48.507 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashMap<K, V> : Type points to itself
[MASTER] 00:29:48.507 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 00:29:48.508 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 00:29:48.509 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeMap<K, V> : Type points to itself
[MASTER] 00:29:48.509 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 00:29:48.510 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 00:29:52.087 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 00:29:55.217 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 00:29:59.118 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: No generators of type java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>
[MASTER] 00:30:15.202 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: No generators of type java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>
[MASTER] 00:31:03.442 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 00:31:07.854 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: Have no generator for class java.lang.reflect.Method canUseFunctionalMocks=true, canBeMocked: false
[MASTER] 00:31:09.669 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 00:31:12.847 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.JavaBeanSerializer due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.SerializeBeanInfo due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: No generators of type java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>
[MASTER] 00:31:23.141 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.ParameterizedTypeImpl due to org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<java.text.BreakIterator> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 00:31:41.161 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<java.text.BreakIterator> canUseFunctionalMocks=false, canBeMocked: false
* Search finished after 124s and 313 generations, 179468 statements, best individual has fitness: 3075.0
[MASTER] 00:31:50.519 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.alibaba.fastjson.JSON.parse([BIILjava/nio/charset/CharsetDecoder;I)Ljava/lang/Object;
* Search finished after 124s and 103 generations, 62080 statements, best individual has fitness: 1281.0
* Search finished after 128s and 53 generations, 30028 statements, best individual has fitness: 726.0
* Minimizing test suite
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Minimizing test suite
* Coverage of criterion LINE: 65%
* Total number of goals: 973
* Number of covered goals: 633
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 62%
* Total number of goals: 707
* Number of covered goals: 441
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 98%
* Total number of goals: 57
* Number of covered goals: 56
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 74%
* Total number of goals: 897
* Number of covered goals: 664
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 102
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 63
* Number of covered goals: 63
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 86%
* Total number of goals: 63
* Number of covered goals: 54
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 53%
* Total number of goals: 707
* Number of covered goals: 376
* Generated 173 tests with total length 690
* Resulting test suite's coverage: 68% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 47%
* Total number of goals: 1857
* Number of covered goals: 878
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 41%
* Total number of goals: 1519
* Number of covered goals: 623
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 60
* Number of covered goals: 60
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 64%
* Total number of goals: 567
* Number of covered goals: 363
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 71%
* Total number of goals: 94
* Number of covered goals: 67
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 48
* Number of covered goals: 48
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 48
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 37%
* Total number of goals: 1519
* Number of covered goals: 569
* Generated 240 tests with total length 634
* Resulting test suite's coverage: 65% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
[MASTER] 00:32:58.372 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.alibaba.fastjson.JSONArray cannot be cast to java.util.LinkedHashMap
[MASTER] 00:32:58.372 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\", pos \":-99,\"$\":[],\"com.google.common.collct.TreeMultimap\":false,\"$ref\":99,\"$.not support type : \":99}");
DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
LinkedHashMap<DecimalFormatSymbols, Double> linkedHashMap0 = new LinkedHashMap<DecimalFormatSymbols, Double>();
defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) decimalFormatSymbols0);
LinkedHashMap linkedHashMap1 = (LinkedHashMap)defaultJSONParser0.getObject("$.$");
assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);


[MASTER] 00:33:02.832 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to com.alibaba.fastjson.JSONArray
[MASTER] 00:33:02.832 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig0 = new ParserConfig();
DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[true]", parserConfig0, (-31));
JSONArray jSONArray0 = (JSONArray)defaultJSONParser0.parse((Object) parserConfig0);
assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);


* Writing tests to file
* Writing JUnit test case 'DefaultJSONParser_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s4/fastjson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
[MASTER] 00:34:01.397 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: StringIndexOutOfBoundsException
[MASTER] 00:34:01.397 [logback-1] WARN  JUnitAnalyzer - Failing test:
 char[] charArray0 = new char[8];
JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
jSONScanner0.next();
DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);

[MASTER] 00:34:17.126 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 78%
* Total number of goals: 435
* Number of covered goals: 341
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 77%
* Total number of goals: 283
* Number of covered goals: 218
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 78
* Number of covered goals: 78
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 70%
* Total number of goals: 716
* Number of covered goals: 498
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 31%
* Total number of goals: 197
* Number of covered goals: 61
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 82%
* Total number of goals: 83
* Number of covered goals: 68
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 83
* Number of covered goals: 56
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 63%
* Total number of goals: 283
* Number of covered goals: 177
* Generated 265 tests with total length 3933
* Resulting test suite's coverage: 66% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'JSONScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s4/fastjson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 29%
* Compiling and checking tests
[MASTER] 00:34:56.248 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_151_1590100496197/com/alibaba/fastjson/JSON_151_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_151_1590100496197/com/alibaba/fastjson/JSON_151_tmp__ESTest_scaffolding.java]]
[MASTER] 00:34:56.248 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 00:34:56.248 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 00:34:56.253 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.TreeMap cannot be converted to com.alibaba.fastjson.JSONObject: 39
[MASTER] 00:34:56.253 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_151_1590100496197/com/alibaba/fastjson/JSON_151_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 00:34:56.254 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 00:34:56.255 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_151_1590100496197/com/alibaba/fastjson/JSON_151_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu May 21 22:34:56 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.JSON;
11: import com.alibaba.fastjson.JSONObject;
12: import com.alibaba.fastjson.PropertyNamingStrategy;
13: import com.alibaba.fastjson.parser.ParserConfig;
14: import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
15: import com.alibaba.fastjson.serializer.JavaBeanSerializer;
16: import java.io.StringWriter;
17: import java.util.TreeMap;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.testdata.EvoSuiteFile;
21: import org.evosuite.runtime.testdata.FileSystemHandling;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
25: public class JSON_151_tmp__ESTest extends JSON_151_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       byte[] byteArray0 = new byte[0];
30:       FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
31:       Class<JSONObject> class0 = JSONObject.class;
32:       JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
33:       ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
34:       TreeMap<String, StringWriter> treeMap0 = new TreeMap<String, StringWriter>();
35:       PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
36:       JSON.parseObject("");
37:       treeMap0.remove((Object) propertyNamingStrategy0, (Object) null);
38:       TreeMap treeMap1 = (TreeMap)JSON.toJSON((Object) treeMap0, parserConfig0);
39:       JSONObject jSONObject0 = ((JSONObject) treeMap1).fluentPutAll(treeMap0);
40:       assertTrue(jSONObject0.isEmpty());
41:   }
42: }
RegularFileObject[/tmp/EvoSuite_151_1590100496197/com/alibaba/fastjson/JSON_151_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu May 21 22:34:56 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSON_151_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSON"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
77:     java.lang.System.setProperty("user.home", "/home/apaniche"); 
78:   }
79: 
80:   private static void initializeClasses() {
81:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSON_151_tmp__ESTest_scaffolding.class.getClassLoader() ,
82:       "com.alibaba.fastjson.asm.ClassWriter",
83:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.JSONPath$FilterGroup",
100:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
101:       "com.alibaba.fastjson.serializer.AfterFilter",
102:       "com.alibaba.fastjson.TypeReference",
103:       "com.alibaba.fastjson.JSONValidator$Type",
104:       "com.alibaba.fastjson.serializer.ObjectSerializer",
105:       "com.alibaba.fastjson.serializer.MapSerializer",
106:       "com.alibaba.fastjson.asm.Item",
107:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
108:       "com.alibaba.fastjson.serializer.DateCodec",
109:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
110:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
111:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
112:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
113:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
114:       "com.alibaba.fastjson.JSONPath$Filter",
115:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
116:       "com.alibaba.fastjson.JSONValidator$UTF16Validator",
117:       "com.alibaba.fastjson.util.FieldInfo",
118:       "com.alibaba.fastjson.annotation.JSONField",
119:       "com.alibaba.fastjson.serializer.PropertyFilter",
120:       "com.alibaba.fastjson.parser.SymbolTable",
121:       "com.alibaba.fastjson.serializer.NameFilter",
122:       "com.alibaba.fastjson.serializer.ListSerializer",
123:       "com.alibaba.fastjson.JSONArray",
124:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
125:       "com.alibaba.fastjson.JSONAware",
126:       "com.alibaba.fastjson.serializer.LongCodec",
127:       "com.alibaba.fastjson.serializer.EnumSerializer",
128:       "com.alibaba.fastjson.util.ASMClassLoader",
129:       "com.alibaba.fastjson.PropertyNamingStrategy",
130:       "com.alibaba.fastjson.parser.JSONToken",
131:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
132:       "com.alibaba.fastjson.serializer.AppendableSerializer",
133:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
134:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
135:       "com.alibaba.fastjson.serializer.ContextValueFilter",
136:       "com.alibaba.fastjson.util.ServiceLoader",
137:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
138:       "com.alibaba.fastjson.JSONPath$FilterSegment",
139:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
140:       "com.alibaba.fastjson.parser.DefaultJSONParser",
141:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
142:       "com.alibaba.fastjson.JSONValidator$ReaderValidator",
143:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
144:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
145:       "com.alibaba.fastjson.serializer.BeanContext",
146:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
147:       "com.alibaba.fastjson.util.IdentityHashMap",
148:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
149:       "com.alibaba.fastjson.JSON",
150:       "com.alibaba.fastjson.serializer.StringCodec",
151:       "com.alibaba.fastjson.serializer.SerializeFilterable",
152:       "com.alibaba.fastjson.JSONWriter",
153:       "com.alibaba.fastjson.asm.Opcodes",
154:       "com.alibaba.fastjson.JSONReader",
155:       "com.alibaba.fastjson.JSONStreamAware",
156:       "com.alibaba.fastjson.asm.MethodWriter",
157:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
158:       "com.alibaba.fastjson.serializer.SerializerFeature",
159:       "com.alibaba.fastjson.JSONPath$Operator",
160:       "com.alibaba.fastjson.TypeReference$1",
161:       "com.alibaba.fastjson.serializer.CalendarCodec",
162:       "com.alibaba.fastjson.util.IOUtils",
163:       "com.alibaba.fastjson.util.TypeUtils",
164:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
165:       "com.alibaba.fastjson.asm.ClassReader",
166:       "com.alibaba.fastjson.JSONPath$Segment",
167:       "com.alibaba.fastjson.spi.Module",
168:       "com.alibaba.fastjson.JSONValidator",
169:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
170:       "com.alibaba.fastjson.serializer.MiscCodec",
171:       "com.alibaba.fastjson.util.IOUtils$1",
172:       "com.alibaba.fastjson.serializer.IntegerCodec",
173:       "com.alibaba.fastjson.serializer.SerializeFilter",
174:       "com.alibaba.fastjson.JSONPObject",
175:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
176:       "com.alibaba.fastjson.serializer.PascalNameFilter",
177:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
178:       "com.alibaba.fastjson.serializer.BeforeFilter",
179:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
180:       "com.alibaba.fastjson.serializer.ArraySerializer",
181:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
182:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
183:       "com.alibaba.fastjson.JSONObject",
184:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
185:       "com.alibaba.fastjson.serializer.CharacterCodec",
186:       "com.alibaba.fastjson.asm.TypeCollector",
187:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
188:       "com.alibaba.fastjson.asm.ByteVector",
189:       "com.alibaba.fastjson.parser.JSONLexer",
190:       "com.alibaba.fastjson.util.ASMClassLoader$1",
191:       "com.alibaba.fastjson.asm.Label",
192:       "com.alibaba.fastjson.JSONValidator$UTF8Validator",
193:       "com.alibaba.fastjson.asm.FieldWriter",
194:       "com.alibaba.fastjson.serializer.JSONSerializer",
195:       "com.alibaba.fastjson.util.JavaBeanInfo",
196:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
197:       "com.alibaba.fastjson.serializer.SerializeConfig",
198:       "com.alibaba.fastjson.serializer.AtomicCodec",
199:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
200:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
201:       "com.alibaba.fastjson.asm.Type",
202:       "com.alibaba.fastjson.serializer.FieldSerializer",
203:       "com.alibaba.fastjson.serializer.FloatCodec",
204:       "com.alibaba.fastjson.parser.JSONReaderScanner",
205:       "com.alibaba.fastjson.serializer.ValueFilter",
206:       "com.alibaba.fastjson.JSONPathException",
207:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
208:       "com.alibaba.fastjson.serializer.Labels",
209:       "com.alibaba.fastjson.serializer.CollectionCodec",
210:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
211:       "com.alibaba.fastjson.serializer.CharArrayCodec",
212:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
213:       "com.alibaba.fastjson.asm.MethodVisitor",
214:       "com.alibaba.fastjson.annotation.JSONCreator",
215:       "com.alibaba.fastjson.asm.MethodCollector",
216:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
217:       "com.alibaba.fastjson.annotation.JSONType",
218:       "com.alibaba.fastjson.serializer.LabelFilter",
219:       "com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator",
220:       "com.alibaba.fastjson.util.UTF8Decoder",
221:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
222:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
223:       "com.alibaba.fastjson.serializer.DoubleSerializer",
224:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
225:       "com.alibaba.fastjson.serializer.BooleanCodec",
226:       "com.alibaba.fastjson.parser.Feature",
227:       "com.alibaba.fastjson.parser.ParserConfig",
228:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
229:       "com.alibaba.fastjson.parser.ParseContext"
230:     );
231:   } 
232: 
233:   private static void resetClasses() {
234:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSON_151_tmp__ESTest_scaffolding.class.getClassLoader()); 
235: 
236:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
237:       "com.alibaba.fastjson.parser.Feature",
238:       "com.alibaba.fastjson.serializer.SerializerFeature",
239:       "com.alibaba.fastjson.util.IOUtils$1",
240:       "com.alibaba.fastjson.util.IOUtils",
241:       "com.alibaba.fastjson.JSON",
242:       "com.alibaba.fastjson.util.IdentityHashMap",
243:       "com.alibaba.fastjson.util.ASMUtils",
244:       "com.alibaba.fastjson.parser.SymbolTable",
245:       "com.alibaba.fastjson.util.TypeUtils",
246:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
247:       "com.alibaba.fastjson.util.ASMClassLoader$1",
248:       "com.alibaba.fastjson.util.ASMClassLoader",
249:       "com.alibaba.fastjson.serializer.MiscCodec",
250:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
251:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
252:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
253:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
254:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
255:       "com.alibaba.fastjson.serializer.DateCodec",
256:       "com.alibaba.fastjson.serializer.CalendarCodec",
257:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
258:       "com.alibaba.fastjson.serializer.CollectionCodec",
259:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
260:       "com.alibaba.fastjson.serializer.StringCodec",
261:       "com.alibaba.fastjson.serializer.CharacterCodec",
262:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
263:       "com.alibaba.fastjson.serializer.IntegerCodec",
264:       "com.alibaba.fastjson.serializer.LongCodec",
265:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
266:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
267:       "com.alibaba.fastjson.serializer.FloatCodec",
268:       "com.alibaba.fastjson.serializer.BooleanCodec",
269:       "com.alibaba.fastjson.serializer.CharArrayCodec",
270:       "com.alibaba.fastjson.serializer.ReferenceCodec",
271:       "com.alibaba.fastjson.serializer.AtomicCodec",
272:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
273:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
274:       "com.alibaba.fastjson.parser.ParserConfig",
275:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
276:       "com.alibaba.fastjson.serializer.DoubleSerializer",
277:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
278:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
279:       "com.alibaba.fastjson.serializer.AppendableSerializer",
280:       "com.alibaba.fastjson.serializer.ToStringSerializer",
281:       "com.alibaba.fastjson.serializer.SerializeConfig",
282:       "com.alibaba.fastjson.parser.DefaultJSONParser",
283:       "com.alibaba.fastjson.parser.JSONLexerBase",
284:       "com.alibaba.fastjson.parser.JSONScanner",
285:       "com.alibaba.fastjson.JSONObject",
286:       "com.alibaba.fastjson.parser.ParseContext",
287:       "com.alibaba.fastjson.serializer.SerializeWriter",
288:       "com.alibaba.fastjson.serializer.SerializeFilterable",
289:       "com.alibaba.fastjson.serializer.JSONSerializer",
290:       "com.alibaba.fastjson.util.ServiceLoader",
291:       "com.alibaba.fastjson.serializer.MapSerializer",
292:       "com.alibaba.fastjson.serializer.SerialContext",
293:       "com.alibaba.fastjson.util.FieldInfo",
294:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
295:       "com.alibaba.fastjson.asm.ClassWriter",
296:       "com.alibaba.fastjson.asm.ByteVector",
297:       "com.alibaba.fastjson.asm.Item",
298:       "com.alibaba.fastjson.asm.FieldWriter",
299:       "com.alibaba.fastjson.asm.MethodWriter",
300:       "com.alibaba.fastjson.asm.Type",
301:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
302:       "com.alibaba.fastjson.asm.Label",
303:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
304:       "com.alibaba.fastjson.serializer.FieldSerializer",
305:       "com.alibaba.fastjson.serializer.BeanContext",
306:       "com.alibaba.fastjson.JSONException",
307:       "com.alibaba.fastjson.JSONArray",
308:       "com.alibaba.fastjson.parser.JSONToken",
309:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
310:       "com.alibaba.fastjson.serializer.PascalNameFilter",
311:       "com.alibaba.fastjson.serializer.ListSerializer",
312:       "com.alibaba.fastjson.util.JavaBeanInfo",
313:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
314:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
315:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
316:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
317:       "com.alibaba.fastjson.JSONPObject",
318:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
319:       "com.alibaba.fastjson.PropertyNamingStrategy",
320:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
321:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
322:       "com.alibaba.fastjson.util.UTF8Decoder",
323:       "com.alibaba.fastjson.TypeReference$1",
324:       "com.alibaba.fastjson.TypeReference",
325:       "com.alibaba.fastjson.serializer.EnumSerializer",
326:       "com.alibaba.fastjson.parser.JSONReaderScanner",
327:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
328:       "com.alibaba.fastjson.asm.ClassReader",
329:       "com.alibaba.fastjson.asm.TypeCollector$1",
330:       "com.alibaba.fastjson.asm.TypeCollector",
331:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
332:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
333:       "com.alibaba.fastjson.asm.MethodCollector",
334:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
335:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
336:       "com.alibaba.fastjson.serializer.ArraySerializer",
337:       "com.alibaba.fastjson.JSONPath$Operator",
338:       "com.alibaba.fastjson.JSONValidator$Type"
339:     );
340:   }
341: }

[MASTER] 00:34:56.255 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
byte[] byteArray0 = new byte[0];
FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
Class<JSONObject> class0 = JSONObject.class;
JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
TreeMap<String, StringWriter> treeMap0 = new TreeMap<String, StringWriter>();
PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
JSON.parseObject("");
treeMap0.remove((Object) propertyNamingStrategy0, (Object) null);
TreeMap treeMap1 = (TreeMap)JSON.toJSON((Object) treeMap0, parserConfig0);
JSONObject jSONObject0 = ((JSONObject) treeMap1).fluentPutAll(treeMap0);
assertTrue(jSONObject0.isEmpty());


[MASTER] 00:35:37.266 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to java.util.TreeMap
[MASTER] 00:35:37.266 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
TreeMap<String, StringWriter> treeMap0 = new TreeMap<String, StringWriter>();
TreeMap treeMap1 = (TreeMap)JSON.toJSON((Object) treeMap0, parserConfig0);
assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);


[MASTER] 00:35:37.616 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to java.util.TreeMap
[MASTER] 00:35:37.616 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSON.isValidArray("{\"\":true}");
Class<JSONObject> class0 = JSONObject.class;
JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
TreeMap<String, StringWriter> treeMap0 = new TreeMap<String, StringWriter>();
TreeMap treeMap1 = (TreeMap)JSON.toJSON((Object) treeMap0, parserConfig0);
assertTrue(treeMap1.isEmpty());


[MASTER] 00:35:39.182 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to java.util.TreeMap
[MASTER] 00:35:39.182 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSON.isValidObject("{\"\":0}");
ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
TreeMap<String, StringWriter> treeMap0 = new TreeMap<String, StringWriter>();
TreeMap treeMap1 = (TreeMap)JSON.toJSON((Object) treeMap0, parserConfig0);
assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 12
* Writing tests to file
* Writing JUnit test case 'JSON_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s4/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONReader
* Starting Client-0
* Connecting to master process on port 2768
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 00:35:56.642 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 00:35:56.652 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 740
* Using seed 4
* Starting evolution
* Initial Number of Goals in DynaMOSA = 232 / 740
[MASTER] 00:35:58.486 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 00:36:04.420 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 00:36:53.124 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
[MASTER] 00:38:18.722 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.alibaba.fastjson.JSONReader.endObject()V
* Search finished after 141s and 20 generations, 7615 statements, best individual has fitness: 244.0
[MASTER] 00:38:19.038 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 21 seconds more than allowed.
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 76%
* Total number of goals: 157
* Number of covered goals: 119
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 115
* Number of covered goals: 84
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 37
* Number of covered goals: 37
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 69%
* Total number of goals: 266
* Number of covered goals: 183
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 37
* Number of covered goals: 17
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 96%
* Total number of goals: 25
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 25
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 115
* Number of covered goals: 84
* Generated 61 tests with total length 227
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 33%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s4/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONValidator
* Starting Client-0
* Connecting to master process on port 2767
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONValidator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1127
* Using seed 4
* Starting evolution
* Initial Number of Goals in DynaMOSA = 268 / 1127
* Search finished after 122s and 35 generations, 14212 statements, best individual has fitness: 183.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 266
* Number of covered goals: 222
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 212
* Number of covered goals: 171
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 375
* Number of covered goals: 361
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 96%
* Total number of goals: 24
* Number of covered goals: 23
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 88%
* Total number of goals: 24
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 212
* Number of covered goals: 171
* Generated 60 tests with total length 184
* Resulting test suite's coverage: 69% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 47%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONValidator_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s4/fastjson/evosuite-tests
* Done!

* Computation finished
