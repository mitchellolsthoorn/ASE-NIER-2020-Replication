* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONWriter
* Starting Client-0
* Connecting to master process on port 20336
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 429
* Using seed 9
* Starting evolution
* Initial Number of Goals in DynaMOSA = 130 / 429
* Search finished after 121s and 1466 generations, 530651 statements, best individual has fitness: 32.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 97
* Number of covered goals: 97
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 148
* Number of covered goals: 146
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Generated 31 tests with total length 134
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s9/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 02:16:24.135 [main] ERROR RuntimeVariable - Obtained invalid goal count: covered 437 out of 429
[MASTER] 02:16:24.136 [main] ERROR SearchStatistics - Not going to write down statistics data, as some data is invalid
[MASTER] 02:16:24.237 [main] ERROR TestGeneration - failed to write statistics data
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.DefaultJSONParser
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONScanner
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 20339
* Connecting to master process on port 20338
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 5652
* Using seed 9
* Starting evolution
[MASTER] 02:18:44.538 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 02:18:44.539 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Initial Number of Goals in DynaMOSA = 470 / 5652
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.DefaultJSONParser
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3512
* Using seed 9
* Starting evolution
* Initial Number of Goals in DynaMOSA = 650 / 3512
[MASTER] 02:18:45.988 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 02:18:45.991 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 02:18:46.002 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 02:18:46.002 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 02:18:46.003 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumMap<K, V> : Type points to itself
[MASTER] 02:18:46.003 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 02:18:46.004 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 02:18:46.004 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Hashtable<K, V> : Type points to itself
[MASTER] 02:18:46.004 [logback-2] ERROR TestCluster - Failed to check cache for java.util.IdentityHashMap<K, V> : Type points to itself
[MASTER] 02:18:46.005 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashMap<K, V> : Type points to itself
[MASTER] 02:18:46.005 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 02:18:46.007 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 02:18:46.009 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeMap<K, V> : Type points to itself
[MASTER] 02:18:46.009 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 02:18:46.010 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 02:18:51.811 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 02:18:51.812 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 02:20:34.026 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: No generators of type java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>
[MASTER] 02:20:38.750 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: No generators of type java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>
* Search finished after 125s and 53 generations, 37142 statements, best individual has fitness: 1634.0
* Search finished after 127s and 335 generations, 207331 statements, best individual has fitness: 2770.0
* Minimizing test suite
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 55%
* Total number of goals: 973
* Number of covered goals: 539
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 52%
* Total number of goals: 707
* Number of covered goals: 369
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 96%
* Total number of goals: 49
* Number of covered goals: 47
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 67%
* Total number of goals: 897
* Number of covered goals: 598
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 102
* Number of covered goals: 49
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 63
* Number of covered goals: 62
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 79%
* Total number of goals: 63
* Number of covered goals: 50
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 38%
* Total number of goals: 707
* Number of covered goals: 270
* Generated 145 tests with total length 626
* Resulting test suite's coverage: 61% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
* Coverage of criterion LINE: 49%
* Total number of goals: 1857
* Number of covered goals: 918
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 49%
* Total number of goals: 1519
* Number of covered goals: 744
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 63
* Number of covered goals: 63
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 65%
* Total number of goals: 567
* Number of covered goals: 367
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 69%
* Total number of goals: 94
* Number of covered goals: 65
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 48
* Number of covered goals: 48
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 94%
* Total number of goals: 48
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 46%
* Total number of goals: 1519
* Number of covered goals: 696
* Generated 248 tests with total length 684
* Resulting test suite's coverage: 66% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'DefaultJSONParser_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s9/fastjson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'JSONScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s9/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONValidator
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONArray
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONReader
* Starting Client-0
* Connecting to master process on port 20336
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 20339
* Connecting to master process on port 20338
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONValidator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1127
* Using seed 9
* Starting evolution
* Initial Number of Goals in DynaMOSA = 268 / 1127
[MASTER] 02:23:50.809 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 02:23:50.810 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 02:23:51.415 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 02:23:51.416 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Total number of test goals for DYNAMOSA: 740
* Using seed 9
* Starting evolution
* Initial Number of Goals in DynaMOSA = 232 / 740
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONArray
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1055
* Using seed 9
* Starting evolution
* Initial Number of Goals in DynaMOSA = 674 / 1055
[MASTER] 02:23:52.663 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 02:23:52.663 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 02:23:53.706 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 02:23:54.075 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 02:24:12.231 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 02:24:28.512 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 02:24:56.756 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 02:25:12.988 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
* Search finished after 124s and 45 generations, 16951 statements, best individual has fitness: 185.0
* Search finished after 122s and 66 generations, 22402 statements, best individual has fitness: 280.0
* Minimizing test suite
* Search finished after 130s and 22 generations, 8114 statements, best individual has fitness: 357.0
* Minimizing test suite
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 57%
* Total number of goals: 157
* Number of covered goals: 90
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 55%
* Total number of goals: 115
* Number of covered goals: 63
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 34
* Number of covered goals: 34
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 50%
* Total number of goals: 266
* Number of covered goals: 134
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 37
* Number of covered goals: 17
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 88%
* Total number of goals: 25
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 55%
* Total number of goals: 115
* Number of covered goals: 63
* Generated 58 tests with total length 197
* Resulting test suite's coverage: 64% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 266
* Number of covered goals: 222
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 212
* Number of covered goals: 174
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 15
* Number of covered goals: 15
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 375
* Number of covered goals: 354
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 88%
* Total number of goals: 24
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 212
* Number of covered goals: 174
* Generated 63 tests with total length 202
* Resulting test suite's coverage: 69% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'JSONReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s9/fastjson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 46%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONValidator_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s9/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 02:28:02.148 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 88%
* Total number of goals: 173
* Number of covered goals: 152
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 101
* Number of covered goals: 83
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 99
* Number of covered goals: 99
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 325
* Number of covered goals: 305
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 42%
* Total number of goals: 219
* Number of covered goals: 92
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 97%
* Total number of goals: 68
* Number of covered goals: 66
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 93%
* Total number of goals: 68
* Number of covered goals: 63
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 101
* Number of covered goals: 83
* Generated 263 tests with total length 2702
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 02:30:03.779 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 37%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing tests to file
* Writing JUnit test case 'JSONArray_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s9/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONPath
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONReaderScanner
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 20337
* Connecting to master process on port 20338
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONReaderScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1110
* Using seed 9
* Starting evolution
* Initial Number of Goals in DynaMOSA = 338 / 1110
[MASTER] 02:31:15.640 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 02:31:15.641 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 02:31:18.542 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 02:31:18.546 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONPath
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7058
* Using seed 9
* Starting evolution
* Initial Number of Goals in DynaMOSA = 865 / 7058
[MASTER] 02:31:19.819 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 02:31:19.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 02:31:19.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 02:31:19.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 02:31:19.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 02:31:19.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 02:31:19.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 02:31:19.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 02:31:19.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 02:31:19.824 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 02:31:19.825 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 02:31:19.825 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 02:31:19.829 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 02:31:19.830 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 02:31:19.831 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 02:31:47.350 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 02:32:24.981 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_String.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsListener.lambda$new$0(StatisticsListener.java:69) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_String.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	... 1 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_String.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_String.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 68 common frames omitted
[MASTER] 02:32:29.659 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 02:32:44.374 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
* Search finished after 123s and 38 generations, 22319 statements, best individual has fitness: 193.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 81%
* Total number of goals: 156
* Number of covered goals: 127
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 75%
* Total number of goals: 104
* Number of covered goals: 78
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 37
* Number of covered goals: 37
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 662
* Number of covered goals: 606
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 40
* Number of covered goals: 23
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 95%
* Total number of goals: 22
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 75%
* Total number of goals: 104
* Number of covered goals: 78
* Generated 74 tests with total length 213
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 125s and 134 generations, 105814 statements, best individual has fitness: 3711.0
[MASTER] 02:33:29.763 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_SQLInvalidAuthorizationSpecException.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsListener.lambda$new$0(StatisticsListener.java:69) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_SQLInvalidAuthorizationSpecException.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	... 1 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_SQLInvalidAuthorizationSpecException.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_SQLInvalidAuthorizationSpecException.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
[MASTER] 02:33:31.499 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_SQLInvalidAuthorizationSpecException.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.executedAndThenSendIndividualToMaster(StatisticsSender.java:98) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTests(TestSuiteGenerator.java:687) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:245) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_SQLInvalidAuthorizationSpecException.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	... 3 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_SQLInvalidAuthorizationSpecException.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_SQLInvalidAuthorizationSpecException.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
* Minimizing test suite
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONReaderScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s9/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 02:35:39.462 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 02:37:28.875 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: com.alibaba.fastjson.JSONPath with seed 9. Configuration id : EvoSuite_fuzzer
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.LinkedHashMap.newNode(LinkedHashMap.java:256) ~[na:1.8.0_161]
	at java.util.HashMap.putVal(HashMap.java:631) ~[na:1.8.0_161]
	at java.util.HashMap.putMapEntries(HashMap.java:515) ~[na:1.8.0_161]
	at java.util.HashMap.putAll(HashMap.java:785) ~[na:1.8.0_161]
	at org.evosuite.ga.Chromosome.setPreviousFitnessValues(Chromosome.java:154) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testcase.TestChromosome.clone(TestChromosome.java:131) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testsuite.AbstractTestSuiteChromosome.lambda$new$0(AbstractTestSuiteChromosome.java:85) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testsuite.AbstractTestSuiteChromosome$$Lambda$166/276859840.accept(Unknown Source) ~[na:na]
	at java.util.ArrayList.forEach(ArrayList.java:1257) ~[na:1.8.0_161]
	at org.evosuite.testsuite.AbstractTestSuiteChromosome.<init>(AbstractTestSuiteChromosome.java:85) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testsuite.TestSuiteChromosome.<init>(TestSuiteChromosome.java:134) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.testsuite.TestSuiteChromosome.clone(TestSuiteChromosome.java:170) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.coverage.CoverageCriteriaAnalyzer.analyzeCoverage(CoverageCriteriaAnalyzer.java:213) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.coverage.CoverageCriteriaAnalyzer.analyzeCoverage(CoverageCriteriaAnalyzer.java:202) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:474) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:255) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl$$Lambda$8/1620951079.run(Unknown Source) ~[na:na]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
* Computation finished
[MASTER] 02:37:28.992 [main] ERROR SearchStatistics - No obtained value for output variable: BranchCoverage
[MASTER] 02:37:30.997 [main] ERROR SearchStatistics - No obtained value for output variable: BranchCoverage
[MASTER] 02:37:31.998 [main] ERROR SearchStatistics - No obtained value for output variable: BranchCoverage
[MASTER] 02:37:32.998 [main] ERROR SearchStatistics - No obtained value for output variable: BranchCoverage
[MASTER] 02:37:33.999 [main] ERROR SearchStatistics - No obtained value for output variable: BranchCoverage
[MASTER] 02:37:34.999 [main] ERROR SearchStatistics - No obtained value for output variable: BranchCoverage
[MASTER] 02:37:35.000 [main] ERROR SearchStatistics - Not going to write down statistics data, as some are missing
[MASTER] 02:37:35.101 [main] ERROR TestGeneration - failed to write statistics data
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSONObject
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.alibaba.fastjson.JSON
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 20336
* Connecting to master process on port 20338
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 02:37:42.664 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 02:37:42.665 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONObject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 02:37:43.973 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 02:37:43.977 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Total number of test goals for DYNAMOSA: 1211
* Using seed 9
* Starting evolution
* Initial Number of Goals in DynaMOSA = 496 / 1211
[MASTER] 02:37:44.345 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 02:37:44.346 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 02:37:44.346 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 02:37:44.346 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSON
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2080
* Using seed 9
* Starting evolution
* Initial Number of Goals in DynaMOSA = 747 / 2080
[MASTER] 02:37:45.676 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 02:37:45.678 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 02:37:45.682 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 02:37:45.683 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 02:37:45.683 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 02:38:00.204 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 02:38:01.011 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 02:38:01.210 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 02:38:08.920 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 02:38:09.841 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 02:38:11.243 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: Have no generator for class com.alibaba.fastjson.serializer.BeanContext canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 02:38:11.777 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<java.lang.Object> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 02:38:11.991 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.serializer.BeanContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.alibaba.fastjson.util.FieldInfo due to org.evosuite.ga.ConstructionFailedException: Have no generator for class java.lang.reflect.Method canUseFunctionalMocks=true, canBeMocked: false
* Search finished after 122s and 78 generations, 26741 statements, best individual has fitness: 528.0
* Minimizing test suite
* Search finished after 124s and 127 generations, 68377 statements, best individual has fitness: 568.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 61%
* Total number of goals: 254
* Number of covered goals: 154
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 51%
* Total number of goals: 172
* Number of covered goals: 87
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 57%
* Total number of goals: 333
* Number of covered goals: 190
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 41%
* Total number of goals: 162
* Number of covered goals: 67
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 95%
* Total number of goals: 59
* Number of covered goals: 56
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 59
* Number of covered goals: 54
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 51%
* Total number of goals: 172
* Number of covered goals: 87
* Generated 90 tests with total length 228
* Resulting test suite's coverage: 64% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 435
* Number of covered goals: 359
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 80%
* Total number of goals: 283
* Number of covered goals: 225
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 117
* Number of covered goals: 114
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 76%
* Total number of goals: 716
* Number of covered goals: 544
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 197
* Number of covered goals: 79
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 83
* Number of covered goals: 81
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 86%
* Total number of goals: 83
* Number of covered goals: 71
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 283
* Number of covered goals: 215
* Generated 233 tests with total length 994
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 02:40:21.359 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_29_1590108021320/com/alibaba/fastjson/JSONObject_29_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_29_1590108021320/com/alibaba/fastjson/JSONObject_29_tmp__ESTest_scaffolding.java]]
[MASTER] 02:40:21.359 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 02:40:21.359 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 02:40:21.364 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.lang.Object> cannot be converted to java.lang.Class<java.util.HashMap<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Long>>: 25
[MASTER] 02:40:21.365 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_29_1590108021320/com/alibaba/fastjson/JSONObject_29_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 00:40:21 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.JSON;
11: import com.alibaba.fastjson.JSONObject;
12: import java.util.AbstractMap;
13: import java.util.HashMap;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class JSONObject_29_tmp__ESTest extends JSONObject_29_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       JSONObject jSONObject0 = new JSONObject();
24:       Class<Object> class0 = Object.class;
25:       HashMap<AbstractMap.SimpleImmutableEntry, Long> hashMap0 = JSON.toJavaObject((JSON) jSONObject0, (Class<HashMap<AbstractMap.SimpleImmutableEntry, Long>>) class0);
26:       assertSame(jSONObject0, hashMap0);
27:   }
28: }
RegularFileObject[/tmp/EvoSuite_29_1590108021320/com/alibaba/fastjson/JSONObject_29_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 00:40:21 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSONObject_29_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSONObject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:     java.lang.System.setProperty("user.home", "/home/apaniche"); 
78:   }
79: 
80:   private static void initializeClasses() {
81:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSONObject_29_tmp__ESTest_scaffolding.class.getClassLoader() ,
82:       "com.alibaba.fastjson.asm.ClassWriter",
83:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
90:       "com.alibaba.fastjson.serializer.JSONSerializable",
91:       "com.alibaba.fastjson.serializer.SerializeWriter",
92:       "com.alibaba.fastjson.serializer.ReferenceCodec",
93:       "com.alibaba.fastjson.JSONException",
94:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
95:       "com.alibaba.fastjson.serializer.ToStringSerializer",
96:       "com.alibaba.fastjson.serializer.SerialContext",
97:       "com.alibaba.fastjson.serializer.AfterFilter",
98:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
99:       "com.alibaba.fastjson.TypeReference",
100:       "com.alibaba.fastjson.serializer.ObjectSerializer",
101:       "com.alibaba.fastjson.serializer.MapSerializer",
102:       "com.alibaba.fastjson.asm.Item",
103:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
104:       "com.alibaba.fastjson.serializer.DateCodec",
105:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
106:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
107:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
108:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
109:       "com.alibaba.fastjson.util.FieldInfo",
110:       "com.alibaba.fastjson.serializer.PropertyFilter",
111:       "com.alibaba.fastjson.annotation.JSONField",
112:       "com.alibaba.fastjson.parser.SymbolTable",
113:       "com.alibaba.fastjson.serializer.NameFilter",
114:       "com.alibaba.fastjson.serializer.ListSerializer",
115:       "com.alibaba.fastjson.JSONArray",
116:       "com.alibaba.fastjson.JSONAware",
117:       "com.alibaba.fastjson.serializer.LongCodec",
118:       "com.alibaba.fastjson.util.ASMClassLoader",
119:       "com.alibaba.fastjson.PropertyNamingStrategy",
120:       "com.alibaba.fastjson.parser.JSONToken",
121:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
122:       "com.alibaba.fastjson.serializer.AppendableSerializer",
123:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
124:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
125:       "com.alibaba.fastjson.serializer.ContextValueFilter",
126:       "com.alibaba.fastjson.util.ServiceLoader",
127:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
128:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
129:       "com.alibaba.fastjson.parser.DefaultJSONParser",
130:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
131:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
132:       "com.alibaba.fastjson.serializer.BeanContext",
133:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
134:       "com.alibaba.fastjson.util.IdentityHashMap",
135:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
136:       "com.alibaba.fastjson.JSON",
137:       "com.alibaba.fastjson.serializer.StringCodec",
138:       "com.alibaba.fastjson.serializer.SerializeFilterable",
139:       "com.alibaba.fastjson.JSONWriter",
140:       "com.alibaba.fastjson.asm.Opcodes",
141:       "com.alibaba.fastjson.JSONReader",
142:       "com.alibaba.fastjson.JSONStreamAware",
143:       "com.alibaba.fastjson.asm.MethodWriter",
144:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
145:       "com.alibaba.fastjson.serializer.SerializerFeature",
146:       "com.alibaba.fastjson.serializer.CalendarCodec",
147:       "com.alibaba.fastjson.util.IOUtils",
148:       "com.alibaba.fastjson.util.TypeUtils",
149:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
150:       "com.alibaba.fastjson.spi.Module",
151:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
152:       "com.alibaba.fastjson.serializer.MiscCodec",
153:       "com.alibaba.fastjson.util.IOUtils$1",
154:       "com.alibaba.fastjson.serializer.IntegerCodec",
155:       "com.alibaba.fastjson.serializer.SerializeFilter",
156:       "com.alibaba.fastjson.JSONPObject",
157:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
158:       "com.alibaba.fastjson.serializer.BeforeFilter",
159:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
160:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
161:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
162:       "com.alibaba.fastjson.JSONObject",
163:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
164:       "com.alibaba.fastjson.serializer.CharacterCodec",
165:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
166:       "com.alibaba.fastjson.asm.ByteVector",
167:       "com.alibaba.fastjson.parser.JSONLexer",
168:       "com.alibaba.fastjson.util.ASMClassLoader$1",
169:       "com.alibaba.fastjson.asm.Label",
170:       "com.alibaba.fastjson.asm.FieldWriter",
171:       "com.alibaba.fastjson.serializer.JSONSerializer",
172:       "com.alibaba.fastjson.util.JavaBeanInfo",
173:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
174:       "com.alibaba.fastjson.serializer.SerializeConfig",
175:       "com.alibaba.fastjson.serializer.AtomicCodec",
176:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
177:       "com.alibaba.fastjson.asm.Type",
178:       "com.alibaba.fastjson.serializer.FieldSerializer",
179:       "com.alibaba.fastjson.serializer.FloatCodec",
180:       "com.alibaba.fastjson.parser.JSONReaderScanner",
181:       "com.alibaba.fastjson.serializer.ValueFilter",
182:       "com.alibaba.fastjson.JSONPathException",
183:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
184:       "com.alibaba.fastjson.serializer.Labels",
185:       "com.alibaba.fastjson.serializer.CollectionCodec",
186:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
187:       "com.alibaba.fastjson.serializer.CharArrayCodec",
188:       "com.alibaba.fastjson.asm.MethodVisitor",
189:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
190:       "com.alibaba.fastjson.serializer.LabelFilter",
191:       "com.alibaba.fastjson.annotation.JSONType",
192:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
193:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
194:       "com.alibaba.fastjson.serializer.DoubleSerializer",
195:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
196:       "com.alibaba.fastjson.serializer.BooleanCodec",
197:       "com.alibaba.fastjson.parser.Feature",
198:       "com.alibaba.fastjson.parser.ParserConfig",
199:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
200:       "com.alibaba.fastjson.parser.ParseContext"
201:     );
202:   } 
203: 
204:   private static void resetClasses() {
205:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSONObject_29_tmp__ESTest_scaffolding.class.getClassLoader()); 
206: 
207:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
208:       "com.alibaba.fastjson.parser.Feature",
209:       "com.alibaba.fastjson.serializer.SerializerFeature",
210:       "com.alibaba.fastjson.util.IOUtils$1",
211:       "com.alibaba.fastjson.util.IOUtils",
212:       "com.alibaba.fastjson.JSON",
213:       "com.alibaba.fastjson.JSONObject",
214:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
215:       "com.alibaba.fastjson.util.IdentityHashMap",
216:       "com.alibaba.fastjson.util.ASMUtils",
217:       "com.alibaba.fastjson.parser.SymbolTable",
218:       "com.alibaba.fastjson.util.TypeUtils",
219:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
220:       "com.alibaba.fastjson.util.ASMClassLoader$1",
221:       "com.alibaba.fastjson.util.ASMClassLoader",
222:       "com.alibaba.fastjson.serializer.MiscCodec",
223:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
224:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
225:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
226:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
227:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
228:       "com.alibaba.fastjson.serializer.DateCodec",
229:       "com.alibaba.fastjson.serializer.CalendarCodec",
230:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
231:       "com.alibaba.fastjson.serializer.CollectionCodec",
232:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
233:       "com.alibaba.fastjson.serializer.StringCodec",
234:       "com.alibaba.fastjson.serializer.CharacterCodec",
235:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
236:       "com.alibaba.fastjson.serializer.IntegerCodec",
237:       "com.alibaba.fastjson.serializer.LongCodec",
238:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
239:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
240:       "com.alibaba.fastjson.serializer.FloatCodec",
241:       "com.alibaba.fastjson.serializer.BooleanCodec",
242:       "com.alibaba.fastjson.serializer.CharArrayCodec",
243:       "com.alibaba.fastjson.serializer.ReferenceCodec",
244:       "com.alibaba.fastjson.serializer.AtomicCodec",
245:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
246:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
247:       "com.alibaba.fastjson.parser.ParserConfig",
248:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
249:       "com.alibaba.fastjson.serializer.DoubleSerializer",
250:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
251:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
252:       "com.alibaba.fastjson.serializer.AppendableSerializer",
253:       "com.alibaba.fastjson.serializer.ToStringSerializer",
254:       "com.alibaba.fastjson.serializer.SerializeConfig",
255:       "com.alibaba.fastjson.JSONArray",
256:       "com.alibaba.fastjson.util.UTF8Decoder",
257:       "com.alibaba.fastjson.parser.DefaultJSONParser",
258:       "com.alibaba.fastjson.parser.JSONLexerBase",
259:       "com.alibaba.fastjson.parser.JSONScanner",
260:       "com.alibaba.fastjson.JSONException",
261:       "com.alibaba.fastjson.parser.ParseContext",
262:       "com.alibaba.fastjson.serializer.SerializeWriter",
263:       "com.alibaba.fastjson.serializer.SerializeFilterable",
264:       "com.alibaba.fastjson.serializer.JSONSerializer",
265:       "com.alibaba.fastjson.util.ServiceLoader",
266:       "com.alibaba.fastjson.serializer.MapSerializer",
267:       "com.alibaba.fastjson.serializer.SerialContext",
268:       "com.alibaba.fastjson.parser.JSONReaderScanner",
269:       "com.alibaba.fastjson.parser.JSONToken",
270:       "com.alibaba.fastjson.serializer.ListSerializer",
271:       "com.alibaba.fastjson.util.FieldInfo",
272:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
273:       "com.alibaba.fastjson.asm.ClassWriter",
274:       "com.alibaba.fastjson.asm.ByteVector",
275:       "com.alibaba.fastjson.asm.Item",
276:       "com.alibaba.fastjson.asm.FieldWriter",
277:       "com.alibaba.fastjson.asm.MethodWriter",
278:       "com.alibaba.fastjson.asm.Type",
279:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
280:       "com.alibaba.fastjson.asm.Label",
281:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
282:       "com.alibaba.fastjson.serializer.FieldSerializer",
283:       "com.alibaba.fastjson.serializer.BeanContext",
284:       "com.alibaba.fastjson.util.JavaBeanInfo",
285:       "com.alibaba.fastjson.asm.ClassReader",
286:       "com.alibaba.fastjson.asm.TypeCollector$1",
287:       "com.alibaba.fastjson.asm.TypeCollector",
288:       "com.alibaba.fastjson.asm.MethodCollector",
289:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
290:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
291:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
292:       "com.alibaba.fastjson.TypeReference$1",
293:       "com.alibaba.fastjson.TypeReference",
294:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
295:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
296:       "com.alibaba.fastjson.serializer.PascalNameFilter",
297:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
298:       "com.alibaba.fastjson.serializer.EnumSerializer",
299:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
300:       "com.alibaba.fastjson.PropertyNamingStrategy",
301:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
302:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
303:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
304:       "com.alibaba.fastjson.util.RyuFloat",
305:       "com.alibaba.fastjson.serializer.ArraySerializer"
306:     );
307:   }
308: }

[MASTER] 02:40:21.365 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
JSONObject jSONObject0 = new JSONObject();
Class<Object> class0 = Object.class;
HashMap<AbstractMap.SimpleImmutableEntry, Long> hashMap0 = JSON.toJavaObject((JSON) jSONObject0, (Class<HashMap<AbstractMap.SimpleImmutableEntry, Long>>) class0);
assertSame(jSONObject0, hashMap0);


[MASTER] 02:40:24.318 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_78_1590108024289/com/alibaba/fastjson/JSONObject_78_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_78_1590108024289/com/alibaba/fastjson/JSONObject_78_tmp__ESTest_scaffolding.java]]
[MASTER] 02:40:24.318 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 02:40:24.318 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 02:40:24.319 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.lang.Byte> cannot be converted to java.lang.Class<java.util.AbstractMap.SimpleImmutableEntry<java.util.LinkedList,java.util.LinkedHashMap<java.lang.Integer,java.lang.reflect.Field>>>: 32
[MASTER] 02:40:24.320 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_78_1590108024289/com/alibaba/fastjson/JSONObject_78_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 00:40:24 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.JSONObject;
12: import com.alibaba.fastjson.parser.ParserConfig;
13: import java.lang.reflect.Field;
14: import java.util.AbstractMap;
15: import java.util.LinkedHashMap;
16: import java.util.LinkedList;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
22: public class JSONObject_78_tmp__ESTest extends JSONObject_78_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       JSONObject jSONObject0 = new JSONObject();
27:       Class<Byte> class0 = Byte.class;
28:       ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
29:       ParserConfig parserConfig0 = new ParserConfig(classLoader0);
30:       // Undeclared exception!
31:       try { 
32:         jSONObject0.toJavaObject((Class<AbstractMap.SimpleImmutableEntry<LinkedList, LinkedHashMap<Integer, Field>>>) class0, parserConfig0, (-2566));
33:         fail("Expecting exception: RuntimeException");
34:       
35:       } catch(RuntimeException e) {
36:          //
37:          // can not get javaBeanDeserializer. java.lang.Byte
38:          //
39:          verifyException("com.alibaba.fastjson.util.TypeUtils", e);
40:       }
41:   }
42: }
RegularFileObject[/tmp/EvoSuite_78_1590108024289/com/alibaba/fastjson/JSONObject_78_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 00:40:24 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSONObject_78_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSONObject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:     java.lang.System.setProperty("user.home", "/home/apaniche"); 
78:   }
79: 
80:   private static void initializeClasses() {
81:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSONObject_78_tmp__ESTest_scaffolding.class.getClassLoader() ,
82:       "com.alibaba.fastjson.asm.ClassWriter",
83:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
90:       "com.alibaba.fastjson.serializer.JSONSerializable",
91:       "com.alibaba.fastjson.serializer.SerializeWriter",
92:       "com.alibaba.fastjson.serializer.ReferenceCodec",
93:       "com.alibaba.fastjson.JSONException",
94:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
95:       "com.alibaba.fastjson.serializer.ToStringSerializer",
96:       "com.alibaba.fastjson.serializer.SerialContext",
97:       "com.alibaba.fastjson.serializer.AfterFilter",
98:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
99:       "com.alibaba.fastjson.TypeReference",
100:       "com.alibaba.fastjson.serializer.ObjectSerializer",
101:       "com.alibaba.fastjson.serializer.MapSerializer",
102:       "com.alibaba.fastjson.asm.Item",
103:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
104:       "com.alibaba.fastjson.serializer.DateCodec",
105:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
106:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
107:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
108:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
109:       "com.alibaba.fastjson.util.FieldInfo",
110:       "com.alibaba.fastjson.serializer.PropertyFilter",
111:       "com.alibaba.fastjson.annotation.JSONField",
112:       "com.alibaba.fastjson.parser.SymbolTable",
113:       "com.alibaba.fastjson.serializer.NameFilter",
114:       "com.alibaba.fastjson.serializer.ListSerializer",
115:       "com.alibaba.fastjson.JSONArray",
116:       "com.alibaba.fastjson.JSONAware",
117:       "com.alibaba.fastjson.serializer.LongCodec",
118:       "com.alibaba.fastjson.util.ASMClassLoader",
119:       "com.alibaba.fastjson.PropertyNamingStrategy",
120:       "com.alibaba.fastjson.parser.JSONToken",
121:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
122:       "com.alibaba.fastjson.serializer.AppendableSerializer",
123:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
124:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
125:       "com.alibaba.fastjson.serializer.ContextValueFilter",
126:       "com.alibaba.fastjson.util.ServiceLoader",
127:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
128:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
129:       "com.alibaba.fastjson.parser.DefaultJSONParser",
130:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
131:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
132:       "com.alibaba.fastjson.serializer.BeanContext",
133:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
134:       "com.alibaba.fastjson.util.IdentityHashMap",
135:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
136:       "com.alibaba.fastjson.JSON",
137:       "com.alibaba.fastjson.serializer.StringCodec",
138:       "com.alibaba.fastjson.serializer.SerializeFilterable",
139:       "com.alibaba.fastjson.JSONWriter",
140:       "com.alibaba.fastjson.asm.Opcodes",
141:       "com.alibaba.fastjson.JSONReader",
142:       "com.alibaba.fastjson.JSONStreamAware",
143:       "com.alibaba.fastjson.asm.MethodWriter",
144:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
145:       "com.alibaba.fastjson.serializer.SerializerFeature",
146:       "com.alibaba.fastjson.serializer.CalendarCodec",
147:       "com.alibaba.fastjson.util.IOUtils",
148:       "com.alibaba.fastjson.util.TypeUtils",
149:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
150:       "com.alibaba.fastjson.spi.Module",
151:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
152:       "com.alibaba.fastjson.serializer.MiscCodec",
153:       "com.alibaba.fastjson.util.IOUtils$1",
154:       "com.alibaba.fastjson.serializer.IntegerCodec",
155:       "com.alibaba.fastjson.serializer.SerializeFilter",
156:       "com.alibaba.fastjson.JSONPObject",
157:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
158:       "com.alibaba.fastjson.serializer.BeforeFilter",
159:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
160:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
161:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
162:       "com.alibaba.fastjson.JSONObject",
163:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
164:       "com.alibaba.fastjson.serializer.CharacterCodec",
165:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
166:       "com.alibaba.fastjson.asm.ByteVector",
167:       "com.alibaba.fastjson.parser.JSONLexer",
168:       "com.alibaba.fastjson.util.ASMClassLoader$1",
169:       "com.alibaba.fastjson.asm.Label",
170:       "com.alibaba.fastjson.asm.FieldWriter",
171:       "com.alibaba.fastjson.serializer.JSONSerializer",
172:       "com.alibaba.fastjson.util.JavaBeanInfo",
173:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
174:       "com.alibaba.fastjson.serializer.SerializeConfig",
175:       "com.alibaba.fastjson.serializer.AtomicCodec",
176:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
177:       "com.alibaba.fastjson.asm.Type",
178:       "com.alibaba.fastjson.serializer.FieldSerializer",
179:       "com.alibaba.fastjson.serializer.FloatCodec",
180:       "com.alibaba.fastjson.parser.JSONReaderScanner",
181:       "com.alibaba.fastjson.serializer.ValueFilter",
182:       "com.alibaba.fastjson.JSONPathException",
183:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
184:       "com.alibaba.fastjson.serializer.Labels",
185:       "com.alibaba.fastjson.serializer.CollectionCodec",
186:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
187:       "com.alibaba.fastjson.serializer.CharArrayCodec",
188:       "com.alibaba.fastjson.asm.MethodVisitor",
189:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
190:       "com.alibaba.fastjson.serializer.LabelFilter",
191:       "com.alibaba.fastjson.annotation.JSONType",
192:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
193:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
194:       "com.alibaba.fastjson.serializer.DoubleSerializer",
195:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
196:       "com.alibaba.fastjson.serializer.BooleanCodec",
197:       "com.alibaba.fastjson.parser.Feature",
198:       "com.alibaba.fastjson.parser.ParserConfig",
199:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
200:       "com.alibaba.fastjson.parser.ParseContext"
201:     );
202:   } 
203: 
204:   private static void resetClasses() {
205:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSONObject_78_tmp__ESTest_scaffolding.class.getClassLoader()); 
206: 
207:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
208:       "com.alibaba.fastjson.parser.Feature",
209:       "com.alibaba.fastjson.serializer.SerializerFeature",
210:       "com.alibaba.fastjson.util.IOUtils$1",
211:       "com.alibaba.fastjson.util.IOUtils",
212:       "com.alibaba.fastjson.JSON",
213:       "com.alibaba.fastjson.JSONObject",
214:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
215:       "com.alibaba.fastjson.util.IdentityHashMap",
216:       "com.alibaba.fastjson.util.ASMUtils",
217:       "com.alibaba.fastjson.parser.SymbolTable",
218:       "com.alibaba.fastjson.util.TypeUtils",
219:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
220:       "com.alibaba.fastjson.util.ASMClassLoader$1",
221:       "com.alibaba.fastjson.util.ASMClassLoader",
222:       "com.alibaba.fastjson.serializer.MiscCodec",
223:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
224:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
225:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
226:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
227:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
228:       "com.alibaba.fastjson.serializer.DateCodec",
229:       "com.alibaba.fastjson.serializer.CalendarCodec",
230:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
231:       "com.alibaba.fastjson.serializer.CollectionCodec",
232:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
233:       "com.alibaba.fastjson.serializer.StringCodec",
234:       "com.alibaba.fastjson.serializer.CharacterCodec",
235:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
236:       "com.alibaba.fastjson.serializer.IntegerCodec",
237:       "com.alibaba.fastjson.serializer.LongCodec",
238:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
239:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
240:       "com.alibaba.fastjson.serializer.FloatCodec",
241:       "com.alibaba.fastjson.serializer.BooleanCodec",
242:       "com.alibaba.fastjson.serializer.CharArrayCodec",
243:       "com.alibaba.fastjson.serializer.ReferenceCodec",
244:       "com.alibaba.fastjson.serializer.AtomicCodec",
245:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
246:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
247:       "com.alibaba.fastjson.parser.ParserConfig",
248:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
249:       "com.alibaba.fastjson.serializer.DoubleSerializer",
250:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
251:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
252:       "com.alibaba.fastjson.serializer.AppendableSerializer",
253:       "com.alibaba.fastjson.serializer.ToStringSerializer",
254:       "com.alibaba.fastjson.serializer.SerializeConfig",
255:       "com.alibaba.fastjson.JSONArray",
256:       "com.alibaba.fastjson.util.UTF8Decoder",
257:       "com.alibaba.fastjson.parser.DefaultJSONParser",
258:       "com.alibaba.fastjson.parser.JSONLexerBase",
259:       "com.alibaba.fastjson.parser.JSONScanner",
260:       "com.alibaba.fastjson.JSONException",
261:       "com.alibaba.fastjson.parser.ParseContext",
262:       "com.alibaba.fastjson.serializer.SerializeWriter",
263:       "com.alibaba.fastjson.serializer.SerializeFilterable",
264:       "com.alibaba.fastjson.serializer.JSONSerializer",
265:       "com.alibaba.fastjson.util.ServiceLoader",
266:       "com.alibaba.fastjson.serializer.MapSerializer",
267:       "com.alibaba.fastjson.serializer.SerialContext",
268:       "com.alibaba.fastjson.parser.JSONReaderScanner",
269:       "com.alibaba.fastjson.parser.JSONToken",
270:       "com.alibaba.fastjson.serializer.ListSerializer",
271:       "com.alibaba.fastjson.util.FieldInfo",
272:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
273:       "com.alibaba.fastjson.asm.ClassWriter",
274:       "com.alibaba.fastjson.asm.ByteVector",
275:       "com.alibaba.fastjson.asm.Item",
276:       "com.alibaba.fastjson.asm.FieldWriter",
277:       "com.alibaba.fastjson.asm.MethodWriter",
278:       "com.alibaba.fastjson.asm.Type",
279:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
280:       "com.alibaba.fastjson.asm.Label",
281:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
282:       "com.alibaba.fastjson.serializer.FieldSerializer",
283:       "com.alibaba.fastjson.serializer.BeanContext",
284:       "com.alibaba.fastjson.util.JavaBeanInfo",
285:       "com.alibaba.fastjson.asm.ClassReader",
286:       "com.alibaba.fastjson.asm.TypeCollector$1",
287:       "com.alibaba.fastjson.asm.TypeCollector",
288:       "com.alibaba.fastjson.asm.MethodCollector",
289:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
290:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
291:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
292:       "com.alibaba.fastjson.TypeReference$1",
293:       "com.alibaba.fastjson.TypeReference",
294:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
295:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
296:       "com.alibaba.fastjson.serializer.PascalNameFilter",
297:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
298:       "com.alibaba.fastjson.serializer.EnumSerializer",
299:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
300:       "com.alibaba.fastjson.PropertyNamingStrategy",
301:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
302:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
303:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
304:       "com.alibaba.fastjson.util.RyuFloat",
305:       "com.alibaba.fastjson.serializer.ArraySerializer"
306:     );
307:   }
308: }

[MASTER] 02:40:24.320 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
JSONObject jSONObject0 = new JSONObject();
Class<Byte> class0 = Byte.class;
ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
ParserConfig parserConfig0 = new ParserConfig(classLoader0);
jSONObject0.toJavaObject((Class<AbstractMap.SimpleImmutableEntry<LinkedList, LinkedHashMap<Integer, Field>>>) class0, parserConfig0, (-2566));

* Resulting test suite's mutation score: 31%
* Compiling and checking tests
[MASTER] 02:40:36.932 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_33_1590108036907/com/alibaba/fastjson/JSON_33_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_33_1590108036907/com/alibaba/fastjson/JSON_33_tmp__ESTest_scaffolding.java]]
[MASTER] 02:40:36.932 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 02:40:36.932 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 02:40:36.936 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.lang.String> cannot be converted to java.lang.Class<java.util.HashMap<com.alibaba.fastjson.JSONValidator.Type,java.util.AbstractMap.SimpleEntry>>: 27
[MASTER] 02:40:36.937 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_33_1590108036907/com/alibaba/fastjson/JSON_33_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 00:40:36 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.JSON;
12: import com.alibaba.fastjson.JSONValidator;
13: import java.util.AbstractMap;
14: import java.util.HashMap;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class JSON_33_tmp__ESTest extends JSON_33_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Class<String> class0 = String.class;
25:       // Undeclared exception!
26:       try { 
27:         JSON.parseObject("1.2.68", (Class<HashMap<JSONValidator.Type, AbstractMap.SimpleEntry>>) class0);
28:         fail("Expecting exception: RuntimeException");
29:       
30:       } catch(RuntimeException e) {
31:          //
32:          // syntax error, expect {, actual float, pos 0, fastjson-version 1.2.68
33:          //
34:          verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
35:       }
36:   }
37: }
RegularFileObject[/tmp/EvoSuite_33_1590108036907/com/alibaba/fastjson/JSON_33_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 00:40:36 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSON_33_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSON"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
76:     java.lang.System.setProperty("user.home", "/home/apaniche"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:   }
79: 
80:   private static void initializeClasses() {
81:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSON_33_tmp__ESTest_scaffolding.class.getClassLoader() ,
82:       "com.alibaba.fastjson.asm.ClassWriter",
83:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
84:       "com.alibaba.fastjson.util.ASMUtils",
85:       "com.alibaba.fastjson.JSONPath",
86:       "com.alibaba.fastjson.parser.JSONScanner",
87:       "com.alibaba.fastjson.parser.JSONLexerBase",
88:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
89:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
90:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
91:       "com.alibaba.fastjson.serializer.JSONSerializable",
92:       "com.alibaba.fastjson.serializer.SerializeWriter",
93:       "com.alibaba.fastjson.serializer.ReferenceCodec",
94:       "com.alibaba.fastjson.JSONException",
95:       "com.alibaba.fastjson.asm.TypeCollector$1",
96:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
97:       "com.alibaba.fastjson.serializer.ToStringSerializer",
98:       "com.alibaba.fastjson.serializer.SerialContext",
99:       "com.alibaba.fastjson.JSONPath$FilterGroup",
100:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
101:       "com.alibaba.fastjson.serializer.AfterFilter",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.TypeReference",
104:       "com.alibaba.fastjson.JSONValidator$Type",
105:       "com.alibaba.fastjson.asm.Item",
106:       "com.alibaba.fastjson.serializer.MapSerializer",
107:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
108:       "com.alibaba.fastjson.serializer.DateCodec",
109:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
110:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
111:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
112:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
113:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
114:       "com.alibaba.fastjson.JSONPath$Filter",
115:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
116:       "com.alibaba.fastjson.util.FieldInfo",
117:       "com.alibaba.fastjson.JSONValidator$UTF16Validator",
118:       "com.alibaba.fastjson.annotation.JSONField",
119:       "com.alibaba.fastjson.serializer.PropertyFilter",
120:       "com.alibaba.fastjson.parser.SymbolTable",
121:       "com.alibaba.fastjson.serializer.NameFilter",
122:       "com.alibaba.fastjson.serializer.ListSerializer",
123:       "com.alibaba.fastjson.JSONArray",
124:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
125:       "com.alibaba.fastjson.JSONAware",
126:       "com.alibaba.fastjson.serializer.LongCodec",
127:       "com.alibaba.fastjson.serializer.EnumSerializer",
128:       "com.alibaba.fastjson.util.ASMClassLoader",
129:       "com.alibaba.fastjson.PropertyNamingStrategy",
130:       "com.alibaba.fastjson.parser.JSONToken",
131:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
132:       "com.alibaba.fastjson.serializer.AppendableSerializer",
133:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
134:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
135:       "com.alibaba.fastjson.serializer.ContextValueFilter",
136:       "com.alibaba.fastjson.util.ServiceLoader",
137:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
138:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
139:       "com.alibaba.fastjson.JSONPath$FilterSegment",
140:       "com.alibaba.fastjson.parser.DefaultJSONParser",
141:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
142:       "com.alibaba.fastjson.JSONValidator$ReaderValidator",
143:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
144:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
145:       "com.alibaba.fastjson.serializer.BeanContext",
146:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
147:       "com.alibaba.fastjson.util.IdentityHashMap",
148:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
149:       "com.alibaba.fastjson.JSON",
150:       "com.alibaba.fastjson.serializer.StringCodec",
151:       "com.alibaba.fastjson.serializer.SerializeFilterable",
152:       "com.alibaba.fastjson.JSONWriter",
153:       "com.alibaba.fastjson.asm.Opcodes",
154:       "com.alibaba.fastjson.JSONReader",
155:       "com.alibaba.fastjson.JSONStreamAware",
156:       "com.alibaba.fastjson.asm.MethodWriter",
157:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
158:       "com.alibaba.fastjson.serializer.SerializerFeature",
159:       "com.alibaba.fastjson.JSONPath$Operator",
160:       "com.alibaba.fastjson.TypeReference$1",
161:       "com.alibaba.fastjson.serializer.CalendarCodec",
162:       "com.alibaba.fastjson.util.IOUtils",
163:       "com.alibaba.fastjson.util.TypeUtils",
164:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
165:       "com.alibaba.fastjson.asm.ClassReader",
166:       "com.alibaba.fastjson.JSONPath$Segment",
167:       "com.alibaba.fastjson.spi.Module",
168:       "com.alibaba.fastjson.JSONValidator",
169:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
170:       "com.alibaba.fastjson.serializer.MiscCodec",
171:       "com.alibaba.fastjson.util.IOUtils$1",
172:       "com.alibaba.fastjson.serializer.IntegerCodec",
173:       "com.alibaba.fastjson.serializer.SerializeFilter",
174:       "com.alibaba.fastjson.JSONPObject",
175:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
176:       "com.alibaba.fastjson.serializer.PascalNameFilter",
177:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
178:       "com.alibaba.fastjson.serializer.BeforeFilter",
179:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
180:       "com.alibaba.fastjson.serializer.ArraySerializer",
181:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
182:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
183:       "com.alibaba.fastjson.JSONObject",
184:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
185:       "com.alibaba.fastjson.serializer.CharacterCodec",
186:       "com.alibaba.fastjson.asm.TypeCollector",
187:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
188:       "com.alibaba.fastjson.asm.ByteVector",
189:       "com.alibaba.fastjson.parser.JSONLexer",
190:       "com.alibaba.fastjson.util.ASMClassLoader$1",
191:       "com.alibaba.fastjson.asm.Label",
192:       "com.alibaba.fastjson.JSONValidator$UTF8Validator",
193:       "com.alibaba.fastjson.asm.FieldWriter",
194:       "com.alibaba.fastjson.serializer.JSONSerializer",
195:       "com.alibaba.fastjson.util.JavaBeanInfo",
196:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
197:       "com.alibaba.fastjson.serializer.SerializeConfig",
198:       "com.alibaba.fastjson.serializer.AtomicCodec",
199:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
200:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
201:       "com.alibaba.fastjson.asm.Type",
202:       "com.alibaba.fastjson.serializer.FieldSerializer",
203:       "com.alibaba.fastjson.serializer.FloatCodec",
204:       "com.alibaba.fastjson.parser.JSONReaderScanner",
205:       "com.alibaba.fastjson.serializer.ValueFilter",
206:       "com.alibaba.fastjson.JSONPathException",
207:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
208:       "com.alibaba.fastjson.serializer.Labels",
209:       "com.alibaba.fastjson.serializer.CollectionCodec",
210:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
211:       "com.alibaba.fastjson.serializer.CharArrayCodec",
212:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
213:       "com.alibaba.fastjson.asm.MethodVisitor",
214:       "com.alibaba.fastjson.annotation.JSONCreator",
215:       "com.alibaba.fastjson.asm.MethodCollector",
216:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
217:       "com.alibaba.fastjson.annotation.JSONType",
218:       "com.alibaba.fastjson.serializer.LabelFilter",
219:       "com.alibaba.fastjson.util.UTF8Decoder",
220:       "com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator",
221:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
222:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
223:       "com.alibaba.fastjson.serializer.DoubleSerializer",
224:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
225:       "com.alibaba.fastjson.serializer.BooleanCodec",
226:       "com.alibaba.fastjson.parser.Feature",
227:       "com.alibaba.fastjson.parser.ParserConfig",
228:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
229:       "com.alibaba.fastjson.parser.ParseContext"
230:     );
231:   } 
232: 
233:   private static void resetClasses() {
234:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSON_33_tmp__ESTest_scaffolding.class.getClassLoader()); 
235: 
236:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
237:       "com.alibaba.fastjson.parser.Feature",
238:       "com.alibaba.fastjson.serializer.SerializerFeature",
239:       "com.alibaba.fastjson.util.IOUtils$1",
240:       "com.alibaba.fastjson.util.IOUtils",
241:       "com.alibaba.fastjson.JSON",
242:       "com.alibaba.fastjson.util.IdentityHashMap",
243:       "com.alibaba.fastjson.util.ASMUtils",
244:       "com.alibaba.fastjson.parser.SymbolTable",
245:       "com.alibaba.fastjson.util.TypeUtils",
246:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
247:       "com.alibaba.fastjson.util.ASMClassLoader$1",
248:       "com.alibaba.fastjson.util.ASMClassLoader",
249:       "com.alibaba.fastjson.serializer.MiscCodec",
250:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
251:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
252:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
253:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
254:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
255:       "com.alibaba.fastjson.serializer.DateCodec",
256:       "com.alibaba.fastjson.serializer.CalendarCodec",
257:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
258:       "com.alibaba.fastjson.serializer.CollectionCodec",
259:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
260:       "com.alibaba.fastjson.serializer.StringCodec",
261:       "com.alibaba.fastjson.serializer.CharacterCodec",
262:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
263:       "com.alibaba.fastjson.serializer.IntegerCodec",
264:       "com.alibaba.fastjson.serializer.LongCodec",
265:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
266:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
267:       "com.alibaba.fastjson.serializer.FloatCodec",
268:       "com.alibaba.fastjson.serializer.BooleanCodec",
269:       "com.alibaba.fastjson.serializer.CharArrayCodec",
270:       "com.alibaba.fastjson.serializer.ReferenceCodec",
271:       "com.alibaba.fastjson.serializer.AtomicCodec",
272:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
273:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
274:       "com.alibaba.fastjson.parser.ParserConfig",
275:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
276:       "com.alibaba.fastjson.serializer.DoubleSerializer",
277:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
278:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
279:       "com.alibaba.fastjson.serializer.AppendableSerializer",
280:       "com.alibaba.fastjson.serializer.ToStringSerializer",
281:       "com.alibaba.fastjson.serializer.SerializeConfig",
282:       "com.alibaba.fastjson.parser.DefaultJSONParser",
283:       "com.alibaba.fastjson.parser.JSONLexerBase",
284:       "com.alibaba.fastjson.parser.JSONScanner",
285:       "com.alibaba.fastjson.JSONArray",
286:       "com.alibaba.fastjson.parser.ParseContext",
287:       "com.alibaba.fastjson.serializer.SerializeWriter",
288:       "com.alibaba.fastjson.serializer.SerializeFilterable",
289:       "com.alibaba.fastjson.serializer.JSONSerializer",
290:       "com.alibaba.fastjson.util.ServiceLoader",
291:       "com.alibaba.fastjson.serializer.ListSerializer",
292:       "com.alibaba.fastjson.JSONObject",
293:       "com.alibaba.fastjson.PropertyNamingStrategy",
294:       "com.alibaba.fastjson.JSONException",
295:       "com.alibaba.fastjson.parser.JSONToken",
296:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
297:       "com.alibaba.fastjson.JSONPObject",
298:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
299:       "com.alibaba.fastjson.util.FieldInfo",
300:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
301:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
302:       "com.alibaba.fastjson.serializer.FieldSerializer",
303:       "com.alibaba.fastjson.serializer.BeanContext",
304:       "com.alibaba.fastjson.serializer.SerialContext",
305:       "com.alibaba.fastjson.parser.JSONReaderScanner",
306:       "com.alibaba.fastjson.serializer.PascalNameFilter",
307:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
308:       "com.alibaba.fastjson.util.JavaBeanInfo",
309:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
310:       "com.alibaba.fastjson.asm.ClassReader",
311:       "com.alibaba.fastjson.asm.TypeCollector$1",
312:       "com.alibaba.fastjson.asm.TypeCollector",
313:       "com.alibaba.fastjson.asm.Type",
314:       "com.alibaba.fastjson.asm.MethodCollector",
315:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
316:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
317:       "com.alibaba.fastjson.serializer.MapSerializer",
318:       "com.alibaba.fastjson.asm.ClassWriter",
319:       "com.alibaba.fastjson.asm.ByteVector",
320:       "com.alibaba.fastjson.asm.Item",
321:       "com.alibaba.fastjson.asm.FieldWriter",
322:       "com.alibaba.fastjson.asm.MethodWriter",
323:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
324:       "com.alibaba.fastjson.asm.Label",
325:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
326:       "com.alibaba.fastjson.TypeReference$1",
327:       "com.alibaba.fastjson.TypeReference",
328:       "com.alibaba.fastjson.serializer.EnumSerializer",
329:       "com.alibaba.fastjson.util.UTF8Decoder",
330:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
331:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
332:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
333:       "com.alibaba.fastjson.serializer.ArraySerializer",
334:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
335:       "com.alibaba.fastjson.JSONPath$Operator",
336:       "com.alibaba.fastjson.PropertyNamingStrategy$1",
337:       "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec",
338:       "com.alibaba.fastjson.serializer.JSONAwareSerializer",
339:       "com.alibaba.fastjson.serializer.ByteBufferCodec",
340:       "com.alibaba.fastjson.util.RyuDouble",
341:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
342:       "com.alibaba.fastjson.parser.deserializer.OptionalCodec",
343:       "com.alibaba.fastjson.JSONValidator$Type"
344:     );
345:   }
346: }

[MASTER] 02:40:36.937 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Class<String> class0 = String.class;
JSON.parseObject("1.2.68", (Class<HashMap<JSONValidator.Type, AbstractMap.SimpleEntry>>) class0);

[MASTER] 02:40:48.420 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 02:40:48.422 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONObject jSONObject0 = new JSONObject(2147483645, true);
jSONObject0.fluentPut("1.2.68", jSONObject0);

[MASTER] 02:40:49.925 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONException: create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.parser.SymbolTable
[MASTER] 02:40:49.926 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig0 = ParserConfig.global;
String string0 = JSON.toJSONString((Object) parserConfig0, false);
assertEquals("{\"asmEnable\":true,\"autoTypeSupport\":false,\"compatibleWithJavaBean\":false,\"derializers\":{},\"deserializers\":{\"$ref\":\"$.java\\\\.lang\\\\.String\\\\@0000001143\"},\"fieldBased\":false,\"jacksonCompatible\":false,\"safeMode\":false,\"symbolTable\":{}}", string0);


[MASTER] 02:40:54.234 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 02:40:54.235 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONObject jSONObject0 = new JSONObject(2147483645, true);
jSONObject0.put((String) null, (Object) null);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'JSONObject_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s9/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 02:41:06.150 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONException: create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.parser.SymbolTable
[MASTER] 02:41:06.150 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig0 = ParserConfig.global;
SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
SerializerFeature serializerFeature0 = SerializerFeature.SortField;
serializerFeatureArray0[0] = serializerFeature0;
String string0 = JSON.toJSONStringWithDateFormat(parserConfig0, "fastjson.parser.deny", serializerFeatureArray0);
assertEquals("{\"asmEnable\":true,\"autoTypeSupport\":false,\"compatibleWithJavaBean\":false,\"derializers\":{},\"deserializers\":{\"$ref\":\"$.java\\\\.lang\\\\.String\\\\@0000000006\"},\"fieldBased\":false,\"jacksonCompatible\":false,\"safeMode\":false,\"symbolTable\":{}}", string0);


[MASTER] 02:41:09.177 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to java.util.LinkedHashMap
[MASTER] 02:41:09.178 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
LinkedHashMap linkedHashMap1 = (LinkedHashMap)JSON.toJSON((Object) linkedHashMap0, serializeConfig0);
assertTrue(linkedHashMap1.isEmpty());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'JSON_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s9/fastjson/evosuite-tests
* Done!

* Computation finished
