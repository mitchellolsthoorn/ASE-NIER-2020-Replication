* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.google.gson.JsonElement
* Starting Client-0
* Connecting to master process on port 8220
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonElement
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 265
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 183 / 265
* Search finished after 121s and 736 generations, 92424 statements, best individual has fitness: 105.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 36
* Number of covered goals: 34
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 38
* Number of covered goals: 38
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 124
* Number of covered goals: 62
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 22
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Generated 80 tests with total length 189
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 44%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonElement_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.google.gson.stream.JsonWriter
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.google.gson.internal.bind.JsonTreeReader
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.google.gson.JsonObject
* Starting Client-0
* Connecting to master process on port 8222
* Starting Client-0
* Connecting to master process on port 8223
* Starting Client-0
* Connecting to master process on port 8224
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonObject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 221
* Using seed 11
* Starting evolution
* Finished analyzing classpath
* Initial Number of Goals in DynaMOSA = 142 / 221
* Generating tests for class com.google.gson.stream.JsonWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 03:00:37.026 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:00:37.026 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Total number of test goals for DYNAMOSA: 1024
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 410 / 1024
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.bind.JsonTreeReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 830
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 253 / 830
[MASTER] 03:00:37.481 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:00:37.482 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Search finished after 122s and 1019 generations, 146946 statements, best individual has fitness: 43.0
* Minimizing test suite
* Search finished after 121s and 1041 generations, 354451 statements, best individual has fitness: 130.0
* Search finished after 121s and 628 generations, 142120 statements, best individual has fitness: 166.0
* Minimizing test suite
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 82
* Number of covered goals: 46
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Generated 37 tests with total length 102
* Resulting test suite's coverage: 89% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 179
* Number of covered goals: 172
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 117
* Number of covered goals: 105
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 468
* Number of covered goals: 409
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 87%
* Total number of goals: 97
* Number of covered goals: 84
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 117
* Number of covered goals: 96
* Generated 74 tests with total length 312
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 88%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 162
* Number of covered goals: 150
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 103
* Number of covered goals: 92
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 37
* Number of covered goals: 37
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 77%
* Total number of goals: 397
* Number of covered goals: 306
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 74%
* Total number of goals: 27
* Number of covered goals: 20
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 103
* Number of covered goals: 92
* Generated 77 tests with total length 285
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 59%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonObject_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/gson/evosuite-tests
* Done!

* Computation finished
* Writing tests to file
* Writing JUnit test case 'JsonWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/gson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 39%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonTreeReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.google.gson.Gson
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.google.gson.JsonArray
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 8221
* Connecting to master process on port 8224
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonArray
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 427
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 249 / 427
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.Gson
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 991
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 599 / 991
[MASTER] 03:06:41.936 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 03:06:41.940 [logback-2] ERROR TestCluster - Failed to check cache for com.google.gson.Gson.FutureTypeAdapter<T> : Type points to itself
* Search finished after 123s and 63 generations, 10127 statements, best individual has fitness: 116.0
* Minimizing test suite
* Search finished after 126s and 62 generations, 19416 statements, best individual has fitness: 258.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 70
* Number of covered goals: 68
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 28%
* Total number of goals: 109
* Number of covered goals: 30
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 30
* Number of covered goals: 24
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Generated 67 tests with total length 195
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 64%
* Compiling and checking tests
[MASTER] 03:09:09.918 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 03:09:09.918 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JsonArray jsonArray0 = new JsonArray(2147483645);

* Writing tests to file
* Writing JUnit test case 'JsonArray_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/gson/evosuite-tests
* Done!

* Computation finished
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 333
* Number of covered goals: 278
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 80%
* Total number of goals: 113
* Number of covered goals: 90
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 43
* Number of covered goals: 43
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 71%
* Total number of goals: 292
* Number of covered goals: 208
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 70
* Number of covered goals: 40
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 35
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 89%
* Total number of goals: 35
* Number of covered goals: 31
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 75%
* Total number of goals: 113
* Number of covered goals: 85
* Generated 81 tests with total length 285
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 25%
[MASTER] 03:11:25.873 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 03:11:28.928 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_51_1590109888903/com/google/gson/Gson_51_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_51_1590109888903/com/google/gson/Gson_51_tmp__ESTest_scaffolding.java]]
[MASTER] 03:11:28.928 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 03:11:28.928 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 03:11:28.930 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.lang.Float> cannot be converted to java.lang.Class<com.google.gson.InstanceCreator<com.google.gson.Gson.FutureTypeAdapter>>: 26
[MASTER] 03:11:28.931 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_51_1590109888903/com/google/gson/Gson_51_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri May 22 01:11:28 GMT 2020
4:  */
5: 
6: package com.google.gson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.gson.Gson;
12: import com.google.gson.InstanceCreator;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class Gson_51_tmp__ESTest extends Gson_51_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Gson gson0 = new Gson();
23:       Class<Float> class0 = Float.class;
24:       // Undeclared exception!
25:       try { 
26:         gson0.fromJson("quFp5jbtossl", (Class<InstanceCreator<Gson.FutureTypeAdapter>>) class0);
27:         fail("Expecting exception: NumberFormatException");
28:       
29:       } catch(NumberFormatException e) {
30:       }
31:   }
32: }
RegularFileObject[/tmp/EvoSuite_51_1590109888903/com/google/gson/Gson_51_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri May 22 01:11:28 GMT 2020
5:  */
6: 
7: package com.google.gson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Gson_51_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.gson.Gson"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/gson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Gson_51_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
82:       "com.google.gson.reflect.TypeToken",
83:       "com.google.gson.internal.bind.TypeAdapters$23",
84:       "com.google.gson.internal.bind.TypeAdapters$24",
85:       "com.google.gson.internal.bind.TypeAdapters$25",
86:       "com.google.gson.internal.bind.TypeAdapters$26",
87:       "com.google.gson.internal.bind.TypeAdapters$20",
88:       "com.google.gson.TypeAdapter",
89:       "com.google.gson.internal.bind.JsonTreeWriter",
90:       "com.google.gson.GsonBuilder",
91:       "com.google.gson.internal.bind.TypeAdapters$21",
92:       "com.google.gson.internal.bind.TypeAdapters$22",
93:       "com.google.gson.internal.bind.TypeAdapters$27",
94:       "com.google.gson.FieldNamingStrategy",
95:       "com.google.gson.internal.bind.TypeAdapters$28",
96:       "com.google.gson.internal.bind.TypeAdapters$29",
97:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
98:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
99:       "com.google.gson.internal.bind.TimeTypeAdapter",
100:       "com.google.gson.ExclusionStrategy",
101:       "com.google.gson.internal.bind.TypeAdapters$34",
102:       "com.google.gson.internal.bind.TypeAdapters$35",
103:       "com.google.gson.internal.JavaVersion",
104:       "com.google.gson.internal.bind.TypeAdapters$30",
105:       "com.google.gson.internal.bind.TypeAdapters$32",
106:       "com.google.gson.internal.bind.TypeAdapters$33",
107:       "com.google.gson.JsonArray",
108:       "com.google.gson.LongSerializationPolicy",
109:       "com.google.gson.internal.bind.TypeAdapters$35$1",
110:       "com.google.gson.internal.Excluder",
111:       "com.google.gson.internal.LinkedTreeMap$EntrySet$1",
112:       "com.google.gson.TypeAdapterFactory",
113:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
114:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
115:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
116:       "com.google.gson.stream.JsonReader$1",
117:       "com.google.gson.internal.$Gson$Types",
118:       "com.google.gson.stream.JsonReader",
119:       "com.google.gson.InstanceCreator",
120:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
121:       "com.google.gson.internal.reflect.UnsafeReflectionAccessor",
122:       "com.google.gson.Gson$FutureTypeAdapter",
123:       "com.google.gson.internal.bind.TreeTypeAdapter",
124:       "com.google.gson.internal.LinkedTreeMap$Node",
125:       "com.google.gson.stream.JsonWriter",
126:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
127:       "com.google.gson.internal.$Gson$Preconditions",
128:       "com.google.gson.internal.Streams",
129:       "com.google.gson.internal.bind.TypeAdapters$12",
130:       "com.google.gson.internal.bind.TypeAdapters$13",
131:       "com.google.gson.internal.bind.TypeAdapters$14",
132:       "com.google.gson.internal.bind.TypeAdapters$15",
133:       "com.google.gson.internal.bind.TypeAdapters$10",
134:       "com.google.gson.internal.Primitives",
135:       "com.google.gson.internal.bind.TypeAdapters$11",
136:       "com.google.gson.stream.MalformedJsonException",
137:       "com.google.gson.internal.bind.ArrayTypeAdapter",
138:       "com.google.gson.internal.ConstructorConstructor$3",
139:       "com.google.gson.stream.JsonToken",
140:       "com.google.gson.internal.bind.TypeAdapters$16",
141:       "com.google.gson.internal.ObjectConstructor",
142:       "com.google.gson.internal.bind.TypeAdapters$17",
143:       "com.google.gson.internal.bind.TypeAdapters$18",
144:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
145:       "com.google.gson.JsonNull",
146:       "com.google.gson.internal.bind.TypeAdapters$19",
147:       "com.google.gson.internal.bind.DateTypeAdapter$1",
148:       "com.google.gson.internal.ConstructorConstructor$8",
149:       "com.google.gson.LongSerializationPolicy$1",
150:       "com.google.gson.LongSerializationPolicy$2",
151:       "com.google.gson.JsonObject",
152:       "com.google.gson.internal.bind.JsonTreeReader$1",
153:       "com.google.gson.TypeAdapter$1",
154:       "com.google.gson.internal.UnsafeAllocator$3",
155:       "com.google.gson.internal.UnsafeAllocator$4",
156:       "com.google.gson.internal.UnsafeAllocator$1",
157:       "com.google.gson.internal.UnsafeAllocator$2",
158:       "com.google.gson.Gson$2",
159:       "com.google.gson.Gson$3",
160:       "com.google.gson.internal.bind.ObjectTypeAdapter",
161:       "com.google.gson.Gson$4",
162:       "com.google.gson.Gson$5",
163:       "com.google.gson.internal.bind.DateTypeAdapter",
164:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
165:       "com.google.gson.Gson$1",
166:       "com.google.gson.internal.bind.TypeAdapters$26$1",
167:       "com.google.gson.Gson",
168:       "com.google.gson.internal.LinkedTreeMap$1",
169:       "com.google.gson.internal.reflect.ReflectionAccessor",
170:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
171:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
172:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
173:       "com.google.gson.internal.LinkedTreeMap$EntrySet",
174:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
175:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
176:       "com.google.gson.annotations.SerializedName",
177:       "com.google.gson.internal.Excluder$1",
178:       "com.google.gson.internal.bind.TypeAdapters$2",
179:       "com.google.gson.internal.bind.JsonTreeReader",
180:       "com.google.gson.internal.bind.TypeAdapters$1",
181:       "com.google.gson.internal.bind.JsonTreeWriter$1",
182:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
183:       "com.google.gson.JsonIOException",
184:       "com.google.gson.internal.bind.TypeAdapters$8",
185:       "com.google.gson.internal.bind.TypeAdapters$7",
186:       "com.google.gson.internal.bind.TypeAdapters",
187:       "com.google.gson.internal.bind.TypeAdapters$9",
188:       "com.google.gson.internal.bind.TypeAdapters$4",
189:       "com.google.gson.internal.LinkedTreeMap",
190:       "com.google.gson.internal.bind.TypeAdapters$3",
191:       "com.google.gson.internal.bind.TypeAdapters$6",
192:       "com.google.gson.internal.LazilyParsedNumber",
193:       "com.google.gson.internal.bind.TypeAdapters$5",
194:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
195:       "com.google.gson.JsonParseException",
196:       "com.google.gson.internal.ConstructorConstructor",
197:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
198:       "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator",
199:       "com.google.gson.JsonElement",
200:       "com.google.gson.FieldNamingPolicy",
201:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
202:       "com.google.gson.DefaultDateTypeAdapter",
203:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
204:       "com.google.gson.annotations.JsonAdapter",
205:       "com.google.gson.JsonPrimitive",
206:       "com.google.gson.internal.UnsafeAllocator",
207:       "com.google.gson.internal.Streams$AppendableWriter",
208:       "com.google.gson.internal.ConstructorConstructor$14",
209:       "com.google.gson.JsonSyntaxException",
210:       "com.google.gson.FieldNamingPolicy$4",
211:       "com.google.gson.FieldNamingPolicy$3",
212:       "com.google.gson.FieldNamingPolicy$6",
213:       "com.google.gson.FieldNamingPolicy$5",
214:       "com.google.gson.internal.JsonReaderInternalAccess",
215:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
216:       "com.google.gson.FieldNamingPolicy$2",
217:       "com.google.gson.FieldNamingPolicy$1",
218:       "com.google.gson.internal.ConstructorConstructor$12"
219:     );
220:   } 
221: 
222:   private static void resetClasses() {
223:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Gson_51_tmp__ESTest_scaffolding.class.getClassLoader()); 
224: 
225:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
226:       "com.google.gson.reflect.TypeToken",
227:       "com.google.gson.internal.$Gson$Preconditions",
228:       "com.google.gson.internal.$Gson$Types",
229:       "com.google.gson.Gson",
230:       "com.google.gson.TypeAdapter",
231:       "com.google.gson.Gson$5",
232:       "com.google.gson.Gson$3",
233:       "com.google.gson.Gson$4",
234:       "com.google.gson.Gson$1",
235:       "com.google.gson.Gson$2",
236:       "com.google.gson.Gson$FutureTypeAdapter",
237:       "com.google.gson.internal.Excluder",
238:       "com.google.gson.FieldNamingPolicy",
239:       "com.google.gson.LongSerializationPolicy",
240:       "com.google.gson.internal.bind.TypeAdapters$1",
241:       "com.google.gson.TypeAdapter$1",
242:       "com.google.gson.internal.bind.TypeAdapters$32",
243:       "com.google.gson.internal.bind.TypeAdapters$2",
244:       "com.google.gson.internal.bind.TypeAdapters$3",
245:       "com.google.gson.internal.bind.TypeAdapters$4",
246:       "com.google.gson.internal.bind.TypeAdapters$33",
247:       "com.google.gson.internal.bind.TypeAdapters$5",
248:       "com.google.gson.internal.bind.TypeAdapters$6",
249:       "com.google.gson.internal.bind.TypeAdapters$7",
250:       "com.google.gson.internal.bind.TypeAdapters$8",
251:       "com.google.gson.internal.bind.TypeAdapters$9",
252:       "com.google.gson.internal.bind.TypeAdapters$10",
253:       "com.google.gson.internal.bind.TypeAdapters$11",
254:       "com.google.gson.internal.bind.TypeAdapters$12",
255:       "com.google.gson.internal.bind.TypeAdapters$13",
256:       "com.google.gson.internal.bind.TypeAdapters$14",
257:       "com.google.gson.internal.bind.TypeAdapters$15",
258:       "com.google.gson.internal.bind.TypeAdapters$16",
259:       "com.google.gson.internal.bind.TypeAdapters$17",
260:       "com.google.gson.internal.bind.TypeAdapters$18",
261:       "com.google.gson.internal.bind.TypeAdapters$19",
262:       "com.google.gson.internal.bind.TypeAdapters$20",
263:       "com.google.gson.internal.bind.TypeAdapters$21",
264:       "com.google.gson.internal.bind.TypeAdapters$22",
265:       "com.google.gson.internal.bind.TypeAdapters$23",
266:       "com.google.gson.internal.bind.TypeAdapters$35",
267:       "com.google.gson.internal.bind.TypeAdapters$24",
268:       "com.google.gson.internal.bind.TypeAdapters$25",
269:       "com.google.gson.internal.bind.TypeAdapters$26",
270:       "com.google.gson.internal.bind.TypeAdapters$27",
271:       "com.google.gson.internal.bind.TypeAdapters$34",
272:       "com.google.gson.internal.bind.TypeAdapters$28",
273:       "com.google.gson.internal.bind.TypeAdapters$29",
274:       "com.google.gson.internal.bind.TypeAdapters$30",
275:       "com.google.gson.internal.bind.TypeAdapters",
276:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
277:       "com.google.gson.internal.bind.ObjectTypeAdapter",
278:       "com.google.gson.internal.bind.DateTypeAdapter$1",
279:       "com.google.gson.internal.bind.DateTypeAdapter",
280:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
281:       "com.google.gson.internal.bind.TimeTypeAdapter",
282:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
283:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
284:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
285:       "com.google.gson.internal.bind.ArrayTypeAdapter",
286:       "com.google.gson.JsonElement",
287:       "com.google.gson.JsonNull",
288:       "com.google.gson.internal.Primitives",
289:       "com.google.gson.stream.JsonToken",
290:       "com.google.gson.internal.ConstructorConstructor",
291:       "com.google.gson.internal.JavaVersion",
292:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
293:       "com.google.gson.internal.reflect.ReflectionAccessor",
294:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
295:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
296:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
297:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
298:       "com.google.gson.stream.JsonWriter",
299:       "com.google.gson.internal.bind.JsonTreeWriter$1",
300:       "com.google.gson.JsonPrimitive",
301:       "com.google.gson.internal.bind.JsonTreeWriter",
302:       "com.google.gson.internal.Streams",
303:       "com.google.gson.JsonObject",
304:       "com.google.gson.internal.LinkedTreeMap$1",
305:       "com.google.gson.internal.LinkedTreeMap",
306:       "com.google.gson.internal.LinkedTreeMap$Node",
307:       "com.google.gson.JsonArray",
308:       "com.google.gson.internal.Streams$AppendableWriter",
309:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
310:       "com.google.gson.internal.JsonReaderInternalAccess",
311:       "com.google.gson.stream.JsonReader$1",
312:       "com.google.gson.stream.JsonReader",
313:       "com.google.gson.JsonParseException",
314:       "com.google.gson.JsonSyntaxException",
315:       "com.google.gson.internal.ConstructorConstructor$14",
316:       "com.google.gson.internal.UnsafeAllocator",
317:       "com.google.gson.internal.UnsafeAllocator$1",
318:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
319:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
320:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
321:       "com.google.gson.internal.ConstructorConstructor$3",
322:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
323:       "com.google.gson.internal.ConstructorConstructor$8",
324:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
325:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
326:       "com.google.gson.internal.LinkedTreeMap$EntrySet",
327:       "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator",
328:       "com.google.gson.internal.LinkedTreeMap$EntrySet$1",
329:       "com.google.gson.GsonBuilder",
330:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
331:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
332:       "com.google.gson.internal.bind.JsonTreeReader$1",
333:       "com.google.gson.internal.bind.JsonTreeReader",
334:       "com.google.gson.JsonIOException",
335:       "com.google.gson.DefaultDateTypeAdapter",
336:       "com.google.gson.stream.MalformedJsonException",
337:       "com.google.gson.internal.bind.util.ISO8601Utils",
338:       "com.google.gson.internal.ConstructorConstructor$6",
339:       "com.google.gson.internal.bind.ObjectTypeAdapter$2",
340:       "com.google.gson.internal.bind.TypeAdapters$35$1",
341:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
342:       "com.google.gson.internal.ConstructorConstructor$12",
343:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
344:       "com.google.gson.internal.Excluder$1",
345:       "com.google.gson.internal.ConstructorConstructor$13"
346:     );
347:   }
348: }

[MASTER] 03:11:28.932 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Gson gson0 = new Gson();
Class<Float> class0 = Float.class;
gson0.fromJson("quFp5jbtossl", (Class<InstanceCreator<Gson.FutureTypeAdapter>>) class0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 14
* Writing tests to file
* Writing JUnit test case 'Gson_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.google.gson.internal.LinkedHashTreeMap
* Starting Client-0
* Connecting to master process on port 8220
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.LinkedHashTreeMap
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1627
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 578 / 1627
[MASTER] 03:13:20.504 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:13:20.506 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:13:30.446 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 03:13:34.793 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 122s and 10 generations, 10009 statements, best individual has fitness: 854.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 57%
* Total number of goals: 387
* Number of covered goals: 221
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 45%
* Total number of goals: 262
* Number of covered goals: 117
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 51%
* Total number of goals: 588
* Number of covered goals: 301
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 34
* Number of covered goals: 15
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 47
* Number of covered goals: 43
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 47
* Number of covered goals: 43
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 44%
* Total number of goals: 262
* Number of covered goals: 116
* Generated 50 tests with total length 186
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 03:15:38.351 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:15:38.352 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
doReturn(0).when(comparator0).compare(anyString() , anyString());
LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap0.find("0`#B3", true);
LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node0);
assertEquals(1, linkedHashTreeMap0.size());
assertFalse(boolean0);


* Writing tests to file
* Writing JUnit test case 'LinkedHashTreeMap_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.google.gson.internal.bind.JsonTreeWriter
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.google.gson.stream.JsonReader
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_fuzzer
* Going to generate test cases for class: com.google.gson.JsonPrimitive
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 8222
* Connecting to master process on port 8220
* Starting Client-0
* Connecting to master process on port 8223
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.bind.JsonTreeWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonPrimitive
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 443
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 202 / 443
* Total number of test goals for DYNAMOSA: 433
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 165 / 433
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.stream.JsonReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2813
* Using seed 11
* Starting evolution
* Initial Number of Goals in DynaMOSA = 438 / 2813
* Search finished after 121s and 1670 generations, 326479 statements, best individual has fitness: 54.0
* Minimizing test suite
* Search finished after 122s and 290 generations, 92585 statements, best individual has fitness: 60.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 83
* Number of covered goals: 79
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 87
* Number of covered goals: 78
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 86%
* Total number of goals: 93
* Number of covered goals: 80
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Generated 60 tests with total length 207
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 122s and 429 generations, 117411 statements, best individual has fitness: 719.0
* Resulting test suite's mutation score: 52%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 62
* Number of covered goals: 60
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 77
* Number of covered goals: 70
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 91
* Number of covered goals: 79
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 78%
* Total number of goals: 82
* Number of covered goals: 64
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 77
* Number of covered goals: 70
* Generated 77 tests with total length 227
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 46%
* Compiling and checking tests
* Minimizing test suite
* Writing tests to file
* Writing JUnit test case 'JsonTreeWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/gson/evosuite-tests
* Done!

* Computation finished
* Writing tests to file
* Writing JUnit test case 'JsonPrimitive_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/gson/evosuite-tests
* Done!

* Computation finished
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 78%
* Total number of goals: 671
* Number of covered goals: 526
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 77%
* Total number of goals: 677
* Number of covered goals: 520
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 79
* Number of covered goals: 79
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 71%
* Total number of goals: 709
* Number of covered goals: 506
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 66%
* Total number of goals: 35
* Number of covered goals: 23
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 95%
* Total number of goals: 22
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 677
* Number of covered goals: 515
* Generated 167 tests with total length 622
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 24%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_fuzzer/tests/s11/gson/evosuite-tests
* Done!

* Computation finished
