/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 10:27:36 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UUID;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"x\":\"cause\",\"y\":7,\"z\":\"a string\",\"a\":-99,\"b\":{}}", false);
      JSONPath jSONPath0 = new JSONPath("{\"x\":null,\"y\":7,\".null\":true,\"a\":[true],\"b\":true,\"[]\":{}}");
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "{\"x\":null,\"y\":7,\".null\":true,\"a\":[true],\"b\":true,\"[]\":{}}", "{\"x\":null,\"y\":7,\".null\":true,\"a\":[true],\"b\":true,\"[]\":{}}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"x\":\"alibaba\",\"y\":7,\"z\":null,\"a\":-99,\"b\":{},\"xx\":{}}", false);
      JSONPath jSONPath0 = new JSONPath("{\"x\":null,\"y\":7,\"time\":null,\"a\":false,\"b\":{}}");
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "{\"x\":null,\"y\":7,\"time\":null,\"a\":false,\"b\":{}}", "{\"x\":null,\"y\":7,\"time\":null,\"a\":false,\"b\":{}}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(533);
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("", "com.alibaba.fastjson.JSONPath$FilterGroup", "'", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Feature feature0 = Feature.SupportAutoType;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(58, (-366), 41);
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "*", feature0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("u8&", "u8&");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("r<{T!hVory'TIp");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("06\"?J:mc!IA^U_");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(6L, object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-99");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Short short0 = new Short((short)45);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) short0, "vX8S\"}TO.-Zf==S04");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : vX8S\"}TO.-Zf==S04
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[9];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.safeMode", "jsonpath can not be null", parserConfig0, (-226), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":-99,\"b\":{}}", false);
      JSONPath jSONPath0 = new JSONPath("{\"x\":null,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":-99,\"b\":{}}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9[ m7ZyZRdOW%)rfb5");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("X", serializeConfig0, parserConfig0);
      jSONPath0.init();
      assertEquals("X", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("between");
      Long long0 = Long.valueOf((-5568478174756688325L));
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepGetPropertyValues(long0, stack0);
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=/5GOu~g!]p");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, (Object) null, jSONPath0, jSONPath_SizeSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("VlCJPyXhSZ57Gza");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[, but 'V'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("jsonpath can not be null");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('X');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$IntInSegement");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('M');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'M, but 'c'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("className", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1262));
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3x?/nupa'Z");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-11L));
      assertEquals((-8.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("BETWEEN");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("-");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":-99,\"z\":true,\"a\":[],\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("*BdY%xINBUEp|_", "3[^bO^6Mm6OFQ_G", (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path {\"x\":\"hello\",\"y\":-99,\"z\":true,\"a\":[],\"b\":{}}, segement 3[^bO^6Mm6OFQ_G
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("al", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath0.setPropertyValue("/stackTrace/10", "/stackTrace/10", 92, jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double(610.701130367801);
      boolean boolean0 = JSONPath.set((Object) double0, "xK", (Object) double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLException sQLException0 = new SQLException("q.SoG!G$F!V738ubvB");
      boolean boolean0 = JSONPath.set((Object) null, "CustomMapDeserializer", (Object) sQLException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "Xc*T?");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=+1\u0003C6?~`Ql9Y");
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_JSONPathParser0, "#");
      assertFalse(set0.contains("#"));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("DL[5/Q>,", serializeConfig0, parserConfig0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("xCp0b $@TllI)");
      JSONPath jSONPath0 = JSONPath.compile("xCp0b $@TllI)");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(jSONPath_JSONPathParser0);
      assertFalse(collection0.contains("xCp0b $@TllI)"));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=/5GOu~g!]p");
      SQLWarning sQLWarning0 = new SQLWarning("=/5GOu~g!]p", (String) null, 0);
      Object object0 = jSONPath0.getPropertyValue(sQLWarning0, "", (-749L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xCp0b @TllI)");
      Class<Date> class0 = Date.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":-99}", serializeConfig0, parserConfig0);
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":-99,\"z\":true,\"a\":[],\"b\":{}}");
      Object object0 = jSONPath0.getArrayItem((Object) null, 56);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{}");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      int int0 = jSONPath0.evalSize(throwableDeserializer0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", serializeConfig0, parserConfig0);
      Long long0 = new Long((-1551L));
      Set<?> set0 = jSONPath0.evalKeySet(long0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("u8&", serializeConfig0, parserConfig0);
      SQLException sQLException0 = new SQLException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{}", sQLException0);
      Set<?> set0 = jSONPath0.evalKeySet(sQLTimeoutException0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("y");
      Object object0 = JSONPath.eval((Object) jSONPath0, "y");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("[", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(17);
      Object object0 = jSONPath0.eval((Object) jSONPath_ArrayAccessSegment0);
      assertSame(object0, jSONPath_ArrayAccessSegment0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-818));
      // Undeclared exception!
      try { 
        JSONPath.size((Object) jSONPath_ArrayAccessSegment0, "&shTX?}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. &shTX?}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("\"a string\"", false);
      JSONPath jSONPath0 = new JSONPath("{\"buildMethod not found_\":nullc\"y\":7,\"a\":[],\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_PropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"buildMethod not found_\":nullc\"y\":7,\"a\":[],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("GE");
      DataTruncation dataTruncation0 = new DataTruncation((-4904), true, true, 2, 2);
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, dataTruncation0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(treeSet0, "yyyyMMddHHmmssSSSZ", 82, batchUpdateException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{}");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("{}");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, (Object) null, 1208, jSONPath_FilterSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(" =h`1fXUPty<aI,0'", false);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) parserConfig0, "fastjson.parser.deny.internal", (Object) jSONPath_PropertySegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("sn4Yip2sm");
      JSONPath jSONPath0 = JSONPath.compile("-");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "-", (Object) jSONPath_NullSegement0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) jSONPath_MinSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSONPath jSONPath0 = JSONPath.compile("0{cAr%{C2g{$4h-I");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) jSONPath_Operator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 0{cAr%{C2g{$4h-I
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("./&", ".", 40);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLTimeoutException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "length";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[99]";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("[99]", stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[null]";
      JSONPath.reserveToArray("[null]", stringArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("/stackTrace/10", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=/5GOu~g!]p");
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigInteger0, "NOT_RLIKE", true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":null,\"y\":7,\"time\":null,\"a\":false,\"b\":{}}");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "{\"x\":null,\"y\":7,\"time\":null,\"a\":false,\"b\":{}}", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Float float0 = new Float((float) (byte)12);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) float0, "(");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{}");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONPath.read("[true]", "[true]");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath.read("[{},[]]", "[{},[]]");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-XU&zc#7aH3u}lw", "-XU&zc#7aH3u}lw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath.read("", "");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("U+FJ]L|`zVZR3%=", "U+FJ]L|`zVZR3%=");
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) sQLDataException0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Short short0 = Short.valueOf((short) (-3923));
      JSONPath.keySet((Object) short0, "[99,true,{}]");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("u8&", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"fruit\":\"Apple\",\"size\":{},\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":{},\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("value not found in path ");
      jSONPath0.isRef();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":99,\"b\":{}}", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":99,\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ak");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(111, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Pv{8]Hnrc", serializeConfig0, parserConfig0);
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("daN-", serializeConfig0, parserConfig0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.deny.internal", hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(sQLClientInfoException0, (-2960));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("writeDirect", "writeDirect", parserConfig0, (-32768), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[4];
      // Undeclared exception!
      try { 
        JSONPath.extract("", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}", parserConfig0, 55, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[null],\"b\":{}}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[99,[]]", "[99,[]]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 5, line 1, column 6[99,[]]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("-", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.al&baba.fastjs#n.JSONPath$StrsngOpSegemenF", "between");
      JSONPath.eval((Object) sQLTransientConnectionException0, "com.al&baba.fastjs#n.JSONPath$StrsngOpSegemenF");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fV=;aAvdI`");
      jSONPath0.eval((Object) "fV=;aAvdI`");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Byte byte0 = new Byte((byte)31);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(byte0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      JSONPath jSONPath0 = new JSONPath("Ka'!'x!+X~2qP!CSf");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "?Z-c*Xn djyBS5", (byte)95, sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'_h~e[Q6/sNGj";
      stringArray0[1] = "E$";
      stringArray0[2] = "";
      stringArray0[3] = "9^^D;fK~d\"`1YZ";
      stringArray0[4] = ",fkHQgs!eq1F:";
      stringArray0[5] = "3x?/nupa'Z";
      stringArray0[6] = "9<8F-.d;Ij";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("=G}u?hcS*;Q|Uv", (SerializeConfig) null, parserConfig0);
      Class<SQLDataException> class0 = SQLDataException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(javaBeanDeserializer0, "3x?/nupa'Z", (-2095516571388852610L), jSONPath_MultiPropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path =G}u?hcS*;Q|Uv, segement 3x?/nupa'Z
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("[?f4_4HMw", serializeConfig0, parserConfig0);
      Short short0 = new Short((byte)115);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(short0, (List<Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.lang.Short
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("bu");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Sml'5u&{}T");
      JSONPath jSONPath0 = JSONPath.compile("ZzFq'UT{dtFw%8");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) propertyNamingStrategy0, (Object) jSONPath_JSONPathParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : ZzFq'UT{dtFw%8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "net.sf.json.JSONNull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) jSONPath_SizeSegment0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "[]", "[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) byte0, "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false}
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", but '");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) ", but '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. , but '
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("javax.persistence.ManyToMany");
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLNonTransientConnectionException0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("xCp0b @TllI)");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("xCp0b @TllI)");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_Segment0, (String) null, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("=/5GOu~g!]p");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("scan null error");
      boolean boolean0 = jSONPath0.removePropertyValue(sQLTransientConnectionException0, "=/5GOu~g!]p", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fV=;aAvdI`");
      jSONPath0.deepSet((Object) null, "wH&o-F2TF9l'Ll", 44, "fV=;aAvdI`");
      assertEquals("fV=;aAvdI`", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("82");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("82", true);
      Byte byte0 = new Byte((byte) (-1));
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, byte0, propertyNamingStrategy0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("y");
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepScan((Object) null, "property", stack0);
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", but '");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, jSONPath0, 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("[null,-99]");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("[null,-99]");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, classLoader0, 81, jSONPath_NotNullSegement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":-99,\"b\":{}}", false);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("{\"x\":null,\"y\":7,\"z\":true,\"a\":\"a string\",\"com.alibaba.fastjson.JSONPath$WildCardSegment\":{}}");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_WildCardSegment0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":-99,\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/cause/stackTrace/10");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" sring\"");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("{?8\"\u0001)l");
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, (Object) null, "{?8\"\u0001)l");
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "not";
      stringArray0[1] = "not";
      stringArray0[2] = "not";
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath");
      Locale locale0 = Locale.GERMANY;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      jSONPath0.set((Object) locale0, (Object) jSONPath_MultiPropertySegment0, true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("sn4Yip2sm");
      JSONPath jSONPath0 = JSONPath.compile("B");
      boolean boolean0 = jSONPath0.set((Object) "B", (Object) jSONPath_NullSegement0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Koq60GsTZ?XD!v");
      SQLWarning sQLWarning0 = new SQLWarning("{\"SupportAutoType\":\"com.alibaba.fastjson.parser.Feature\"}");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLWarning0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fV=;aAvdI`";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("IgnoreErrorGetter");
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_MultiPropertySegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement");
      DataTruncation dataTruncation0 = new DataTruncation((-652), false, false, (-652), (-652));
      boolean boolean0 = jSONPath0.remove((Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("vxX8S\"}T.-Zf==S04");
      jSONPath0.arrayAdd((Object) classLoader0, (Object[]) null);
      assertEquals("vxX8S\"}T.-Zf==S04", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      Float float0 = new Float(744.1067782980331);
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ak");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("a7[)Eigw[%#3$N[OxE");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ZH*m D$");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("p>;");
      char[] charArray0 = new char[5];
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : p>;
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("u8&", serializeConfig0, parserConfig0);
      SQLException sQLException0 = new SQLException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{}", sQLException0);
      Object object0 = jSONPath0.eval((Object) sQLTimeoutException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("Zw", (SerializeConfig) null, parserConfig0);
      Float float0 = new Float((-1411.81254367));
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("y");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("jW$@.", "[null,{}]", (ParserConfig) null, (int) (short)104, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("./&", ".", 40);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/stackTrace/8";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLTimeoutException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject("Xc*T?", stringArray0);
      assertEquals("Xc*T?", object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".", ".", 67);
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)JSONPath.reserveToObject(sQLTimeoutException0, (String[]) null);
      assertEquals(".", sQLTimeoutException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_WildCardSegment0, stringArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, (String[]) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_WildCardSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      JSONPath jSONPath0 = new JSONPath(",");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_Operator0, serializeConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(map0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      int int0 = jSONPath0.size((Object) sQLFeatureNotSupportedException0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("wh0kIjGfX4r:Kp");
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(roundingMode0, "fastjson.parser.deny.internal", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JSONPath jSONPath0 = JSONPath.compile("ak");
      boolean boolean0 = jSONPath0.removePropertyValue(sQLClientInfoException0, (String) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double(100000.0);
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Byte byte0 = new Byte((byte)108);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(7227173499452065100L);
      longArray0[0] = long0;
      Long long1 = new Long((-1698L));
      longArray0[2] = longArray0[0];
      boolean boolean0 = JSONPath.eqNotNull(long1, longArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Short short0 = new Short((short) (-3934));
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowComment;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      boolean boolean0 = JSONPath.eq(featureArray0[1], feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = JSONPath.eq(mockGregorianCalendar0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((short) (-3952), true, false, 238, 1768);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(dataTruncation0);
      boolean boolean0 = JSONPath.eq((Object) null, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("&l1RImHZu>#ibA", "&l1RImHZu>#ibA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":{}}}", serializeConfig0, parserConfig0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, (Object) null, serializeConfig0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Locale locale0 = Locale.ROOT;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$StringOpSegement", locale0);
      assertEquals(11, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "handles";
      stringArray0[1] = "handles";
      stringArray0[2] = "handles";
      stringArray0[3] = "handles";
      stringArray0[4] = "handles";
      stringArray0[5] = "handles";
      stringArray0[6] = "handles";
      stringArray0[7] = "handles";
      stringArray0[8] = "handles";
      Object object0 = JSONPath.reserveToObject("handles", stringArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("a>flSs[ECq.rFk<`cY");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, propertyNamingStrategy0, object0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("scanString");
      Object object0 = jSONPath0.getArrayItem("scanString", (byte)0);
      assertEquals("scanString", object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONPath.read("[99]", "[99]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("JSONPath$RegMatchSegement");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.JSONPath$StringOpSegement", "JSONPath$RegMatchSegement", 8, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.JSONPath$StringOpSegement", "JSONPath$RegMatchSegement", 8);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLRecoverableException0, sQLTransientConnectionException0, aSMDeserializerFactory0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":null,\"y\":7,\".null\":true,\"a\":[true],\"b\":true,\"[]\":{}}");
      SQLWarning sQLWarning0 = new SQLWarning("X", "9*Up}p7`");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("GE", "GE", jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringOpSegement0, jSONPath_StringOpSegement0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_StringOpSegement0, "9*Up}p7`", sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "not";
      stringArray0[1] = "not";
      stringArray0[2] = "not";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("not", stringArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "not", "not", bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("C!kl", 100.0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, false);
      SQLWarning sQLWarning0 = new SQLWarning("hashCode", "GE");
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply((JSONPath) null, jSONPath_Operator0, (Object) null, sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$DoubleOpSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-99");
      String[] stringArray0 = new String[9];
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("-99");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLInvalidAuthorizationSpecException0, stringArray0[6]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"x\":null,\"y\":7,\"z\":true,\"[[],[]]\":true,\"b\":{}}");
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("com.alibaba.fastjson.JSONPath$MultiIndexSegment", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      Byte byte0 = new Byte((byte)93);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[[false]]");
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("#", (long[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(20);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, jSONPath_ArrayAccessSegment0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-99");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(".]gBv~]b3qb ^", (-1L), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net", ".]gBv~]b3qb ^", 927, sQLClientInfoException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, batchUpdateException0, sQLFeatureNotSupportedException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("\"a string\"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_NullSegement0, sQLNonTransientConnectionException0);
      assertNotNull(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Byte byte0 = new Byte((byte)108);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("scanStringArray", "com.alibaba.fastjson.serializer.PrimitiveArraySerializer", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.PrimitiveArraySerializer");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "com.alibaba.fastjson.serializer.PrimitiveArraySerializer", byte0, "M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("./&", "com.alibaba.fastjson.serializer.ArraySerializer", 925, (Throwable) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.alibaba.fastjson.serializer.ArraySerializer";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(sQLInvalidAuthorizationSpecException0, stringArray0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("./&", "DW:/%.+x2HXL$", false);
      JSONPath jSONPath0 = JSONPath.compile("1.2.68");
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, jSONArray0, sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(".", "KO1>oDr.{<W$(=nD", "KO1>oDr.{<W$(=nD", stringArray0, true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Spliterator<Throwable> spliterator0 = sQLClientInfoException0.spliterator();
      JSONPath jSONPath0 = JSONPath.compile("ak");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, ".", spliterator0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("can not cast to byte[], value : ", "height", (String) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.autoTypeSupport", (String) null, "getFastMatchToken", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("1Ls]", jSONPath_WildCardSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("fV=;aAvdI`");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\u0003BXy");
      BigDecimal bigDecimal0 = new BigDecimal((double) 989);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, jSONPath_WildCardSegment0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(" J*Su#f 01>;gb#6K+a", (-1272), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("className", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, serializeConfig0, jSONPath_WildCardSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Short short0 = Short.valueOf((short)255);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("s0", 22L, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("s0");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("r", "com.alibaba.fastjson.JSONPath$Operator");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, sQLTransactionRollbackException0, short0, "not");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("like", serializeConfig0, (ParserConfig) null);
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("com.alibaba.fastjson.util.ServiceLoader", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_FilterSegment0, jSONPath_WildCardSegment0);
      assertSame(object0, jSONPath_WildCardSegment0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("xvp0b", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("{\"x\":\"hello\",\"y\":-99,\"z\":true,\"a\":[],\"b\":{}}");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Float float0 = new Float(0.0F);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLTransientConnectionException0, float0, stringArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(7227173499452065100L);
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("rlike", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("[true]");
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, jSONPath_MultiIndexSegment0, longArray0[2], longArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("06\"?J:mc!IA^U_");
      Stack<Object> stack0 = new Stack<Object>();
      Byte byte0 = new Byte((byte)36);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("vsT5)h.R", (-3062L), (byte)36, false);
      SQLDataException sQLDataException0 = new SQLDataException("u$yTh;!}");
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, sQLDataException0, stack0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("[[]]");
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("#", (long[]) null, true);
      MockDate mockDate0 = new MockDate(116, 116, (-798));
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, classLoader0, mockDate0, "#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{\"buildMethod not found_\":nullc\"y\":7,\"a\":[],\"b\":{}}");
      Long long0 = new Long((-1243L));
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.autoTypeSupport", long0, false);
      Object object0 = new Object();
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "{\"buildMethod not found_\":nullc\"y\":7,\"a\":[],\"b\":{}}", "{\"@,PH49xo\":\"hello\",\"y\":null,\"z\":true,\"a\":-99,\"b\":{\"@,PH49xo\":[]}}", object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$IntOpSegement", jSONPath_WildCardSegment0, true);
      JSONPath jSONPath0 = JSONPath.compile("[true]");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("[true]", true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[true]", "com.alibaba.fastjson.JSONPath$IntOpSegement");
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "[true]", jSONPath_PropertySegment0, sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath jSONPath0 = JSONPath.compile("/t");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, classLoader0, aSMDeserializerFactory0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/t");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, arrayList0, jSONPath0, sQLTimeoutException0);
      assertFalse(boolean0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-225), 1, 118);
      JSONPath jSONPath0 = new JSONPath("hIN:EV-k$f8F");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_SizeSegment0, (Object) null);
      assertNotNull(arrayList0);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\";\":[],\"dk`)@Vnw\":null}");
      JSONPath jSONPath0 = new JSONPath("{\";\":[],\"dk`)@Vnw\":null}");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2310, (-2554), 2310);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_JSONPathParser0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[-99,-99]", "[-99,-99]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MultiIndexSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = (JSONArray)JSONPath.extract("[99,-99]", "[99,-99]");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("'");
      int[] intArray0 = new int[5];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, mockGregorianCalendar0, (Object) null);
      assertEquals(5, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object object0 = JSONPath.extract("[99]", "[99]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("illeal jsonpath syntax. ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "illeal jsonpath syntax. ";
      stringArray0[1] = "illeal jsonpath syntax. ";
      stringArray0[2] = "illeal jsonpath syntax. ";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Class<SQLWarning> class0 = SQLWarning.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, javaBeanSerializer0, mockGregorianCalendar0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("y");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("twEBD", true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("y", sQLInvalidAuthorizationSpecException0);
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLRecoverableException0, "(U shqx}r");
      assertEquals(0, sQLRecoverableException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[[]]", "[[]]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 2, line 1, column 3[[]]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[7z&^GY7>8udDP", "[7z&^GY7>8udDP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 3, line 1, column 4[7z&^GY7>8udDP
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Object object0 = JSONPath.extract("[{}]", "[{}]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = JSONPath.compare(bigInteger0, bigInteger0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("xcp0b", "7HG;h");
      SQLWarning sQLWarning0 = new SQLWarning("BR", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLTransactionRollbackException0, sQLWarning0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransactionRollbackException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, aSMDeserializerFactory0, bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$StringOpSegement", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("vxX8S\"}T.-Zf==S04");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotSame(object0, jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/4");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("stackTrace", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("xCp0b $@TllI)");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'x, but ')'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"a string\"");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("a string\"", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("handles", "vteCk(-GL_r");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2handles
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/1Ls]@)zEYVtt");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2368L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=+1\u0003C6?~Q9Y");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(2799L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"JON#cFmW/G<M\"-(");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9[ m7ZyZRdOW%)rfb5");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(9L, object0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{\"rlike\":0.0}");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"rlike\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("y=.K*;");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/11");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("REG_MATCH", "$,Ey}-#mgXl.eG");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2REG_MATCH
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-99");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(55, 55, 55);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, sQLClientInfoException0, sQLClientInfoException0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths(object0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Map<String, Object> map0 = JSONPath.paths((Object) throwableDeserializer0, serializeConfig0);
      //  // Unstable assertion: assertEquals(125, map0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "list_item_desc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      SQLException sQLException0 = new SQLException();
      Byte byte0 = new Byte((byte)105);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLException0, (Object) byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Byte byte0 = new Byte((byte)87);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("kotlin.ranges.ClosedFloatRange", serializeConfig0, parserConfig0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) locale0, (Object) byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("[", serializeConfig0, parserConfig0);
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      boolean boolean0 = jSONPath0.set((Object) javaBeanSerializer0, (Object) "[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Float float0 = new Float((float) (byte)22);
      boolean boolean0 = JSONPath.remove((Object) float0, "EL6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) null, "o6D[T$B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(", "(", 4, (int[]) null);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) batchUpdateException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("com.alibaba.fastjson.JSONPath$StringOpSegement", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("y");
      String[] stringArray0 = new String[0];
      jSONPath0.arrayAdd((Object) "y", (Object[]) stringArray0);
      assertEquals("y", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.deserializer.fileRelativePathSupport");
      Short short0 = new Short((short)799);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) short0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.deserializer.fileRelativePathSupport
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("u8&", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$StringOpSegement");
      Set<?> set0 = jSONPath0.keySet((Object) "com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("xCp0b @TllI)");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\\.");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("step must greater than zero : ", true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "step must greater than zero : ", sQLTransientConnectionException0);
      assertNotNull(object0);
      
      UUID uUID0 = MockUUID.fromString("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":false}}");
      boolean boolean0 = jSONPath0.containsValue(object0, (Object) uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("'");
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Long long0 = new Long((byte)6);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) long0, (Object) bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*", "*", 7, sQLFeatureNotSupportedException0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) sQLInvalidAuthorizationSpecException0, (Object) bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      boolean boolean0 = JSONPath.containsValue((Object) feature0, "fastjson.parser.autoTypeAccept", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0i^anKQ");
      boolean boolean0 = JSONPath.containsValue((Object) sQLInvalidAuthorizationSpecException0, "/t", (Object) "/t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = jSONPath0.contains((Object) bigInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Feature feature0 = Feature.SupportAutoType;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, (byte)0, (-366));
      JSONPath jSONPath0 = new JSONPath("L");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, feature0);
      assertNotNull(object0);
      
      boolean boolean0 = jSONPath0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "[", "[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath0 = new JSONPath("Ay", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Object object0 = JSONPath.extract("{\"GT\":true}", "[[]]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("-", "(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) null, "com.alibaba.fastjson.JSONPath$StringOpSegement");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[-99]");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("y");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MockDate mockDate0 = new MockDate(211, 4662, 211);
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) mockDate0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath jSONPath0 = new JSONPath("@IlUvm>:g`3{");
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("sn4Yip2sm");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("B");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, "B", "B");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("fN");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "com", jSONPath0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("[", (Pattern) null, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("u8&", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath0, (Object) null, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m*:)i=])84R>J*wm");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('*', char0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(" J*Su#f 01>;gb#6K+a", (-1272), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("className", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-167));
      Float float0 = new Float((float) (-1272));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, float0, jSONPath_DoubleOpSegement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Float
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Byte byte0 = new Byte((byte)12);
      JSONPath jSONPath0 = new JSONPath("  /xozG}[");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(10);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("VlCJPyXhSZ57Gza");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/4");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      assertSame(jSONPath_Filter0, jSONPath_NotNullSegement0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath jSONPath0 = new JSONPath("L");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_SizeSegment0, serializeConfig0);
      jSONPath0.deepSet(map0, "p+Ki<X- *RgNa^F@", 9140416208800006522L, map0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read(",ZFTc", ",ZFTc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2,ZFTc
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = JSONPath.size((Object) "com.alibaba.fastjson.serializer.ArraySerializer", "com.alibaba.fastjson.serializer.ArraySerializer");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("4mK_!YP873Z2(1g ", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.getPath();
      assertEquals("4mK_!YP873Z2(1g ", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ArraySerializer");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)JSONPath.eval((Object) sQLClientInfoException0, ".");
      assertEquals(0, sQLClientInfoException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Float float0 = new Float((float) (short) (-3952));
      JSONPath.arrayAdd((Object) float0, "com.alibaba.fastjson.parser.JSONLexerBase", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("illegal");
      Class<Double> class0 = Double.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath jSONPath0 = JSONPath.compile("[{}]");
      boolean boolean0 = jSONPath0.set((Object) aSMDeserializerFactory0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) null, (String) null, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("[", (-3624L), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("[", serializeConfig0, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_Operator0, (Object) null);
      assertNull(object0);
  }
}
