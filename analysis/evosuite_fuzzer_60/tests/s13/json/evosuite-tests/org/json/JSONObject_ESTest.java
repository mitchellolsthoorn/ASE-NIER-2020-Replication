/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 10:39:29 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.MultipleGradientPaint;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Authenticator;
import java.security.CryptoPrimitive;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Function;
import javax.jws.WebParam;
import javax.swing.LayoutStyle;
import javax.swing.SortOrder;
import javax.tools.StandardLocation;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "true";
      jSONObject0.optBoolean("true");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = null;
      BigInteger bigInteger0 = BigInteger.valueOf((-99L));
      jSONObject0.optNumber((String) null, (Number) bigInteger0);
      try { 
        jSONObject0.getBigInteger((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(200);
      jSONObject0.optBigDecimal("org.json.JSONTokener", (BigDecimal) null);
      long long0 = jSONObject0.optLong("utf-8");
      assertEquals(0L, long0);
      
      float float0 = jSONObject0.optFloat("utf-8");
      assertEquals(Float.NaN, float0, 0.01F);
      
      jSONObject0.length();
      jSONObject0.toMap();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.optQuery(jSONPointer0);
      double double0 = jSONObject0.optDouble("utf-8");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = new JSONObject(4);
      String string0 = "|vMVh7wE)`h!rha1'";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("|vMVh7wE)`h!rha1'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Zn`P*iR/n");
      String string0 = "A JSONObject text must end with '}'";
      String string1 = "Gm!xu-D*5p1:nro";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Gm!xu-D*5p1:nro");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject.quote("toMap");
      JSONObject jSONObject0 = new JSONObject(2);
      HashMap<DayOfWeek, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<DayOfWeek, LayoutStyle.ComponentPlacement>();
      jSONObject0.put("null", (Map<?, ?>) hashMap0);
      jSONObject0.optString("java.io.StringWriter@0000000001", "getgetExtensionKeys");
      jSONObject0.remove("null");
      jSONObject0.optNumber("toMap");
      try { 
        jSONObject0.getInt("getgetExtensionKeys");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "{\"hashCode\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"javax.\":{},\"value2\":99,\"number\":false,\".\":null,\"sh\":[]}";
      JSONObject jSONObject0 = new JSONObject("{\"hashCode\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"javax.\":{},\"value2\":99,\"number\":false,\".\":null,\"sh\":[]}");
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getNumber("org.json.JSONPointer$Builder");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000063] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "{\"Duplicate key \"\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99}";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"Duplicate key \"\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 18 [character 19 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"javax.\":true,\"value2\":[],\"number\":false,\".\":null,\"xx\":{}}");
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      HashMap<SortOrder, Long> hashMap0 = new HashMap<SortOrder, Long>();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      Function<SortOrder, Long> function0 = (Function<SortOrder, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(javax.swing.SortOrder.class));
      hashMap0.computeIfAbsent(sortOrder0, function0);
      JSONObject jSONObject2 = jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"javax.\":true,\"value2\":[],\"number\":false,\".\":null,\"xx\":{}}", (Map<?, ?>) hashMap0);
      int int0 = jSONObject1.length();
      assertEquals(0, int0);
      
      jSONObject0.toString(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      double double0 = jSONObject2.optDouble("isfloatValue", (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"javax.\":true,\"value2\":[false],\"Nesting too deep.\":false,\".\":null,\"xx\":{}}");
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      String string0 = "org.json.JSONPointer$Builder";
      File file0 = MockFile.createTempFile("org.json.JSONPointer$Builder", "{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"javax.\":true,\"value2\":[false],\"Nesting too deep.\":false,\".\":null,\"xx\":{}}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      mockFileWriter0.write("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"javax.\":true,\"value2\":[false],\"Nesting too deep.\":false,\".\":null,\"xx\":{}}");
      MockFile mockFile0 = new MockFile(file0, "org.json.JSONPointer$Builder");
      // Undeclared exception!
      jSONObject0.write((Writer) mockFileWriter0, 2226, 60);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "-99");
      jSONObject0.optInt("-99", 128);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("", bigInteger0);
      JSONObject.wrap(jSONObject0);
      JSONObject.stringToValue("");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (double) 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ot.$$;BlY";
      MockFile mockFile0 = new MockFile("Ot.$$;BlY", "9iOy$_`(3_a~^78A");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toMap();
      try { 
        JSONObject.stringToNumber("JSON does not allow non-finite numbers.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [JSON does not allow non-finite numbers.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Character character0 = new Character('g');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string0 = "";
      int int0 = 34;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(34);
      int int1 = 98;
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"getChannel\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"getDeclaringClass\":null,\"number\":false}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"getChannel\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"getDeclaringClass\":null,\"number\":false}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.put("{\"getChannel\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"getDeclaringClass\":null,\"number\":false}", (Object) pipedOutputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "{\"getChannel\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"getDeclaringClass\":null,\"number\":false}", 0, 0);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject1.optEnum(class0, "{\"getChannel\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"getDeclaringClass\":null,\"number\":false}");
      assertEquals(7, jSONObject0.length());
      
      JSONObject jSONObject2 = new JSONObject("{\"getChannel\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"getDeclaringClass\":null,\"number\":false}");
      jSONObject2.optInt("{\"getChannel\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"getDeclaringClass\":null,\"number\":false}", 0);
      StringWriter stringWriter0 = new StringWriter(0);
      Byte byte0 = new Byte((byte) (-65));
      JSONObject.numberToString(byte0);
      jSONObject2.opt("{\"getChannel\":\"Apple\",\"size\":\"Large\",\"color\":true,\"value\":true,\"getDeclaringClass\":null,\"number\":false}");
      assertEquals(6, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"has\",\"size\":\"Large\",\"get\":\"Red\",\"value\":true,\"getDeclaringClass\":99,\"number\":false}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"has\",\"size\":\"Large\",\"get\":\"Red\",\"value\":true,\"getDeclaringClass\":99,\"number\":false}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.put("{\"fruit\":\"has\",\"size\":\"Large\",\"get\":\"Red\",\"value\":true,\"getDeclaringClass\":99,\"number\":false}", (Object) pipedOutputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "{\"fruit\":\"has\",\"size\":\"Large\",\"get\":\"Red\",\"value\":true,\"getDeclaringClass\":99,\"number\":false}", 0, 0);
      jSONObject0.optInt("getDeclaringClass");
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.INSCRIPTIONAL_PARTHIAN;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      jSONObject1.optEnum(class0, "isE", character_UnicodeScript0);
      try { 
        jSONObject1.getFloat("b=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000053] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.toString(6);
      MockFile mockFile0 = new MockFile("falase");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write("YJH!$b%xDx");
      mockFile0.mkdirs();
      mockFileWriter0.append('P');
      JSONObject jSONObject1 = jSONObject0.accumulate("falase", mockFileInputStream0);
      jSONObject1.optBoolean("falase", true);
      jSONObject0.optInt("7=s*^},b");
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.CYPRIOT;
      jSONObject1.optEnum(class0, "falase", character_UnicodeScript0);
      assertEquals(3, jSONObject0.length());
      
      try { 
        jSONObject1.getFloat("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "2cN%`%#wla; tU_i^5";
      MockFile mockFile0 = new MockFile("2cN%`%#wla; tU_i^5", "pointer cannot be null");
      String string1 = "Misplaced array.";
      MockFile mockFile1 = new MockFile("Misplaced array.", "QKaGup<G# nd@.Ot");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject.getNames((Object) "9iOy$_`(3_a~^78A");
      mockFile1.mkdirs();
      File file0 = MockFile.createTempFile("t6Y^a_^4Hy|YX!e[t7", "S[eOutSjaf;RTY");
      mockFile0.renameTo(file0);
      try { 
        JSONObject.stringToNumber("2cN%`%#wla; tU_i^5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2cN%`%#wl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = new Locale("Zn`P*iR/n", "Zn`P*iR/n");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.increment("z6pCoVxW#tl3+");
      jSONObject0.put("javax.", 1469.2099752907939);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "vi;4^6_PG$Q";
      stringArray0[1] = "javax.";
      stringArray0[2] = "javax.";
      stringArray0[3] = "javax.";
      stringArray0[4] = "javax.";
      stringArray0[5] = "javax.";
      JSONObject jSONObject2 = new JSONObject("Zn`P*iR/n", stringArray0);
      jSONObject0.isEmpty();
      jSONObject0.optBoolean("vi;4^6_PG$Q");
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONObject2.accumulate((String) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject1 = new JSONObject(locale0);
      jSONObject0.optBoolean("isshortValue", true);
      String string0 = "V%BCm,a.*";
      JSONObject jSONObject2 = jSONObject0.putOpt("get", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.join("lrOi^jI/");
      LinkedList<SocketFlow.Status> linkedList0 = new LinkedList<SocketFlow.Status>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONObject2.toJSONArray(jSONArray1);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      String string0 = ")<os0$OXB)Y\"tn";
      jSONArray0.join("length");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.put(3636, (double) 3636);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")<os0$OXB)Y\"tn");
      int int0 = 98;
      try { 
        jSONArray0.getJSONObject(98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[98] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("1QcRs1wC>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.optBoolean("\"&IT", true);
      JSONObject jSONObject1 = jSONObject0.putOpt("V%BCm,a.*", "V%BCm,a.*");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.join("V%BCm,a.*");
      jSONObject1.toJSONArray(jSONArray0);
      MockFile mockFile0 = new MockFile("1QcRs1wC>");
      MockFile mockFile1 = new MockFile(mockFile0, "A JSONObject text must begin with '{'");
      mockFile1.getAbsolutePath();
      mockFile0.mkdirs();
      JSONObject.wrap("\"&IT");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optJSONArray("?`&$uB$<@Q");
      jSONObject1.keys();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      jSONObject0.query(jSONPointer0);
      JSONObject jSONObject2 = jSONObject0.put("javax.", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("a JSON pointer should start with '/' or '#/'");
      mockFileWriter0.write(2944);
      jSONObject2.write((Writer) mockFileWriter0);
      MockFileWriter mockFileWriter1 = new MockFileWriter("getreadByte", true);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject(mockFileWriter1, stringArray0);
      JSONObject jSONObject4 = new JSONObject(jSONObject3, stringArray0);
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.BAMUM;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject4.optEnum(class0, "i", character_UnicodeScript0);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "false";
      JSONObject jSONObject1 = jSONObject0.append("false", "false");
      String string1 = "false";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "false";
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.optNumber(" line ", (Number) bigInteger0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      jSONObject1.put("false", false);
      // Undeclared exception!
      try { 
        MockURI.URI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[true],\"\"\":{},\"xx\":-99,\"xxx\":-99}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[true],\"\"\":{},\"xx\":-99,\"xxx\":-99}");
      JSONObject.wrap((Object) null);
      String string0 = "-&m[`Kql&?\"d(DG$jY";
      jSONObject1.optFloat("-&m[`Kql&?\"d(DG$jY", 1231.1642F);
      jSONObject1.put("] could not convert to BigDecimal.", (-1906.478F));
      MockFileWriter mockFileWriter0 = new MockFileWriter("Misplaced key.", false);
      mockFileWriter0.write(319);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject1.write((Writer) pipedWriter0, 725, 319);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.entrySet();
      JSONObject.doubleToString(0);
      int int0 = (-1);
      jSONObject0.optBoolean("", false);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      String string0 = "] is not a Boolean.";
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":7,\" line \":false,\"a\":[],\"b\":{},\"xx\":-99}");
      jSONObject0.append("?yWf", "{\"x\":\"hello\",\"y\":7,\" line \":false,\"a\":[],\"b\":{},\"xx\":-99}");
      MockFile mockFile0 = new MockFile("r>n<;w?x}p%X><%VN");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      mockFileWriter0.write("YJH!$b%xDx");
      mockFile0.mkdirs();
      Writer writer0 = mockFileWriter0.append('=');
      JSONObject.quote("{\"x\":\"hello\",\"y\":7,\" line \":false,\"a\":[],\"b\":{},\"xx\":-99}", writer0);
      JSONTokener jSONTokener0 = new JSONTokener("r>n<;w?x}p%X><%VN");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("d", ">Ceo#GUX");
      mockFile0.setExecutable(true);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.getAbsolutePath();
      mockFile1.mkdirs();
      JSONObject.wrap("/~0z=IE>F;{x2 Jo");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\"");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("d", "");
      mockFile0.setExecutable(false);
      MockFile mockFile1 = new MockFile((File) null, ">Ceo#GUX");
      mockFile0.getAbsolutePath();
      mockFile1.mkdirs();
      JSONObject.wrap("/home/apaniche/mitchell/generation-scripts/projects/json/d");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = jSONObject1.optJSONArray("java.");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("1QcRs1wC>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "\"&IT";
      jSONObject0.optBoolean("\"&IT", true);
      String string1 = "V%BCm,a.*";
      jSONObject0.putOpt("V%BCm,a.*", "V%BCm,a.*");
      int int0 = 0;
      jSONObject0.toString(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      // Undeclared exception!
      try { 
        jSONObject1.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("1QcRs1wC>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "\"&IT";
      jSONObject0.optBoolean("\"&IT", true);
      String string1 = "V%BCm,a.*";
      JSONObject jSONObject1 = jSONObject0.putOpt("V%BCm,a.*", "V%BCm,a.*");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.join("V%BCm,a.*");
      jSONObject1.toJSONArray(jSONArray0);
      int int0 = 0;
      jSONObject0.toString(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = jSONObject0.put("", 0.0);
      // Undeclared exception!
      try { 
        jSONObject2.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ot.$$;BlY", "9iOy$_`(3_a~^78A");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1217);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0, stringArray0);
      String[] stringArray1 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{\"getClass\":\"hello\",\"y\":[],\"javax.org.evosuite.runtime.mock.java.io\":\"a string\",\"a\":[{}],\"b\":{}}";
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      JSONObject jSONObject1 = jSONObject0.put("{\"getClass\":\"hello\",\"y\":[],\"javax.org.evosuite.runtime.mock.java.io\":\"a string\",\"a\":[{}],\"b\":{}}", false);
      JSONObject jSONObject2 = jSONObject1.put("?q-BA", true);
      jSONObject2.put("-fgF\"HMUDKgd>\"VX", 8192);
      try { 
        jSONObject1.getDouble("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000023] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = new Locale("Zn`P*iR/n", "Zn`P*iR/n");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("javax.", 1498.1695088);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "vi;4^6_PG$Q";
      stringArray0[1] = "javax.";
      stringArray0[2] = "javax.";
      BigDecimal bigDecimal0 = new BigDecimal((-124));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal1.divideToIntegralValue(bigDecimal0);
      BigDecimal bigDecimal2 = new BigDecimal((-331L));
      bigDecimal0.add(bigDecimal1);
      jSONObject1.optBigDecimal("vi;4^6_PG$Q", bigDecimal0);
      JSONObject.quote("Expected '");
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("false", "false");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"~1\":[],\"b\":{\"x\":-99}}";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"~1\":[],\"b\":{\"x\":-99}}";
      stringArray0[2] = "false";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optDouble("false", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject3.optEnum(class0, "-%lzVS");
      Float float0 = new Float(0.0);
      HashMap<SortOrder, Long> hashMap1 = new HashMap<SortOrder, Long>();
      SortOrder sortOrder0 = SortOrder.UNSORTED;
      Function<SortOrder, Long> function0 = (Function<SortOrder, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(javax.swing.SortOrder.class));
      hashMap1.computeIfAbsent(sortOrder0, function0);
      JSONObject jSONObject4 = jSONObject3.put("gPA", (Map<?, ?>) hashMap1);
      jSONObject0.length();
      jSONObject4.toString(79);
      jSONObject0.increment("-4(@");
      jSONObject0.optBoolean("\"", true);
      int int0 = jSONObject0.length();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("javax.", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("a JSON pointer should start with '/' or '#/'");
      mockFileWriter0.write(2967);
      JSONObject jSONObject2 = new JSONObject(16);
      jSONObject0.optString("Zn`P*iR/n");
      PipedReader pipedReader0 = new PipedReader(16);
      try { 
        jSONObject1.put("a JSON pointer should start with '/' or '#/'", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      String string0 = "isavailable";
      jSONObject0.put("isavailable", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getString("isavailable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      String string0 = "isavailable";
      jSONObject0.put("isavailable", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getString("isavailable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4);
      JSONObject jSONObject1 = jSONObject0.put("toS", 693.9936439629975);
      MockFileWriter mockFileWriter0 = new MockFileWriter("istoString");
      mockFileWriter0.write((-1168));
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0, 19, (-2863));
      Writer writer1 = jSONObject0.write(writer0, (-1055), 1362);
      jSONObject0.write(writer1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((-1741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1741
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4);
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optBigDecimal("ys4N;", bigDecimal0);
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      JSONObject jSONObject4 = new JSONObject(jSONObject2, stringArray0);
      Object object0 = JSONObject.stringToValue("istoString");
      assertEquals("istoString", object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4);
      String string0 = "istoString";
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optBigDecimal("ys4N;", bigDecimal0);
      try { 
        jSONObject0.getString("ulwF4)<dCkQuX^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "-99";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[4] = "XZ:PF";
      double double0 = jSONObject0.optDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.min(bigInteger2);
      JSONObject.quote("-99");
      Number number0 = JSONObject.stringToNumber("-99");
      assertEquals((-99), number0);
      
      Object object0 = JSONObject.wrap(number0);
      assertEquals((-99), object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte byte0 = (byte)123;
      Byte byte1 = new Byte((byte)123);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSONObject jSONObject0 = new JSONObject(byte1);
      String string0 = "M";
      JSONObject jSONObject1 = jSONObject0.append("M", "M");
      try { 
        jSONObject1.getBigDecimal("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte byte0 = (byte)123;
      Byte byte1 = new Byte((byte)123);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONObject jSONObject0 = new JSONObject(byte1);
      JSONObject jSONObject1 = jSONObject0.append("M", "M");
      try { 
        jSONObject1.getBigDecimal("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject1 = new JSONObject(locale0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("javax.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "Stepping back two steps is not supported";
      String string1 = "getfloatValue";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      WebParam.Mode webParam_Mode0 = WebParam.Mode.OUT;
      String string2 = "@-h|h@$7|;>>$~f&";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@-h|h@$7|;>>$~f&", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      JSONObject.wrap(mockPrintWriter0);
      HashMap<WebParam.Mode, JSONObject> hashMap0 = new HashMap<WebParam.Mode, JSONObject>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 5759);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char char0 = 'g';
      Character character0 = new Character('g');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(34);
      jSONObject1.write((Writer) charArrayWriter0, (int) 'g', 34);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char char0 = 'g';
      Character character0 = new Character('g');
      JSONObject jSONObject0 = new JSONObject(character0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string1 = "";
      int int0 = 34;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(34);
      jSONObject1.write((Writer) charArrayWriter0, 98, 34);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((int) (byte)123);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optDouble("P.'QgN+wZ@W,5_L`", (double) (byte)123);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      jSONObject0.optInt("P.'QgN+wZ@W,5_L`");
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger3.min(bigInteger2);
      try { 
        jSONObject0.getBigDecimal("+<^tbY=g|oa!=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"lock\":false,\"number\":false,\".\":null,\"xx\":{}}");
      jSONObject0.names();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"lock\":false,\"number\":false,\".\":null,\"xx\":{}}";
      JSONObject jSONObject1 = new JSONObject("A JSONObject text must end with '}'", stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Object object0 = JSONObject.stringToValue("{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"lock\":false,\"number\":false,\".\":null,\"xx\":{}}");
      jSONObject2.isNull("{\"fruit\":-99,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"lock\":false,\"number\":false,\".\":null,\"xx\":{}}");
      String string0 = jSONObject2.toString(1158);
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte byte0 = (byte)123;
      Byte byte1 = new Byte((byte)123);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSONObject jSONObject0 = new JSONObject(byte1);
      JSONObject jSONObject1 = jSONObject0.append("M", "M");
      try { 
        jSONObject1.getBoolean("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = new Locale("Zn`P*iR/n", "Zn`P*iR/n");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("javax.", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("a JSON pointer should start with '/' or '#/'");
      mockFileWriter0.write(2944);
      jSONObject1.write((Writer) mockFileWriter0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Zn`P*iR/n";
      stringArray0[1] = "javax.";
      stringArray0[2] = "javax.";
      stringArray0[3] = "Zn`P*iR/n";
      stringArray0[4] = "javax.";
      stringArray0[5] = "Zn`P*iR/n";
      stringArray0[6] = "javax.";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = JSONObject.stringToValue("a JSON pointer should start with '/' or '#/'");
      assertEquals("a JSON pointer should start with '/' or '#/'", object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[&[c&>");
      Locale locale0 = new Locale("{\"Expected '\":{},\".\":-99,\"shortValue\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":null}", "{\"Expected '\":{},\".\":-99,\"shortValue\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":null}");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("{\"Expected '\":{},\".\":-99,\"shortValue\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":null}");
      mockFileWriter0.write(16);
      int int0 = 19;
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 19, 19);
      writer0.close();
      try { 
        jSONObject1.write(writer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "true";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[&[c&>");
      Locale locale0 = new Locale("true", "true");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "H-VzK~W.Yj";
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("true");
      mockFileWriter0.write(16);
      int int0 = 19;
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 19, 19);
      jSONObject1.write(writer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSONAray[", false);
      mockFileWriter0.write(725);
      jSONObject1.write((Writer) mockFileWriter0, (-2613), (-2613));
      Writer writer0 = jSONObject1.write((Writer) mockFileWriter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      JSONObject.numberToString(bigInteger1);
      JSONObject.doubleToString((-106L));
      JSONObject.indent(writer0, 1920);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = new Locale("Zn`P*iR/n", "Zn`P*iR/n");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("javax.", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("a JSON pointer should start with '/' or '#/'");
      mockFileWriter0.write(2944);
      JSONObject jSONObject2 = new JSONObject(16);
      jSONObject0.optString("Zn`P*iR/n");
      PipedReader pipedReader0 = new PipedReader(16);
      JSONObject.wrap(jSONObject2);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.toJSONObject((JSONArray) null);
      try { 
        jSONObject2.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject0 = new JSONObject(pipedOutputStream0);
      String string0 = null;
      String string1 = "48R,5D6ykO0w";
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("48R,5D6ykO0w", bigInteger0);
      jSONObject0.has((String) null);
      String string2 = null;
      int int0 = 793;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 793);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Ot.$$;BlY");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("Ot.$$;BlY", bigInteger0);
      JSONObject.wrap(bigInteger1);
      JSONObject.stringToValue("Ot.$$;BlY");
      Integer integer0 = new Integer(12);
      JSONObject.wrap(integer0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      jSONObject0.put("Ot.$$;BlY", (-1.0));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.toString(6);
      MockFile mockFile0 = new MockFile("falase");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write("YJH!$b%xDx");
      mockFile0.mkdirs();
      mockFileWriter0.append('P');
      JSONObject jSONObject1 = jSONObject0.accumulate("falase", mockFileInputStream0);
      jSONObject1.optBoolean("falase", true);
      jSONObject0.optInt("7=s*^},b");
      jSONObject0.increment("javax.");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      File file0 = MockFile.createTempFile("90^0Ec$\"*K8VbD4y],", "9qqimb0{4M");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      mockFileWriter0.write("true");
      MockFile mockFile0 = new MockFile("Duplicate key \"", "true");
      mockFile0.mkdirs();
      mockFileWriter0.write((-502));
      JSONObject jSONObject1 = jSONObject0.accumulate("istryLock", file0);
      boolean boolean0 = new Boolean(true);
      jSONObject1.optInt("getClass");
      try { 
        jSONObject0.increment("istryLock");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000013].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      File file0 = MockFile.createTempFile("90^0Ec$\"*K8VbD4y],", "9qqimb0{4M");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      mockFileWriter0.write("true");
      MockFile mockFile0 = new MockFile("Duplicate key \"", "true");
      mockFile0.mkdirs();
      mockFileWriter0.write((-502));
      JSONObject jSONObject1 = jSONObject0.accumulate("istryLock", file0);
      Boolean boolean0 = new Boolean(true);
      jSONObject1.optInt("getClass");
      try { 
        jSONObject0.increment("istryLock");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000013].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`c*iR/n", false);
      jSONObject1.optLong("Zn`c*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSONAray[", false);
      mockFileWriter0.write(725);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject1.keySet();
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = new Locale("Zn`P*iR/n", "Zn`P*iR/n");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("javax.", 1498.1695088);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "vi;4^6_PG$Q";
      stringArray0[1] = "javax.";
      stringArray0[2] = "javax.";
      stringArray0[3] = "javax.";
      stringArray0[4] = "javax.";
      stringArray0[5] = "javax.";
      JSONObject jSONObject2 = new JSONObject("Zn`P*iR/n", stringArray0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.toString((-20));
      MockFile mockFile0 = new MockFile("falase");
      MockFileWriter mockFileWriter0 = new MockFileWriter("java.io.StringWriter@0000000013", false);
      mockFileWriter0.write("YJH!$b%xDx");
      mockFile0.mkdirs();
      mockFileWriter0.append('P');
      JSONObject jSONObject1 = jSONObject0.accumulate("falase", mockFileInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.optInt("7=s*^},b");
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.CYPRIOT;
      jSONObject1.optEnum(class0, "falase", character_UnicodeScript0);
      JSONObject.getNames(jSONObject1);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "Nesting too deep.";
      JSONObject.isDecimalNotation("Nesting too deep.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Nesting too deep.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "2cN%`%#wla; tU_i^5";
      MockFile mockFile0 = new MockFile("2cN%`%#wla; tU_i^5", "pointer cannot be null");
      String string1 = "9iOy$_`\\(3_a~^78A\\";
      String string2 = "Misplaced array.";
      MockFile mockFile1 = new MockFile("Misplaced array.", "QKaGup<G# nd@.Ot");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject.getNames((Object) "9iOy$_`(3_a~^78A");
      mockFile1.mkdirs();
      MockFile.createTempFile("t6Y^a_^4Hy|YX!e[t7", "S[eOutSjaf;RTY");
      JSONObject.isDecimalNotation("S[eOutSjaf;RTY");
      try { 
        JSONObject.stringToNumber("2cN%`%#wla; tU_i^5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2cN%`%#wl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      int int0 = 6;
      jSONObject0.toString(6);
      MockFile mockFile0 = new MockFile("falase");
      HashMap<Authenticator.RequestorType, Month> hashMap0 = new HashMap<Authenticator.RequestorType, Month>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      String string0 = "\"\"";
      String string1 = "#OzZHh/uZ";
      jSONObject0.optEnum(class0, "#OzZHh/uZ");
      int int1 = 1288;
      String string2 = "1K'7\"6W~Tz";
      jSONObject1.optInt("1K'7\"6W~Tz", (-1166));
      String string3 = "-mif<>6dw?']]CUnW\"";
      Locale locale0 = new Locale("aal8qp&8K3+0tYJ:39", "1K'7\"6W~Tz", "-mif<>6dw?']]CUnW\"");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("1K'7\"6W~Tz", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name 1K'7\"6W~Tz, locale aal8qp&8k3+0tyj:39_1K'7\"6W~TZ_-mif<>6dw?']]CUnW\"
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      Long long0 = new Long((-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject1.getBigInteger("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = new Locale("Zn`P*iR/n", "Zn`P*iR/n");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("javax.", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("a JSON pointer should start with '/' or '#/'");
      mockFileWriter0.write(2944);
      JSONObject jSONObject2 = new JSONObject(16);
      jSONObject0.optString("Zn`P*iR/n");
      PipedReader pipedReader0 = new PipedReader(16);
      JSONObject.wrap(pipedReader0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.toJSONObject((JSONArray) null);
      try { 
        jSONObject0.getJSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = new Long((-872L));
      String string0 = "<;b,'a_<i";
      String string1 = "sF_8M J9]\\45'2";
      JSONObject.numberToString(long0);
      HashMap<PushbackInputStream, BufferedOutputStream> hashMap0 = new HashMap<PushbackInputStream, BufferedOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 98, 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "";
      char char0 = 'x';
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(91);
      jSONObject0.write((Writer) charArrayWriter0, (-1843), 128);
      try { 
        jSONObject0.getJSONObject("#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject0 = new JSONObject(pipedOutputStream0);
      String string0 = null;
      String string1 = "48R,5D6ykO0w";
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("48R,5D6ykO0w", bigInteger0);
      jSONObject0.has((String) null);
      String string2 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 793);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Ot.$$;BlY");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("Ot.$$;BlY", bigInteger0);
      JSONObject.wrap(bigInteger1);
      JSONObject.stringToValue("Ot.$$;BlY");
      jSONObject0.put("Ot.$$;BlY", (double) 0L);
      JSONObject jSONObject1 = jSONObject0.increment("vPcdrCD#vm*{d");
      try { 
        jSONObject1.getString("GPTAX6y@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject0 = new JSONObject(pipedOutputStream0);
      String string0 = null;
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("48R,5D6ykO0w", bigInteger0);
      jSONObject0.has((String) null);
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 793);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(123);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("size", bigInteger0);
      try { 
        jSONObject0.getBigInteger("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"a string\",\"getisOpen\":{},\"value\":true,\"isstripExtensions\":true,\".\":null}");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{\"fruit\":\"a string\",\"getisOpen\":{},\"value\":true,\"isstripExtensions\":true,\".\":null}");
      JSONObject jSONObject1 = jSONArray0.toJSONObject(jSONArray0);
      assertEquals(5, jSONObject1.length());
      
      JSONObject jSONObject2 = new JSONObject();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.toMap();
      Number number0 = JSONObject.stringToNumber("7");
      assertEquals(7, number0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "-99";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = jSONObject1.optDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = jSONObject1.optLong("XZ:PF");
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.min(bigInteger2);
      JSONObject.quote("-99");
      Number number0 = JSONObject.stringToNumber("-99");
      assertEquals((-99), number0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"javax.\":true,\"value2\":[],\"number\":false,\".\":null,\"xx\":{}}");
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      String string0 = "org.json.JSONPointer$Builder";
      String string1 = "javax.";
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "org.json.JSONPointer$Builder");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.entrySet();
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = new JSONObject(363);
      jSONObject0.optInt((String) null);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zn`P*iR/n", false);
      jSONObject0.optNumber("Zn`P*iR/n", (Number) null);
      Long long0 = new Long((-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.toJSONObject((JSONArray) null);
      try { 
        jSONObject0.getJSONObject("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "{fruit\":\"a string\",\"getisOpen\":{},\"value\":true,\"lock\":{},\".\":null";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{fruit\":\"a string\",\"getisOpen\":{},\"value\":true,\"lock\":{},\".\":null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 7 [character 8 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<WebParam.Mode, JSONObject> hashMap0 = new HashMap<WebParam.Mode, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wiV#RYG.LU";
      stringArray0[1] = "X1T,+cNPd;94_M|U{k>";
      WebParam.Mode webParam_Mode0 = WebParam.Mode.OUT;
      JSONObject.wrap("X1T,+cNPd;94_M|U{k>");
      hashMap0.put(webParam_Mode0, jSONObject0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONObject jSONObject1 = new JSONObject((Object) "wiV#RYG.LU");
      String string0 = "hC7I";
      // Undeclared exception!
      try { 
        jSONObject1.query("hC7I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optLong("Ot.$$;BlY");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ot.$$;BlY";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject((Object) "7=s*^},b");
      jSONObject2.optInt("Stepping back two steps is not supported");
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.LATIN;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, (String) null, character_UnicodeScript0);
      assertEquals(Character.UnicodeScript.LATIN, character_UnicodeScript1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Locale locale0 = Locale.CANADA_FRENCH;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = JSONObject.stringToValue("isOpen");
      assertEquals("isOpen", object0);
      
      dataInputStream0.reset();
      int int0 = jSONObject1.optInt("ent", (int) (byte)32);
      assertEquals(32, int0);
      
      boolean boolean0 = jSONObject0.has("Null pointer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("jZ0&.e");
      jSONObject0.entrySet();
      JSONObject.testValidity(jSONObject0);
      jSONObject0.remove("jZ0&.e");
      HashMap<WebParam.Mode, JSONObject> hashMap0 = new HashMap<WebParam.Mode, JSONObject>();
      WebParam.Mode webParam_Mode0 = WebParam.Mode.OUT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(92);
      JSONObject jSONObject1 = new JSONObject(integer0);
      hashMap0.put(webParam_Mode0, jSONObject1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ")%JHUqKgfC";
      stringArray0[1] = ")%JHUqKgfC";
      stringArray0[2] = "jZ0&.e";
      stringArray0[3] = "jZ0&.e";
      stringArray0[4] = "ishashCode";
      stringArray0[5] = "jZ0&.e";
      stringArray0[6] = ")%JHUqKgfC";
      stringArray0[7] = "!>7D{5";
      JSONObject jSONObject2 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject2.put(")%JHUqKgfC", (-1193.0776404));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      
      boolean boolean0 = jSONObject1.has("jZ0&.e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = new Locale("Zn`P*iR/n", "Zn`P*iR/n");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("javax.", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("a JSON pointer should start with '/' or '#/'");
      mockFileWriter0.write(2944);
      JSONObject jSONObject3 = new JSONObject(16);
      Writer writer0 = jSONObject3.write((Writer) mockFileWriter0, 86, 75);
      Writer writer1 = jSONObject0.write(writer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.min(bigInteger0);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject2.put("] is not a Boolean.", (Collection<?>) linkedList0);
      JSONObject jSONObject4 = new JSONObject(1170);
      JSONObject jSONObject5 = new JSONObject(linkedList0);
      jSONObject5.write(writer1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      JSONObject.numberToString(bigInteger2);
      JSONObject jSONObject6 = jSONObject1.accumulate("java.math.BigInteger@0000000019", linkedList0);
      assertNotSame(jSONObject6, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ot.$$;BlY", "9iOy$_`(3_a~^78A");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      String[] stringArray0 = JSONObject.getNames((Object) mockFileInputStream0);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        JSONObject.quote("Ot.$$;BlY", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "Ot.$$;BlY";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ot.$$;BlY";
      JSONObject jSONObject0 = new JSONObject("Stepping back two steps is not supported", stringArray0);
      jSONObject0.optBoolean("}");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getNumber("Ot.$$;BlY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<BufferedInputStream, DayOfWeek> hashMap0 = new HashMap<BufferedInputStream, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "ww|";
      jSONObject0.optBoolean("ww|");
      try { 
        jSONObject0.getBigDecimal("ww|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.toString(6);
      MockFile mockFile0 = new MockFile("falase");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write("YJH!$b%xDx");
      mockFile0.mkdirs();
      mockFileWriter0.write((-502));
      Writer writer0 = mockFileWriter0.append('P');
      JSONObject jSONObject1 = jSONObject0.accumulate("falase", mockFileInputStream0);
      jSONObject1.optBoolean("] is not a JSONArray.", false);
      jSONObject1.optInt("falase");
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.CYPRIOT;
      jSONObject0.optEnum(class0, "] is not a JSONArray.", character_UnicodeScript0);
      JSONObject.indent(mockFileWriter0, 101);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "{\"x\":\"hello\",\"org.json.JSONException\":7,\"z\":false,\"a\":[],\"b\":{},\"xx\":-99}";
      jSONObject0.append("{\"x\":\"hello\",\"org.json.JSONException\":7,\"z\":false,\"a\":[],\"b\":{},\"xx\":-99}", "{\"x\":\"hello\",\"org.json.JSONException\":7,\"z\":false,\"a\":[],\"b\":{},\"xx\":-99}");
      MockFile mockFile0 = new MockFile("{\"x\":\"hello\",\"org.json.JSONException\":7,\"z\":false,\"a\":[],\"b\":{},\"xx\":-99}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write("YJH!$b%xDx");
      Writer writer0 = mockFileWriter0.append('-');
      mockFileWriter0.flush();
      JSONObject.quote("6ANyO6+ZI\u0001l90R0Q%y", writer0);
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":\"hello\",\"org.json.JSONException\":7,\"z\":false,\"a\":[],\"b\":{},\"xx\":-99}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject1.isNull("6ANyO6+ZI\u0001l90R0Q%y");
      Float float0 = new Float(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optNumber((String) null, (Number) bigInteger0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{\"x\":\"hello\",\"org.json.JSONException\":7,\"z\":false,\"a\":[],\"b\":{},\"xx\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      MockFileWriter mockFileWriter0 = new MockFileWriter(">Ceo#GUX", true);
      mockFileWriter0.write("d");
      MockFile mockFile0 = new MockFile("d", ">Ceo#GUX");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.mkdirs();
      mockFileWriter0.append('x');
      JSONObject jSONObject1 = jSONObject0.accumulate("", ">Ceo#GUX");
      jSONObject1.optBoolean("", true);
      JSONObject jSONObject2 = new JSONObject(363);
      jSONObject2.optInt("A JSONObject text must end with '}'");
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.CYPRIOT;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject2.optEnum(class0, "d", character_UnicodeScript0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.isNull("?yWf");
      jSONObject0.entrySet();
      MockFileWriter mockFileWriter0 = new MockFileWriter(">Ceo#GUX", true);
      mockFileWriter0.write("d");
      MockFile mockFile0 = new MockFile("d", ">Ceo#GUX");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.mkdirs();
      JSONObject jSONObject1 = jSONObject0.accumulate("", ">Ceo#GUX");
      jSONObject1.optBoolean("", true);
      JSONObject jSONObject2 = new JSONObject(363);
      jSONObject2.optInt("A JSONObject text must end with '}'");
      try { 
        jSONObject1.getJSONObject("ZS#JUAA2/oS-M=Znyn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optLong("Ot.$$;BlY");
      File file0 = MockFile.createTempFile("Ot.$$;BlY", "Ot.$$;BlY", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      mockFileWriter0.write(34);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 34, 34);
      Writer writer1 = jSONObject0.write(writer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.xor(bigInteger1);
      bigInteger0.min(bigInteger0);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("Ot.$$;BlY", (Collection<?>) linkedList0);
      jSONObject1.write(writer1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ot.$$;BlY";
      stringArray0[1] = "Ot.$$;BlY";
      stringArray0[2] = "Ot.$$;BlY";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      JSONObject.stringToValue("mEV`{0`pE");
      jSONObject0.optString("Ot.$$;BlY");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Long long0 = new Long((-872L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<;b,'a_<i";
      stringArray0[1] = "";
      stringArray0[2] = "NR$'0Sq,FDl<l-?R";
      stringArray0[3] = "sF_8M J9]%'2";
      stringArray0[4] = "Stepping back two steps is not supported";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject.numberToString(long0);
      jSONObject0.opt("w<^3alA:&u");
      Class<Formatter.BigDecimalLayoutForm> class0 = Formatter.BigDecimalLayoutForm.class;
      try { 
        jSONObject0.getEnum(class0, "w<^3alA:&u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not an enum of type java.io.StringWriter@0000000004.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ot.$$;BlY", "Ot.$$;BlY", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      mockFileWriter0.write(34);
      mockFileWriter0.flush();
      JSONObject.quote("Ot.$$;BlY", (Writer) mockFileWriter0);
      Object object0 = JSONObject.stringToValue("0");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\".\":null,\"xx\":{}}";
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\".\":null,\"xx\":{}}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\".\":null,\"xx\":{}}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject2 = jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\".\":null,\"xx\":{}}", (Object) pipedOutputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int int0 = 0;
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\".\":null,\"xx\":{}}", 0, 0);
      charArrayWriter1.append('!');
      try { 
        jSONObject2.getInt("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false,\".\":null,\"xx\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000074] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[&[c&>");
      Locale locale0 = new Locale("{\"Expected '\":{},\"size\":true,\"color\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":{}}", "{\"Expected '\":{},\"size\":true,\"color\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":{}}");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("H-VzK~W.Yj", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("{\"Expected '\":{},\"size\":true,\"color\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":{}}");
      mockFileWriter0.write(16);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 19, 19);
      jSONObject1.write(writer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject0.put("0", (Collection<?>) linkedList0);
      JSONObject jSONObject2 = new JSONObject(19);
      jSONObject2.write((Writer) mockFileWriter0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      String string0 = JSONObject.numberToString(bigInteger2);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      long long0 = jSONObject0.optLong("Ot.$$;BlY");
      assertEquals(0L, long0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ot.$$;BlY";
      JSONObject jSONObject1 = new JSONObject("Stepping back two steps is not supported", stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Object object0 = JSONObject.stringToValue(")Nm]^LbEZD");
      assertEquals(")Nm]^LbEZD", object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("false", "false");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optDouble("false", 15.085288766286837);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject2.optEnum(class0, "-%lzVS");
      Float float0 = new Float(15.085288766286837);
      jSONObject1.put("false", 3908.5278F);
      jSONObject0.toJSONArray((JSONArray) null);
      Float float1 = new Float((double) 0L);
      jSONObject0.optNumber("mbW}AZu", (Number) float1);
      jSONObject0.put("false", 564.582F);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("false", "false");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"~1\":[],\"b\":{\"x\":-99}}";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"~1\":[],\"b\":{\"x\":-99}}";
      stringArray0[2] = "false";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optDouble("false", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject3.optEnum(class0, "-%lzVS");
      Float float0 = new Float(0.0);
      jSONObject2.optNumber("size", (Number) float0);
      jSONObject1.put("{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"~1\":[],\"b\":{\"x\":-99}}", 3908.5278F);
      jSONObject0.toJSONArray((JSONArray) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("'@Thx| 2QBF[");
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, "mbW}AZu", 255, 255);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4);
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "javax.";
      String string1 = "KG|";
      jSONObject1.put("KG|", 1498.1695088);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject1.getEnum(class0, "javax.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optLong("Ot.$$;BlY");
      File file0 = MockFile.createTempFile("Ot.$$;BlY", "Ot.$$;BlY", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      mockFileWriter0.write(34);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 34, 34);
      Writer writer1 = jSONObject0.write(writer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.min(bigInteger0);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("Ot.$$;BlY", (Collection<?>) linkedList0);
      jSONObject1.write(writer1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      JSONObject.numberToString(bigInteger1);
      jSONObject0.opt("java.math.BigInteger@0000000009");
      Class<Formatter.BigDecimalLayoutForm> class0 = Formatter.BigDecimalLayoutForm.class;
      try { 
        jSONObject1.getEnum(class0, "Ot.$$;BlY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not an enum of type java.io.StringWriter@0000000012.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "false";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{\"x\":\"hello\",\"y\":{},\"javax.org.evosuite.runtime.mock.java.io\":\"a string\",\"a\":[],\"b\":{}}";
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("{\"x\":\"hello\",\"y\":{},\"javax.org.evosuite.runtime.mock.java.io\":\"a string\",\"a\":[],\"b\":{}}", false);
      try { 
        jSONObject1.getNumber("{\"x\":\"hello\",\"y\":{},\"javax.org.evosuite.runtime.mock.java.io\":\"a string\",\"a\":[],\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"javax.\":true,\"value2\":[false],\"Nesting too deep.\":false,\".\":null,\"xx\":{}}";
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":false,\"color\":\"Red\",\"javax.\":true,\"value2\":[false],\"Nesting too deep.\":false,\".\":null,\"xx\":{}}");
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      jSONObject0.put("org.json.JSONPointer$Builder", false);
      try { 
        jSONObject0.getNumber("org.json.JSONPointer$Builder");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000081] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.entrySet();
      jSONObject0.optBoolean("", false);
      JSONObject jSONObject1 = new JSONObject(0);
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject1 = new JSONObject();
      MockFile mockFile0 = new MockFile("2cN%`%#wla; tU_i^5", "pointer cannot be null");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gettryLock");
      MockFile mockFile1 = new MockFile("Misplaced array.", "QKaGup<G# nd@.Ot");
      jSONObject1.accumulate("QKaGup<G# nd@.Ot", (Object) null);
      int int0 = jSONObject1.optInt("pointer cannot be null");
      assertEquals(0, int0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      long long0 = jSONObject0.optLong("Ot.$$;BlY");
      assertEquals(0L, long0);
      
      File file0 = MockFile.createTempFile("Ot.$$;BlY", "Ot.$$;BlY", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      mockFileWriter0.write("YJH!$b%xDx");
      file0.mkdirs();
      mockFileWriter0.append('E');
      JSONObject jSONObject1 = jSONObject0.accumulate("YJH!$b%xDx", (Object) null);
      boolean boolean0 = jSONObject1.optBoolean("byt", true);
      assertTrue(boolean0);
      
      int int0 = jSONObject0.optInt("/");
      assertEquals(0, int0);
      
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.THAANA;
      jSONObject0.optEnum(class0, "Expected a ',' or ']'", character_UnicodeScript0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      String string0 = jSONObject0.toString(6);
      MockFile mockFile0 = new MockFile("falase");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write(3469);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 34, 6);
      Writer writer1 = jSONObject0.write(writer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject0.put("", (Collection<?>) linkedList0);
      jSONObject0.write(writer1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      String string1 = JSONObject.numberToString(bigInteger2);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(set0);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.quote("?t\"|NP");
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "{\"issize\":\"a string\",\"size\":true,\"color\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":{}}";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[&[c&>");
      Locale locale0 = new Locale("{\"issize\":\"a string\",\"size\":true,\"color\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":{}}", "{\"issize\":\"a string\",\"size\":true,\"color\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":{}}");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("H-VzK~W.Yj", 1498.1695088);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2028));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("javax.", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("a JSON pointer should start with '/' or '#/'");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONObject2, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      MockFile mockFile0 = new MockFile("falase");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write("YJH!$b%xDx");
      mockFile0.mkdirs();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.min(bigInteger1);
      JSONObject.quote("YJH!$b%xDx");
      try { 
        JSONObject.stringToNumber("Nesting error.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [Nesting error.] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = false;
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSONArray[", false);
      mockFileWriter0.write(725);
      jSONObject1.write((Writer) mockFileWriter0, (-2613), (-2613));
      jSONObject1.write((Writer) mockFileWriter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      JSONObject.numberToString(bigInteger1);
      try { 
        JSONObject.stringToNumber("{\"fruit\":false,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"\n\":\"1\",\"x\":[]}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [{\"fruit\":false,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"
         // \":\"1\",\"x\":[]}] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optLong("Ot.$$;BlY");
      File file0 = MockFile.createTempFile("Ot.$$;BlY", "Ot.$$;BlY", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      mockFileWriter0.write(34);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 34, 34);
      Writer writer1 = jSONObject0.write(writer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("Ot.$$;BlY", (Collection<?>) linkedList0);
      jSONObject1.write(writer1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      String string0 = JSONObject.numberToString(bigInteger2);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("false", "false");
      String string0 = "v_k:FU+ r]9jwgHz^pN";
      jSONObject0.isNull("v_k:FU+ r]9jwgHz^pN");
      jSONObject0.optFloat("true");
      // Undeclared exception!
      try { 
        jSONObject0.query("h:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject.isDecimalNotation("DsI|Q5QHP]9~a]T%");
      MockFileWriter mockFileWriter0 = new MockFileWriter("B$euWrQ");
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.getString("{\"x\":\"hello\",\"y\":7,\",:]}/\"[{;=#\":true,\"a\":[],\"b\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optLong("Ot.$$;BlY");
      Locale locale0 = new Locale("Ot.$$;BlY", "Ot.$$;BlY", "Ot.$$;BlY");
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("Ot.$$;BlY", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Ot.$$;BlY, locale ot.$$;bly_OT.$$;BLY_Ot.$$;BlY
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject1 = new JSONObject(locale0);
      String string0 = "\\u";
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("org.json.JSONException", bigInteger0);
      try { 
        jSONObject1.getInt(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      String string0 = "\"a string\"";
      try { 
        jSONObject0.getBoolean("\"a string\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject0.optNumber("Zn`P*iR/n", (Number) null);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "B.'QgN+wZ@<[5_L`";
      String string0 = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[\"a string\"],\"true\":{}}";
      JSONObject.getNames((Object) "");
      jSONObject0.put("].", true);
      // Undeclared exception!
      try { 
        MockURI.URI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-860));
      jSONObject0.put("?q-BA", false);
      try { 
        jSONObject0.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Stepping back two steps is not supported";
      JSONObject jSONObject0 = new JSONObject("Stepping back two steps is not supported", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, "Stepping back two steps is not supported");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "false";
      JSONObject jSONObject1 = jSONObject0.append("false", "false");
      String string1 = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}";
      LinkedList<StandardLocation> linkedList0 = new LinkedList<StandardLocation>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      jSONObject1.put("{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}", false);
      // Undeclared exception!
      try { 
        MockURI.URI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99,\"number\":false}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99,\"number\":false}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject2 = jSONObject0.put("{\"fruit\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99,\"number\":false}", (Object) pipedOutputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "{\"fruit\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99,\"number\":false}", 0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject2.accumulate("{\"fruit\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99,\"number\":false}", bigInteger0);
      int int0 = jSONObject1.optInt("] is not a JSONArray.");
      assertEquals(7, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("jZ0&.e", "l");
      try { 
        jSONObject0.get("l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "Ot.$$;BlY";
      jSONObject0.optLong("Ot.$$;BlY");
      File file0 = MockFile.createTempFile("Ot.$$;BlY", "Ot.$$;BlY", (File) null);
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      mockFileWriter0.write(34);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 34, 34);
      jSONObject0.write(writer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      JSONObject.numberToString(bigInteger0);
      try { 
        JSONObject.stringToNumber("org.json.JSONObject");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [org.json.JSONObject] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.toString(6);
      JSONObject jSONObject1 = jSONObject0.accumulate("falase", mockFileInputStream0);
      jSONObject1.optInt("falase");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ot.$$;BlY";
      MockFile mockFile0 = new MockFile("Ot.$$;BlY", "9iOy$_`(3_a~^78A");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject.getNames((Object) mockFileInputStream0);
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.entrySet();
      JSONObject.doubleToString(0);
      jSONObject0.length();
      jSONObject0.toString((-1));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[0] = "JSONObject[";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}";
      stringArray0[2] = "}o?Y]hUK'Iw6heT*Yk&";
      stringArray0[3] = "zX\"Pj1]lY>><I2}";
      stringArray0[4] = "{\"x\":false,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[5] = "";
      stringArray0[6] = "^\"}GwIt#bw";
      stringArray0[7] = "";
      stringArray0[8] = "%s is not an array index";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.valueToString("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile("d", ">Ceo#*UX");
      mockFile0.setExecutable(true);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.getAbsolutePath();
      mockFile1.mkdirs();
      JSONObject.wrap("/~0z=IE>F;{x2 Jo");
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("] not a string.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"a string\",\"getisOpen\":{},\"value\":true,\"lock\":{},\".\":null}");
      JSONObject jSONObject1 = jSONObject0.put("{\"fruit\":\"a string\",\"getisOpen\":{},\"value\":true,\"lock\":{},\".\":null}", false);
      jSONObject0.optNumber("getUnicodeLocaleAttributes", (Number) null);
      jSONObject1.optString(">NI1(3<M[$k");
      JSONObject.wrap(jSONObject1);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Long long0 = new Long((-872L));
      String string0 = "";
      JSONObject.numberToString(long0);
      try { 
        JSONObject.stringToNumber("<;b,'a_<i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [<;b,'a_<i] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFile mockFile0 = new MockFile("d", ">Ceo#GUX");
      mockFile0.setExecutable(true);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.getAbsolutePath();
      mockFile1.mkdirs();
      JSONObject.wrap("/~0z=IE>F;{x2 Jo");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("' and instead saw ''");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("javax.", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("a JSON pointer should start with '/' or '#/'");
      mockFileWriter0.write(2944);
      jSONObject2.write((Writer) mockFileWriter0);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(">", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name >, locale de_DE
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.wrap("Zn`P*iR/n");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[\"a string\"],\"true\":{}}";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      jSONObject0.putOpt("XZ:PF", dataInputStream0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[\"a string\"],\"true\":{}}");
      jSONObject0.optInt("{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[\"a string\"],\"true\":{}}", 128);
      jSONObject1.optJSONObject("P.'QgN+wZ@W,5_L`");
      StringWriter stringWriter0 = new StringWriter(516);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "P.'QgN+wZ@W,5_L`");
      Float float0 = new Float(0.0F);
      JSONObject.writeValue(stringWriter1, float0, 3015, (-690));
      jSONObject0.query("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getInt("h:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}";
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject2 = jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}", (Object) pipedOutputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int int0 = 0;
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}", 0, 0);
      charArrayWriter1.append('!');
      try { 
        jSONObject2.getInt("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000052] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99,\"number\":false}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99,\"number\":false}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject jSONObject2 = jSONObject0.put("{\"fruit\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99,\"number\":false}", (Object) pipedOutputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "{\"fruit\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99,\"number\":false}", 0, 0);
      charArrayWriter1.append('!');
      try { 
        jSONObject2.getInt("{\"fruit\":\"has\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"getDeclaringClass\":-99,\"number\":false}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000053] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      String string0 = null;
      try { 
        jSONObject0.getNumber((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(set0);
      jSONObject0.remove("?yWf");
      JSONObject.writeValue(charArrayWriter0, "", 1516, 70);
      jSONObject0.isNull("?yWf");
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("false", "false");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}";
      stringArray0[2] = "false";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optDouble("false", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject3.optEnum(class0, "-%lzVS");
      Float float0 = new Float(0.0);
      jSONObject2.optNumber("size", (Number) float0);
      jSONObject1.put("{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}", 3908.5278F);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = new Locale("Zn`P*iR/n", "Zn`P*iR/n");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("javax.", 1498.1695088);
      MockFileWriter mockFileWriter0 = new MockFileWriter("a JSON pointer should start with '/' or '#/'");
      mockFileWriter0.write(2944);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "javax.";
      stringArray0[1] = "a JSON pointer should start with '/' or '#/'";
      JSONObject jSONObject2 = new JSONObject("a JSON pointer should start with '/' or '#/'", stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "Ot.$$;BlY";
      MockFile.createTempFile("Ot.$$;BlY", "Ot.$$;BlY", (File) null);
      JSONObject.stringToValue("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Long long0 = new Long((-872L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<;b,'a_<i";
      stringArray0[1] = "";
      stringArray0[2] = "NR$'0Sq,FDl<l-?R";
      stringArray0[3] = "sF_8M J9]%'2";
      stringArray0[4] = "Stepping back two steps is not supported";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = JSONObject.stringToValue("ck");
      assertEquals("ck", object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("?yWf", (Writer) charArrayWriter1);
      assertEquals(7, charArrayWriter1.size());
      assertEquals("x\"?yWf\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      String string0 = null;
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.getISOLanguages();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(stringArray0[0], locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GlY[VAEU+GCw<Hi";
      stringArray0[1] = "K";
      stringArray0[2] = "{\"x\":-99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[3] = "99";
      stringArray0[4] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":true}";
      JSONObject jSONObject0 = new JSONObject(mockFileReader0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      long long0 = jSONObject1.optLong((String) null, (-86L));
      assertEquals((-86L), long0);
      
      double double0 = jSONObject0.optDouble("{\"x\":-99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jSONObject0.optString("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":true}");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Character character0 = new Character('g');
      JSONObject jSONObject0 = new JSONObject(character0);
      MockFile mockFile0 = new MockFile("9iOy$_`(3_a~^78A", "");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject.getNames((Object) mockFileInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("1QcRs1wC>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.optBoolean("\"&IT", true);
      jSONObject0.putOpt("V%BCm,a.*", "V%BCm,a.*");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.join("V%BCm,a.*");
      StringWriter stringWriter0 = new StringWriter(7);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.toMap();
      try { 
        JSONObject.stringToNumber("V%BCm,a.*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [V%BCm,a.*] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Character character0 = Character.valueOf('g');
      JSONObject jSONObject0 = new JSONObject(character0);
      jSONObject0.putOpt("", "");
      String string0 = "";
      int int0 = (-1843);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1843
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("jZ0&.e");
      jSONObject0.entrySet();
      JSONObject.testValidity(jSONObject0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Ot.$$;BlY");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("Ot.$$;BlY", bigInteger0);
      JSONObject.wrap(bigInteger1);
      JSONObject.valueToString(bigInteger1);
      jSONObject0.put("Ot.$$;BlY", (double) 0L);
      assertFalse(jSONObject0.isEmpty());
      
      Object object0 = jSONObject0.remove("Ot.$$;BlY");
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(set0);
      jSONObject0.remove("?yWf");
      jSONObject0.optDouble("JSON does not allow non-finite numbers.", (double) 0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      int int0 = 6;
      jSONObject0.toString(6);
      MockFile mockFile0 = new MockFile("falase");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write("YJH!$b%xDx");
      mockFile0.mkdirs();
      mockFileWriter0.append('P');
      mockFileWriter0.flush();
      JSONObject.quote("", (Writer) mockFileWriter0);
      try { 
        jSONObject0.getBoolean("YJH!$b%xDx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.toString((-20));
      assertEquals(2, jSONObject0.length());
      
      MockFile mockFile0 = new MockFile("falase");
      MockFileWriter mockFileWriter0 = new MockFileWriter("java.io.StringWriter@0000000013", false);
      Object object0 = JSONObject.stringToValue("sF_8M J9]%'2");
      assertEquals("sF_8M J9]%'2", object0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.xor(bigInteger1);
      bigInteger0.min(bigInteger0);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      BigInteger bigInteger2 = BigInteger.ZERO;
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("longValue");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      Integer integer0 = new Integer(93);
      Writer writer0 = JSONObject.writeValue(bufferedWriter0, integer0, 1304, 1764);
      JSONObject.writeValue(writer0, (Object) null, (-5), 1304);
      Object object0 = JSONObject.stringToValue("mEV`{0`pE");
      String string0 = jSONObject0.optString(stringArray0[0]);
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.writeValue(charArrayWriter0, charArrayWriter0, 0, 0);
      String string0 = "\\f";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\f", "\f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("{\"x\":\"hello\",\"a\":5,\"z\":true,\"ad:[],\"b\":{},\"xx\":-99}", "{\"x\":\"hello\",\"a\":5,\"z\":true,\"ad:[],\"b\":{},\"xx\":-99}");
      MockFile mockFile0 = new MockFile("{\"x\":\"hello\",\"a\":5,\"z\":true,\"ad:[],\"b\":{},\"xx\":-99}");
      MockFileWriter mockFileWriter0 = new MockFileWriter("{\"x\":\"hello\",\"a\":5,\"z\":true,\"ad:[],\"b\":{},\"xx\":-99}");
      mockFileWriter0.write("YJH!$b%xDx");
      mockFile0.mkdirs();
      Writer writer0 = mockFileWriter0.append('-');
      mockFileWriter0.flush();
      String string0 = "6ANyO6+ZI\\1l90R0Q%y";
      JSONObject.quote("6ANyO6+ZI\u0001l90R0Q%y", writer0);
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":\"hello\",\"a\":5,\"z\":true,\"ad:[],\"b\":{},\"xx\":-99}");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 37 [character 38 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Long long0 = new Long((-872L));
      Object object0 = JSONObject.stringToValue("ck");
      assertEquals("ck", object0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}";
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.put("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}", (Object) pipedOutputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int int0 = 0;
      int int1 = (-2387);
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":false}", 0, (-2387));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("-99", 128);
      StringWriter stringWriter0 = new StringWriter(516);
      Byte byte0 = new Byte((byte) (-65));
      Object object0 = jSONObject0.opt("\"");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      String string0 = " WZ~#5dQg$a$";
      jSONObject0.optInt(" WZ~#5dQg$a$");
      String string1 = "{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}";
      jSONObject0.optFloat("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":\"a string\",\"number\":\"1\"}", (-2107.9443F));
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(hashMap0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONObject.stringToValue("A JSONObject text must end with '}'");
      jSONObject2.isNull("tryLock");
      jSONObject1.toString(1176);
      jSONObject0.put("java.io.StringWriter@0000000008", true);
      // Undeclared exception!
      try { 
        jSONObject1.optQuery("tryLock");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = true;
      String string0 = "{\"x\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{}}";
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("{\"x\":\"hello\",\"y\":99,\"z\":true,\"a\":[],\"b\":{}}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONObject[";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":null}";
      stringArray0[2] = "}o?Y]hUK'Iw6heT*Yk&";
      stringArray0[3] = "zX\"Pj1]lY>><I2}";
      stringArray0[4] = "{\"x\":false,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[5] = "";
      stringArray0[6] = "^\"}GwIt#bw";
      stringArray0[7] = "";
      stringArray0[8] = "%s is not an array index";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      String string0 = null;
      String string1 = "] could not be converted to BigInteger.";
      MockFile mockFile0 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      JSONObject.getNames((Object) null);
      mockFile0.mkdirs();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "] could not be converted to BigInteger.", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject1 = new JSONObject();
      MockFile mockFile0 = new MockFile("JSONObject[", "JSONObject[");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject.getNames((Object) locale0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject0.optNumber("Zn`P*iR/n", (Number) null);
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      try { 
        jSONObject1.getDouble("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`c*iR/n", false);
      jSONObject1.optLong("Zn`c*iR/n", (-106L));
      jSONObject0.optString((String) null);
      try { 
        jSONObject1.getLong("bomNz:@bv0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(200);
      long long0 = jSONObject0.optLong("utf-8");
      assertEquals(0L, long0);
      
      float float0 = jSONObject0.optFloat("keys");
      assertEquals(Float.NaN, float0, 0.01F);
      
      jSONObject0.length();
      jSONObject0.toMap();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.optQuery(jSONPointer0);
      double double0 = jSONObject0.optDouble("utf-8");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      boolean boolean0 = false;
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      String string1 = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":-99,\"b\":{}}";
      MockFile mockFile0 = new MockFile("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":[]}", "Zn`P*iR/n");
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      JSONObject.getNames((Object) jSONObject0);
      mockFile0.mkdirs();
      mockFile0.renameTo(mockFile1);
      mockFile0.createNewFile();
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "Unable to write JSONObject value for key: ";
      Locale locale0 = Locale.PRC;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Unable to write JSONObject value for key: ", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Unable to write JSONObject value for key: , locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":{},\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONObject.wrap("{\"fruit\":\"Apple\",\"size\":{},\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      String string1 = "[9u&=Ek";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("[9u&=Ek");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1329);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JSONTokener jSONTokener0 = new JSONTokener(sequenceInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}");
      MockFile mockFile0 = new MockFile("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write("YJH!$b%xDx");
      mockFile0.mkdirs();
      Writer writer0 = mockFileWriter0.append('-');
      mockFileWriter0.flush();
      JSONObject.quote("6ANyO6+ZI\u0001l90R0Q%y", writer0);
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      try { 
        jSONObject1.getBoolean("6ANyO6+ZI\u0001l90R0Q%y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000049] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[1] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[2] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[3] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[4] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      stringArray0[5] = "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}";
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      jSONObject0.put("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":{}}}", (-2587.257));
      assertEquals(1, jSONObject0.length());
      assertEquals((-2587.257), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4);
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject1.optBigDecimal("ys4N;", bigDecimal0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject1.optDouble("istoString", 0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.min(bigInteger2);
      JSONObject.quote("istoString");
      try { 
        JSONObject.stringToNumber("]Y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val []Y] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.doubleToString(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("0", set0);
      jSONObject1.optBoolean("0", true);
      jSONObject0.optInt((String) null);
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.CYPRIOT;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      jSONObject1.optEnum(class0, (String) null, character_UnicodeScript0);
      assertEquals(1, set0.size());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.optLong("Ot.$$;BlY");
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.getISOLanguages();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("Ot.$$;BlY", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Ot.$$;BlY, locale fr_CA
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ot.$$;BlY";
      JSONObject jSONObject0 = new JSONObject("Stepping back two steps is not supported", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = JSONObject.stringToValue(")Nm]^LbEZD");
      assertEquals(")Nm]^LbEZD", object0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ot.$$;BlY", "Ot.$$;BlY");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("Ot.$$;BlY");
      jSONObject0.optDouble("q", 0.0);
      try { 
        jSONObject0.getJSONArray("Ot.$$;BlY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("d*'wLpDNxL5PT3I", (Collection<?>) linkedList0);
      jSONObject1.put("$/f@", (-1.0F));
      jSONObject0.optString("P8EMOj8FPBL");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "-99");
      jSONObject0.optInt("-99", 128);
      StringWriter stringWriter0 = new StringWriter(516);
      Byte byte0 = new Byte((byte) (-65));
      JSONObject.numberToString(byte0);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}");
      Float float0 = new Float((-1708.38797253261));
      jSONObject1.optNumber("{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}", (Number) float0);
      jSONObject1.put("].", 3908.5278F);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "{\"fruit\":false,\"size\":false,\"color\":\"Red\",\"value\":true,\"isposition\":false,\"number\":\"1\"}";
      Locale locale0 = new Locale("{\"fruit\":false,\"size\":false,\"color\":\"Red\",\"value\":true,\"isposition\":false,\"number\":\"1\"}", "{\"fruit\":false,\"size\":false,\"color\":\"Red\",\"value\":true,\"isposition\":false,\"number\":\"1\"}");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("{\"fruit\":false,\"size\":false,\"color\":\"Red\",\"value\":true,\"isposition\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      try { 
        jSONObject0.getBoolean("{\"fruit\":\"Apple\",\"size\":\"Large\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "F}@iAIZP?OEZM%A6mm";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("F}@iAIZP?OEZM%A6mm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "{\"fruit\":-99,\"size\":\"Large\",\"color\":\"isintValue\",\"value\":true,\"lock\":{},\"number\":false,\".\":null,\"xx\":{}}";
      JSONObject jSONObject0 = new JSONObject("{\"fruit\":-99,\"size\":\"Large\",\"color\":\"isintValue\",\"value\":true,\"lock\":{},\"number\":false,\".\":null,\"xx\":{}}");
      jSONObject0.names();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "13gk>Vf\\G-|T@7";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("13gk>VfG-|T@7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4884);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "?q-BA";
      try { 
        jSONObject0.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Ot.$$;BlY");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("Ot.$$;BlY", bigInteger0);
      JSONObject.wrap(bigInteger1);
      JSONObject.stringToValue("Ot.$$;BlY");
      jSONObject0.put("Ot.$$;BlY", (double) 0L);
      assertEquals(1, jSONObject0.length());
      
      Object object0 = jSONObject0.remove("Ot.$$;BlY");
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getNumber("{wGoEV )0U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("?q-BA", false);
      try { 
        jSONObject0.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.put("isOpen", false);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject0.put("{\"org.json.JSONException\":\"Apple\",\"size\":false,\"color\":{},\"value\":true,\"value2\":false,\"number\":\"1\"}", (Collection<?>) linkedList0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "?q-BA";
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", true);
      try { 
        jSONObject1.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("{\"fruit\":true,\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("B8dT(Gn:KP6\"BW}Xa]=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3481);
      try { 
        jSONObject0.getInt(")P_^g|/^!*+H1N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}");
      String string0 = "A JSONObject tex must end with'}'";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}", "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}");
      try { 
        jSONObject0.getLong("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":-99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" q[#", 0L);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "aavax.";
      jSONObject0.append("aavax.", "aavax.");
      try { 
        jSONObject0.getLong("aavax.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "jZ0&.e";
      jSONObject0.accumulate("jZ0&.e", "l");
      try { 
        jSONObject0.get("l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[&[c&>");
      Locale locale0 = new Locale("{\"Expected '\":{},\"size\":true,\"color\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":{}}", "{\"Expected '\":{},\"size\":true,\"color\":\"Unable to write JSONObject value for key: \",\"value\":true,\"isposition\":false,\"number\":{}}");
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(set0);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.quote((String) null);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.testValidity((Object) null);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "jZ0&.e";
      jSONObject0.accumulate("jZ0&.e", "");
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("isOpen", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name isOpen, locale fr_CA
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = (-3538);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3538));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3538
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.entrySet();
      LinkedList<WebParam.Mode> linkedList0 = new LinkedList<WebParam.Mode>();
      LinkedList<Character.UnicodeScript> linkedList1 = new LinkedList<Character.UnicodeScript>();
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = (-1929);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1929
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
