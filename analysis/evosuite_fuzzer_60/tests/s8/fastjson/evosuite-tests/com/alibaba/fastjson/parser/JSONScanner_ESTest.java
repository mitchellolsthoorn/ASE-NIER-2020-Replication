/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 09:20:55 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import java.math.BigDecimal;
import java.time.chrono.ChronoLocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextToken(1);
      long[] longArray0 = new long[6];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 7, 0);
      jSONScanner0.matchField(charArray0);
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Li\"t");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(110);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(1259L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // .
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Li\"t");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(90);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(128);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 1660);
      jSONScanner0.nextToken(1660);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("lemur", 26);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1lemur
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal j\":\"scanTypeName\",\"not support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a string\",\"value2\":true,\"number\":[],\"x\":-99}", 41);
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("10/!YTx:*", 117);
      long long0 = jSONScanner0.scanLong('I');
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken(31186);
      long long0 = jSONScanner0.scanLong('x');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("10/!YTx:*", 1660);
      double double0 = jSONScanner0.scanDouble('k');
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0?r=p", 1436);
      double double0 = jSONScanner0.scanDouble('f');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("10/!YTx:*", 1660);
      int int0 = jSONScanner0.scanInt('w');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 1660);
      jSONScanner0.nextToken(31186);
      int int0 = jSONScanner0.scanInt('a');
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal j\":\"scanTypeName\",\"not support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a string\",\"value2\":true,\"number\":[],\"x\":-99}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,{},[nullfase]]");
      jSONScanner0.nextToken(50900);
      jSONScanner0.seekArrayToItem(31207);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 7, 0);
      jSONScanner0.nextToken(0);
      assertEquals(7, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', '9', '9', '9', 84, 849);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', 'j', 'j', 'p', 84, 849);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', 'F', 'U', 'U', ';', 'e', (-576), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 41);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('\'', 'V', '$');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"!zC\"ZpVL$\":0.}");
      jSONScanner0.nextToken(45380);
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~5KlbkPN^=qb2", (-1658));
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"parseDouble error, field : ", 41);
      jSONScanner0.nextToken(41);
      String string0 = jSONScanner0.numberString();
      assertEquals("\"@typ", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      JSONScanner jSONScanner0 = new JSONScanner("-1>%", 1660);
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uXSyNsc A=[3`V|");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1uXSyNsc A=[3`V|
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":}(w,]jV7sy", 64);
      jSONScanner0.skipObject();
      assertEquals(10, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,{}]", 1660);
      jSONScanner0.nextToken(31186);
      jSONScanner0.skipArray();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      char[] charArray0 = new char[9];
      jSONScanner0.copyTo(1, 0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      char[] charArray0 = new char[4];
      jSONScanner0.arrayCopy(0, charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      char[] charArray0 = jSONScanner0.sub_chars('\u0000', 0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"not support awt class : \":null,\"color\":[],\"value\":\"a string\",\"value2\":-99,\"\"@type\":\"{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"illegal json, \":\"a string\",\"value2\":false,\"number\":\"1\"}\":\"a string\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}\":[]}", 41);
      String string0 = jSONScanner0.subString(154, 97);
      assertEquals("al json, \":\"a string\",\"value2\":false,\"number\":\"1\"}\":\"a string\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")e5-E*4>D;EO:f<");
      String string0 = jSONScanner0.subString(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str", 1660);
      jSONScanner0.nextToken(31186);
      String string0 = jSONScanner0.stringVal();
      assertEquals("unclosed", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~5]KlbkPN^=qb2", (-1658));
      char[] charArray0 = new char[6];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":\"com.alibaba.fastjson.JSONPathException\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}");
      char char0 = jSONScanner0.next();
      assertEquals('@', char0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char char0 = jSONScanner0.next();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("next");
      char char0 = jSONScanner0.next();
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,{},[nullfalse]]");
      jSONScanner0.nextToken(0);
      jSONScanner0.seekArrayToItem(1448);
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ");
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":\"\"@ty9e\":\"{\"x\":\"com.alibaba.fastjson.JSONPathException\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}\"}", 1693);
      int int0 = jSONScanner0.indexOf(']', 24);
      assertEquals(187, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99]");
      jSONScanner0.nextIdent();
      assertEquals(2, jSONScanner0.token());
      
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((short) (-99), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"illegal json, \":\"a string\",\"value2\":false,\"number\":\"1\"}\":\"a string\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}", 191);
      char char0 = jSONScanner0.charAt(56);
      assertEquals('o', char0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("");
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1{}\":\"he:lo\",\"y\":7,\"z\":{},\"a\":false,\"b\":{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":null}}");
      char[] charArray0 = new char[9];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Li\"t");
      jSONScanner0.nextIdent();
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,{},[],-99]");
      ParserConfig parserConfig0 = new ParserConfig(true);
      String string0 = jSONScanner0.addSymbol(14, 14, 1760, parserConfig0.symbolTable);
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals("[99,{},[],-99]", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      ParserConfig parserConfig0 = new ParserConfig(true);
      String string0 = jSONScanner0.addSymbol(0, 0, (-1), parserConfig0.symbolTable);
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":true,\"a\":[],\"b\":null}", (-7279));
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-171), (-7279));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99", 1660);
      jSONScanner0.nextToken(31186);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('Z', 'Z', 'Z', 'Z', 'Z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"not support awt class : \":null,\"color\":[],\"value\":\"a string\",\"value2\":-99,\"\"@type\":\"{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"illegal json, \":\"a string\",\"value2\":false,\"number\":\"1\"}\":\"a string\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}\":[]}", 41);
      jSONScanner0.nextToken(2311);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3K7?4X<@mv'C=-6EK0", (-528));
      jSONScanner0.bp = (-1215);
      // Undeclared exception!
      try { 
        jSONScanner0.scanISO8601DateIfMatch(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jg@x/m<T MBL3", 45);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      char[] charArray0 = new char[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":true,\"a\":[],\"b\":null}", (-7279));
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{\"\"@type\":\"{\"[]\":-99,\"com.alibaba.fastjson.parser.JSONScanner\":-99}\":\"a string\"},-99]");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,99,true]", 1660);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")e5-E*4>D;EO:f<");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 1660);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":{}}", (-1683));
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{},{\"([C)F\":99},true]");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"-99]");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,{\"\"@type\":\"\"@type\":\"{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"illegal json, \":\"a string\",\"value2\":false,\"number\":\"1\"}\":\"a string\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}\":[]}]", 1660);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(0, 12, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"com.alibaba.fastjson.parser.JSONScanner\":99,\"()\":7,\"a\":{},\"b\":null}");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1458));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}\":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, (-3774), charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 1660);
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":99,\"[j6s^Yhp)\":{}}");
      jSONScanner0.nextToken(31186);
      jSONScanner0.nextToken(1994);
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,null,[]]");
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, (char[]) null, 31186, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":\"\"@type\":\"{\"x\":\"com.alibaba.fastjson.JSONPathException\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}\"}", 1660);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, charArray0, 32, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner", 67);
      SymbolTable symbolTable0 = new SymbolTable(1733);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(1255, 83, 92, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"illegal j\":\"scanTypeName\",\"size\":-99,\"color\":\"Red\",\"value\":\"a string\",\"value2\":-99,\"number\":[]}", 45380);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(45380, (-1534), (-3858), parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 100000, 417);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 48, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, (-1153));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":}(w,]jV7sy", 64);
      jSONScanner0.skipArray(false);
      assertEquals('V', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal j\":\"scanTypeName\",\"not support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a string\",\"value2\":true,\"number\":[],\"x\":-99}", 41);
      jSONScanner0.nextToken((-1));
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2{\"illegal j\":\"scanTypeName\",\"not support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a string\",\"value2\":true,\"number\":[],\"x\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 4993);
      jSONScanner0.bp = 65279;
      // Undeclared exception!
      jSONScanner0.skipObject(false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,[{\"ulltrue\":99}],[null]]");
      jSONScanner0.nextToken(128);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2[99,[{\"ulltrue\":99}],[null]]
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("f:4u%mv[E", 1693);
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1f:4u%mv[E
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,{},-99,-99]");
      jSONScanner0.nextToken(31179);
      jSONScanner0.info();
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.nextIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":true,\"a\":[],\"b\":null}", (-7279));
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-7279), (-5));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = JSONScanner.charArrayCompare("com.alibaba.fastjson.serializer.AppendableSerializer", 16, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare(" `(t)", (-2), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("jQm.k+b-C9BLo)fBK", (-2262), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"a string\",\"illegal json, \":\"a string\",\"value2\":false,\"number\":\"1\"}\":\"a string\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}", 191);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q3Ia=Dk4E4)z4/Fun8");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("q3Ia=Dk4E4)z4/Fun8");
      jSONScanner0.scanTypeName(defaultJSONParser0.symbolTable);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('q', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":[],\"W+FJ-(nI=\":\"a string\"}");
      jSONScanner0.nextToken(31186);
      assertEquals(12, jSONScanner0.token());
      
      long[] longArray0 = new long[6];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal j\":\"scanTypeName\",\"not support awt class : \":null,\"color\":[-99],\"value\":-99,\"\"@type\":\"{\"x\":\"com.alibaba.fastjson.JSONPathException\",\"y\":7,\"com.alibaba.fastjson.serializer.SimpleDateFormatSerializer\":false,\"a\":[null],\"b\":\"a string\"}\":-99,\"can not cast to char, value : \":[],\"x\":-99}");
      jSONScanner0.nextToken(48);
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":[],\"cause\":-99}");
      jSONScanner0.nextToken(31186);
      long[] longArray0 = new long[5];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":99}");
      jSONScanner0.nextToken(31186);
      long[] longArray0 = new long[6];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[char\":1.0E7,\"can not cast to int, value : \":true}");
      jSONScanner0.nextToken(0);
      long[] longArray0 = new long[6];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"tQpe not match error\":true,\"a\":-99^\"b\":null}");
      jSONScanner0.nextToken((-1));
      long[] longArray0 = new long[8];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"true\":65279}", 1660);
      jSONScanner0.nextToken(31186);
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 3, line 1, column 4{\"\"@type\":\"true\":65279}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,true]");
      jSONScanner0.nextToken(31186);
      jSONScanner0.scanLong('a');
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a{},[\"a string\"]]");
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":[]}");
      jSONScanner0.nextToken(31186);
      jSONScanner0.seekObjectToField((-1190L), false);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal j\":\"scanTypeName\",\"not support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a string\",\"value2\":true,\"number\":[],\"x\":-99}", 41);
      jSONScanner0.nextToken((-959));
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-1934L), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 73, line 1, column 74{\"illegal j\":\"scanTypeName\",\"not support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a string\",\"value2\":true,\"number\":[],\"x\":-99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"list is null.\":NaN}");
      jSONScanner0.nextToken(114);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":{}}");
      jSONScanner0.nextToken(31186);
      jSONScanner0.seekObjectToField((-1190L), false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull\":true,\"\":{},\"[]\":99}");
      jSONScanner0.nextToken(31186);
      int int0 = jSONScanner0.seekObjectToField((-254670111376247151L), true);
      assertEquals(12, jSONScanner0.token());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":false,\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":true,\"a\":[],\"b\":99}", (-7279));
      jSONScanner0.nextToken(65279);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-4164L), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 25, line 1, column 26{\"x\":\"hello\",\"y\":false,\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":true,\"a\":[],\"b\":99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":-99,\"index must > 0, but \":false}");
      jSONScanner0.nextToken(31186);
      int int0 = jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals(39, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":null}");
      jSONScanner0.nextToken(31186);
      int int0 = jSONScanner0.seekObjectToField((-1190L), false);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":true}");
      jSONScanner0.nextToken(31186);
      int int0 = jSONScanner0.seekObjectToField((-1190L), false);
      assertEquals(11, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":\"a string\"}");
      jSONScanner0.nextToken(31186);
      jSONScanner0.seekObjectToField(0L, false);
      assertEquals(17, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"tQpe not match error\":true,\"a\":-99^\"b\":null}");
      jSONScanner0.nextToken((-1));
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"(S)Ljava/lang/Short;\":99,\"[char\":1.0E7}");
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull-99\":99}", 1660);
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.seekObjectToField((-2149L), false);
      assertEquals(13, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":true,\"a\":[],\"b\":null}");
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(1660L, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 21, line 1, column 22{\"x\":\"hello\",\"y\":7,\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":true,\"a\":[],\"b\":null}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[char\":1.0E7,\"illegal state. \":-99}");
      jSONScanner0.nextToken(0);
      jSONScanner0.seekObjectToField((long) 0, false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":{},\"com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer\":-99}");
      jSONScanner0.nextToken(31186);
      int int0 = jSONScanner0.seekObjectToField((-1190L), false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal j\":\"scanTypeName\",\"not support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a string\",\"value2\":true,\"number\":[],\"x\":-99}", 41);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField((long) (-2), true);
      assertEquals(']', jSONScanner0.getCurrent());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseRest\":46}", 65279);
      jSONScanner0.nextToken(111);
      int int0 = jSONScanner0.seekObjectToField(5L, false);
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextToken(1);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[{},{\"\":true,\"a s\":99},null,true]");
      jSONScanner0.nextToken(31179);
      jSONScanner0.seekArrayToItem(0);
      jSONScanner0.nextToken(455);
      assertEquals(',', jSONScanner0.getCurrent());
      
      int int0 = jSONScanner0.seekObjectToField((-1010L), true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,{},-99]");
      jSONScanner0.nextToken(31179);
      jSONScanner0.seekArrayToItem(31179);
      jSONScanner0.seekObjectToField((-1190L), false);
      assertEquals(11, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 1135);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 1135, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]");
      jSONScanner0.nextToken(128);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(685);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json.
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,\"a string\",false,[]]");
      jSONScanner0.nextToken(31179);
      jSONScanner0.seekArrayToItem(31179);
      jSONScanner0.seekObjectToField((-190281065685395680L), false);
      assertEquals(24, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,99,\"a string\"]");
      jSONScanner0.nextToken(31179);
      boolean boolean0 = jSONScanner0.seekArrayToItem(31179);
      assertTrue(jSONScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*x", 50);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(1284);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 89);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      jSONScanner0.scanSymbol((SymbolTable) null);
      boolean boolean0 = jSONScanner0.seekArrayToItem(57);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".[j6s^Yhp)SU4g?");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-594));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -594
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,99,\"a strig]");
      jSONScanner0.nextToken(31179);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(31179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"illegal j\":\"scanTypeName\",\"size\":-99,\"color\":\"Red\",\"value\":\"a string\",\"value2\":-99,\"number\":[]}", 41);
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*x", (-964));
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tiC}ndedSpST-}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1tiC}ndedSpST-}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ull{\"illegal json, \":\"pos \"}\":{}}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[[\"a string\"],{}]");
      jSONScanner0.nextToken(128);
      jSONScanner0.seekArrayToItem(31159);
      jSONScanner0.skipObject(false);
      assertEquals(15, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"[]\":[],\"pos \":{}}");
      jSONScanner0.nextToken(0);
      long[] longArray0 = new long[6];
      int int0 = jSONScanner0.seekObjectToField(longArray0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_tiC}_dedSpST-}", (-678));
      jSONScanner0.skipObject(false);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":\"\"@ty9e\":\"{\"x\":\"com.alibaba.fastjson.JSONPathException\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}\"}", 1693);
      jSONScanner0.nextIdent();
      jSONScanner0.skipObject(true);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      jSONScanner0.nextToken(23);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      char[] charArray1 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray1);
      assertEquals(12, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,true,true,true,null]");
      char[] charArray0 = new char[7];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals('[', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,99,false,true]");
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldStringArray((char[]) null, (-2950), (SymbolTable) null);
      assertEquals(',', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"parseRest\":46}", 65279);
      jSONScanner0.scanFieldStringArray((char[]) null, 2019, (SymbolTable) null);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-2950), (SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("parseInt error : ");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[3];
      ParserConfig parserConfig0 = new ParserConfig();
      jSONScanner0.scanFieldStringArray(charArray0, 8, parserConfig0.symbolTable);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,99,false,true]");
      jSONScanner0.scanFieldStringArray((char[]) null, (-2950), (SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("next", (-2281));
      jSONScanner0.scanDate('4');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,-99]");
      jSONScanner0.nextToken(31186);
      jSONScanner0.scanDate('a');
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,99]");
      jSONScanner0.nextToken(31186);
      jSONScanner0.scanLong('j');
      jSONScanner0.scanDate('a');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,\"a string\"]", 1653);
      jSONScanner0.nextToken(0);
      jSONScanner0.scanDate('%');
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0?r=p", 1436);
      jSONScanner0.scanDate('f');
      assertEquals('0', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a{},[\"a string\"]]");
      jSONScanner0.skipArray(false);
      jSONScanner0.scanDate('~');
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-1>%", 1660);
      jSONScanner0.scanDate('a');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":\"\"@ty9e\":\"{\"x\":\"com.alibaba.fastjson.JSONPathException\",\"y\":7,\"z\":false,\"a\":[null],\"b\":{}}\"}", 1693);
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate(']');
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null]");
      jSONScanner0.nextToken(31186);
      long long0 = jSONScanner0.scanLong('a');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("next", (-2281));
      jSONScanner0.scanLong('R');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1e/!Y:*", 'I');
      long long0 = jSONScanner0.scanLong('I');
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,{},true,\"a string\"]");
      jSONScanner0.nextToken((-2710));
      long long0 = jSONScanner0.scanLong('{');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"99\":99}", 1660);
      jSONScanner0.nextToken(0);
      long long0 = jSONScanner0.scanLong('a');
      assertEquals(12, jSONScanner0.token());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null]");
      jSONScanner0.nextToken(31186);
      double double0 = jSONScanner0.scanDouble('+');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nD3#.a6/ku", (-576));
      double double0 = jSONScanner0.scanDouble('F');
      assertEquals(0.0, double0, 0.01);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,\"a string\",{},{}]");
      jSONScanner0.nextToken((-2));
      double double0 = jSONScanner0.scanDouble('{');
      assertEquals(5, jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"99\":99}");
      jSONScanner0.nextToken(0);
      double double0 = jSONScanner0.scanDouble('a');
      assertEquals(12, jSONScanner0.token());
      assertEquals(99.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".[j6s^Yhp)SU4g?");
      double double0 = jSONScanner0.scanDouble('V');
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99]", 1660);
      jSONScanner0.nextToken((-2));
      double double0 = jSONScanner0.scanDouble('3');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null]");
      jSONScanner0.nextToken(31186);
      jSONScanner0.scanInt('a');
      assertEquals(5, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nD3#.a6/ku", (-576));
      int int0 = jSONScanner0.scanInt('F');
      assertEquals(0, int0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,{},[nullfalse]]");
      jSONScanner0.nextToken(128);
      jSONScanner0.scanInt('R');
      assertEquals(5, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0:h|;B><C[TMk");
      int int0 = jSONScanner0.scanInt(',');
      assertEquals(0, int0);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99");
      int int0 = jSONScanner0.scanInt('a');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-99), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"99\":99}", 1660);
      jSONScanner0.nextToken(0);
      int int0 = jSONScanner0.scanInt('8');
      assertEquals(12, jSONScanner0.token());
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal str, ");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.scanInt('O');
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal j\":\"scanTypeName\",\"not support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a string\",\"value2\":true,\"number\":[],\"x\":-99}");
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal j\":\"scanTypeName\",dnot support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a #tri_g\",\"value2\":true,\"number\":[],\"x\":-99}");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal j\":\"scanTypeName\",dnot support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a #tri_g\",\"value2\":true,\"number\":[],\"x\":-99}");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"!zC\"ZpVL$\":0.}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[]", 1660);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[true,-99,false,-99]", 1660);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",null]", 1660);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_tiC}_dedSpST-}", (-678));
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", line ");
      jSONScanner0.nextToken(1);
      char[] charArray0 = new char[3];
      jSONScanner0.scanSymbol(defaultJSONParser0.symbolTable);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("X ?vMgvED}RFPImL");
      jSONScanner0.nextToken(0);
      Class<String> class0 = String.class;
      char[] charArray0 = new char[4];
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 1660);
      char[] charArray0 = new char[2];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[null,{},[nullfalse]]", 1693);
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 1660);
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[-99,99]", 1660);
      char[] charArray0 = new char[0];
      jSONScanner0.nextToken((-2));
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"illegal j\":\"scanTypeName\",\"not support awt class : \":null,\"color\":[],\"\"@type\":\"\":\"a string\",\"value2\":true,\"number\":[],\"x\":-99}");
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1{}\":\"he:lo\",\"y\":7,\"z\":{},\"a\":false,\"b\":{\"\"@type\":\"{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}\":null}}");
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_tiC}_dedSpST-}", (-678));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      jSONScanner0.nextToken((-2185));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", line ");
      jSONScanner0.nextToken(1);
      char[] charArray0 = new char[5];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,false]", 1660);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"\"@type\":\"W+FJ-(nI=US4\",\"()\":-99,\"type not match error\":true,\"a\":-99,\"b\":null}");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner");
      char[] charArray0 = new char[5];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 51);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('5', '5', '5', '5', '5', 'l', 74, 100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('8', '1', ',', '>', 'T', 'n', 13, 13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('5', ' ', '5', '5', '5', 'l', 59, 100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('3', '0', '{', '0', '{', ',', (-9), (-147));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('#', '~', '#', 'j', '[', '[', 2019, 65);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("getFieldType");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('g', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner", 67);
      jSONScanner0.nextToken(67);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jg@x/m<T MBL3", 45);
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,-99,true,null]");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,99,-99,-99,{}]");
      jSONScanner0.nextToken(45380);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j@G1D;,[oBrQR*9vp");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\", line ");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&I+\"-@`&");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('&', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~5]KlbkPN^=qb2", (-1658));
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('~', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Li\"t");
      jSONScanner0.sp = 1201;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-99,\"com.", 1365);
      jSONScanner0.nextToken(1365);
      assertEquals(2, jSONScanner0.token());
      
      String string0 = jSONScanner0.numberString();
      assertEquals("-99", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*x", 50);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(65279, 50);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z%>Rmu~t;FyWoe5Zf'");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('z', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jg@x/m<T MBL3", 45);
      jSONScanner0.hasSpecial = true;
      jSONScanner0.bytesValue();
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("{\"x\":\"a string\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", 3086, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|qjW c");
      char char0 = jSONScanner0.charAt(47);
      assertEquals('\u001A', char0);
      assertEquals('|', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 1592);
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-2), 65279, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":99}", (-7279));
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('R', 'R', 'R', 'R', 'a', '&');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[99,[],true,true]");
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(3337, charArray0, 3337, 3337);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&G6i&fWd");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-1304), 32, (-1304), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", field : ", 1260);
      int int0 = jSONScanner0.indexOf('2', (-27));
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      double double0 = jSONScanner0.scanDouble(':');
      assertEquals(0.0, double0, 0.01);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }
}
