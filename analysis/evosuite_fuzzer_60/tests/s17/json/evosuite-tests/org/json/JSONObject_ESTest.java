/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 11:28:10 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.GraphicsDevice;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.text.Normalizer;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.smartcardio.CardTerminals;
import javax.swing.SortOrder;
import javax.tools.DocumentationTool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<BigInteger, MockFileReader> hashMap0 = new HashMap<BigInteger, MockFileReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("\"a string\"", 0);
      String string0 = jSONObject0.toString((-3060));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue(",*");
      assertEquals(",*", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("//hi/khF4 z.vv`~(o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Writer writer0 = JSONObject.quote("//hi/khF4 z.vv`~(o", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\",:]}/\"[{;=#\":{},\"\n\":true,\"~1\":\"a string\",\"A JSONObject text must begin with '{'\":{\"x\":false},\"x\":99}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 9 [character 10 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("=Ps");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1LwcRBGR", true);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      JSONObject.indent(outputStreamWriter0, (-2225));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":99,\"lon\":\"a string\",\"true\":false,\"~0\":{},\"b\":[\"a string\"]}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("VF~G[rl5q7C$iTgS", 280.8586);
      try { 
        jSONObject0.getBigInteger("VF~G[rl5q7C$iTgS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "~e807E.Yb6Rs^zc_a2");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("~e807E.Yb6Rs^zc_a2", stringArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<StandardProtocolFamily, CharArrayReader> hashMap0 = new HashMap<StandardProtocolFamily, CharArrayReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString(125);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject jSONObject1 = jSONObject0.putOpt("U.[{=", bigInteger0);
      BigInteger bigInteger1 = (BigInteger)jSONObject1.remove("U.[{=");
      assertEquals((short)10, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("by");
      Set<String> set0 = jSONObject0.keySet();
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) set0);
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("{\"x\":99,\"y\":null,\"available\":true,\"a\":[-99],\"false\":{}}", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("/");
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<BigInteger, MockFileReader> hashMap0 = new HashMap<BigInteger, MockFileReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject0.optNumber("C", (Number) bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("U.[{=", 2949.9006605);
      long long0 = jSONObject1.optLong("U.[{=");
      assertEquals(2949L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      int int0 = jSONObject0.optInt(",+qFYGZ'LJgm%", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.put("*E1Q#%>`0zLZ#+|^E ", 99L);
      int int0 = jSONObject0.optInt("*E1Q#%>`0zLZ#+|^E ");
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(pipedWriter0, stringArray0);
      float float0 = jSONObject0.optFloat("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":99}", 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("entrySet", 0.0F);
      float float0 = jSONObject0.optFloat("entrySet");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("{n", (-787.146755725));
      assertEquals((-787.146755725), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"org.json.JSONTokener\":7,\"toCharArray\":true,\"a\":[],\"b\":{\"x\":null,\"has\":false},\"has\":99,\"xxx\":99}");
      jSONObject0.increment("-0");
      double double0 = jSONObject0.optDouble("-0");
      assertEquals(8, jSONObject0.length());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("java.lang.Long@00000000120", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("VF~G[rl5q7C$iTgS", bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<BigInteger, MockFileReader> hashMap0 = new HashMap<BigInteger, MockFileReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(1994.844941818796);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(",+qFYGZ'LJgm%", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Proxy.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Proxy.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((-1472.82915687944));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(":", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"get\",\"y\":null,\"%s is not an array index\":true,\"a\":99,\"isisEmpty\":99,\"Unable to increment [\":99}");
      Locale locale0 = Locale.ITALY;
      Set<Character> set0 = locale0.getExtensionKeys();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Integer@0000000039", (Collection<?>) set0);
      jSONObject1.opt("java.lang.Integer@0000000039");
      assertEquals(7, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("U.[{=", (-1105.1841));
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("99");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("U.[{=", (-1105.1841));
      double double0 = jSONObject0.getDouble("U.[{=");
      assertEquals((-1105.1841), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.WRITE;
      try { 
        JSONObject.writeValue(pipedWriter0, processBuilder_Redirect_Type0, 4, 6);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 0, 114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"org.json.JSONTokener\":7,\"toS\":true,\"a\":[],\"has\":99,\"xxx\":99}");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 844, 844);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("Pj_Ct'|j +K*HC%x(", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale locale0 = Locale.ITALY;
      Set<Character> set0 = locale0.getExtensionKeys();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(36);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (long) 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-784.57F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<BigInteger, MockFileReader> hashMap0 = new HashMap<BigInteger, MockFileReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2421);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 128);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<CardTerminals.State, Locale.Category> hashMap0 = new HashMap<CardTerminals.State, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getString("0lf}TF~x9|fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getFloat("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("Unable to preserve stream position");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBoolean("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Normalizer.Form, StringReader> hashMap0 = new HashMap<Normalizer.Form, StringReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Boolean boolean0 = new Boolean("na");
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":null,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name {\"x\":null,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}, locale fr
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"y\":7,\"z\":true,\"a\":[],\"b\":{\"org.json.JSONObject\":null}}", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = new Float((-929.01465F));
      JSONObject jSONObject0 = new JSONObject(float0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      jSONObject0.write((Writer) charArrayWriter0, 0, 3634);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      HashMap<Formatter.BigDecimalLayoutForm, Object> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.write((Writer) charArrayWriter0, 0, 0);
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.wrap("r]W9S!TTJp");
      assertEquals("r]W9S!TTJp", object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("2aQf&;qU~WxTA<P");
      assertEquals("2aQf&;qU~WxTA<P", object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("eLgOF");
      assertEquals("eLgOF", object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File file0 = MockFile.createTempFile("getgetDisplayScript", "{\"b\":null,\"x\":true,\"getgetDisplayScript\":\"a string\",\"get\":false,\"~0\":true}");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      Writer writer0 = JSONObject.quote("{\"b\":null,\"x\":true,\"getgetDisplayScript\":\"a string\",\"get\":false,\"~0\":true}", (Writer) mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("4:_a?S=Gj%q'PUi", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"org.json.JSONTokener\":7,\"toCharArray\":true,\"a\":[],\"b\":{\"x\":null,\"has\":false},\"has\":99,\"xxx\":99}");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.putOnce("{\"x\":\"hello\",\"org.json.JSONTokener\":7,\"toCharArray\":true,\"a\":[],\"b\":{\"x\":null,\"has\":false},\"has\":99,\"xxx\":99}", bigInteger0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("sho", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Character character0 = Character.valueOf('|');
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, character0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(":8%D`MGu", (Object) "E#a:iAJQ?$8{T");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":false,\"Bad value from toJSONString: \":\"a string\",\"a JSON pointer should start with '/' or '#/'\":true,\"int\":null,\"A JSONObject text must begin with '{'\":\"a string\"}");
      jSONObject0.optString("{\"x\":false,\"Bad value from toJSONString: \":\"a string\",\"a JSON pointer should start with '/' or '#/'\":true,\"int\":null,\"A JSONObject text must begin with '{'\":\"a string\"}", "{\"x\":false,\"Bad value from toJSONString: \":\"a string\",\"a JSON pointer should start with '/' or '#/'\":true,\"int\":null,\"A JSONObject text must begin with '{'\":\"a string\"}");
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":null,VisisEmpfy\":\"a string\",\"true\":falSe,\"~0\":{},\"b\":[]}");
      jSONObject0.optNumber("{\"x\":null,VisisEmpfy\":\"a string\",\"true\":falSe,\"~0\":{},\"b\":[]}", (Number) bigInteger0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("9F$zsk7IV+P'", hashMap0);
      long long0 = jSONObject0.optLong("9F$zsk7IV+P'", (-99L));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-99L), long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.io.StringWriter@0000000001", 0.0);
      long long0 = jSONObject0.optLong("java.io.StringWriter@0000000001", (-99L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(774);
      long long0 = jSONObject0.optLong("isisEmpty", 899L);
      assertEquals(899L, long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("false", hashMap0);
      int int0 = jSONObject1.optInt("false", 123);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(123, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Locale.Category, Window.Type> hashMap0 = new HashMap<Locale.Category, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("U.[{=", (-1105.1841));
      int int0 = jSONObject0.optInt("U.[{=", 116);
      assertEquals((-1105), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("java.lang.Float@00000000070", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("6i#Z\"^qz w|[RA", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<BufferedInputStream, ByteArrayInputStream> hashMap0 = new HashMap<BufferedInputStream, ByteArrayInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("Nesting error.", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("tri", (Map<?, ?>) hashMap0);
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      StandardProtocolFamily standardProtocolFamily1 = jSONObject1.optEnum(class0, "tri", standardProtocolFamily0);
      assertEquals(StandardProtocolFamily.INET, standardProtocolFamily1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<StandardProtocolFamily, CharArrayReader> hashMap0 = new HashMap<StandardProtocolFamily, CharArrayReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      StandardProtocolFamily standardProtocolFamily1 = jSONObject0.optEnum(class0, "{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":99,\"b\":{}}", standardProtocolFamily0);
      assertEquals(StandardProtocolFamily.INET6, standardProtocolFamily1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("keys");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Character.UnicodeScript, Object> hashMap0 = new HashMap<Character.UnicodeScript, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("Unable to read the next character from the stream", 750.734357987);
      boolean boolean0 = jSONObject1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(69);
      try { 
        jSONObject0.get("M!)R|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(47);
      jSONObject0.append("`?7!8%V~4", integer0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float((-929.01465F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("1{.[p=", 2949.9006605);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject1.write((Writer) charArrayWriter0, 55, 55);
      assertEquals(64, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("9F$zsk7IV+P'", hashMap0);
      jSONObject1.toString();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1841.351");
      try { 
        jSONObject0.toString(1633);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, locale_Category0, (-4177984), (-593));
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"get\",\"y\":null,\"%s is not an array index\":true,\"a\":99,\"isisEmpty\":true,\"ke\":99}");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      jSONObject0.write((Writer) mockPrintWriter0, 679, 679);
      assertEquals(8192, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<StandardProtocolFamily, CharArrayReader> hashMap0 = new HashMap<StandardProtocolFamily, CharArrayReader>();
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Object object0 = JSONObject.wrap(locale_Category0);
      assertSame(object0, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(bigInteger0, object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("int", (Map<String, List<String>>) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) list0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[8];
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      LinkedList<SortOrder> linkedList0 = new LinkedList<SortOrder>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(12);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Locale.Category, Window.Type> hashMap0 = new HashMap<Locale.Category, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("4B&uQwF#^jk", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("F&JR,D0YXlm6B|]h;}", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("99");
      assertEquals(99, number0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("1.00");
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(" fsFf?<IU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [ fsFf?<IU] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("-WE]?");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("243:2eu,Es[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<DataOutputStream, JSONObject> hashMap0 = new HashMap<DataOutputStream, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      boolean boolean0 = jSONObject0.similar(roundingMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.quote("C(\u0007B");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal("?BZgNAl$Y6<;/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("", (Writer) stringWriter0);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.lang.Long@00000000120", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<DataOutputStream, JSONObject> hashMap0 = new HashMap<DataOutputStream, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoLowerCase", (-1L));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        jSONObject1.putOnce("istoLowerCase", pipedInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"istoLowerCase\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"x\":\"a string\",\"1\":null,\"available\":true,\"int\":\"a string\",\"A JSONObject text must begin with '{'\":[-99]}", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(58);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "java.lang.Float@00000000180");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("R?bp,C", true);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(101);
      JSONObject jSONObject1 = jSONObject0.put("adL;}", false);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFile mockFile0 = new MockFile("na", "na");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":false,\"Bad value from toJSONString: \":\"a string\",\"a JSON pointer should start with '/' or '#/'\":true,\"int\":null,\"A JSONObject text must begin with '{'\":\"a string\"}");
      jSONObject0.put("{\"x\":false,\"Bad value from toJSONString: \":\"a string\",\"a JSON pointer should start with '/' or '#/'\":true,\"int\":null,\"A JSONObject text must begin with '{'\":\"a string\"}", 8448);
      jSONObject0.optString("{\"x\":false,\"Bad value from toJSONString: \":\"a string\",\"a JSON pointer should start with '/' or '#/'\":true,\"int\":null,\"A JSONObject text must begin with '{'\":\"a string\"}", "{\"x\":false,\"Bad value from toJSONString: \":\"a string\",\"a JSON pointer should start with '/' or '#/'\":true,\"int\":null,\"A JSONObject text must begin with '{'\":\"a string\"}");
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Float float0 = new Float(1199.4728);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("U.[{=", "U.[{=");
      jSONObject1.optNumber("U.[{=", (Number) float0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Locale.Category, Window.Type> hashMap0 = new HashMap<Locale.Category, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("U.[{=", (-1105.1841));
      Number number0 = jSONObject0.optNumber("U.[{=", (Number) null);
      assertNotNull(number0);
      assertEquals((-1105.1841), number0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "2aQf&;qU~WxTA<P");
      long long0 = jSONObject0.optLong("");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{\"x\":99,\".\":99,\"available\":true,\"int\"?null,\"A JSONObject text must begin with '{'\":[null,false]}", (-1104.594101757107));
      long long0 = jSONObject0.optLong("{\"x\":99,\".\":99,\"available\":true,\"int\"?null,\"A JSONObject text must begin with '{'\":[null,false]}");
      assertEquals((-1104L), long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<DataOutputStream, JSONObject> hashMap0 = new HashMap<DataOutputStream, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("true");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<CardTerminals.State, Locale.Category> hashMap0 = new HashMap<CardTerminals.State, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("H?%a%EHlpE+N[ ");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("?BZgNAl$Y6<;/", "?BZgNAl$Y6<;/");
      int int0 = jSONObject0.optInt("?BZgNAl$Y6<;/");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{\"x\":99,\".\":99,\"available\":true,\"int\"?null,\"A JSONObject text must begin with '{'\":[null,false]}", (-1104.594101757107));
      int int0 = jSONObject0.optInt("{\"x\":99,\".\":99,\"available\":true,\"int\"?null,\"A JSONObject text must begin with '{'\":[null,false]}");
      assertEquals((-1104), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("tri", (Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("tri", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<DataOutputStream, JSONObject> hashMap0 = new HashMap<DataOutputStream, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoLowerCase", (-1L));
      float float0 = jSONObject1.optFloat("istoLowerCase", 0.0F);
      assertEquals(2, jSONObject0.length());
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\"x\":null,VisisEmpfy\":\"a string\",\"true\":falSe,\"~0\":{},\"b\":[]}");
      jSONObject0.putOpt("", "");
      double double0 = jSONObject0.optDouble("");
      assertEquals(3, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.putOpt("*E1Q#%>`0zLZ#+|^E ", charArrayWriter0);
      double double0 = jSONObject0.optDouble("*E1Q#%>`0zLZ#+|^E ");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("keys");
      double double0 = jSONObject0.optDouble("keys", (-1.0));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("java.lang.Long@00000000120", (-1105.1841));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("java.lang.Long@00000000120", bigInteger0);
      assertEquals((byte) (-81), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("VF~G[rl5q7C$iTgS", bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("tri", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("tri", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<StandardProtocolFamily, CharArrayReader> hashMap0 = new HashMap<StandardProtocolFamily, CharArrayReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, (-2005));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("{\"x\":\"to\",\"y\":{},\"z\":true,\"a\":\"a string\",\"b\":{}}", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("U.[{=", (-1105.1841));
      BigDecimal bigDecimal0 = new BigDecimal(43);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("U.[{=", bigDecimal0);
      assertEquals((byte) (-81), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("5-", "5-");
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      try { 
        jSONObject1.getEnum(class0, "5-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Short short0 = new Short((short)87);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ish}ThCWde", 0.0F);
      JSONObject jSONObject1 = jSONObject0.increment("ish}ThCWde");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.putOpt("*E1Q#%>`0zLZ#+|^E ", charArrayWriter0);
      try { 
        jSONObject0.increment("*E1Q#%>`0zLZ#+|^E ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<Character.UnicodeScript, Object> hashMap0 = new HashMap<Character.UnicodeScript, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.has("] not a string.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = JSONObject.getNames((Object) charArrayWriter0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<DocumentationTool.Location, Desktop.Action> hashMap0 = new HashMap<DocumentationTool.Location, Desktop.Action>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.put("{\"x\":99,\".\":99,\"available\":true,\"int\"?null,\"A JSONObject text must begin with '{'\":[null,false]}", (-1104.594101757107));
      JSONObject.getNames(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("tri", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getLong("tri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\".\":0.0}");
      jSONObject0.increment("len");
      try { 
        jSONObject0.getJSONObject("len");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer integer0 = new Integer((-981));
      Locale locale0 = Locale.ITALY;
      Set<Character> set0 = locale0.getExtensionKeys();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("{\"x\":null,\"y\":\"a string\",\"ishashCode\":false,\"~0\":[],\"b\":{\"x\":-99}}", (Collection<?>) set0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("{\"x\":null,\"y\":\"a string\",\"ishashCode\":false,\"~0\":[],\"b\":{\"x\":-99}}");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("false", hashMap0);
      try { 
        jSONObject0.getJSONArray("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(">D6fx]", (Map<?, ?>) null);
      try { 
        jSONObject0.getInt(">D6fx]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject0.append(":NTEuu@(5>a|d-", boolean0);
      try { 
        jSONObject0.getNumber(":NTEuu@(5>a|d-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.put("1{.[p=", 2949.9006605);
      double double0 = jSONObject1.getDouble("1{.[p=");
      assertEquals(2949.9006605, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.append("99", boolean0);
      try { 
        jSONObject1.getBigDecimal("99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{\"x\":99,\".\":99,\"available\":true,\"int\"?null,\"A JSONObject text must begin with '{'\":[null,false]}", (-1104.594101757107));
      boolean boolean0 = jSONObject1.optBoolean("{\"x\":99,\".\":99,\"available\":true,\"int\"?null,\"A JSONObject text must begin with '{'\":[null,false]}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOpt("hashCode", "hashCode");
      boolean boolean0 = jSONObject0.optBoolean("hashCode", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("~0", 0L);
      int int0 = jSONObject1.getInt("~0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1841.351);
      assertEquals("1841.351", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1L));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("false", hashMap0);
      try { 
        jSONObject1.append("false", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[false] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject0.append(":NTEuu@(5>a|d-", boolean0);
      jSONObject0.append(":NTEuu@(5>a|d-", "99");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<Normalizer.Form, StringReader> hashMap0 = new HashMap<Normalizer.Form, StringReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Boolean boolean0 = new Boolean("na");
      jSONObject0.accumulate("GO)c!", boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      JSONObject jSONObject1 = jSONObject0.put("int", 0.0F);
      jSONObject1.accumulate("int", locale_FilteringMode0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      Character character0 = Character.valueOf('T');
      Short short0 = new Short((short)128);
      hashMap0.put(character0, short0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      hashMap0.put((LineNumberReader) null, authenticator_RequestorType0);
      // Undeclared exception!
      try { 
        jSONObject0.put("tri", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      HashMap<StandardProtocolFamily, CharArrayReader> hashMap0 = new HashMap<StandardProtocolFamily, CharArrayReader>();
      hashMap0.put(standardProtocolFamily0, (CharArrayReader) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"keySet\":\",:]}/\"[{;=#\",\"org.json.JSONTokener\":99,\"toCharArray\":true,\"a\":false,\"-2033.5203.\":{\"keySet\":null,\"has\":false},\"has\":99,\"xxx\":[],\"xx\":null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 18 [character 19 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":null,VisisEmpfy\":\"a string\",\"true\":falSe,\"~0\":{},\"b\":[]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 21 [character 22 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("len");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"y\":null,\"toCharArray\":true,\"null\":null,\"isisEmpty\":{\"x\":null,\"ke\":{},\"xx\":false},\"ke\":99}");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(6, map0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      String string0 = JSONObject.valueToString(pipedWriter0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"2081.23309110\":99,\"y\":null,\"available\":true,\"a\":[-99,false],\"false\":{\"2081.23309110\":99}}");
      jSONObject0.remove("{\"2081.23309110\":99,\"y\":null,\"available\":true,\"a\":[-99,false],\"false\":{\"2081.23309110\":99}}");
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HashMap<Character, Short> hashMap0 = new HashMap<Character, Short>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"x\":\"hello\",\"org.json.JSONTokener\":7,\"toCharArray\":true,\"a\":[],\"b\":{\"x\":null,\"has\":false},\"has\":99,\"xxx\":99}");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("{\"x\":-99,\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(7);
      String string0 = jSONObject0.optString("BR67B1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      jSONObject0.optEnum(class0, (String) null);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3366));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3366
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      // Undeclared exception!
      try { 
        jSONObject0.query("99");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashMap<CardTerminals.State, Locale.Category> hashMap0 = new HashMap<CardTerminals.State, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Float float0 = new Float((-929.01465F));
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.isNull("(1>c8hSjZ8goC],]");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HashMap<LineNumberReader, Authenticator.RequestorType> hashMap0 = new HashMap<LineNumberReader, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000120", (-1105.1841));
      jSONObject1.names();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("`?7!8%V~");
      assertNull(number0);
  }
}
