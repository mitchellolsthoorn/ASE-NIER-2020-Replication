/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 11:09:24 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":{},\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"ull\":false,\"number\":99,\"Rp\":{\"Rp\":\"a string\"}}", (-2487));
      jSONScanner0.scanIdent();
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":\"Large\",\"CustomMapDeserializer\":null,\"index must > 0, but \":{\"\"xx\":fals\":null},\"\":[]}", (-2585));
      jSONScanner0.setToken(44);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 44, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ava.util.", (-1147));
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 2768);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"checkListResolve", 306);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H1r((AQ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanIdent();
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONScanner0.scanFieldStringArray(charArray0, 121, parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.next();
      jSONScanner0.scanDate(' ');
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      long long0 = jSONScanner0.scanLong('l');
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanLong('~');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ullbxn!m^R[:SfR%=8\":{\"ullbxn!m^R[:SfR%=R\":{}<\"x\":99},\"\":tr:e,\"dd/MM/yyyy\":Dalse,\"illegal state. \":7}");
      jSONScanner0.next();
      jSONScanner0.skipObject();
      int int0 = jSONScanner0.scanInt('\"');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bx=!m^R[:)SfR%=!");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bxn!m^R[:SfR%=!", (-2487));
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(4, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 6, 1936);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', 'i', 'i', 'i', ':', (-59), 975);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('0', '|', '[', '|', '|', 'Y', 0, 2322);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2, 1610);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone(' ', 'z', 'z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bx=m^R[)SfR%");
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%1JtB/|b8*3s/U(w");
      jSONScanner0.setToken(180);
      jSONScanner0.bytesValue();
      assertEquals('%', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bx=!m^R[:)SfR%=!");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1bx=!m^R[:)SfR%=!
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"llo\",\"y\":7,\"z\":true,\"a\":[],\"bA:99}", 1123);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"x\":\"llo\",\"y\":7,\"z\":true,\"a\":[],\"bA:99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1inB fDU]c_Dz");
      jSONScanner0.skipArray();
      assertEquals(9, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bx=!m^R[:)SfR%");
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("dd/MM/yyyy");
      jSONScanner0.copyTo(8, 0, charArray0);
      assertEquals('d', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"color\":\"Red\",\"value2\":false,\"boolean\":{},\"value\":{},\"size\":\"Large\",\"\":\"Apple\",\"number\":\"1\"}");
      char[] charArray0 = jSONScanner0.sub_chars(7, 45);
      assertEquals(45, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char[] charArray1 = jSONScanner0.sub_chars(0, 0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.subString(0, 0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull{\"\":99,\"illegal ref\":false,\"illegal state. \":false,\"x\":{}}");
      jSONScanner0.scanIdent();
      jSONScanner0.stringVal();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"\":true,\"y\":7,\"z\":true,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":\"a string\",\"b\":{\"\"@type\":\"\":\"a string\"},\"xx\":false}");
      assertEquals('{', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      jSONScanner0.scanNumber();
      String string0 = jSONScanner0.numberString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H1r((AQ");
      int int0 = jSONScanner0.indexOf('1', 0);
      assertEquals(1, int0);
      assertEquals('H', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a trXng\"");
      char char0 = jSONScanner0.charAt(123);
      assertEquals('\u001A', char0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('9', char0);
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.nio.HeapByteBuffer");
      char char0 = jSONScanner0.charAt(0);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals('j', char0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals('c', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bx=!m^R[:)SfR%");
      char[] charArray0 = new char[4];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals('', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 2768);
      jSONScanner0.scanIdent();
      jSONScanner0.bytesValue();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(102, (-693));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%1JtB/|b8*3s/U(w");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('c', 'c', '5', 'c', '5');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.next();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTypeName(parserConfig0.symbolTable);
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"checkListResolve");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null}", (-1611));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"\"@type\":\"{\"size\":\"Large\",\"color\":\"Red\",\"index must > 0, but \":true,\"value2\":true,\"\"@type\":\"\":[]}\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null}");
      jSONScanner0.bp = (-1106);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ava.util");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("long", (-175));
      char[] charArray0 = new char[8];
      jSONScanner0.bp = (-722);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.nio.HeapByteBuffer");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1n/.T");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("w%");
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a Estrig\"");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"\":");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.info();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils");
      jSONScanner0.next();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_ujY J1F\"8H");
      jSONScanner0.close();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"\":true,\"y\":7,\"z\":true,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":\"a string\",\"b\":{\"\"@type\":\"\":\"a string\"},\"xx\":false}", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(90, 0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a trXng\"");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-16));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, 2768, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"size\":\"Large\",\"color\":\"Red\",\"index must > 0, but \":true,\"value2\":true,\"\"@type\":\"\":[]}");
      jSONScanner0.sp = (-2199);
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull{\"\":99,\"illegal ref\":false,\"illegal state. \":false,\"x\":{}}");
      jSONScanner0.scanIdent();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5AM)(\"iG*P");
      SymbolTable symbolTable0 = new SymbolTable(76);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(108, 108, 108, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5AM)(\"iG*P");
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-265), (-265), (-265), parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 196, '\u0000');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 3, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"Large\",\"color\":\"Red\",\"index must > 0, but \":true,\"value2\":true,\"\"@type\":\"\":[]}", 39);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"size\":\"Large\",\"color\":\"Red\",\"index must > 0, but \":true,\"value2\":true,\"\"@type\":\"\":[]}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 2768);
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[2];
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.skipObject(true);
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"\":true,\"y\":7,\"z\":true,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":\"a string\",\"b\":{\"\"@type\":\"\":\"a string\"},\"xx\":false}");
      jSONScanner0.next();
      jSONScanner0.skipObject(false);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":{},\", column \":\"Large\",\"color\":null,\"value\":true,\"AutoCloseSource\":false,\"number\":99,\"Rp\":\"a string\",\"x\":-99}", (-2487));
      jSONScanner0.scanIdent();
      jSONScanner0.skipObject(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%1JtB/|b8*3s/U(w");
      assertEquals('%', jSONScanner0.getCurrent());
      
      char char0 = jSONScanner0.next();
      assertEquals('1', char0);
      
      String string0 = jSONScanner0.info();
      assertEquals("pos 1, line 1, column 2%1JtB/|b8*3s/U(w", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("seperator");
      // Undeclared exception!
      try { 
        jSONScanner0.subString(8, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = JSONScanner.charArrayCompare("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":null,\"value2\":false,\"number\":\"1\"}", 44, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("{\"unclosed str\":\"Large\",\"CustomMapDeserializer\":null,\"index must > 0, but \":{\"\"xx\":fals\":null},\"\":[]}", (-2487), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("\"a string\"", (-1), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("bx=!m^R[:)SfR%", 24180, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 2768);
      jSONScanner0.indexOf('M', 2768);
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"ava.util", 2);
      SymbolTable symbolTable0 = new SymbolTable(1000);
      jSONScanner0.scanTypeName(symbolTable0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a trXng\"");
      jSONScanner0.scanTypeName((SymbolTable) null);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"Rp");
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      assertEquals(20, jSONScanner0.token());
      
      int int0 = jSONScanner0.seekObjectToField((long) 0, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\", line \":\"Apple\",\"size\":[],\"color\":99,\"value\":true,\"\":true,\"number\":\"\",\"x\":-99}", 39);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 39, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bx=!m^RZ:)8fR%");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-1798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -1798
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(1602);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"\":");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ullbxn!m^R[:SfR%=8\":{\"ullbxn!m^R[:SfR%=R\":{}<\"x\":99},\"\":tr:e,\"dd/MM/yyyy\":Dalse,\"illegal state. \":7}");
      jSONScanner0.nextToken();
      jSONScanner0.skipString();
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a trXng\"");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', char0);
      
      jSONScanner0.skipArray(false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1inB fDU]c_Dz");
      jSONScanner0.skipArray(false);
      assertEquals(9, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wM_8,:zC}+n&r2$~=]", 1184);
      jSONScanner0.skipArray(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str\":\"Large\",\"CustomMapDeserializer\":null,\"index must > 0, but \":{\"\"xx\":fals\":null},\"\":[]}", 68);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', char0);
      
      jSONScanner0.skipObject(false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"\":true,\"y\":7,\"z\":true,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":\"a string\",\"b\":{\"\"@type\":\"\":\"a string\"},\"xx\":false}", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 135, line 1, column 136{\"\"@type\":\"\":true,\"y\":7,\"z\":true,\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\":\"a string\",\"b\":{\"\"@type\":\"\":\"a string\"},\"xx\":false}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ullbxn!m^R[:SfR%=8\":{\"ullbxn!m^R[:SfR%=R\":{}<\"x\":99},\"\":tr:e,\"dd/MM/yyyy\":Dalse,\"illegal state. \":7}");
      jSONScanner0.next();
      jSONScanner0.skipObject();
      assertEquals(20, jSONScanner0.token());
      
      boolean boolean0 = jSONScanner0.seekArrayToItem(1900);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ullbxn!m^R[:SfR%=8\":{\"ullbxn!m^R[:SfR%=R\":{}<\"x\":99},\"\":tr:e,\"dd/MM/yyyy\":Dalse,\"illegal state. \":7}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"ullbxn!m^R[:SfR%=8\":{\"ullbxn!m^R[:SfR%=R\":{}<\"x\":99},\"\":tr:e,\"dd/MM/yyyy\":Dalse,\"illegal state. \":7}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S8]PS@NN(`}q\"/=B", (-1151));
      jSONScanner0.skipObject(true);
      assertEquals(11, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"ullbxn!m^R[:SfR%=8\":{\"ullbxn!m^R[:SfR%=R\":{}<\"x\":99},\"\":tr:e,\"dd/MM/yyyy\":Dalse,\"illegal state. \":7}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1\"@type\":\"{\"ullbxn!m^R[:SfR%=8\":{\"ullbxn!m^R[:SfR%=R\":{}<\"x\":99},\"\":tr:e,\"dd/MM/yyyy\":Dalse,\"illegal state. \":7}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.nio.HeapByteBuffer");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str", (-741));
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[7];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1n/.T");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.scanFieldStringArray((char[]) null, 0, parserConfig0.symbolTable);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H1r((AQ");
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("H1r((AQ");
      jSONScanner0.scanFieldStringArray(charArray0, 1, defaultJSONParser0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"ava.util", 2);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanFieldStringArray(charArray0, 1263, defaultJSONParser0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str", (-741));
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[7];
      ParserConfig parserConfig0 = new ParserConfig();
      jSONScanner0.scanFieldStringArray(charArray0, 105, parserConfig0.symbolTable);
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      jSONScanner0.next();
      jSONScanner0.scanDate('Y');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertEquals('u', jSONScanner0.getCurrent());
      
      char char0 = jSONScanner0.next();
      assertEquals('n', char0);
      
      jSONScanner0.scanDate('5');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1n/.T");
      jSONScanner0.scanDate('i');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"\":");
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nX2~>we8#aYy$t-", 1);
      long long0 = jSONScanner0.scanLong('j');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null:", 0);
      jSONScanner0.scanLong('');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("84T)7ku7&/&H,k16");
      long long0 = jSONScanner0.scanLong('>');
      assertEquals(84L, long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.68", (-907));
      long long0 = jSONScanner0.scanLong('l');
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-", 0);
      jSONScanner0.scanLong('j');
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a trXng\"");
      jSONScanner0.scanLong('>');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nX2~>we8#aYy$t-");
      double double0 = jSONScanner0.scanDouble('x');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.68", (-1623));
      double double0 = jSONScanner0.scanDouble('o');
      assertEquals(1.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5AM)(\"iG*P");
      double double0 = jSONScanner0.scanDouble('^');
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      double double0 = jSONScanner0.scanDouble('9');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(99.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" : ");
      double double0 = jSONScanner0.scanDouble('$');
      assertEquals(0.0, double0, 0.01);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -`h`");
      assertEquals(' ', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[8];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanDouble('P');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"ullbxn!m^R[:SfR%=!\":{\"ullbxn!m^R[:SfR%=!\":null,\"jsonpath error, path \":99},\"dd/MM/yyyy\":false,\"\":true,\"illegal state. \":true,\"jsonpath error, path \":false}");
      assertEquals('{', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      jSONScanner0.scanDouble('\"');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nX2~>we8#aYy$t-");
      int int0 = jSONScanner0.scanInt('>');
      assertEquals(0, int0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null:", 0);
      int int0 = jSONScanner0.scanInt('j');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      int int0 = jSONScanner0.scanInt('3');
      assertEquals(99, int0);
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%1JtB/|b8*3s/U(w");
      assertEquals('%', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      int int0 = jSONScanner0.scanInt('1');
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"Rp");
      jSONScanner0.scanInt('r');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b WknQi#|Bl");
      assertEquals('b', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      int int0 = jSONScanner0.scanInt('_');
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H1r((AQ");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals('1', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"Rp");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7nr~ocJd~d");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"ava.util");
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"\"@type\":\"{\"size\":\"Large\",\"color\":\"Red\",\"index must > 0, but \":true,\"value2\":true,\"\"@type\":\"\":[]}\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null}");
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"size\":\"Large\",\"color\":\"trim\",\"index must > 0, but \":true,\"value2\":true,\"number\":[\"a string\"]}", 39);
      char[] charArray0 = new char[0];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"\":");
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"Rp");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"\"@type\":\"{\"size\":\"Large\",\"color\":\"Red\",\"index must > 0, but \":true,\"value2\":true,\"\"@type\":\"\":[]}\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":null}");
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%1JtB/|b8*3s/U(w");
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H1r((AQ");
      assertEquals('H', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('1', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.nio.HeapByteBuffer");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"Rp");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"ava.util", 2);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1{.[5S't5>");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ava.util.", (-1147));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 2768);
      jSONScanner0.scanIdent();
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"", 0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H1r((AQ");
      assertEquals('H', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals('1', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@ty", 2);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"ava.util", 2);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.next();
      boolean boolean0 = jSONScanner0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals(4, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '1', '1', '^', '2', '+', 355, (-370));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '1', '1', '(', '2', '1', (-1147), 46);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('8', '\u0000', 'c', '>', ',', '', 57, 57);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '2', '8', '8', '8', 'l', 57, 57);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1{.[5S't5>");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('1', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%1JtB/|b8*3s/U(w");
      assertEquals('%', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('1', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":-99,\"\":true,\"unclosed str, \":null,\"illegal state. \":99,\"\"@type\":\"\":true}");
      assertEquals('{', jSONScanner0.getCurrent());
      
      char char0 = jSONScanner0.next();
      assertEquals('\"', char0);
      
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ava.util.");
      assertEquals('a', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('v', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"ava.util");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ucF*u!Wp}v!X+&");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 2768);
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5AM)(\"iG*P");
      assertEquals('5', jSONScanner0.getCurrent());
      
      jSONScanner0.scanNumber();
      jSONScanner0.numberString();
      assertEquals('A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bx=!m^R[:)SfR%");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-547), 46);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bx=!m^R[:)SfR%");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      jSONScanner0.scanDate('V');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a trXng\"");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(0, 1090, (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bx=!m^R[:)SfR%");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a trXng\"");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('9', 'o', 'o', 'q', 'q', 'o');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(349, charArray0, 349, (-2147483647));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z3\"cG)3a", (-527));
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-527), (-527), 64, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      jSONScanner0.scanDate('o');
      assertEquals('\"', jSONScanner0.getCurrent());
  }
}
