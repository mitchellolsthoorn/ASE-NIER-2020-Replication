/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 11:17:08 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.GraphicsDevice;
import java.awt.TrayIcon;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.security.CryptoPrimitive;
import java.sql.JDBCType;
import java.sql.RowIdLifetime;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<CryptoPrimitive> linkedList0 = new LinkedList<CryptoPrimitive>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(10, 10);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.put(10, (Object) jSONArray1);
      try { 
        jSONArray0.toJSONObject(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      jSONArray0.put(1364, (Collection<?>) linkedList0);
      int int0 = jSONArray0.optInt(1364, 1352);
      assertEquals(1352, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray1 = jSONArray0.put(2, (Collection<?>) linkedList1);
      try { 
        jSONArray1.getBigDecimal(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      jSONArray0.put(1364, (Map<?, ?>) hashMap0);
      jSONArray0.remove(574);
      assertEquals(1364, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString((-1), "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(true);
      String string0 = jSONArray0.optString(0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("rEX(P");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.optQuery("/\"5P/b");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Number number0 = jSONArray0.optNumber(0, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = jSONArray0.optNumber((-1), (Number) bigInteger0);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(1364, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.TRANSLUCENT;
      hashMap0.put(proxy_Type0, graphicsDevice_WindowTranslucency0);
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray1.optJSONObject(0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1L);
      int int0 = jSONArray0.optInt(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      float float0 = jSONArray0.optFloat((-1), 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      float float0 = jSONArray0.optFloat(1010, (float) (-1));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(374, (long) 374);
      float float0 = jSONArray0.optFloat(374);
      assertEquals(375, jSONArray0.length());
      assertEquals(374.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (-1323.3237F));
      double double0 = jSONArray1.optDouble(0);
      assertEquals((-1323.32373046875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(91, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = jSONArray0.optBigInteger((-2348), (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(0, bigInteger0);
      assertEquals((short) (-7936), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-61);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(10, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal((-1), (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-2760), bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(110);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(1220, bigDecimal0);
      assertEquals((short)110, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      int int0 = jSONArray0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSPARENT;
      hashMap0.put(proxy_Type0, graphicsDevice_WindowTranslucency0);
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray1.getJSONObject(0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((float) (-1));
      double double0 = jSONArray1.getDouble(0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 0, (-748));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("rEX(P");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.query(jSONPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // rEX(P is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CryptoPrimitive, RoundingMode> hashMap0 = new HashMap<CryptoPrimitive, RoundingMode>();
      try { 
        jSONArray0.put((-2245), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2245] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      Long long0 = Long.getLong("Jc1aZ", 1313L);
      hashMap0.put((Byte) null, long0);
      // Undeclared exception!
      try { 
        jSONArray0.put(1364, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-377), 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-377] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1648), 1858);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1648] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-316), (-1919.01F));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-316] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("JSONArray[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3307, (float) 10);
      // Undeclared exception!
      jSONArray0.join("@xSS:IS9!l");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONTokener jSONTokener0 = new JSONTokener(mockFileInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      jSONArray0.put(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~");
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0, 0, 55);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      jSONArray0.put(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~");
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, 55, 55);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      jSONArray0.put(1364, (Collection<?>) linkedList0);
      MockFile mockFile0 = new MockFile("org.json.JSONWriter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      jSONArray0.write((Writer) mockPrintWriter0, 1365, 1364);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~");
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0, 0, 55);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      File file0 = MockFile.createTempFile("!Hx--w", "true");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0, 981, 981);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      JSONArray jSONArray2 = jSONArray0.put(0, (Object) jSONArray1);
      assertFalse(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2948), (Object) "java.io.StringWriter@0000000004");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2948] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) "");
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(873, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1899.3));
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = jSONArray1.optNumber(0, (Number) bigInteger0);
      assertEquals((-1899.3), number0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((double) (-3357));
      Number number0 = jSONArray0.optNumber((-3357), (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(1352, (long) (-2209));
      assertEquals((-2209L), long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      Proxy.Type proxy_Type1 = jSONArray0.optEnum(class0, (-1), proxy_Type0);
      assertSame(proxy_Type0, proxy_Type1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.NONE;
      TrayIcon.MessageType trayIcon_MessageType1 = jSONArray0.optEnum(class0, 0, trayIcon_MessageType0);
      assertSame(trayIcon_MessageType1, trayIcon_MessageType0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(1352, (-2209));
      assertEquals((-2209), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      float float0 = jSONArray0.optFloat(0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      jSONArray0.put(1364, (Collection<?>) linkedList0);
      double double0 = jSONArray0.optDouble(1364, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble((-493), (double) (-493));
      assertEquals((-493.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1364, (float) 1364);
      double double0 = jSONArray0.optDouble(1364, 0.0);
      assertEquals(1364.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = (JSONObject)jSONArray1.opt(0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt((-1903));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(374, (long) 374);
      try { 
        jSONArray0.getString(116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[116] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get((-1183));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1183] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.optBoolean(98, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery(jSONPointer0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      jSONArray0.optEnum(class0, 31);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CryptoPrimitive, RoundingMode> hashMap0 = new HashMap<CryptoPrimitive, RoundingMode>();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      jSONArray0.put((Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1364, (float) 1364);
      List<Object> list0 = jSONArray1.toList();
      assertEquals(1365, list0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1L);
      jSONArray1.put((float) 1L);
      String string0 = jSONArray1.toString(100);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1364, (float) 1364);
      String string0 = jSONArray1.toString((-2769));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1324, (float) 1324);
      // Undeclared exception!
      jSONArray0.toString(3314);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.put(0L);
      jSONArray0.toJSONObject(jSONArray1);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-205.199285));
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1.0));
      JSONArray jSONArray2 = new JSONArray();
      boolean boolean0 = jSONArray2.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream(300);
      boolean boolean0 = jSONArray0.similar(pipedInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(2119);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-2348));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3557, true);
      assertEquals(3558, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-654), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-654] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      String string0 = jSONArray0.optString(0, "true");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      Number number0 = jSONArray0.optNumber(0, (Number) bigInteger0);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-2512.4789114522096));
      Number number0 = jSONArray0.optNumber(0);
      assertEquals((-2512.4789114522096), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      long long0 = jSONArray0.optLong(0, 2981L);
      assertEquals(2981L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1364, (float) 1364);
      long long0 = jSONArray1.optLong(1364, 0L);
      assertEquals(1364L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray1.optJSONObject(0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      jSONArray0.put(1364, (Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.optJSONArray(1364);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(1);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(1716);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(1716, bigDecimal0);
      assertEquals((short)1716, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      BigDecimal bigDecimal0 = new BigDecimal((-2312));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(1343, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      BigInteger bigInteger1 = jSONArray1.optBigInteger(0, bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      Class<JavaFileObject.Kind> class0 = JavaFileObject.Kind.class;
      try { 
        jSONArray0.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      int int0 = jSONArray0.optInt(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1364, (float) 1364);
      int int0 = jSONArray0.optInt(1364, 1352);
      assertEquals(1364, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0L);
      float float0 = jSONArray0.optFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1364, (float) 1364);
      double double0 = jSONArray1.optDouble(1364);
      assertEquals(1364.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1324, (float) 1324);
      String string0 = jSONArray1.join("] is not a number.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.join("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1364, (float) 1364);
      long long0 = jSONArray1.getLong(1364);
      assertEquals(1364L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1364, (float) 1364);
      try { 
        jSONArray0.getLong(1213);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1213] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CryptoPrimitive, RoundingMode> hashMap0 = new HashMap<CryptoPrimitive, RoundingMode>();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray0.getJSONObject(0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      jSONArray0.put(1364, (Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.getJSONArray(1364);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1050, 1050);
      int int0 = jSONArray0.getInt(1050);
      assertEquals(1050, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1050, 93);
      try { 
        jSONArray0.getInt(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(814.50338585758);
      Number number0 = jSONArray0.getNumber(0);
      assertEquals(814.50338585758, number0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1124, 0.0);
      try { 
        jSONArray0.getNumber(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CryptoPrimitive, RoundingMode> hashMap0 = new HashMap<CryptoPrimitive, RoundingMode>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(3950, 3950);
      assertEquals(3951, jSONArray0.length());
      
      double double0 = jSONArray0.getDouble(3950);
      assertEquals(3950.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CryptoPrimitive, RoundingMode> hashMap0 = new HashMap<CryptoPrimitive, RoundingMode>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getDouble(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      boolean boolean0 = jSONArray1.optBoolean(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CryptoPrimitive, RoundingMode> hashMap0 = new HashMap<CryptoPrimitive, RoundingMode>();
      jSONArray0.put(472, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(Float.NaN);
      linkedList0.push(float0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(" [character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(1213);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("|d@gk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery("");
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      boolean boolean0 = jSONArray0.isNull((-881));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) list0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Authenticator.RequestorType, String> hashMap0 = new HashMap<Authenticator.RequestorType, String>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = (JSONObject)jSONArray0.get(0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(93);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1419);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(3250);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-2512.4789114522096));
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put((-2485), (double) (-2485));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2485] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1364, (float) 1364);
      assertEquals(1365, jSONArray0.length());
      
      float float0 = jSONArray1.getFloat(1364);
      assertEquals(1364.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(2707);
      jSONArray0.write((Writer) stringWriter0);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(1);
      assertEquals("", string0);
  }
}
