/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 11:50:36 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.StandardProtocolFamily;
import java.security.CryptoPrimitive;
import java.sql.PseudoColumnUsage;
import java.text.Normalizer;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.Spliterator;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.tools.JavaFileObject;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = JSONObject.quote("'@A_/VrAd}mN");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}b?Iw;f}IR]2_2/G:4F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"x\":\"hello\",\"y\":false,\"\r\":true,\"a\":[{}],\"b\":{}}");
      JSONObject.indent(mockPrintWriter0, 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":false,\"\":false,\"toString\":true,\"q>seub]\":{}}");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(4, set0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(25);
      long long0 = jSONObject0.optLong("org.json.JSONObject", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("`<X,@CC", 637L);
      long long0 = jSONObject0.optLong("`<X,@CC");
      assertEquals(637L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(821);
      int int0 = jSONObject0.optInt("java.java.io", 821);
      assertEquals(821, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("getDeclaringClass", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      double double0 = jSONObject0.optDouble("0%$B(h_Kre", (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", true);
      boolean boolean0 = jSONObject1.optBoolean("java.io.StringWriter@0000000002");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("}b=Q`_0", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("\"a string\"", 3730L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("\"a string\"", bigInteger0);
      assertEquals((short)3730, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal((String) null, bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(pushbackInputStream0);
      BigDecimal bigDecimal0 = new BigDecimal((-3394.48474791));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("] could not be converted to BigDecimal.", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<StandardLocation, StandardProtocolFamily> hashMap0 = new HashMap<StandardLocation, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      jSONObject0.accumulate("9^ yj8+uCWS,D<", pipedWriter0);
      jSONObject0.opt("9^ yj8+uCWS,D<");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.io.StringWriter@0000000002", false);
      boolean boolean0 = jSONObject0.isNull("java.io.StringWriter@0000000002");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("in");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("\"a ting\"", 1L);
      long long0 = jSONObject1.getLong("\"a ting\"");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<ByteArrayOutputStream, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<ByteArrayOutputStream, MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("mar", (-1.0));
      long long0 = jSONObject0.getLong("mar");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.TRAILING;
      linkedList0.add(groupLayout_Alignment0);
      JSONObject jSONObject1 = jSONObject0.put("\"a string\"", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("\"a string\"");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Short short0 = new Short((short)35);
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, short0, (-1917), (-2107));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<StandardLocation, StandardProtocolFamily> hashMap0 = new HashMap<StandardLocation, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 1239, 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("PE", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("IwmRX[2:}>|Ur88D9K5", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (float) (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("?/jvJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<StandardLocation, StandardProtocolFamily> hashMap0 = new HashMap<StandardLocation, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getLong("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONObject("na");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("ch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<ByteArrayOutputStream, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<ByteArrayOutputStream, MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getBigDecimal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONTokener jSONTokener0 = new JSONTokener(pipedInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("%s is not an array index", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name %s is not an array index, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3391));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3391
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 0, (int) 'h');
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      Spliterator<GroupLayout.Alignment> spliterator0 = linkedList0.spliterator();
      Object object0 = JSONObject.wrap(spliterator0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Object object0 = JSONObject.wrap(double0);
      assertEquals((-1.0), object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      Formatter.BigDecimalLayoutForm formatter_BigDecimalLayoutForm0 = Formatter.BigDecimalLayoutForm.SCIENTIFIC;
      linkedList0.add(formatter_BigDecimalLayoutForm0);
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9spzl5`l<sa5ljS-GQu");
      assertEquals("9spzl5`l<sa5ljS-GQu", object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(44);
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2);
      JSONObject.quote("\"a string\"", (Writer) stringWriter0);
      assertEquals("\"\\\"a string\\\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.putOpt(".", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("av", true);
      try { 
        jSONObject0.putOnce("av", "av");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"av\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.putOnce("fP", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000002", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Thread.State, BufferedReader> hashMap0 = new HashMap<Thread.State, BufferedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockFile mockFile0 = new MockFile((String) null, "?X'&'|q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("%s is not an array index", (Object) jSONObject0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("\"a string\"", 3730L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject0.optNumber("\"a string\"", (Number) bigInteger0);
      assertEquals(3730L, number0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = new Double((-1.0));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Character character0 = new Character('I');
      JSONObject jSONObject0 = new JSONObject(character0, stringArray0);
      jSONObject0.optNumber("UU", (Number) double0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("\"a string\"", (Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject1.optNumber("\"a string\"", (Number) bigInteger0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<TrayIcon.MessageType, PushbackInputStream> hashMap0 = new HashMap<TrayIcon.MessageType, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("Null key.", 1613L);
      assertEquals(1613L, long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      int int0 = jSONObject0.optInt("is", (-2445));
      assertEquals((-2445), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("H@>0D&M;iU56KJ0h", (float) 1);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("nH09{I])=Ut ", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      boolean boolean0 = jSONObject0.optBoolean("\"a string\"", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("\"a ting\"", (Collection<?>) linkedList0);
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKC;
      Normalizer.Form normalizer_Form1 = jSONObject0.optEnum(class0, "\"a ting\"", normalizer_Form0);
      assertSame(normalizer_Form1, normalizer_Form0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(124);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_ASCENT;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior1 = jSONObject0.optEnum(class0, "org.json.JSONTokener", component_BaselineResizeBehavior0);
      assertSame(component_BaselineResizeBehavior1, component_BaselineResizeBehavior0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Object object0 = jSONObject0.opt("p}fFwJJ8Lds");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Long long0 = new Long(1);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<StandardLocation, StandardProtocolFamily> hashMap0 = new HashMap<StandardLocation, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(124);
      assertTrue(jSONObject0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("getClass", (Collection<?>) linkedList0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("`<X,@CC", 637L);
      try { 
        jSONObject1.getBoolean("`<X,@CC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Dialog.ModalityType, CryptoPrimitive> hashMap0 = new HashMap<Dialog.ModalityType, CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get("(Ck `CY*g$~cthJgj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.io.StringWriter@0000000001");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0, stringArray0);
      try { 
        jSONObject0.get(stringArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      hashMap0.put(multipleGradientPaint_CycleMethod0, (TrayIcon.MessageType) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(124);
      String string0 = jSONObject0.toString(55);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("l6Z1w4", (-751));
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] could not be converted to BigInteger.\":false,\"] is not a number.\":7,\"z\":true,\"toString\":null,\"b\":[],\"x\":false}");
      int int0 = jSONObject0.length();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      jSONObject0.put("\"a ting\"", (Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double double0 = new Double((-1.0));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      Character character0 = new Character('I');
      JSONObject jSONObject0 = new JSONObject(character0, stringArray0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(5, map0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOnce("java.", hashMap0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(125);
      JSONObject jSONObject0 = new JSONObject((Object) "_");
      jSONObject0.write((Writer) stringWriter0, (-3153), 125);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ~A=k|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, " ~A=k|", (-232), 2579);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0PrmWlF &qRz<B*<m", "0PrmWlF &qRz<B*<m");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, (Object) null, 1389, 0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Dialog.ModalityType, CryptoPrimitive> hashMap0 = new HashMap<Dialog.ModalityType, CryptoPrimitive>();
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_WRAP;
      hashMap0.put(dialog_ModalityType0, cryptoPrimitive0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0, 16, 232);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(object0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Long long0 = new Long(7L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(7L, object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Character, Integer> hashMap0 = new HashMap<Character, Integer>();
      Character character0 = Character.valueOf('c');
      Integer integer0 = new Integer(8192);
      hashMap0.put(character0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Double> hashMap0 = new HashMap<JavaFileObject.Kind, Double>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("java.io.StringWriter@0000000001", stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DataOutputStream, PipedWriter> hashMap0 = new HashMap<DataOutputStream, PipedWriter>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("java.io.StringWriter@0000000001", stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<StandardLocation, StandardProtocolFamily> hashMap0 = new HashMap<StandardLocation, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("getDeclaringClass", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"ava\":\"hello\",\"y\":7,\"pointer cannot be null\":false,\"a\":[-99],\"b\":false}");
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("\\");
      assertEquals("\\", object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("\"a string\"");
      assertEquals("\"a string\"", object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("7)!|Xw[-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("\"a string\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [\"a string\"] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("S'E&553s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{},\"xx\":99}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(821);
      JSONObject jSONObject1 = jSONObject0.put("java.java.io", false);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      HashMap<StandardLocation, StandardProtocolFamily> hashMap1 = new HashMap<StandardLocation, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap1);
      boolean boolean0 = jSONObject0.similar(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":false,\"\":true,\"toString\":null,\"b\":{}}");
      try { 
        jSONObject0.getNumber("/&fsAJ\"h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000024] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.putOpt(".", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Locale.FilteringMode, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, ".");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      jSONObject0.append("av", byteArrayOutputStream0);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "av";
      stringArray0[2] = "av";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, "] is not an enum of type ");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] could not be converted to BigInteger.\":false,\"] is not a number.\":7,\"z\":true,\"toString\":null,\"b\":[],\"x\":false}");
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "{\"] could not be converted to BigInteger.\":false,\"] is not a number.\":7,\"z\":true,\"toString\":null,\"b\":[],\"x\":false}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A JSONObject text must end with '}'", true);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.accumulate("av", "av");
      jSONObject0.optString("av");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("\"a string\"", (double) 0L);
      Number number0 = jSONObject1.optNumber("\"a string\"");
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("\"a string\"", (double) 0L);
      long long0 = jSONObject0.optLong("\"a string\"");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("av", true);
      long long0 = jSONObject0.optLong("av", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(84);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("=Zy");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("av", true);
      int int0 = jSONObject1.optInt("av", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("\"a ting\"", (Collection<?>) linkedList0);
      float float0 = jSONObject1.optFloat("\"a ting\"");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("\"a string\"", 3730L);
      double double0 = jSONObject0.optDouble("\"a string\"", (double) 0);
      assertEquals(3730.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("av", "av");
      double double0 = jSONObject1.optDouble("av", (double) 1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("\"a string\"", (Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("\"a string\"", bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("\"a string\"", (double) 0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("\"a string\"", bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] could not be converted to BigInteger.\":false,\"] is not a number.\":7,\"z\":true,\"toString\":null,\"b\":[],\"x\":false}");
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger((String) null, bigInteger0);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<BigInteger, BufferedReader> hashMap0 = new HashMap<BigInteger, BufferedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("N+bTtv/l&8", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.io.StringWriter@0000000002", false);
      boolean boolean0 = jSONObject0.optBoolean("java.io.StringWriter@0000000002");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.io.StringWriter@0000000002", false);
      Class<RoundingMode> class0 = RoundingMode.class;
      try { 
        jSONObject0.getEnum(class0, "java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("\"a string\"", (double) 0L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("\"a string\"", (double) 0L);
      JSONObject jSONObject1 = jSONObject0.increment("\"a string\"");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("\"a string\"", (Collection<?>) linkedList0);
      try { 
        jSONObject1.increment("\"a string\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("V@b.\"w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray0 = JSONObject.getNames((Object) pipedWriter0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<StandardLocation, StandardProtocolFamily> hashMap0 = new HashMap<StandardLocation, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"a string\"", 0.0);
      long long0 = jSONObject1.getLong("\"a string\"");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<BigDecimal, PseudoColumnUsage> hashMap0 = new HashMap<BigDecimal, PseudoColumnUsage>();
      jSONObject0.put("\"a ting\"", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("\"a ting\"");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("av", true);
      try { 
        jSONObject0.getJSONArray("av");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-9.656437972060703");
      jSONObject0.put("-9.656437972060703", (-1.0));
      jSONObject0.getInt("-9.656437972060703");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<StandardLocation, StandardProtocolFamily> hashMap0 = new HashMap<StandardLocation, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject1 = jSONObject0.accumulate("9^ yj8~+uCWS,<*", pipedWriter0);
      try { 
        jSONObject1.getInt("9^ yj8~+uCWS,<*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("av", 1753.827F);
      Number number0 = jSONObject1.getNumber("av");
      assertEquals(1753.827F, number0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      JSONObject jSONObject1 = jSONObject0.append("av", byteArrayOutputStream0);
      try { 
        jSONObject1.getNumber("av");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-9.656437972060703");
      jSONObject0.put("-9.656437972060703", (-1.0));
      jSONObject0.getFloat("-9.656437972060703");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must end with '}'", "^<^l#d!5k5e<O{=&:mR");
      boolean boolean0 = jSONObject1.optBoolean("A JSONObject text must end with '}'", true);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-9.656437972060703));
      assertEquals("-9.656437972060703", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("D%T@E$&5J_R5MY;2\"", (Collection<?>) linkedList0);
      JSONObject jSONObject2 = jSONObject1.append("D%T@E$&5J_R5MY;2\"", jSONObject0);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("av", "av");
      try { 
        jSONObject0.append("av", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[av] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      jSONObject0.put("\"a string\"", (Collection<?>) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"a string\"", "?/jvJ");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Double double0 = new Double((-1.0));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Character character0 = new Character('I');
      JSONObject jSONObject0 = new JSONObject(character0, stringArray0);
      HashMap<DataInputStream, Long> hashMap0 = new HashMap<DataInputStream, Long>();
      Long long0 = new Long(1L);
      hashMap0.put((DataInputStream) null, long0);
      // Undeclared exception!
      try { 
        jSONObject0.put("sBMANA#Vh", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("tr", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"toUpperCse\":false,\"\":false,\"toString\":true,\"q>seub]\":{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at 57 [character 58 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"x\":null,\"y\":7,\"\"\":true,\"a\":null,\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 19 [character 20 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("javax.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      try { 
        jSONObject0.getDouble(stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Object object0 = JSONObject.wrap("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}");
      assertEquals("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":true,\"number\":\"1\"}", object0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      MockFile mockFile0 = new MockFile("c5fVL~~3_gU");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println(object0);
      assertEquals(5L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("MsLANA#]h");
      String string0 = JSONObject.valueToString(jSONTokener0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = jSONObject0.remove("\\");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(55);
      jSONObject0.write((Writer) charArrayWriter0);
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a number.\":7,\"Null key.\":{},\"a\":99,\"z\":true,\"x\":true}");
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<BigInteger, BufferedReader> hashMap0 = new HashMap<BigInteger, BufferedReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("Misplaced key.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONObject jSONObject1 = jSONObject0.put("\"a string\"", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("\"a string\"");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<TrayIcon.MessageType, PushbackInputStream> hashMap0 = new HashMap<TrayIcon.MessageType, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      jSONObject0.optEnum(class0, "4%6zl~5I'D-=");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(pushbackInputStream0);
      double double0 = jSONObject0.optDouble("{\"x\":\"hello\",\"y\":false,\"\r\":true,\"a\":[{}],\"b\":{}}");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<StandardLocation, StandardProtocolFamily> hashMap0 = new HashMap<StandardLocation, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Short short0 = new Short((short)71);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.query("%xKuhy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(84);
      try { 
        jSONObject0.put("=Zy", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":false,\"] is not a number.\":7,\"z\":true,\"toString\":null,\"b\":{}}");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":false,\"\":false,\"toString\":true,\"q>seub]\":{}}");
      try { 
        jSONObject0.getBigInteger("{\"toUpperCase\":false,\"\":false,\"toString\":true,\"q>seub]\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000024] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"toUpperCase\":false,\"] is not a number.\":7,\"z\":true,\"toString\":null,\"b\":{}}");
      jSONObject0.optNumber((String) null);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"] is not a valid number.\":false,\"z\":true,\"] is not a number.\":7,\"toString\":null,\"b\":{}}");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HashMap<Dialog.ModalityType, CryptoPrimitive> hashMap0 = new HashMap<Dialog.ModalityType, CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt(",$2]gE[=q");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      JSONObject jSONObject0 = new JSONObject(bufferedWriter0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("].");
      assertNull(jSONArray0);
  }
}
