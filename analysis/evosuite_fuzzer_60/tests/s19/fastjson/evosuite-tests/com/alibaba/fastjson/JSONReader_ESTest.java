/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 12:02:52 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONReader;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReader_ESTest extends JSONReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":null,\"java.awt.Point\":7,\"\":\"a string\",\"b\":{},\"context is null\":\"a string\",\"x\":null,\"xxx\":-99}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONScanner0.bytesValue();
      StringReader stringReader0 = new StringReader("{\"\":null,\"java.awt.Point\":7,\"\":\"a string\",\"b\":{},\"context is null\":\"a string\",\"x\":null,\"xxx\":-99}");
      stringReader0.skip(97L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      stringReader0.ready();
      jSONScanner0.scanDecimal('v');
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser0);
      JSONReader jSONReader2 = new JSONReader(defaultJSONParser0);
      jSONReader2.readObject((Type) null);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        jSONReader0.startArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual :
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7x");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReader0.readObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[\"a string\",99]", 1081);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONScanner0.bytesValue();
      PipedReader pipedReader0 = new PipedReader(4);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'D';
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray1);
      pipedWriter0.write(charArray0);
      Feature feature0 = Feature.CustomMapDeserializer;
      Feature feature1 = Feature.AllowSingleQuotes;
      Feature[] featureArray0 = new Feature[6];
      featureArray0[0] = feature1;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature1;
      featureArray0[5] = feature1;
      jSONReader0.readString();
      JSONReader jSONReader1 = new JSONReader(pipedReader0, featureArray0);
      jSONReader1.getLocal();
      // Undeclared exception!
      try { 
        jSONReader0.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // context is null
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(1081);
      char[] charArray0 = new char[6];
      charArray0[1] = '-';
      charArray0[3] = ')';
      int int0 = stringReader0.read();
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      int int1 = jSONReader0.peek();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(1081);
      char[] charArray0 = new char[6];
      charArray0[1] = '-';
      int int0 = stringReader0.read();
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      int int1 = jSONReader0.peek();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      int int0 = 1081;
      JSONScanner jSONScanner0 = new JSONScanner("", 1081);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONScanner0.bytesValue();
      jSONReader0.readString();
      // Undeclared exception!
      try { 
        jSONReader0.endObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect }, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"\":\"hello\",\"y\":7,\"z\":true,\"java.util.OptionalDouble\":\"a string\",\"b\":{}}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Integer integer0 = new Integer(0);
      jSONReaderScanner0.scanString('z');
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      jSONReader0.readObject((Map) concurrentHashMap0);
      jSONReader0.getTimzeZone();
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReader0.setTimzeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7,8~8KEW-a(V");
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<Object> class0 = Object.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, true, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig1, javaBeanInfo0);
      jSONReader0.readLong();
      // Undeclared exception!
      try { 
        jSONReader0.startArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "{\"x\":\"\",\"\":7,\"z\":true,\"a\":-99,\"illegal state : \":99,\"xx\":null,\"xxx\":true}";
      StringReader stringReader0 = new StringReader("{\"x\":\"\",\"\":7,\"z\":true,\"a\":-99,\"illegal state : \":99,\"xx\":null,\"xxx\":true}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.skip(0L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      stringReader0.ready();
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser0);
      Long long0 = new Long(1);
      // Undeclared exception!
      try { 
        jSONReader1.startArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedWriter0.append((CharSequence) "EVrmiD(_d7");
      pipedWriter0.write("EVrmiD(_d7");
      pipedReader0.markSupported();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EVrmiD(_d7", (-99));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.setContext((Object) pipedReader0, (Object) parserConfig0);
      ParseContext parseContext0 = new ParseContext((ParseContext) null, jSONReaderScanner0, "fastjson.parser.autoTypeAccept");
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      // Undeclared exception!
      try { 
        jSONReader0.readInteger();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"x\":false,\"com.alibaba.fastjson.JSONReader\":7,\"z\":true,\"a\":\"a string\",\"com.alibaba.fastjson.JSONReader\":{}}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = '[';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '[';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(classLoader0, jSONReaderScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) stringReader0, (Object) parserConfig0);
      ParseContext parseContext1 = new ParseContext(parseContext0, classLoader0, (Object) null);
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      // Undeclared exception!
      try { 
        jSONReader0.readInteger();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":-99}}");
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableASM;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.IgnoreAutoType;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableCircularReferenceDetect;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableSpecialKeyDetect;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableCircularReferenceDetect;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.IgnoreNotMatch;
      featureArray0[7] = feature7;
      Locale locale0 = new Locale("[\"lKT:QSh)", "r)|H;~4LWtrt[&A`", "1zuG-9V$B#P");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      jSONReader0.setLocale(locale0);
      TimeZone timeZone0 = jSONReader0.getTimzeZone();
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"\":false,\"com.alibaba.fastjson.JSONReader\":false,\"z\":true,\"a\":\"a string\"}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Integer integer0 = new Integer(0);
      jSONReaderScanner0.scanString('z');
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      jSONReader0.readObject((Map) hashMap0);
      TimeZone timeZone0 = jSONReader0.getTimzeZone();
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Object) timeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReader0.readObject(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}", 106);
      ParserConfig parserConfig0 = new ParserConfig(true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = '(';
      charArray0[2] = 'f';
      charArray0[3] = '8';
      charArray0[4] = 'f';
      charArray0[5] = 'J';
      charArray0[6] = ' ';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      // Undeclared exception!
      try { 
        jSONReader0.readLong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      String string0 = "EVrmiD(_d7";
      pipedWriter0.append((CharSequence) "EVrmiD(_d7");
      pipedWriter0.write("EVrmiD(_d7");
      pipedReader0.markSupported();
      JSONReader jSONReader0 = new JSONReader(pipedReader0);
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      String string0 = "EVrmiD(_d7";
      pipedWriter0.append((CharSequence) "EVrmiD(_d7");
      pipedWriter0.write("EVrmiD(_d7");
      pipedReader0.markSupported();
      JSONReader jSONReader0 = new JSONReader(pipedReader0);
      Type type0 = null;
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"fruit\":\"Apple\",\"size\":null,\"color\":\"Red\",\"value\":tru!,vv*lue2\":false,\"number\":\"1\"}");
      StringReader stringReader0 = new StringReader("com.alibaba.fastjson.JSONReader");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      stringReader0.skip(0);
      jSONReaderScanner1.scanString('#');
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner1);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Map) concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "{\"fruit\":\"Apple\",\"size\":null,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"fruit\":\"Apple\",\"size\":null,\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\"}");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      jSONReader0.readObject((Object) parserConfig0);
      ConcurrentSkipListMap<Field, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<Field, Field>();
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Map) concurrentSkipListMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unterminated json string, ", 0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'f';
      charArray0[3] = '8';
      charArray0[4] = '[';
      charArray0[5] = ' ';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      // Undeclared exception!
      try { 
        jSONReader0.readLong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "{\"x\":\"\",\"\":7,\"z\":true,\"a\":-99,\"b\":99}";
      StringReader stringReader0 = new StringReader("{\"x\":\"\",\"\":7,\"z\":true,\"a\":-99,\"b\":99}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.skip(0L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      stringReader0.ready();
      JSONReader jSONReader0 = new JSONReader(defaultJSONParser0);
      JSONReader jSONReader1 = new JSONReader(defaultJSONParser0);
      // Undeclared exception!
      try { 
        jSONReader1.readLong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DH,jM)H%}ag.[jpsf", (-1956));
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONReader0.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // context is null
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":false,\"value\":true,\"value2\":false,\"number\":\"1\"}");
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONReader0.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // context is null
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      Class<String> class0 = String.class;
      Locale locale0 = Locale.forLanguageTag("o23\"B(/O7Vzc.uF`");
      // Undeclared exception!
      try { 
        jSONReader0.setLocale(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      Locale locale0 = Locale.FRANCE;
      locale0.getDisplayLanguage();
      // Undeclared exception!
      try { 
        jSONReader0.setLocale(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.skip(0L);
      jSONReaderScanner0.scanString('z');
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      jSONReader0.readObject((Map) concurrentHashMap0);
      jSONReader0.getTimzeZone();
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"resolveTask\":{},\"y\":7,\"z\":true,\"java.util.OptionalDouble\":[[]],\"b\":{}}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Integer integer0 = new Integer(0);
      jSONReaderScanner0.scanString('z');
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      jSONReader0.readObject((Map) concurrentHashMap0);
      jSONReader0.getTimzeZone();
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONReader jSONReader0 = new JSONReader((DefaultJSONParser) null);
      Locale locale0 = new Locale("com.alibaba.fastjson.JSONReader", "com.alibaba.fastjson.JSONReader", "com.alibaba.fastjson.JSONReader");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("//|Ae&26?gr", (-1224));
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '=';
      charArray0[2] = 'S';
      charArray0[3] = ',';
      charArray0[4] = 'v';
      charArray0[5] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1179);
      JSONReader jSONReader0 = new JSONReader(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        jSONReader0.readObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("99");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      jSONReader0.readObject();
      // Undeclared exception!
      try { 
        jSONReader0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"\":7,\"z\":true,\"a\":99,\"b\":{\"x\":{}}}", 1081);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONScanner0.bytesValue();
      PipedReader pipedReader0 = new PipedReader(4);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'D';
      pipedWriter0.write(charArray0);
      Feature feature0 = Feature.CustomMapDeserializer;
      Feature feature1 = Feature.AllowSingleQuotes;
      Feature[] featureArray0 = new Feature[6];
      featureArray0[0] = feature1;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature1;
      featureArray0[5] = feature1;
      JSONReader jSONReader1 = new JSONReader(pipedReader0, featureArray0);
      // Undeclared exception!
      try { 
        jSONReader1.endArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ], actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[1] = feature1;
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '0';
      charArray0[2] = 'i';
      charArray0[3] = '';
      charArray0[4] = '%';
      charArray0[5] = 'A';
      charArray0[6] = '\'';
      charArray0[7] = 'D';
      pipedWriter0.write(charArray0);
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowSingleQuotes;
      featureArray0[3] = feature3;
      JSONReader jSONReader0 = new JSONReader(pipedReader0, featureArray0);
      // Undeclared exception!
      try { 
        jSONReader0.endArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ], actual ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"java.vm.name\":\"hello\",\"y\":7,\"z\":true,\"a\":null,\"b\":{\"java.vm.name\":-99}}");
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableASM;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.IgnoreAutoType;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableCircularReferenceDetect;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableSpecialKeyDetect;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableCircularReferenceDetect;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.IgnoreNotMatch;
      featureArray0[7] = feature7;
      JSONReader jSONReader0 = new JSONReader(stringReader0, featureArray0);
      TypeReference<Object> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<Object>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "{\"\":null,\"java.awt.Point\":7,\"z\":true,\"b\":{},\"xx\":\"a string\"}";
      JSONScanner jSONScanner0 = new JSONScanner("{\"\":null,\"java.awt.Point\":7,\"z\":true,\"b\":{},\"xx\":\"a string\"}", 1081);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONScanner0.bytesValue();
      jSONReader0.readString();
      // Undeclared exception!
      try { 
        jSONReader0.endObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect }, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.alibaba.fastjson.JSONReader");
      JSONReader jSONReader0 = new JSONReader(stringReader0);
      TimeZone timeZone0 = jSONReader0.getTimzeZone();
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", 1081);
      JSONReader jSONReader0 = new JSONReader(jSONScanner0);
      jSONScanner0.bytesValue();
      jSONReader0.readString();
      // Undeclared exception!
      try { 
        jSONReader0.endObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect }, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
