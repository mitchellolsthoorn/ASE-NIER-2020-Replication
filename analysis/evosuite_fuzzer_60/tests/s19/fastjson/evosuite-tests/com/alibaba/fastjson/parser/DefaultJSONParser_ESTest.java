/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 12:05:41 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.StringReader;
import java.lang.reflect.Constructor;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Time;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.StringCharacterIterator;
import java.time.temporal.ChronoField;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual }, pos 0, fieldName com.alibaba.fastjson.parser.JSONScanner@1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":\"syntax error, expect {, actual \",\"\":true,\"z\":-99,\"b\":\"a string\"}", parserConfig0, (-2306));
      Insets insets0 = new Insets((-2), 0, 0, 2);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) insets0, (Object) renderingHints0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$.a");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("= %r:.,*8~", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1004, 2884);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(52429);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true");
      defaultJSONParser0.parseKey();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 4, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"java.util.Collections$UnmodifiableMap\":-99,\"\":{},\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":false,\"list_item\":99,\"$\":\"fastjson.parser.deny.internal\"}");
      defaultJSONParser0.setResolveStatus((-2819));
      defaultJSONParser0.parseObject();
      assertEquals((-2819), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\"b\":{\"expect '[', but \":[],\"not support type \":null},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false}");
      defaultJSONParser0.parseKey();
      Object object0 = defaultJSONParser0.getObject(">,QD#kFlN:");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":99,\"\":false,\"z\":true,\"\":\"a string\",\"xxx\":[]}", parserConfig0, (-2306));
      Class<Date> class0 = Date.class;
      String[] stringArray0 = new String[9];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Class<?> class1 = javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parseContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-99", parserConfig0, (-2306));
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..", parserConfig0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ., pos 1, line 1, column 2..
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true");
      defaultJSONParser0.parseKey();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) "true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("vrO&Wpj#;O9%Kp");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = new ParserConfig();
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Class<Object> class0 = Object.class;
      Object object0 = defaultJSONParser0.parseObject(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}ll&*%xt!", parserConfig0, 10);
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Object object0 = defaultJSONParser0.parseKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\"b\":{\"expect '[', but \":[],\"not support type \":null,\"$.$._asm_prefix__[1]\":{}},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false,\"$.$._asm_prefix__[1]\":[]}");
      Feature feature0 = Feature.AutoCloseSource;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-1136));
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 859);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      defaultJSONParser0.setContext((ParseContext) null, (Object) jSONReaderScanner0, (Object) chronoField0);
      defaultJSONParser0.getContext();
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":false,\"$., pos \":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\", fieldName \":\"a string\",\"\":99,\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false,\"$.$.$.a\":[]}");
      Hashtable<DateFormatSymbols, DecimalFormat> hashtable0 = new Hashtable<DateFormatSymbols, DecimalFormat>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\"b\":{\"expect '[', but \":[]},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":99}");
      defaultJSONParser0.parseKey();
      HashMap<HttpCookie, StringCharacterIterator> hashMap0 = new HashMap<HttpCookie, StringCharacterIterator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 300, line 1, column 301{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\"b\":{\"expect '[', but \":[]},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":99}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":false,\", pos \":[-99,-99],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[],\"$.a\":[],\"\":true,\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":false,\"$._asm_prefix__[0]\":99}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":false,\", pos \":[-99,-99],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":true,\"$._asm_prefix__\":[false],\"$.a\":[],\"\":{\"expect '[', but \":-99,\"not support type : \":null},\"syntax error : \":99,\"com.alibaba.fastjson.PropertyNamingStrategy\":false,\"$._asm_prefix__[0]\":99}");
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      Long long0 = new Long(1);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, long0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) renderingHints0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"syntax error :\",\"y\":7,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"b\":{},\"\":{}}");
      // Undeclared exception!
      defaultJSONParser0.parseObject((Object) defaultJSONParser0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("writeString");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[\"a string\"],\"$.y\":{\"expect '[', but \":[]},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":99}");
      defaultJSONParser0.parseKey();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 310, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ", parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      defaultJSONParser0.parseObject(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 2);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.$.$.a.expect '[', but ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("$.$.$.a.expect '[', but ", "&K3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ., info : pos 1, line 1, column 2$.$.$.a.expect '[', but 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!\"FGJw[c", parserConfig0);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$., pos ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("e-L?E@O6|NZ^[j", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("\"a string\"", defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":{\"$._asm_prefix__\":\"a string\"},\"\":true,\"$.y\":-99,\", fieldName \":true,\"expect ':' at \":{\"$\":{}}}", parserConfig0, (-2306));
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("writeString");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" ?'(|");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ', info : pos 2, line 1, column 3 ?'(|
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, (-1979));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 236, parserConfig0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeAccept", parserConfig0, (-3948));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("tjRX2Ia'9Ve(", (ParserConfig) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeAccept", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"y\":7,\"z\":-99,\"a\":[],\"b\":{}}", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser((Object) null, defaultJSONParser0.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. p
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("write");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-99", parserConfig0, (-2306));
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      DefaultJSONParser defaultJSONParser2 = null;
      try {
        defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q;@E@{");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\"b\":{\"expect '[', but \":[],\"not support type \":null},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false}");
      defaultJSONParser0.parseKey();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":null,\"\":true,\"$.y\":false,\", fieldName \":{},\"setter not found, class \":true}", parserConfig0, (-2306));
      defaultJSONParser0.parseObject();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) defaultJSONParser0.TypeNameRedirect);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 100, line 1, column 101{\"syntax error, expect \":null,\"\":true,\"$.y\":false,\", fieldName \":{},\"setter not found, class \":true}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(">,QD#kFlN:");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0.fieldBased);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2>,QD#kFlN:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true");
      Object object0 = defaultJSONParser0.parse((Object) "true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T(~wi<[Czx_}$/", parserConfig0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2T(~wi<[Czx_}$/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false", parserConfig0, (-2306));
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Object object0 = defaultJSONParser0.parse((Object) rectangle0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$\":\"fastjson.parser.deny.internal\",\"java.util.Collections$UnmodifiableMap\":99,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":false,\"list_item\":\"a string\",\"\":null}");
      JSONObject jSONObject0 = (JSONObject)defaultJSONParser0.parse((Object) "{\"$\":\"fastjson.parser.deny.internal\",\"java.util.Collections$UnmodifiableMap\":99,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":false,\"list_item\":\"a string\",\"\":null}");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-99");
      Object object0 = defaultJSONParser0.parse((Object) "-99");
      assertEquals((-99), object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"com.alibaba.fastjson.serializer.GuavaCodec\":\", pos \",\"_asm_prefix__\":[{},null],\"\":[[]],\"$._asm_prefix__[1]\":99,\"syntax error, \":{}}", parserConfig0);
      Locale locale0 = Locale.JAPAN;
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.autoTypeSupport", locale0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(messageFormat0, defaultJSONParser0.lexer, parserConfig0);
      defaultJSONParser1.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 46, line 1, column 47{\"com.alibaba.fastjson.serializer.GuavaCodec\":\", pos \",\"_asm_prefix__\":[{},null],\"\":[[]],\"$._asm_prefix__[1]\":99,\"syntax error, \":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", fieldName ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2, fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONScanner jSONScanner0 = new JSONScanner("US", (-565));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(bigDecimal0, jSONScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) "US", (Object) "{\"x\":\"hello\",\"\":7,\"z\":true,\"java.sql.Clob\":[null],\"b\":{\"x\":-99},\"not support type \":\"a string\"}");
      assertNull(parseContext1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",HaW0^]tHF{>H>O-");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"com.alibaba.fastjson.serializer.GuavaCodec\":[],\"z\":true,\"a\":[],\"b\":{}}", parserConfig0, (-2306));
      Insets insets0 = new Insets((-2), (-2772), 0, 2);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) insets0, (Object) renderingHints0);
      defaultJSONParser0.setContext(parseContext0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ", parserConfig0);
      TreeSet<Point> treeSet0 = new TreeSet<Point>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) treeSet0, (Object) "expect ':' at ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName expect ':' at 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":null,\"\":[\"a string\"],\"$.y\":-99,\", fieldName \":true}", parserConfig0, (-2306));
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      defaultJSONParser0.checkMapResolve(renderingHints0, renderingHints0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":[],\"$._asm_prefix__[1]\":7,\"z\":true,\"a\":99,\"b\":{}}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      TreeSet<JSONReaderScanner> treeSet0 = new TreeSet<JSONReaderScanner>();
      defaultJSONParser0.checkListResolve(treeSet0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[false],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\"$.$.a\":{\"expect '[', but \":[],\"not support type \":null},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false}");
      Object object0 = defaultJSONParser0.parseKey();
      Class<Double> class0 = Double.TYPE;
      Vector<ChoiceFormat> vector0 = new Vector<ChoiceFormat>(21, 2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) vector0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but EOF, pos 337, line 1, column 338{\"expect '[', but \":\"a string\",\"y\":[false],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\"$.$.a\":{\"expect '[', but \":[],\"not support type \":null},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":{\"$._asm_prefix__\":\"a string\",\"$._asm_prefix__\":\"a string\"},\"\":true,\"$.y\":[],\", fieldName \":true,\"expect ':' at \":{\"$\":{}}}", parserConfig0, (-2330));
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) renderingHints0, (Object) list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$\":\"fastjson.parser.deny.internal\",\"java.util.Collections$UnmodifiableMap\":-99,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":{},\"list_item\":[],\"\":[]}");
      LinkedHashMap<JSONScanner, DefaultJSONParser.ResolveTask> linkedHashMap0 = new LinkedHashMap<JSONScanner, DefaultJSONParser.ResolveTask>();
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) defaultJSONParser0.config.fieldBased);
      assertFalse(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"a string\",\"\":\"a string\",\"com.alibaba.fastjson.serializer.AppendableSerializer\":true,\"xxx\":[],\":false\":\"a string\"}", parserConfig0, (-2306));
      Hashtable<DateFormatSymbols, DecimalFormat> hashtable0 = new Hashtable<DateFormatSymbols, DecimalFormat>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Hashtable hashtable1 = (Hashtable)defaultJSONParser0.parseObject((Map) hashtable0, (Object) mockDateFormat0);
      assertFalse(hashtable1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$\":\"fastjson.parser.deny.internal\",\"java.util.Collections$UnmodifiableMap\":-99,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":false,\"list_item\":99,\"\":{}}");
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      defaultJSONParser0.setContext((Object) null, (Object) feature0);
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = (JSONObject)defaultJSONParser0.parseObject((Map) jSONObject0, (Object) parserConfig0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$\":\"fastjson.parser.deny.internal\",\"java.util.Collections$UnmodifiableMap\":-99,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":false,\"list_item\":99,\"\":{}}");
      Insets insets0 = new Insets(83, 10, (-664), 1);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, insets0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      defaultJSONParser0.setContext((Object) aSMDeserializerFactory0, (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) renderingHints0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect 4:{\"$._asm_prefix__\"$\"a string\",\"$._asm_prefix__\":\"a string\"},\"\":true,\"$.y\":[],\", fiedName \":true,\"expect ':' at \":{\"$\":{}}}", parserConfig0, (-2330));
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) renderingHints0, (Object) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, name syntax error, expect 4:{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"expect '[', but \":false,\", pos \":[-99],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[-99],\"$.a\":\"a string\",\"\":{\"expect '[', but \":-99,\"not support type : \":null},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":false,\"$._asm_prefix__[0]\":99}", 0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      HashMap<PageAttributes, ImageCapabilities> hashMap0 = new HashMap<PageAttributes, ImageCapabilities>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) hashMap0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("= %r:.,*8~", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$._asm_prefix__[0]", 2271);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(object0, jSONReaderScanner0, parserConfig0);
      Class<MockDate> class0 = MockDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}ll&*%xt!", parserConfig0, 10);
      Class<DefaultJSONParser.ResolveTask> class0 = DefaultJSONParser.ResolveTask.class;
      Vector<JavaBeanDeserializer> vector0 = new Vector<JavaBeanDeserializer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but }, pos 1, line 1, column 2}ll&*%xt!
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"$._asm_prefix__\",\"y\":7,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"syntax error: \":[-99],\"b\":{},\"\":{}}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\"b\":{\"expect '[', but \":[]},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":99}");
      HashMap<HttpCookie, StringCharacterIterator> hashMap0 = new HashMap<HttpCookie, StringCharacterIterator>();
      HashMap hashMap1 = (HashMap)defaultJSONParser0.parseObject((Map) hashMap0);
      assertEquals(9, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONScanner jSONScanner0 = new JSONScanner("US", (-565));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(bigDecimal0, jSONScanner0, parserConfig0);
      ParserConfig parserConfig1 = defaultJSONParser0.getConfig();
      assertFalse(parserConfig1.isSafeMode());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("false", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "&j+x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual false, pos 0, fieldName &j+x
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("99", parserConfig0, (-2291));
      defaultJSONParser0.getResolveTaskList();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      defaultJSONParser0.handleResovleTask(sunHints_Key0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\", fieldName \":\"a string\",\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false,\"$.$.$.a\":[]}");
      defaultJSONParser0.parseKey();
      Object object0 = defaultJSONParser0.resolveReference("6Xc");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true");
      Object object0 = defaultJSONParser0.resolveReference("kC}26mquRV>A,~z.");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-99", parserConfig0, (-2769));
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":null,\"$._asm_prefix__\":[{},false],\"Ljava/lang/Class;\":{\"expect '[', but \":[],\"not support type \":null},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false}");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-99", parserConfig0, (-2784));
      defaultJSONParser0.close();
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",HaW0^]tHF{>H>O-");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser1.accept(1);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$\":\"fastjson.parser.deny.internal\",\"java.util.Collections$UnmodifiableMap\":99,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":false,\"list_item\":\"a string\",\"\":[]}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      Object object0 = defaultJSONParser0.parse((Object) dateFormatSymbols0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":99,\"\":\"a string\",\"$.$._asm_prefix__\":true,\"xxx\":[],\":false\":[],\", actual \":\"a string\"}", parserConfig0, (-2306));
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      Object object0 = defaultJSONParser1.parseKey();
      assertEquals("x", object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[\"a string\",false,99]", parserConfig0, (-2306));
      Object object0 = defaultJSONParser0.parseKey();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2..
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-99,-99]");
      defaultJSONParser0.parse((Object) "[-99,-99]");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 9, line 1, column 10[-99,-99]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T(~wi<[Czx_}$/", parserConfig0);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2T(~wi<[Czx_}$/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":true,\", pos \":-99,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[],\"$.a\":[],\"\":true,\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":false,\"$._asm_prefix__[0]\":99}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser1.parse((Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 20, line 1, column 21{\"expect '[', but \":true,\", pos \":-99,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[],\"$.a\":[],\"\":true,\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":false,\"$._asm_prefix__[0]\":99}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[]", defaultJSONParser0.lexer, parserConfig0);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")Z", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2)Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T(~w<i<[^zx&/q", parserConfig0);
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3T(~w<i<[^zx&/q
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "{\"syntax error, expect \":{},\"\":[[],false],\"$.y\":-99,\", fieldName \":true,\"expect ':' at \":{}}";
      ParserConfig parserConfig0 = new ParserConfig(true);
      Locale locale0 = Locale.JAPANESE;
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.deny.internal", locale0);
      StringReader stringReader0 = new StringReader("{\"syntax error, expect \":{},\"\":[[],false],\"$.y\":-99,\", fieldName \":true,\"expect ':' at \":{}}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 2609);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":{},\"\":[[],false],\"$.y\":-99,\", fieldName \":true,\"expect ':' at \":{}}");
      ParseContext parseContext0 = null;
      Class<Short> class0 = Short.TYPE;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Type) class0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // setter not found, class short, property syntax error, expect 
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONScanner jSONScanner0 = new JSONScanner("US", (-565));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(bigDecimal0, jSONScanner0, parserConfig0);
      defaultJSONParser0.popContext();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("US", (-565));
      Locale locale0 = Locale.ITALIAN;
      MessageFormat messageFormat0 = new MessageFormat("US", locale0);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(messageFormat0, jSONScanner0, parserConfig0);
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"java.util.Collections$UnmodifiableMap\":7,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":{},\"0NZC{)FC[]\"G7!ICXa\":99,\"\":{}}");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" ?'(|");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.TypeUtils");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("= %r:.,*8~", parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.deny.internal");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\", name \":[false],\"$.a\":[\"a string\"],\"com.alibaba.fastjson.JSONPath$KeySetSegment\":[-99,{}],\"$.\":\"a string\"}", parserConfig0, (-2295));
      defaultJSONParser0.getResolveTaskList();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"syntax error\":99,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[[]],\", fieldName \":\"a string\",\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false,\"$.$.$.a\":[]}");
      defaultJSONParser0.parseKey();
      Object object0 = defaultJSONParser0.resolveReference("@type");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[D", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3[D
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[\"a string\"],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[],\"unclosed\":{\"expect '[', but \":[]},\"\":{\"expect '[', but \":-99,\"$.com.alibaba.fastjson.PropertyNamingStrategy\":{},\"x\":false},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[true],\"create instance error\":99,\"x\":null}");
      JSONObject jSONObject0 = (JSONObject)defaultJSONParser0.parseKey();
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"com.alibaba.fastjson.serializer.GuavaCodec\":\", pos \",\"_asm_prefix__\":[{},null],\"\":[true],\"$._asm_prefix__[1]\":99,\"syntax error, \":{}}", parserConfig0);
      Locale locale0 = Locale.JAPAN;
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.autoTypeSupport", locale0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(messageFormat0, defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":null,\"\":true,\"$.y\":false,\", fieldName \":{\"illegal json : \":\"a string\"},\"setter not found, class \":null,\"illegal json : \":99,\"m_\":{}}", parserConfig0, (-2306));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "{\"syntax error, expect \":null,\"\":true,\"$.y\":false,\", fieldName \":{\"illegal json : \":\"a string\"},\"setter not found, class \":null,\"illegal json : \":99,\"m_\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class java.lang.String, property syntax error, expect 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":7,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[],\"b\":{\"expect '[', but \":[]},\"\":{\"expect '[', but \":-99},\"syntax error : \":null,\"xx\":false,\"xxx\":99}");
      Object object0 = new Object();
      defaultJSONParser0.parseObject(object0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":99,\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[],\"java.util.Collections$UnmodifiableMap\":{\"expect '[', but \":[]},\"\":{\"expect '[', but \":{},\"x\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":99}");
      Object object0 = defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-99", parserConfig0, (-2306));
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[99,{}]", parserConfig0, (-2306));
      parserConfig0.clearDeserializers();
      Class<Object> class0 = Object.class;
      List<Object> list0 = defaultJSONParser0.parseArray(class0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[null,true]", parserConfig0, (-2306));
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual true, pos 6, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]", parserConfig0, (-2306));
      Class<Object> class0 = Object.class;
      List<Object> list0 = defaultJSONParser0.parseArray(class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) "true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error,except start with { or [,but actually start with true
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"yyyy-MM-dd HH:mm:ss\":false,\"NaN\":true}");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"yyyy-MM-dd HH:mm:ss\":false,\"NaN\":true}", defaultJSONParser0.lexer, parserConfig0);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseShort error, field : null
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.NumberDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":99,\"\":\"a\"string\",\"z\":true,\"xxx\":[],\":false\":\"a string\"}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, position at 0, name 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$\":99,\"java.util.Collections$UnmodifiableMap\":{},\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":\"a string\",\"list_item\":true,\"\":{},\"com.alibaba.fastjson.parser.JSONReaderScanner\":[],\"not support type : \":-99}");
      IdentityHashMap<JSONScanner, BigDecimal> identityHashMap0 = new IdentityHashMap<JSONScanner, BigDecimal>();
      IdentityHashMap identityHashMap1 = (IdentityHashMap)defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) defaultJSONParser0.resolveStatus);
      assertFalse(identityHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":-99,\"\":-99,\"$.y\":-99,\", fieldName \":false}");
      Hashtable<DateFormatSymbols, DecimalFormat> hashtable0 = new Hashtable<DateFormatSymbols, DecimalFormat>();
      defaultJSONParser0.parseObject((Map) hashtable0, (Object) hashtable0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{\"org.joda.time.DateTime\":99}],\"b\":{\"expect '[', but \":[],\"not support type \":null},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false,\"org.joda.time.DateTime\":false}");
      JSONObject jSONObject0 = (JSONObject)defaultJSONParser0.parseKey();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":null,\"\":[\"a string\",[],null],\"$.y\":false,\", fieldName \":\"a string\",\"syntax error, \":[],\"yyyy-MM-dd HH:mm:ss\":null,\"$ref\":\"a string\"}", parserConfig0, (-2306));
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Time time0 = new Time(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{7A_");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(time0, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$.[0]\":99,\"y\":7,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\", name \":[null,99],\"b\":{},\"\":{},\"syntax error : \":null}");
      Class<Double> class0 = Double.TYPE;
      Constructor<Rectangle> constructor0 = defaultJSONParser0.parseObject((Type) class0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":null,\"\":true,\"$.y\":false,\"setter not found, class \":null,\"illegal json : \":-99,\"m_\":{}}", parserConfig0, (-2306));
      Locale locale0 = Locale.PRC;
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null, (Type) null, (Type) null, (Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      defaultJSONParser0.parse(propertyProcessable0, (Object) locale0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",HaW0^]tHF{>H>O-");
      LinkedHashMap<JSONScanner, DefaultJSONParser.ResolveTask> linkedHashMap0 = new LinkedHashMap<JSONScanner, DefaultJSONParser.ResolveTask>();
      IdentityHashMap<JSONScanner, BigDecimal> identityHashMap0 = new IdentityHashMap<JSONScanner, BigDecimal>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual ^
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"com.alibaba.fastjson.parser.DefaultJSONParser\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":true,\"$._asm_prefix__\":{},\"Ljava/lang/Class;\":{\"expect '[', but \":[],\"not support type \":null},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false}");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 19, line 1, column 20{\"expect '[', but \":\"a string\",\"com.alibaba.fastjson.parser.DefaultJSONParser\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":true,\"$._asm_prefix__\":{},\"Ljava/lang/Class;\":{\"expect '[', but \":[],\"not support type \":null},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      assertEquals(13, jSONScanner0.token());
      
      Hashtable<DateFormatSymbols, DecimalFormat> hashtable0 = new Hashtable<DateFormatSymbols, DecimalFormat>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      defaultJSONParser0.parseObject((Map) hashtable0, (Object) mockDateFormat0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[5];
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-2973));
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}ll&*%xt!", parserConfig0, 10);
      defaultJSONParser0.getDateFormat();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(dateFormat0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\", fieldName \":\"a string\",\"\":{\"expect '[', but \":-99,\"illegal setter\":{},\"$ref\":false},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false,\"$.$.$.a\":[]}");
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":99,\"b\":{}}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]");
      Class<Short> class0 = Short.TYPE;
      defaultJSONParser0.parseObject((Type) class0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[\"a string\"],\"$.y\":{\"expect '[', but \":[]},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":99}");
      Class<Object> class0 = Object.class;
      Object object0 = defaultJSONParser0.parseObject(class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"unterminated json string, \":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[],\"b\":{\"expect '[', but \":[]},\"\":{\"expect '[', but \":false,\"x\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":false,\"xxx\":true}");
      Feature feature0 = Feature.SupportAutoType;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\", fieldName \":\"a string\",\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false}");
      Feature feature0 = Feature.SupportAutoType;
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\", property \":\"fastjson.parser.deny.internal\",\"java.util.Collections$UnmodifiableMap\":7,\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":{\", property \":-99},\"b\":99,\"\":{},\"xx\":-99}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"syntax error, expect \":-99,\"\":-99,\"$.y\":-99,\", fieldName \":false}");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("F`7)}0n5@;ST");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-2306), (-2306));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("i(-");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, line 1, column 2i(-
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"a string\"");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(4, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("true");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!!.$:n=+@ 94JyxS,S~", parserConfig0);
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(1, jSONLexer0.token());
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(jSONLexer0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"expect '[', but \":\"a string\",\"y\":[],\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\":-99,\"$._asm_prefix__\":[{}],\"b\":{\"expect '[', but \":[],\"not support type \":null},\"\":{\"expect '[', but \":-99,\"illegal setter\":{}},\"syntax error : \":null,\"com.alibaba.fastjson.PropertyNamingStrategy\":[],\"create instance error\":false}");
      defaultJSONParser0.setDateFormat("1.2.68");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }
}
