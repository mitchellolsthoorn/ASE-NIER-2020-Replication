/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 07:41:33 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.JDBCType;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(13, 0L);
      LinkedList<MultipleGradientPaint.ColorSpaceType> linkedList0 = new LinkedList<MultipleGradientPaint.ColorSpaceType>();
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      linkedList0.add(multipleGradientPaint_ColorSpaceType0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Dialog.ModalExclusionType, Locale.FilteringMode> hashMap0 = new HashMap<Dialog.ModalExclusionType, Locale.FilteringMode>();
      JSONArray jSONArray1 = jSONArray0.put(10, (Map<?, ?>) hashMap0);
      int int0 = jSONArray1.optInt(10, 42);
      assertEquals(11, jSONArray0.length());
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(2781, 2639);
      try { 
        jSONArray1.getBigInteger(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      try { 
        jSONArray1.getBigDecimal(1149);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1149] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2484, true);
      jSONArray1.toString();
      String string0 = jSONArray1.toString();
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3046, true);
      jSONArray0.remove(19);
      assertEquals(3046, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      String string0 = jSONArray1.optString(1400);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery(jSONPointer0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.optQuery("");
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(3046, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONArray0.optNumber(2574, (Number) bigInteger0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((double) 1433);
      Number number0 = jSONArray0.optNumber(93, (Number) bigDecimal0);
      assertEquals((short)1433, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      long long0 = jSONArray0.optLong((-1), (long) (-1));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2307, (long) 2307);
      long long0 = jSONArray1.optLong(2307);
      assertEquals(2307L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt((-3834), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.optInt(0, (-398));
      assertEquals((-398), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1413, (float) 1413);
      float float0 = jSONArray0.optFloat(1413);
      assertEquals(1413.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(763, (-246.0));
      assertEquals((-246.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2307, (long) 2307);
      double double0 = jSONArray0.optDouble(2307);
      assertEquals(2307.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(65, (-642L));
      double double0 = jSONArray1.optDouble(65);
      assertEquals((-642.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.optBoolean((-343), false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(26, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(1445, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-105);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(26, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal((-398));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertEquals((byte)114, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((double) 1433);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(1433, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.DOCUMENT_MODAL;
      linkedList0.addLast(dialog_ModalityType0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1400, (float) 1400);
      float float0 = jSONArray0.getFloat(1400);
      assertEquals(1400.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1433, (float) 1433);
      Object object0 = jSONArray1.get(10);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 2719, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      // Undeclared exception!
      jSONArray1.toString(93);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(2714, false);
      // Undeclared exception!
      jSONArray0.toList();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put((-783), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-783] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.put(1000000, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Locale.FilteringMode, Proxy.Type> hashMap0 = new HashMap<Locale.FilteringMode, Proxy.Type>();
      try { 
        jSONArray0.put((-1935), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1935] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONArray0.put((-340), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-340] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.put(1000000, (Object) jSONArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1473), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1473] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1349), (float) (-1349));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1349] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2640), (double) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2640] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(2708, (Collection<?>) linkedList0);
      // Undeclared exception!
      jSONArray1.join(",:]}/\"[{;=#");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[[]],\"b\":{}}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2002), 93);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(10, false);
      boolean boolean0 = jSONArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(57, (float) 57);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, 57, (int) '<');
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(116, false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      jSONArray0.write((Writer) mockPrintWriter0, 9, 958);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(116, true);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write((Writer) stringWriter0, (-1335), (-1));
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((Collection<?>) linkedList0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("] not a string.");
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0, (-1017), 1385);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, (-1335), (-1));
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.put(1400, object0);
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      try { 
        jSONArray0.put((-3896), (Object) locale_FilteringMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3896] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Short short0 = new Short((short)2468);
      JSONArray jSONArray1 = jSONArray0.put(2723, (Object) short0);
      assertEquals(2724, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(2730, "{/vW{=!@Hfq#i");
      assertEquals("{/vW{=!@Hfq#i", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Number number0 = jSONArray0.optNumber((-1352), (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = jSONArray1.optNumber(1400, (Number) bigInteger0);
      assertEquals(1400.0F, number0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(2307, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.WRITE;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type1 = jSONArray0.optEnum(class0, (-3961), processBuilder_Redirect_Type0);
      assertSame(processBuilder_Redirect_Type0, processBuilder_Redirect_Type1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(13, 0L);
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.INHERIT;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type1 = jSONArray0.optEnum(class0, 13, processBuilder_Redirect_Type0);
      assertSame(processBuilder_Redirect_Type0, processBuilder_Redirect_Type1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, true);
      float float0 = jSONArray0.optFloat(0, 655.7641F);
      assertEquals(655.7641F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat((-1790), (float) (-1790));
      assertEquals((-1790.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1393, true);
      double double0 = jSONArray0.optDouble(1393, 1934.029945243);
      assertEquals(1934.029945243, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      double double0 = jSONArray0.optDouble((-2519), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(2586, (Collection<?>) linkedList0);
      jSONArray0.opt(10);
      assertEquals(2587, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt(1782);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.opt((-2726));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1433, (float) 1433);
      try { 
        jSONArray1.getString(1134);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1134] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(3046, true);
      boolean boolean0 = jSONArray1.getBoolean(3046);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1433, (float) 1433);
      try { 
        jSONArray1.getBoolean(107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[107] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.get(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<GraphicsDevice.WindowTranslucency> class0 = GraphicsDevice.WindowTranslucency.class;
      jSONArray0.optEnum(class0, 2708);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<TrayIcon.MessageType, KeyRep.Type> hashMap0 = new HashMap<TrayIcon.MessageType, KeyRep.Type>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.put((Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      List<Object> list0 = jSONArray1.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, true);
      String string0 = jSONArray1.toString(44);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0L);
      String string0 = jSONArray1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1385, (long) 13);
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.toJSONObject(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(10, false);
      JSONArray jSONArray2 = new JSONArray();
      boolean boolean0 = jSONArray1.similar(jSONArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.similar("I/m?'N{l<_K)|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<GroupLayout.Alignment> linkedList0 = new LinkedList<GroupLayout.Alignment>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.remove(2572);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-2456));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (double) 1400);
      JSONArray jSONArray2 = jSONArray0.put(1400, (float) 1400);
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-3886), (long) (-3886));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3886] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      String string0 = jSONArray1.optString(1400, "{/vW{=!@Hfq#i");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1400, (float) 1400);
      Number number0 = jSONArray0.optNumber(1400);
      assertNotNull(number0);
      assertEquals(1400.0F, number0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1062, true);
      Number number0 = jSONArray1.optNumber(1062);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, 10);
      long long0 = jSONArray0.optLong(10, (long) 10);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(10, false);
      long long0 = jSONArray1.optLong(10, (long) 10);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(1400);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(1062);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1433, 1L);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1433);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(1433, bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(45, 0.0F);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1433);
      BigDecimal bigDecimal1 = jSONArray1.optBigDecimal(45, bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal((-361), (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(44, true);
      BigDecimal bigDecimal0 = new BigDecimal((long) 44);
      BigDecimal bigDecimal1 = jSONArray1.optBigDecimal(44, bigDecimal0);
      assertEquals((short)44, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(3046, true);
      BigInteger bigInteger0 = jSONArray1.optBigInteger(3046, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(2708, bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONArray1.optBigInteger(1400, bigInteger0);
      assertEquals((short)1400, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2307, false);
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONArray1.getEnum(class0, 2307);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2307] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      int int0 = jSONArray1.optInt(1400, (-208));
      assertEquals(1400, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-967));
      JSONArray jSONArray1 = jSONArray0.put((Object) bigDecimal0);
      float float0 = jSONArray1.optFloat(0, (float) 0);
      assertEquals((-967.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1433, (long) 1433);
      double double0 = jSONArray1.optDouble(1433, 0.0);
      assertEquals(1433.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(44, (Collection<?>) linkedList0);
      jSONArray0.join("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}");
      assertEquals(45, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(true);
      String string0 = jSONArray0.join("{\"fruit\":\"Apple\",\"size\":-99,\"color\":99,\"value\":{},\"0000\":false,\"JSONArray[\":\"1\",\"x\":null}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.join("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":\"a string\",\"value2\":false,\"number\":\"1\"}");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(19, (long) 19);
      long long0 = jSONArray1.getLong(19);
      assertEquals(19L, long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(3046, false);
      try { 
        jSONArray1.getLong(36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[36] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(10, false);
      try { 
        jSONArray0.getJSONObject(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(0);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1578, (float) 1578);
      assertEquals(1579, jSONArray0.length());
      
      int int0 = jSONArray0.getInt(1578);
      assertEquals(1578, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      try { 
        jSONArray1.getInt(70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[70] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2307, (long) 2307);
      assertEquals(2308, jSONArray0.length());
      
      Number number0 = jSONArray0.getNumber(2307);
      assertEquals(2307L, number0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1400, (float) 1400);
      try { 
        jSONArray1.getNumber(98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[98] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1, (double) (-1L));
      assertEquals(2, jSONArray0.length());
      
      float float0 = jSONArray0.getFloat(1);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, 10);
      assertEquals(11, jSONArray0.length());
      
      double double0 = jSONArray0.getDouble(10);
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(10, false);
      try { 
        jSONArray1.getDouble(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2988, true);
      boolean boolean0 = jSONArray0.optBoolean(2988, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(10, false);
      assertEquals(11, jSONArray0.length());
      
      boolean boolean0 = jSONArray1.getBoolean(10);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1064, true);
      try { 
        jSONArray0.getJSONArray(1064);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1064] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{\"x\":[]},\"Substring bounds error\":[]}");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      jSONTokener0.next(44);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(224);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("java.io.StringWriter@0000000002");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1.0F);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("Vg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<StandardProtocolFamily> linkedList0 = new LinkedList<StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.isNull((-736));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(65);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1357);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(44, (Collection<?>) linkedList0);
      try { 
        jSONArray0.getFloat(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1400, (float) 1400);
      boolean boolean0 = jSONArray0.optBoolean(1400);
      assertEquals(1401, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(1391);
      jSONArray0.write((Writer) stringWriter0);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      try { 
        jSONArray0.getJSONArray(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[16] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString((-1106));
      assertEquals("", string0);
  }
}
