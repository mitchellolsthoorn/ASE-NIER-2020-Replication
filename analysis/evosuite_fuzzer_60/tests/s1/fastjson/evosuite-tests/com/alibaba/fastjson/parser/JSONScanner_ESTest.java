/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 07:45:17 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(2581);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".000000000", 59);
      jSONScanner0.nextToken(59);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 59, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // .
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%BrK1:$2xsMV551'^", 3);
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(30);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N`'9Z)>WzzI@248");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~|JaqtEZRAVpH");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1~|JaqtEZRAVpH
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("6Q^VM(}](");
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}", 4767);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(classLoader0, jSONScanner0, parserConfig0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, 1253, defaultJSONParser0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 16384);
      jSONScanner0.nextToken(3);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 3, line 1, column 4\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("can not cast to short, value : ");
      jSONScanner0.scanIdent();
      Date date0 = jSONScanner0.scanDate('N');
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      long long0 = jSONScanner0.scanLong('#');
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      double double0 = jSONScanner0.scanDouble('<');
      assertEquals(99.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".000000000", 59);
      jSONScanner0.nextToken(59);
      int int0 = jSONScanner0.scanInt('s');
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 2159);
      int int0 = jSONScanner0.scanInt('(');
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-938));
      int int0 = jSONScanner0.scanInt('G');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("6Q^VM(}](");
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', '9', '9', 'P', 2159, 116);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6Q^V(}](#dB");
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 65535);
      jSONScanner0.putChar('A');
      String string0 = jSONScanner0.numberString();
      assertEquals("j", string0);
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("33;}3?izE%p_^ceV,", (-902));
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"\"@type\":\"{\"y\":7,\"z\":true,\"\"@type\":\"\":[],\"b\":{}}\":7,\"z\":true,\"a\":[],\"b\":{}}", 1514);
      jSONScanner0.skipObject();
      assertEquals(58, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$ID\u0007<d]ozGApJeHP4");
      jSONScanner0.skipArray(true);
      assertEquals('z', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ", 32);
      jSONScanner0.skipArray();
      assertEquals(13, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"{\"x\":[],\"\":0.0}", 2159);
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      jSONScanner0.calendar = calendar0;
      jSONScanner0.setTimeZone('9', 'P', '9');
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}");
      char[] charArray0 = new char[3];
      jSONScanner0.copyTo(41, 0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99");
      char[] charArray0 = new char[2];
      jSONScanner0.arrayCopy(0, charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"\"@type\":\"\":7,\"z\":true,\"a\":[99],\"b\":{},\"xx\":null}");
      char[] charArray0 = jSONScanner0.sub_chars(10, 2);
      assertArrayEquals(new char[] {'o', '\"'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"getContext\":99,\"illegal json, \":7,\"z\":true,\"a\":false}");
      char[] charArray0 = jSONScanner0.sub_chars(0, 0);
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"number\":\"undefined\",\"\"@type\":\"{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}\":true,\"size\":[],\"value2\":false,\"color\":\"Red\",\"x\":true,\"xx\":false}", 166);
      String string0 = jSONScanner0.subString(0, 34);
      assertEquals("{\"fruit\":\"Apple\",\"number\":\"undefin", string0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      String string0 = jSONScanner0.subString(0, 0);
      assertEquals("", string0);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      jSONScanner0.nextIdent();
      String string0 = jSONScanner0.stringVal();
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner("P+&K@3vj-^s6ydA", (-1173));
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 65535);
      jSONScanner0.putChar('A');
      String string0 = jSONScanner0.numberString();
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"unclosed str, \":null,\"\"@type\":\"\":false}", 2159);
      char char0 = jSONScanner0.next();
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals('\"', char0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2293));
      jSONScanner0.isEOF();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~|JaqtEZRAVpH");
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(boolean0);
      assertEquals('~', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      String string0 = jSONScanner0.info();
      assertEquals("pos 0, line 1, column 10(X.!>0MQ}{3]bZZ", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6Q^V(}](#dB");
      int int0 = jSONScanner0.indexOf('6', (-1113));
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}");
      int int0 = jSONScanner0.indexOf('@', (-3424));
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 6);
      jSONScanner0.putChar('3');
      BigDecimal bigDecimal0 = jSONScanner0.decimalValue();
      assertEquals((byte)3, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?O6B(V-diI6r\"4RCxKi", 1333);
      char char0 = jSONScanner0.charAt(13);
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("XQbKGv)^H!q~Zs!5", 38);
      char char0 = jSONScanner0.charAt(3);
      assertEquals('K', char0);
      assertEquals('X', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("99", 2159);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals('9', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 16384);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals('\u0000', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (-714));
      jSONScanner0.scanString();
      jSONScanner0.bytesValue();
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"\"@type\":\"\":7,\"z\":true,\"a\":[99],\"b\":{},\"xx\":null}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"x\":\"hello\",\"\"@type\":\"\":7,\"z\":true,\"a\":[99],\"b\":{},\"xx\":null}");
      String string0 = jSONScanner0.addSymbol(3, 3, 1, defaultJSONParser0.symbolTable);
      assertEquals("\":\"", string0);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.addSymbol(0, 0, 2, defaultJSONParser0.symbolTable);
      assertEquals('(', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mS.](9ssQZ$YV(zzr-", (-2114));
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(720, (-514));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      jSONScanner0.np = 1;
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":\"Red\",\"value\":true,\"value2\":false,\"number\":\"1\",\"x\":[]}");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('!', '*', '&', '!', 'o');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":[],\"");
      jSONScanner0.nextIdent();
      jSONScanner0.bp = 11;
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 96, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.bp = (-4703);
      // Undeclared exception!
      try { 
        jSONScanner0.scanLong('4');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.concurrent.atomic.LongAdder", 2950);
      jSONScanner0.bp = (-3140);
      // Undeclared exception!
      try { 
        jSONScanner0.scanISO8601DateIfMatch(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\"", 999);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("183");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!4VG?Quw1fa}hxGV(4", 1297);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6Q^VM(}](");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"\"@type\":\"{\"\"@type\":\"{\"y\":7,\"z\":true,\"\"@type\":\"\":[],\"b\":{}}\":7,\"z\":true,\"a\":[],\"b\":{}}\":\"Red\",\"value\":true,\"value2\":false,\"number\":99}", 102);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.asm.MethodWriter");
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (-714));
      jSONScanner0.scanString();
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(0, 14, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"fruit\":\"Apple\",\"number\":\"undefined\",\"\"@type\":\"{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}\":true,\"size\":[],\"value2\":false,\"color\":\"Red\",\"x\":true,\"xx\":false}", (-2931));
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-2931));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("6Q^V(}](#dB", 0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6Q^V(}](#");
      jSONScanner0.skipObject(true);
      jSONScanner0.putChar('(');
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6Q^VM(}](");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-1197), (-1197), (-1197), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T{LfBg");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(67, (-1), (-1), parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 385, (-454));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-338));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 65279);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-403));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JNuUI");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1JNuUI
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":{},\"y\":7,\"\"@type\":\"{\"y\":7,\"z\":true,\"\"@type\":\"\":[],\"b\":{}}\":true,\"a\":[],\"b\":{\"x\":true}}");
      jSONScanner0.skipObject(false);
      assertEquals('a', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.StringCodec", (-602));
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-602), (-602));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      boolean boolean0 = JSONScanner.charArrayCompare("'U ig4w K)~zx#E:&", 7, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("index must > 0, but ", 0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("?O6B(V-diI6r\"4RCxKi", (-1053), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = JSONScanner.charArrayCompare(":", 117, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 72);
      char char0 = jSONScanner0.charAt(72);
      assertEquals('\u001A', char0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      jSONScanner0.indexOf(':', 4703);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6Q^VM(}](");
      jSONScanner0.scanTypeName((SymbolTable) null);
      assertEquals('6', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":", (-3080));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(aSMDeserializerFactory0, jSONScanner0, parserConfig0);
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      jSONScanner0.skipObject(false);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}", (-2702));
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.seekObjectToField(526L, true);
      assertEquals(']', jSONScanner0.getCurrent());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}", 4767);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(classLoader0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 47, line 1, column 48{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":", (-3080));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(aSMDeserializerFactory0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-1003L), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"number\":\"undefined\",\"\"@type\":\"{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}\":true,\"size\":[],\"value2\":false,\"color\":\"Red\",\"x\":true,\"xx\":false}");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ASMDeserializerFactory aSMDeserializerFactory0 = parserConfig0.asmFactory;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(aSMDeserializerFactory0, jSONScanner0, parserConfig0);
      int int0 = jSONScanner0.seekObjectToField(8053676751900894641L, false);
      assertEquals(9, jSONScanner0.pos());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"xm:[],\"");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-530L), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 9, line 1, column 10{\"xm:[],\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ", 2769);
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":[],\"");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(0L, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json, pos 8, line 1, column 9{\"x\":[],\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6Q^V(}]X#");
      jSONScanner0.skipObject(true);
      jSONScanner0.seekObjectToField((long) 0, true);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 3);
      jSONScanner0.nextToken(3);
      int int0 = jSONScanner0.seekObjectToField((long) 3, false);
      assertEquals(3, jSONScanner0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":{},\"");
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) 0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.nextToken(2581);
      boolean boolean0 = jSONScanner0.seekArrayToItem(2581);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}");
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"x\":\"hello\",\"\"@type\":\"\":7,\"z\":true,\"a\":[99],\"b\":{},\"xx\":null}");
      jSONScanner0.nextToken(3);
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"_", 80);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L0[.");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("w2{a8j%Y)]");
      jSONScanner0.skipArray(false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"\"@type\":\"ull{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}\":\"illegal json.\",\"y\":7,\"z\":true,\"a\":99}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{\"\"@type\":\"ull{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}\":\"illegal json.\",\"y\":7,\"z\":true,\"a\":99}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T{LfBg");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2T{LfBg
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      jSONScanner0.bp = 67;
      jSONScanner0.skipObject(false);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+;leF0Dec}");
      jSONScanner0.skipObject(false);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?O6B(V-diI6r\"4RCxKi", 1200);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 6);
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}", 4767);
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("y618f,0``3<2-");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      jSONScanner0.scanFieldStringArray(charArray0, 150, defaultJSONParser1.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`M^e]UCu4*j{v");
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONScanner0.scanFieldStringArray(charArray0, 122, parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" column ", 3);
      assertEquals(' ', jSONScanner0.getCurrent());
      
      jSONScanner0.scanFieldStringArray((char[]) null, 74, (SymbolTable) null);
      assertEquals('c', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support optional : ");
      jSONScanner0.scanDate('+');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDate(' ');
      assertEquals(4, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0X.!>0MQ}{3]bZZ");
      jSONScanner0.skipObject(true);
      jSONScanner0.scanDate('m');
      assertEquals(9, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("33;}3?izE%p_^ceV,");
      jSONScanner0.scanDate('');
      assertEquals('3', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      jSONScanner0.scanDate('{');
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-lf,");
      jSONScanner0.scanDate('J');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"||&'_ork}>");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('{');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6Q^V(}](#");
      long long0 = jSONScanner0.scanLong('Q');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      long long0 = jSONScanner0.scanLong('4');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("33;}3?izE%p_^ceV,");
      long long0 = jSONScanner0.scanLong('o');
      assertEquals(33L, long0);
      assertEquals('3', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      long long0 = jSONScanner0.scanLong('{');
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (-2));
      jSONScanner0.scanLong('K');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("33;}3?izE%p_^ceV,");
      double double0 = jSONScanner0.scanDouble('L');
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(33.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      double double0 = jSONScanner0.scanDouble('.');
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-~$JZRQ4");
      double double0 = jSONScanner0.scanDouble('e');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"||&'_ork}>");
      jSONScanner0.scanDouble('.');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 40);
      double double0 = jSONScanner0.scanDouble('-');
      assertEquals(0.0, double0, 0.01);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6Q^VM(}](");
      int int0 = jSONScanner0.scanInt('Q');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("index ust > 0), but ", 110);
      jSONScanner0.nextToken(110);
      int int0 = jSONScanner0.scanInt('x');
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = jSONScanner0.scanInt('O');
      assertEquals(0, int0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-lf,");
      jSONScanner0.scanInt('e');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"||&'_ork}>", 57);
      jSONScanner0.scanInt('D');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", cePumn ", 1150);
      jSONScanner0.nextToken(1150);
      int int0 = jSONScanner0.scanInt('m');
      assertEquals(16, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"||&'_ork}>");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 6);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 1914);
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"dlvi[");
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("", 72);
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("33;}3?izE%p_^ceV,", (-902));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}", 4767);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      Class<String> class0 = String.class;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 6);
      assertEquals(' ', jSONScanner0.getCurrent());
      
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.skipObject(true);
      assertEquals('\u0000', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}\":true,\"value2\":false,\"number\":\"1\",\"x\":\"a string\"}", 4767);
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("6Q^V(}](#dB");
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("6Q^V(}](#dB", 1333);
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("6Q^VM(}](");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uCA", 40);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-lf,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\", column ");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(" 5QKtr");
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("6Q^VM(}](");
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~|JaqtEZRAVpH");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner("5?Z6']T:[ap0z#M>.");
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 40);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', 'E', ';', '9', 1, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('1', '1', '1', '+', '+', 'E', 0, 2224);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', '4', '4', '4', 'K', 'K', (-2060), 1853);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', '4', '+', 'b', '4', '+', (-2060), 74);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', 'A', 'U', 'g', ']', 'Q', 65535, (-2060));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('Q', 'Q', 'Q', 'm', 'Q', 'Q', 'm', 'm');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('4', '2', 'U', 'g', 'b', 'Q', 2769, (-2060));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 96, (-1));
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone('.', '.', ':', '.', ':');
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', 'W', 'q');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?O6B(V-diI6r\"4RCxKi", 1330);
      jSONScanner0.next();
      jSONScanner0.next();
      jSONScanner0.scanNumber();
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('(', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0(X.!>0MQ}{3]bZZ", 32);
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%BrK1:$2xsMV551'^", 3);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('%', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("writQ clob e'ror");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('w', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uCAGxi[BdO0Qkk");
      assertEquals('', jSONScanner0.getCurrent());
      
      jSONScanner0.next();
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"||'_o}>");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~|JaqtEZRAVpH");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('~', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":{},\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", (-714));
      jSONScanner0.scanString();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L0(X.!>0MQ}{3]bZZ");
      jSONScanner0.putChar(',');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 0, line 1, column 1L0(X.!>0MQ}{3]bZZ
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";]=3 -Uw", 66);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(2748, 2258);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull6Q^VM(}](");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal str, ");
      jSONScanner0.bytesValue();
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":[],\"y\":7,\"{\"x\":{},\"\":true,\"a\":[99],\", column \":{\"x\":false}}");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldStringArray(charArray0, 96, (SymbolTable) null);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}wV#%W%s`@C");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 40);
      jSONScanner0.scanLong('N');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"||&'_ork}>", 4298);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(48, 4298, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal ref, ");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"||&'_ork}>");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('K', 'K', 'K', 'K', '/', '5');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k-(7@9{(");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(115, charArray0, 115, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("index must > 0, but ", 74);
      SymbolTable symbolTable0 = new SymbolTable(863);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(45, 57, 57, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".n,={9`<");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1.n,={9`<
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"{\"x\":{},\"y\":7,\"\"@type\":\"{\"y\":7,\"z\":true,\"\"@type\":\"\":[],\"b\":{}}\":true,\"a\":[],\"b\":{\"x\":true}}");
      jSONScanner0.scanDate(',');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
