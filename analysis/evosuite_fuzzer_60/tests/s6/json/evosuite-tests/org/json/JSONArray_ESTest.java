/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 08:56:48 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.nio.CharBuffer;
import java.nio.channels.FileChannel;
import java.sql.ClientInfoStatus;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.annotation.Resource;
import javax.swing.GroupLayout;
import javax.swing.SortOrder;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 2909;
      long long0 = (-776L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray1 = jSONArray0.put(2909, (-776L));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(2910, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2910, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      long long1 = jSONArray0.getLong(2909);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2910, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(long1 == long0);
      assertEquals((-776L), long1);
      
      try { 
        jSONArray1.getString(2909);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2909] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 21;
      JSONArray jSONArray1 = jSONArray0.put(21, (-1617));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(22, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(22, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(21);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(22, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(22, jSONArray1.length());
      assertEquals((-1617.0F), float0, 0.01F);
      
      String string0 = null;
      JSONTokener jSONTokener0 = null;
      try {
        jSONTokener0 = new JSONTokener((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(242, (long) 242);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(243, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(243, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      long long0 = jSONArray1.optLong(242, (-2349L));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(243, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(243, jSONArray1.length());
      assertEquals(242L, long0);
      
      double double0 = jSONArray0.getDouble(242);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(243, jSONArray0.length());
      assertEquals(242.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 1000000;
      // Undeclared exception!
      jSONArray0.put(1000000, (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(183, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.put((-1.0));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(184, jSONArray0.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(184, jSONArray3.length());
      assertNotNull(jSONArray3);
      
      long long0 = jSONArray3.optLong(182);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(184, jSONArray0.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(184, jSONArray3.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 164;
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(164, (Collection<?>) linkedList0);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(165, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(165, jSONArray2.length());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray1.put(164, (Collection<?>) linkedList0);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertEquals(165, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(165, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertNotNull(jSONArray3);
      
      try { 
        jSONArray0.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2808L));
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertEquals((short) (-2808), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONArray1.optNumber(1938, (Number) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1938L, number0);
      assertNotNull(number0);
      
      JSONObject jSONObject0 = jSONArray0.optJSONObject(57);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertNull(jSONObject0);
      
      String string0 = jSONArray1.join(" at ");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[$TU;>&=^NCB");
      assertNotNull(stringReader0);
      
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 5 [character 6 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 182;
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      // Undeclared exception!
      jSONArray1.put(1000000, true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      String string0 = jSONArray0.join("");
      assertSame(jSONArray0, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      
      Number number0 = jSONArray0.optNumber((-845), (Number) bigInteger0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
      assertEquals(4, byteArray0.length);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, number0.byteValue());
      assertEquals((short)0, number0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = Long.getLong(".At;YIQ=9Tl%d4*Ju");
      assertNull(long0);
      
      boolean boolean0 = linkedList0.add((Long) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(183, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      float float0 = jSONArray0.optFloat(182);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(Float.NaN, float0, 0.01F);
      
      boolean boolean1 = jSONArray0.isNull(182);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      float float0 = jSONArray0.optFloat((-2046), (float) 182);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(182.0F, float0, 0.01F);
      
      JSONPointer jSONPointer0 = new JSONPointer("#/");
      assertNotNull(jSONPointer0);
      
      // Undeclared exception!
      try { 
        jSONArray0.query(jSONPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals(1939, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      boolean boolean0 = jSONArray2.optBoolean(1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals(1939, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = jSONArray0.isEmpty();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-117);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-117)}, byteArray0);
      
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(spliterator0);
      
      int int0 = jSONArray0.length();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, int0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte) (-117);
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte) (-117);
      byteArray1[5] = (byte)90;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals((byte)90, bigInteger0.byteValue());
      assertEquals((short) (-29862), bigInteger0.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte)90, (byte) (-117), (byte)90, (byte) (-117), (byte)90}, byteArray1);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(6, byteArray1.length);
      assertEquals((byte)90, bigInteger0.byteValue());
      assertEquals((short) (-29862), bigInteger0.shortValue());
      assertEquals((byte)90, bigDecimal0.byteValue());
      assertEquals((short) (-29862), bigDecimal0.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte)90, (byte) (-117), (byte)90, (byte) (-117), (byte)90}, byteArray1);
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("QfV&gIG%hG`sz", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals((byte)90, bigInteger0.byteValue());
      assertEquals((short) (-29862), bigInteger0.shortValue());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte)90, bigDecimal0.byteValue());
      assertEquals((short) (-29862), bigDecimal0.shortValue());
      assertEquals((short) (-29862), bigDecimal1.shortValue());
      assertEquals((byte)90, bigDecimal1.byteValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte)90, (byte) (-117), (byte)90, (byte) (-117), (byte)90}, byteArray1);
      assertNotNull(bigDecimal1);
      
      Number number0 = jSONArray0.optNumber(1000000, (Number) bigDecimal1);
      assertSame(bigDecimal0, number0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, number0);
      assertSame(number0, bigDecimal0);
      assertSame(number0, bigDecimal1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals((byte)90, bigInteger0.byteValue());
      assertEquals((short) (-29862), bigInteger0.shortValue());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte)90, bigDecimal0.byteValue());
      assertEquals((short) (-29862), bigDecimal0.shortValue());
      assertEquals((short) (-29862), bigDecimal1.shortValue());
      assertEquals((byte)90, bigDecimal1.byteValue());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals((short) (-29862), number0.shortValue());
      assertEquals((byte)90, number0.byteValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte)90, (byte) (-117), (byte)90, (byte) (-117), (byte)90}, byteArray1);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(30, (Collection<?>) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(31, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(31, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      try { 
        jSONArray0.getDouble(30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[30] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(183, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      try { 
        jSONArray2.getDouble(182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[182] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      String string0 = jSONArray0.join("");
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertNotNull(string0);
      
      JSONArray jSONArray2 = jSONArray0.put(182);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(184, jSONArray0.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(184, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte) (-74), bigInteger0.byteValue());
      assertEquals((short)19894, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-58), (byte)115, (byte)77, (byte) (-74)}, byteArray0);
      assertNotNull(bigInteger0);
      
      Number number0 = jSONArray2.optNumber(182, (Number) bigInteger0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
      assertEquals(4, byteArray0.length);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(184, jSONArray0.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(184, jSONArray2.length());
      assertEquals((byte) (-74), bigInteger0.byteValue());
      assertEquals((short)19894, bigInteger0.shortValue());
      assertEquals((byte) (-74), number0.byteValue());
      assertEquals((short)19894, number0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-58), (byte)115, (byte)77, (byte) (-74)}, byteArray0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray1 = jSONArray0.put(66, (Object) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(67, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(67, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      List<Object> list0 = jSONArray0.toList();
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(67, jSONArray0.length());
      assertEquals(67, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(66));
      assertNotNull(list0);
      
      try { 
        jSONArray0.getNumber(66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[66] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(183, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      boolean boolean0 = jSONArray1.optBoolean(182);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 2, (-2771));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("[R(Lb=0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 6 [character 7 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertEquals(183, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray("[R(Lb=0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 6 [character 7 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1939, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      List<Object> list0 = jSONArray2.toList();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1939, jSONArray2.length());
      assertFalse(list0.isEmpty());
      assertEquals(1939, list0.size());
      assertFalse(list0.contains(1938));
      assertNotNull(list0);
      
      double double0 = jSONArray0.optDouble(1938, 2331.862838);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2331.862838, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-34);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONTokener jSONTokener0 = new JSONTokener(" [character ");
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      long long0 = jSONArray1.optLong(1);
      assertNotSame(jSONArray1, jSONArray0);
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals(0L, long0);
      
      JSONArray jSONArray2 = jSONArray0.put(1911, (Collection<?>) null);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1912, jSONArray0.length());
      assertEquals(1912, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertNotNull(jSONArray2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 1938;
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray0.put(1938, (Object) locale_Category0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertEquals(1939, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      List<Object> list0 = jSONArray0.toList();
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertEquals(1939, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(1938));
      assertNotNull(list0);
      
      // Undeclared exception!
      jSONArray2.toList();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Number number0 = jSONArray0.optNumber(91);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNull(number0);
      
      float float0 = jSONArray0.optFloat(564, (-1.0F));
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((-1.0F), float0, 0.01F);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray2 = new JSONArray();
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.length());
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray2.join("Unable o write JSONArray value at index: 0");
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.length());
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Number number0 = jSONArray0.optNumber(530);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(number0);
      
      float float0 = jSONArray0.optFloat(838, 0.0F);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0.0F, float0, 0.01F);
      
      JSONArray jSONArray1 = jSONArray0.put(530, true);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(531, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(531, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Byte byte0 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte0);
      assertNotNull(byte0);
      
      JSONArray jSONArray2 = jSONArray1.put((Object) byte0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(532, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(532, jSONArray1.length());
      assertEquals(532, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = jSONArray0.join((String) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(532, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Number number0 = jSONArray0.optNumber(564);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNull(number0);
      
      float float0 = jSONArray1.optFloat((-2080), (float) 564);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(564.0F, float0, 0.01F);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = jSONArray1.join("Unable to write JSONArray value at index: 0");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      int int0 = 32;
      JSONArray jSONArray1 = jSONArray0.put(32, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(linkedList0, linkedList1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(33, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(33, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(32, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(linkedList0, linkedList1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(33, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(33, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(33, jSONArray2.length());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertNotNull(jSONArray2);
      
      // Undeclared exception!
      try { 
        jSONArray2.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 1938;
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((short)215, bigInteger0.shortValue());
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-41)}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONArray1.optBigInteger(1938, bigInteger0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(2, byteArray0.length);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals((short)215, bigInteger0.shortValue());
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertEquals((short)1938, bigInteger1.shortValue());
      assertEquals((byte) (-110), bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-41)}, byteArray0);
      assertNotNull(bigInteger1);
      
      int int1 = bigInteger1.signum();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(2, byteArray0.length);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals((short)215, bigInteger0.shortValue());
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertEquals((short)1938, bigInteger1.shortValue());
      assertEquals((byte) (-110), bigInteger1.byteValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-41)}, byteArray0);
      
      JSONArray jSONArray2 = jSONArray0.put(1938, (Object) bigInteger1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals((short)215, bigInteger0.shortValue());
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertEquals((short)1938, bigInteger1.shortValue());
      assertEquals((byte) (-110), bigInteger1.byteValue());
      assertEquals(1939, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-41)}, byteArray0);
      assertNotNull(jSONArray2);
      
      double double0 = jSONArray0.optDouble(1938);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1938.0, double0, 0.01);
      
      String string0 = jSONArray0.toString();
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      JSONArray jSONArray3 = jSONArray2.put(false);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1940, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1940, jSONArray1.length());
      assertEquals((short)215, bigInteger0.shortValue());
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertEquals((short)1938, bigInteger1.shortValue());
      assertEquals((byte) (-110), bigInteger1.byteValue());
      assertEquals(1940, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1940, jSONArray3.length());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-41)}, byteArray0);
      assertNotNull(jSONArray3);
      
      try { 
        jSONArray1.getString((byte) (-41));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-41] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 242;
      JSONArray jSONArray1 = jSONArray0.put(242, (long) 242);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(243, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(243, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      long long0 = jSONArray1.optLong(242, (-2349L));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(243, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(243, jSONArray1.length());
      assertEquals(242L, long0);
      
      String string0 = jSONArray1.toString((-1161));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(243, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(243, jSONArray1.length());
      assertNotNull(string0);
      
      String string1 = jSONArray0.join("java.io.StringWriter@0000000006");
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(243, jSONArray0.length());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONArray1.optBigInteger(242, bigInteger0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(243, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(243, jSONArray1.length());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)242, bigInteger1.shortValue());
      assertEquals((byte) (-14), bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      
      // Undeclared exception!
      jSONArray0.toString(612);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(0.0F, float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject(176);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONArray jSONArray3 = jSONArray2.put(182);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertEquals(184, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(184, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(184, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      
      Number number0 = jSONArray2.optNumber(182);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(184, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(184, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNull(number0);
      
      JSONArray jSONArray4 = jSONArray2.put(426, (-3459));
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertEquals(427, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(427, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(427, jSONArray4.length());
      assertNotNull(jSONArray4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(boolean0);
      
      boolean boolean1 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0.0F, float0, 0.01F);
      
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior1 = jSONArray0.optEnum(class0, 739, component_BaselineResizeBehavior0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(component_BaselineResizeBehavior0, component_BaselineResizeBehavior1);
      assertSame(component_BaselineResizeBehavior1, component_BaselineResizeBehavior0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(Component.BaselineResizeBehavior.CENTER_OFFSET, component_BaselineResizeBehavior1);
      
      Object object0 = jSONArray0.opt((-1129));
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray2 = jSONArray0.put(0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      Number number0 = jSONArray1.optNumber(0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertEquals(0, number0);
      assertNotNull(number0);
      
      JSONArray jSONArray3 = jSONArray0.put(426, 426);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(427, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(427, jSONArray3.length());
      assertNotNull(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray2 = jSONArray0.put(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      Number number0 = jSONArray1.optNumber(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, number0);
      assertNotNull(number0);
      
      String string0 = jSONArray1.toString();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(173, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(174, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(174, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Number number0 = jSONArray1.optNumber(173);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(174, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(174, jSONArray1.length());
      assertNull(number0);
      
      long long0 = jSONArray1.optLong(173);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(174, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(174, jSONArray1.length());
      assertEquals(0L, long0);
      assertFalse(linkedList0.contains(long0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertNotNull(jSONArray2);
      
      JSONPointer jSONPointer1 = new JSONPointer(list0);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(jSONPointer1.equals((Object)jSONPointer0));
      assertNotNull(jSONPointer1);
      
      JSONArray jSONArray3 = (JSONArray)jSONArray2.optQuery(jSONPointer1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONPointer1, jSONPointer0);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertTrue(jSONArray3.isEmpty());
      assertEquals(0, jSONArray3.length());
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONPointer1.equals((Object)jSONPointer0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertNotNull(jSONArray3);
      
      HashMap<ClientInfoStatus, Object> hashMap0 = new HashMap<ClientInfoStatus, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      try { 
        jSONArray2.put((-1158), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1158] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-123);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)13, (byte)2, (byte)27, (byte) (-20), (byte) (-123)}, byteArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-31), (byte)15, (byte) (-125), (byte) (-11), (byte) (-102), (byte)123, (byte)46, (byte)10}, byteArray0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.optString(923);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals("", string0);
      assertFalse(linkedList0.contains(string0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      long long0 = jSONArray0.optLong(3650, (long) 3650);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(3650L, long0);
      
      String string0 = jSONArray0.toString((-673));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      String string1 = jSONArray0.join("java.io.StringWriter@0000000002");
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      
      Number number0 = jSONArray0.optNumber(4061);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(number0);
      
      JSONArray jSONArray2 = jSONArray0.put(3650);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      List<Object> list0 = jSONArray0.toList();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(4061));
      assertTrue(list0.contains(3650));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-34);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-114), (byte) (-57), (byte) (-113), (byte) (-8), (byte)0, (byte)75, (byte) (-34)}, byteArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-77);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray1.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(183, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONArray2);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      JSONArray jSONArray3 = (JSONArray)jSONArray2.optQuery(jSONPointer0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(183, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONArray3);
      
      float float0 = jSONArray1.optFloat(182);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertEquals(Float.NaN, float0, 0.01F);
      
      int int0 = jSONArray3.length();
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(183, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(183, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(66, true);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(67, jSONArray0.length());
      assertEquals(67, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray0.optFloat(66, (float) 66);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(67, jSONArray0.length());
      assertEquals(66.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(324.1893);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      long long0 = jSONArray1.optLong(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(324L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONArray jSONArray3 = jSONArray2.put(182);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(184, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(184, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(184, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      
      Number number0 = jSONArray2.optNumber(182);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(184, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(184, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNull(number0);
      
      JSONArray jSONArray4 = jSONArray1.put(182, 182);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertEquals(184, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(184, jSONArray1.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(184, jSONArray4.length());
      assertNotNull(jSONArray4);
      
      long long0 = jSONArray2.getLong(182);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertEquals(184, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(184, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(182L, long0);
      assertFalse(linkedList0.contains(long0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      try { 
        jSONArray1.getLong(182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[182] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((short)24023, bigInteger0.shortValue());
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-41)}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.setBit(1939);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(2, byteArray0.length);
      assertEquals((short)24023, bigInteger0.shortValue());
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertEquals((byte) (-41), bigInteger1.byteValue());
      assertEquals((short)24023, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)93, (byte) (-41)}, byteArray0);
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = jSONArray1.optBigInteger(1938, bigInteger0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertEquals(2, byteArray0.length);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals((short)24023, bigInteger0.shortValue());
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertEquals((byte) (-41), bigInteger2.byteValue());
      assertEquals((short)24023, bigInteger2.shortValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)93, (byte) (-41)}, byteArray0);
      assertNotNull(bigInteger2);
      
      int int0 = bigInteger2.signum();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertEquals(2, byteArray0.length);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals((short)24023, bigInteger0.shortValue());
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertEquals((byte) (-41), bigInteger2.byteValue());
      assertEquals((short)24023, bigInteger2.shortValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-41)}, byteArray0);
      
      double double0 = jSONArray2.optDouble((int) (byte) (-41), 0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(0.0, double0, 0.01);
      
      try { 
        jSONArray0.getLong((byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("true");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertNotNull(fileChannel0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Long long0 = new Long((-95));
      assertEquals((-95L), (long)long0);
      assertNotNull(long0);
      
      JSONArray jSONArray1 = jSONArray0.put(953, (double) 953);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(954, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(954, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Object object0 = jSONArray0.get(93);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(954, jSONArray0.length());
      assertNotNull(object0);
      
      JSONArray jSONArray2 = jSONArray0.optJSONArray((-95));
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(954, jSONArray0.length());
      assertNull(jSONArray2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      Long long0 = new Long(182);
      assertEquals(182L, (long)long0);
      assertNotNull(long0);
      
      List<Object> list0 = jSONArray1.toList();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(183, list0.size());
      assertFalse(list0.contains(182));
      assertTrue(list0.contains(0.0));
      assertNotNull(list0);
      
      double double0 = jSONArray1.optDouble(161, (-4134.6419952015));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals((-4134.6419952015), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Misplaced key.");
      assertFalse(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put((float) 1901);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      int int0 = jSONArray0.length();
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, int0);
      
      try { 
        jSONArray0.getEnum(class0, 1901);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1901] is not an enum of type java.io.StringWriter@0000000005.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Component.BaselineResizeBehavior> linkedList1 = new LinkedList<Component.BaselineResizeBehavior>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      linkedList1.pollFirst();
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = jSONArray0.optBoolean(4123, true);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(4123, 4123);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(4124, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(4124, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      try { 
        jSONArray0.getBigDecimal(2129);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2129] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1939, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      List<Object> list0 = jSONArray1.toList();
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(list0.isEmpty());
      assertEquals(1939, list0.size());
      assertFalse(list0.contains(1938));
      assertNotNull(list0);
      
      JSONArray jSONArray3 = jSONArray2.put((Object) locale_Category0);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(1940, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1940, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1940, jSONArray2.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1940, jSONArray3.length());
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = jSONArray3.put(false);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertEquals(1941, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1941, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1941, jSONArray2.length());
      assertEquals(1941, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(1941, jSONArray4.length());
      assertNotNull(jSONArray4);
      
      JSONArray jSONArray5 = jSONArray2.put(3675, (Collection<?>) list0);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray5, jSONArray0);
      assertSame(jSONArray5, jSONArray4);
      assertSame(jSONArray5, jSONArray3);
      assertSame(jSONArray5, jSONArray2);
      assertSame(jSONArray5, jSONArray1);
      assertEquals(3676, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3676, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3676, jSONArray2.length());
      assertFalse(list0.isEmpty());
      assertEquals(1939, list0.size());
      assertFalse(jSONArray5.isEmpty());
      assertEquals(3676, jSONArray5.length());
      assertFalse(list0.contains(false));
      assertNotNull(jSONArray5);
      
      Number number0 = jSONArray1.optNumber(93);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(3676, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3676, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNull(number0);
      
      JSONArray jSONArray6 = jSONArray2.put(602);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray6);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray6);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray6);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray6, jSONArray4);
      assertSame(jSONArray6, jSONArray1);
      assertSame(jSONArray6, jSONArray3);
      assertSame(jSONArray6, jSONArray2);
      assertSame(jSONArray6, jSONArray0);
      assertSame(jSONArray6, jSONArray5);
      assertEquals(3677, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3677, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3677, jSONArray2.length());
      assertEquals(3677, jSONArray6.length());
      assertFalse(jSONArray6.isEmpty());
      assertNotNull(jSONArray6);
      
      try { 
        jSONArray1.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      try { 
        jSONArray1.getNumber((byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      linkedList0.pollFirst();
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = jSONArray0.optBoolean(4123, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(3681, 3681);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3682, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3682, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      HashMap<Short, Month> hashMap0 = new HashMap<Short, Month>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put((Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3683, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3683, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3683, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      Number number0 = jSONArray0.getNumber(3681);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3683, jSONArray0.length());
      assertEquals(3681, number0);
      assertNotNull(number0);
      
      boolean boolean1 = jSONArray0.optBoolean(152, true);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3683, jSONArray0.length());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONArray jSONArray3 = jSONArray1.optJSONArray(3681);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3683, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3683, jSONArray1.length());
      assertNull(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      linkedList0.pollFirst();
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = jSONArray0.optBoolean(4123, true);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(3673, 3673);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(3674, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3674, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = jSONArray0.opt(13);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(3674, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(0.0F, float0, 0.01F);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(iterator0);
      
      JSONArray jSONArray2 = jSONArray1.put(true);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior1 = jSONArray1.optEnum(class0, 2331, component_BaselineResizeBehavior0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(component_BaselineResizeBehavior0, component_BaselineResizeBehavior1);
      assertSame(component_BaselineResizeBehavior1, component_BaselineResizeBehavior0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertEquals(Component.BaselineResizeBehavior.CENTER_OFFSET, component_BaselineResizeBehavior1);
      
      Object object0 = jSONArray1.opt(3492);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertNull(object0);
      
      Object object1 = jSONArray0.opt(179);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNull(object1);
      
      JSONArray jSONArray3 = jSONArray2.put(179, true);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(180, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(180, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(180, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(180, jSONArray2.length());
      assertNotNull(jSONArray3);
      
      int int0 = jSONArray2.optInt(0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(180, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(180, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(180, jSONArray2.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1939, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      List<Object> list0 = jSONArray1.toList();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(list0.isEmpty());
      assertEquals(1939, list0.size());
      assertFalse(list0.contains(1938));
      assertNotNull(list0);
      
      // Undeclared exception!
      jSONArray1.join("A JSONArray text must start with '['");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Object object0 = jSONArray0.remove(818);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(object0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BigInteger bigInteger0 = jSONArray0.optBigInteger(818, (BigInteger) null);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(bigInteger0);
      
      UnaryOperator<Dialog.ModalityType> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      int int0 = (-881);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      
      try { 
        jSONArray0.getJSONArray((-881));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-881] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 30;
      JSONArray jSONArray1 = jSONArray0.put(30, (Collection<?>) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(31, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(31, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      try { 
        jSONArray1.getJSONObject(30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[30] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(183, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      try { 
        jSONArray1.getJSONObject(8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put((double) 182);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      int int0 = (-20);
      try { 
        jSONArray1.put((-20), (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-20] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put((-0.08090533292455819));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(16, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(17, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(17, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray1.put(16, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertEquals(17, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(17, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(17, jSONArray3.length());
      assertNotNull(jSONArray3);
      
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Byte byte0 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList1.add(byte0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(byte0));
      
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) null);
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      try { 
        jSONArray1.put((-848), (Object) locale_FilteringMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-848] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        jSONArray0.query(" DX*Arv8YtB'4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put((-1.4967690608424955));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      String string0 = jSONArray1.toString((-3360));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(string0);
      
      String string1 = jSONArray1.join((String) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Number number0 = jSONArray0.optNumber(93);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNull(number0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-1.4967690608424955));
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = bigDecimal0.remainder(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      
      BigDecimal bigDecimal3 = jSONArray1.optBigDecimal(1, bigDecimal0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal3.byteValue());
      assertEquals((short)10, bigDecimal3.shortValue());
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal3);
      
      JSONArray jSONArray2 = (JSONArray)jSONArray0.query("");
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      // Undeclared exception!
      try { 
        jSONArray1.query("java.io.StringWriter@0000000005");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(spliterator0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = new JSONArray();
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertNotNull(jSONArray2);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNull(jSONObject0);
      
      String string0 = "7@0bRV1j(*{xD)";
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(90L);
      assertEquals(90L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = linkedList0.remove((Object) long0);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      linkedList0.push(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertTrue(linkedList0.contains(bigInteger0));
      
      float float0 = jSONArray2.optFloat((-1015));
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals(Float.NaN, float0, 0.01F);
      
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      try { 
        jSONArray0.get(66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[66] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(0L);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\",:]}/\"[{;=#\":\"a string\",\"Expected a ':' after a key\":-99,\"\":null}");
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      long long0 = new Long((-95));
      assertEquals((-95L), long0);
      
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(writer0);
      
      try { 
        jSONArray0.get(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0.0F, float0, 0.01F);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(iterator0);
      
      JSONArray jSONArray2 = jSONArray1.put(true);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior1 = jSONArray1.optEnum(class0, 2331, component_BaselineResizeBehavior0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(component_BaselineResizeBehavior0, component_BaselineResizeBehavior1);
      assertSame(component_BaselineResizeBehavior1, component_BaselineResizeBehavior0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(Component.BaselineResizeBehavior.CENTER_OFFSET, component_BaselineResizeBehavior1);
      
      Object object0 = jSONArray1.opt(3492);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNull(object0);
      
      Object object1 = jSONArray0.opt(179);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertNull(object1);
      
      try { 
        jSONArray1.getBigDecimal(790);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[790] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONArray jSONArray2 = jSONArray1.put(true);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray1.toString();
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNull(jSONObject0);
      
      LinkedList<BigInteger> linkedList1 = new LinkedList<BigInteger>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      JSONArray jSONArray2 = jSONArray1.put(false);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertNotNull(jSONArray2);
      
      linkedList1.push(bigInteger0);
      assertEquals(1, linkedList1.size());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertTrue(linkedList1.contains(bigInteger0));
      
      float float0 = jSONArray1.optFloat(182);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray3 = jSONArray0.optJSONArray(1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertNull(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      int int0 = jSONArray1.optInt((-1198), 182);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertEquals(182, int0);
      
      try { 
        jSONArray1.getInt(182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[182] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(183, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotNull(linkedList2);
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList2.add(byte0);
      assertNotSame(linkedList2, linkedList1);
      assertEquals(1, linkedList2.size());
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(boolean0);
      assertTrue(linkedList2.contains((byte) (-73)));
      
      JSONArray jSONArray4 = new JSONArray((Collection<?>) linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray4.length());
      assertTrue(jSONArray4.isEmpty());
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(linkedList1.contains((byte) (-73)));
      assertNotNull(jSONArray4);
      
      try { 
        jSONArray1.getInt(46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[46] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(0L);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = jSONArray1.write((Writer) stringWriter0, (-3496), 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(writer0);
      
      try { 
        jSONArray0.getNumber(2972);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2972] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        jSONArray0.getDouble(125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[125] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("YzYoM/@[");
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONArray0.write((Writer) stringWriter0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals("[]", stringWriter0.toString());
      assertEquals("[]", writer0.toString());
      assertNotNull(writer0);
      
      try { 
        jSONArray0.getDouble(125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[125] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<BigInteger> linkedList1 = new LinkedList<BigInteger>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.remove((Object) linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      LinkedList<BigInteger> linkedList2 = new LinkedList<BigInteger>();
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.contains(bigInteger0));
      assertNotNull(linkedList2);
      
      linkedList2.push(bigInteger0);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1, linkedList2.size());
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.contains(bigInteger0));
      
      LinkedList<Character.UnicodeScript> linkedList3 = new LinkedList<Character.UnicodeScript>();
      assertEquals(0, linkedList3.size());
      assertNotNull(linkedList3);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList3);
      assertEquals(0, linkedList3.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      float float0 = jSONArray0.optFloat(105);
      assertEquals(0, linkedList3.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray1 = jSONArray0.put((float) 105);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList3.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      JSONArray jSONArray2 = jSONArray0.put((Object) linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList3.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList0.contains(bigInteger0));
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray2.optString((-1025), "");
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList3.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals("", string0);
      assertFalse(linkedList0.contains(bigInteger0));
      assertNotNull(string0);
      
      double double0 = jSONArray0.optDouble(105, 1.0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList3.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1.0, double0, 0.01);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-1025), bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0, linkedList3.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigDecimal1);
      
      Number number0 = jSONArray1.optNumber((-1406), (Number) null);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList3.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0.0F, float0, 0.01F);
      
      Byte byte0 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte0);
      assertNotNull(byte0);
      
      JSONArray jSONArray2 = jSONArray0.put(0.0F);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray2.put(181, (long) 181);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(182, jSONArray0.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(182, jSONArray2.length());
      assertEquals(182, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      
      Long long0 = new Long(146L);
      assertEquals(146L, (long)long0);
      assertNotNull(long0);
      
      JSONArray jSONArray4 = jSONArray1.put((Object) clientInfoStatus0);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(183, jSONArray4.length());
      assertNotNull(jSONArray4);
      
      String string0 = jSONArray4.optString(2249, "");
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(183, jSONArray4.length());
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = jSONArray4.optDouble(47, (-660.836941964955));
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(183, jSONArray4.length());
      assertEquals((-660.836941964955), double0, 0.01);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-1926L), 0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)122, bigDecimal1.byteValue());
      assertEquals((short) (-1926), bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = jSONArray1.optBigDecimal(385, bigDecimal1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals((byte)122, bigDecimal1.byteValue());
      assertEquals((short) (-1926), bigDecimal1.shortValue());
      assertEquals((short) (-1926), bigDecimal2.shortValue());
      assertEquals((byte)122, bigDecimal2.byteValue());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = "1I?uY-l%XMwe9JF";
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(1L);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertNotNull(jSONArray2);
      
      long long0 = jSONArray2.optLong(44, (-740L));
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals((-740L), long0);
      
      List<Object> list0 = jSONArray0.toList();
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(list0.contains(44));
      assertNotNull(list0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(66, true);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(67, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(67, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      int int0 = jSONArray0.optInt(66, 31);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(67, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(31, int0);
      
      try { 
        jSONArray0.getJSONArray(66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[66] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put((-1.4967690608424955));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      long long0 = jSONArray1.optLong((-3360), 0L);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0L, long0);
      
      String string0 = jSONArray1.toString((-3360));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(string0);
      
      String string1 = jSONArray1.join((String) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Number number0 = jSONArray0.optNumber(93);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNull(number0);
      
      JSONArray jSONArray2 = jSONArray1.put(93);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = linkedList0.remove((Object) double0);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      linkedList0.push(bigInteger0);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertTrue(linkedList0.contains(bigInteger0));
      
      float float0 = jSONArray0.optFloat(57);
      assertNotSame(jSONArray0, jSONArray1);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray2 = jSONArray1.put((-1.9398426F));
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertNotNull(jSONArray2);
      
      Long long0 = new Long(119L);
      assertEquals(119L, (long)long0);
      assertNotNull(long0);
      
      Short short0 = new Short((short)114);
      assertEquals((short)114, (short)short0);
      assertNotNull(short0);
      
      JSONArray jSONArray3 = jSONArray1.put((Object) short0);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2, jSONArray3.length());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertNotNull(jSONArray3);
      
      String string0 = jSONArray1.optString(2340, "");
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double1 = jSONArray2.optDouble(2341, (double) (short)114);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals(114.0, double1, 0.01);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(385, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertNotSame(bigInteger1, bigInteger0);
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(30, (Collection<?>) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(31, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(31, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(30, (Collection<?>) null);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(31, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(31, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray1.toString(216);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(31, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(31, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(string0);
      
      int int0 = jSONArray1.optInt(167, 30);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(31, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(31, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(30, int0);
      
      JSONArray jSONArray3 = jSONArray1.put(167, 0.0);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(168, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(168, jSONArray1.length());
      assertEquals(168, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      int int0 = 384;
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      byte byte0 = (byte)38;
      Byte byte1 = new Byte((byte)38);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)38, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean2 = linkedList2.add(byte1);
      assertEquals(1, linkedList2.size());
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(linkedList2.contains(byte1));
      
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONArray1.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = jSONArray0.write((Writer) stringWriter0, 3094, (-3496));
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals("[]", stringWriter0.toString());
      assertEquals("[]", writer0.toString());
      assertNotNull(writer0);
      
      try { 
        jSONArray0.getNumber(3069);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3069] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(0.0F, float0, 0.01F);
      
      byte byte0 = (byte) (-109);
      Byte byte1 = new Byte((byte) (-109));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-109), (byte)byte1);
      assertNotNull(byte1);
      
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(byte1));
      assertNotNull(linkedList2);
      
      boolean boolean3 = linkedList2.add((Byte) null);
      assertEquals(1, linkedList2.size());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertFalse(linkedList2.contains(byte1));
      
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList2);
      assertEquals(1, linkedList2.size());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(linkedList2.contains(byte1));
      assertNotNull(jSONArray2);
      
      int int0 = jSONArray1.getInt(0);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertEquals(0, int0);
      
      try { 
        jSONArray1.getBigDecimal((byte) (-109));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-109] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 1938;
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray0.put(1938);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(1940, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1940, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      long long0 = jSONArray1.optLong(1938, (-2812L));
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(1940, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1940, jSONArray1.length());
      assertEquals(1938L, long0);
      
      // Undeclared exception!
      jSONArray0.toString(1938);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray0.optBoolean((-193), false);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(boolean0);
      
      JSONArray jSONArray2 = jSONArray0.put(34, (-193));
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(35, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(35, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONArray2.optBigInteger((-193), bigInteger0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(35, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(35, jSONArray2.length());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      boolean boolean1 = jSONArray1.optBoolean((-193), false);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(35, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(35, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray3 = jSONArray1.put(1, (double) (-193));
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(35, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(35, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(35, jSONArray3.length());
      assertNotNull(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList2);
      assertEquals(0, linkedList2.size());
      assertNotNull(jSONPointer0);
      
      boolean boolean1 = linkedList2.add("/");
      assertEquals(1, linkedList2.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList2.contains("/"));
      
      String string0 = jSONPointer0.toURIFragment();
      assertEquals(1, linkedList2.size());
      assertEquals("#", string0);
      assertFalse(linkedList2.contains(string0));
      assertTrue(linkedList2.contains("/"));
      assertNotNull(string0);
      
      JSONArray jSONArray2 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, linkedList2.size());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(linkedList2.contains(string0));
      assertTrue(linkedList2.contains("/"));
      assertNotNull(jSONArray2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      JSONArray jSONArray3 = jSONArray0.put(1899, 0.0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertEquals(1900, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1900, jSONArray3.length());
      assertNotNull(jSONArray3);
      
      JSONObject jSONObject0 = jSONArray3.optJSONObject(0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertEquals(1900, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1900, jSONArray3.length());
      assertNull(jSONObject0);
      
      JSONArray jSONArray4 = jSONArray1.put(0, 1.0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1900, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1900, jSONArray1.length());
      assertEquals(1900, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertNotNull(jSONArray4);
      
      Double double0 = (Double)jSONArray3.opt(1899);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertEquals(1900, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1900, jSONArray3.length());
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) linkedList1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      List<Object> list0 = jSONArray1.toList();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(0));
      assertNotNull(list0);
      
      int int0 = 44;
      JSONArray jSONArray2 = jSONArray1.put(44, (Collection<?>) linkedList1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(45, jSONArray0.length());
      assertEquals(0, linkedList1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(45, jSONArray1.length());
      assertEquals(45, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray3.length());
      assertTrue(jSONArray3.isEmpty());
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray4.length());
      assertTrue(jSONArray4.isEmpty());
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertNotNull(jSONArray4);
      
      JSONArray jSONArray5 = jSONArray2.getJSONArray(44);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray5);
      assertNotSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray5, jSONArray2);
      assertNotSame(jSONArray5, jSONArray1);
      assertNotSame(jSONArray5, jSONArray0);
      assertNotSame(jSONArray5, jSONArray3);
      assertNotSame(jSONArray5, jSONArray4);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(45, jSONArray0.length());
      assertEquals(0, linkedList1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(45, jSONArray1.length());
      assertEquals(45, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertTrue(jSONArray5.isEmpty());
      assertEquals(0, jSONArray5.length());
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray4));
      assertFalse(jSONArray2.equals((Object)jSONArray4));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray5.equals((Object)jSONArray2));
      assertFalse(jSONArray5.equals((Object)jSONArray1));
      assertFalse(jSONArray5.equals((Object)jSONArray0));
      assertFalse(jSONArray5.equals((Object)jSONArray3));
      assertFalse(jSONArray5.equals((Object)jSONArray4));
      assertNotNull(jSONArray5);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JSONTokener jSONTokener0 = new JSONTokener(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONArray jSONArray6 = null;
      try {
        jSONArray6 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      JSONArray jSONArray1 = jSONArray0.put(1151, (Collection<?>) linkedList1);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(linkedList1, linkedList0);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1152, jSONArray0.length());
      assertEquals(0, linkedList1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1152, jSONArray1.length());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(44, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(linkedList0, linkedList1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1152, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1152, jSONArray2.length());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray1.getJSONArray(44);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1152, jSONArray0.length());
      assertEquals(0, linkedList1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1152, jSONArray1.length());
      assertTrue(jSONArray3.isEmpty());
      assertEquals(0, jSONArray3.length());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = jSONArray1.put((-1423.3207756708287));
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1153, jSONArray0.length());
      assertEquals(0, linkedList1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1153, jSONArray1.length());
      assertEquals(1153, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertNotNull(jSONArray4);
      
      long long0 = jSONArray1.optLong(91);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1153, jSONArray0.length());
      assertEquals(0, linkedList1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1153, jSONArray1.length());
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertEquals(0L, long0);
      assertFalse(linkedList1.contains(long0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      String string0 = jSONArray0.toString(91);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(string0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) linkedList1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray0.optBoolean((-1166), false);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(boolean0);
      
      JSONArray jSONArray2 = jSONArray1.put(2, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      boolean boolean1 = jSONArray0.optBoolean(0, true);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONArray jSONArray3 = jSONArray1.put(0, (double) 2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertEquals(3, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = jSONArray0.put(2, false);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(3, jSONArray4.length());
      assertNotNull(jSONArray4);
      
      int int0 = jSONArray4.optInt(2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(3, jSONArray4.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(182, false);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      int int0 = jSONArray0.optInt(182, 182);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(182, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = 44;
      JSONArray jSONArray1 = jSONArray0.put(1773, (Collection<?>) list0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1774, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1774, jSONArray1.length());
      assertFalse(list0.contains(1773));
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = new JSONArray((Collection<?>) list0);
      assertEquals(0, linkedList0.size());
      assertEquals(1774, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(list0.contains(1773));
      assertNotNull(jSONArray2);
      
      try { 
        jSONArray2.getJSONArray(39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[39] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONArray0.optNumber(576, (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((short)1, number0.shortValue());
      assertEquals((byte)1, number0.byteValue());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.json.JSONPointer");
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(writer0);
      
      long long0 = jSONArray0.optLong(397, (long) 397);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(397L, long0);
      
      String string0 = jSONArray0.join((String) null);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Number number0 = jSONArray0.optNumber(1935);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList1.add(clientInfoStatus0);
      assertEquals(2, linkedList1.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean3 = jSONArray0.optBoolean(158, true);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      JSONArray jSONArray1 = jSONArray0.put(158, 158);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(159, jSONArray0.length());
      assertEquals(159, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(158);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(159, jSONArray0.length());
      assertEquals(159, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(158.0F, float0, 0.01F);
      
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray0.optEnum(class0, (-3060));
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(159, jSONArray0.length());
      
      Object object0 = jSONArray1.remove(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(158, jSONArray0.length());
      assertEquals(158, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(object0);
      
      String string0 = jSONArray0.toString((-3060));
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(158, jSONArray0.length());
      assertNotNull(string0);
      
      double double0 = jSONArray1.optDouble((-3060));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(158, jSONArray0.length());
      assertEquals(158, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-52);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte) (-52), bigInteger0.byteValue());
      assertEquals((short)26060, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)40, (byte)12, (byte)101, (byte) (-52)}, byteArray0);
      assertNotNull(bigInteger0);
      
      Number number0 = jSONArray0.optNumber(2785, (Number) bigInteger0);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals((byte) (-52), bigInteger0.byteValue());
      assertEquals((short)26060, bigInteger0.shortValue());
      assertEquals((byte) (-52), number0.byteValue());
      assertEquals((short)26060, number0.shortValue());
      assertArrayEquals(new byte[] {(byte)40, (byte)12, (byte)101, (byte) (-52)}, byteArray0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList1.add(clientInfoStatus0);
      assertEquals(2, linkedList1.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean3 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(0.0F, float0, 0.01F);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("] is not a JSONArray.");
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(writer0);
      
      long long0 = jSONArray0.optLong(93, 3424L);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3424L, long0);
      
      HashMap<Integer, Window.Type> hashMap0 = new HashMap<Integer, Window.Type>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put((Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      try { 
        jSONArray1.toJSONObject(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put((double) 182);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(41, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(42, jSONArray0.length());
      assertEquals(42, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(41, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(42, jSONArray0.length());
      assertEquals(42, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(42, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      try { 
        jSONArray2.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.similar((Object) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(boolean0);
      
      JSONArray jSONArray2 = new JSONArray();
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertNotNull(jSONArray3);
      
      String string0 = jSONArray3.join("99");
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertNotNull(string0);
      
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray1.optEnum(class0, 1906);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      
      Object object0 = jSONArray3.remove((-3060));
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertNull(object0);
      
      String string1 = jSONArray3.optString((-177), "=_HM");
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("=_HM", string1);
      assertNotNull(string1);
      
      HashMap<Resource.AuthenticationType, StandardLocation> hashMap0 = new HashMap<Resource.AuthenticationType, StandardLocation>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray4 = jSONArray3.put(22, (Map<?, ?>) hashMap0);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(183, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertNotNull(jSONArray4);
      
      boolean boolean1 = jSONArray4.similar("=_HM");
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(183, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONArray jSONArray5 = jSONArray4.put(22, 2092.1119269334);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray5);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray5);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray5);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray5, jSONArray3);
      assertSame(jSONArray5, jSONArray0);
      assertSame(jSONArray5, jSONArray4);
      assertNotSame(jSONArray5, jSONArray2);
      assertSame(jSONArray5, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(183, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertFalse(jSONArray5.isEmpty());
      assertEquals(183, jSONArray5.length());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray5.equals((Object)jSONArray2));
      assertNotNull(jSONArray5);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Object object0 = jSONArray0.remove((-2587));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(19, (Object) "Expected a ',' or ']'");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(20, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(20, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = new JSONArray();
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertNotNull(jSONArray2);
      
      List<Object> list0 = jSONArray2.toList();
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(list0.contains(object1));
      assertNotNull(list0);
      
      JSONArray jSONArray3 = new JSONArray();
      assertEquals(0, jSONArray3.length());
      assertTrue(jSONArray3.isEmpty());
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertNotNull(jSONArray3);
      
      double double0 = jSONArray3.optDouble(19, (double) 19);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray0);
      assertEquals(0, jSONArray3.length());
      assertTrue(jSONArray3.isEmpty());
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertEquals(19.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = jSONArray0.optBoolean(65, false);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(boolean0);
      assertFalse(linkedList0.contains(65));
      
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray0.optEnum(class0, (-3060));
      assertNotSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(linkedList0.contains((-3060)));
      
      Object object0 = jSONArray1.remove(0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNull(object0);
      
      String string0 = jSONArray0.optString(1, "=_HM");
      assertNotSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertEquals("=_HM", string0);
      assertFalse(linkedList0.contains(1));
      assertNotNull(string0);
      
      HashMap<Resource.AuthenticationType, StandardLocation> hashMap0 = new HashMap<Resource.AuthenticationType, StandardLocation>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray0.put(65, (Map<?, ?>) hashMap0);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(66, jSONArray0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(66, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(linkedList0.contains(1));
      assertNotNull(jSONArray2);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean1 = jSONArray0.similar(object1);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(66, jSONArray0.length());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(linkedList0.contains(1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) linkedList1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(0, linkedList1.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      List<Object> list0 = jSONArray1.toList();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(0, linkedList1.size());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(0));
      assertNotNull(list0);
      
      JSONArray jSONArray2 = jSONArray1.put(44, (Collection<?>) linkedList1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(45, jSONArray0.length());
      assertEquals(0, linkedList1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(45, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(45, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray3.isEmpty());
      assertEquals(0, jSONArray3.length());
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertNotNull(jSONArray3);
      
      try { 
        jSONArray2.getJSONArray(1919);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1919] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONArray jSONArray1 = jSONArray0.put(608, (Object) bigDecimal0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(609, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(609, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      byte byte0 = (byte)93;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertEquals((short) (-10281), bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-41), (byte)93, (byte) (-41), (byte) (-41), (byte) (-41)}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONArray0.optBigInteger((byte) (-41), bigInteger0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(6, byteArray0.length);
      assertEquals(609, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((byte) (-41), bigInteger0.byteValue());
      assertEquals((short) (-10281), bigInteger0.shortValue());
      assertEquals((byte) (-41), bigInteger1.byteValue());
      assertEquals((short) (-10281), bigInteger1.shortValue());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-41), (byte)93, (byte) (-41), (byte) (-41), (byte) (-41)}, byteArray0);
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotNull(bigInteger2);
      
      int int0 = bigInteger2.signum();
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals(1, int0);
      
      JSONArray jSONArray2 = jSONArray1.put(1982, (Object) "] not found.");
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(1983, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1983, jSONArray1.length());
      assertEquals(1983, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      double double0 = jSONArray0.optDouble(0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1983, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONArray jSONArray3 = new JSONArray();
      assertEquals(0, jSONArray3.length());
      assertTrue(jSONArray3.isEmpty());
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertNotNull(jSONArray3);
      
      String string0 = jSONArray3.toString();
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertEquals(0, jSONArray3.length());
      assertTrue(jSONArray3.isEmpty());
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertNotNull(string0);
      
      try { 
        jSONArray2.getString((byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals(1939, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)93;
      byteArray0[0] = (byte)93;
      JSONArray jSONArray3 = jSONArray2.put((int) (byte)93, (float) (byte)93);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals(1939, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1939, jSONArray3.length());
      assertNotNull(jSONArray3);
      
      byteArray0[1] = (byte) (-41);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONArray1.optBigInteger(1938, bigInteger0);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(byteArray1, byteArray0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(2, byteArray1.length);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(bigInteger1);
      
      int int0 = bigInteger1.signum();
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(byteArray1, byteArray0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(2, byteArray1.length);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      JSONArray jSONArray4 = jSONArray2.put(1938, (Object) bigInteger1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(byteArray1, byteArray0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertEquals(2, byteArray1.length);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals(1939, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(1939, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(jSONArray4);
      
      double double0 = jSONArray0.optDouble(1938);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertEquals(0.0, double0, 0.01);
      
      try { 
        jSONArray1.put((int) (byte) (-41), (long) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-41] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = jSONArray0.optBoolean(4123, true);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(3681, 3681);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(3682, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3682, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put((Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(3683, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3683, jSONArray1.length());
      assertEquals(3683, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      try { 
        jSONArray2.getString(98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[98] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(66, true);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(67, jSONArray0.length());
      assertEquals(67, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.optFloat(66, (float) 66);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(67, jSONArray0.length());
      assertEquals(67, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(66.0F, float0, 0.01F);
      
      String string0 = jSONArray0.toString();
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(67, jSONArray0.length());
      assertNotNull(string0);
      
      String string1 = jSONArray1.optString(66);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(67, jSONArray0.length());
      assertEquals(67, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0.0F, float0, 0.01F);
      
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray1.optEnum(class0, (-3060));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      
      Object object0 = jSONArray1.remove(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, object0);
      assertNotNull(object0);
      
      String string0 = jSONArray0.toString(0);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1939, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      double double0 = jSONArray0.optDouble(1938);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jSONArray0.toString();
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertNotNull(string0);
      
      try { 
        jSONArray1.getString((byte) (-41));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-41] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(float0));
      assertNotNull(linkedList2);
      
      Float float1 = new Float(3533.030580255197);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3533.0305F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = linkedList2.offerFirst(float1);
      assertEquals(1, linkedList2.size());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean0);
      assertFalse(linkedList2.contains(float0));
      assertTrue(linkedList2.contains(float1));
      
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(spliterator0);
      
      Class<Window.Type> class0 = Window.Type.class;
      Number number0 = jSONArray0.optNumber(52, (Number) float1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(number0.equals((Object)float0));
      assertEquals(3533.0305F, number0);
      assertNotNull(number0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      boolean boolean1 = jSONArray0.similar(sequenceInputStream0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Number number1 = jSONArray0.optNumber((-25));
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(number1);
      
      Window.Type window_Type0 = Window.Type.UTILITY;
      Window.Type window_Type1 = jSONArray0.optEnum(class0, (-842), window_Type0);
      assertSame(window_Type1, window_Type0);
      assertSame(window_Type0, window_Type1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(Window.Type.UTILITY, window_Type1);
      
      boolean boolean2 = jSONArray0.optBoolean((-3775));
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = jSONArray0.optString((-25), (String) null);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(string0);
      
      double double0 = jSONArray0.optDouble((-893), 0.0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-25), bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      boolean boolean3 = jSONArray0.optBoolean(47);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0.0F, float0, 0.01F);
      
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray1.optEnum(class0, (-3060));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      
      Object object0 = jSONArray1.remove(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, object0);
      assertNotNull(object0);
      
      String string0 = jSONArray1.optString(5407, "=_HM");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals("=_HM", string0);
      assertNotNull(string0);
      
      HashMap<Resource.AuthenticationType, StandardLocation> hashMap0 = new HashMap<Resource.AuthenticationType, StandardLocation>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(22, (Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(23, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(23, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(23, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      boolean boolean3 = jSONArray2.similar(jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(23, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(23, jSONArray1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(23, jSONArray2.length());
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONPointer0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery(jSONPointer0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(boolean0);
      
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      HashMap<Byte, SortOrder> hashMap0 = new HashMap<Byte, SortOrder>(778);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put(778, (Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(779, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(779, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("-(w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0.0F, float0, 0.01F);
      
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray1.optEnum(class0, (-3060));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      
      Object object0 = jSONArray1.remove(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, object0);
      assertNotNull(object0);
      
      HashMap<Character.UnicodeScript, Double> hashMap0 = new HashMap<Character.UnicodeScript, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray2 = jSONArray1.put(30, (Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(31, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(31, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(31, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray1.optString(5407, "=_HM");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertEquals(0, linkedList0.size());
      assertEquals(31, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(31, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals("=_HM", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject0 = new JSONObject(52);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(iterator0);
      
      try { 
        jSONArray0.put((-1234), (double) (-1234));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1234] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Desktop.Action desktop_Action0 = Desktop.Action.PRINT;
      boolean boolean3 = linkedList0.add(desktop_Action0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(desktop_Action0));
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList2);
      assertEquals(0, linkedList2.size());
      assertNotNull(jSONPointer0);
      
      JSONArray jSONArray2 = (JSONArray)jSONArray1.query(jSONPointer0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(0, linkedList2.size());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertTrue(linkedList0.contains(desktop_Action0));
      assertNotNull(jSONArray2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      JSONArray jSONArray3 = jSONArray0.put(0, (double) 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1, jSONArray3.length());
      assertTrue(linkedList0.contains(desktop_Action0));
      assertNotNull(jSONArray3);
      
      JSONObject jSONObject0 = jSONArray1.optJSONObject(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertEquals(1, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertTrue(linkedList0.contains(desktop_Action0));
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList0.add(clientInfoStatus0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(clientInfoStatus0));
      
      LinkedList<Desktop.Action> linkedList1 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean1 = linkedList1.containsAll(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, false);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(3638, 4856);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3639, jSONArray0.length());
      assertEquals(3639, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList2);
      assertEquals(0, linkedList2.size());
      assertNotNull(jSONPointer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      JSONArray jSONArray2 = jSONArray1.put(0, (double) 3638);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3639, jSONArray0.length());
      assertEquals(3639, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3639, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONPointer jSONPointer1 = new JSONPointer(linkedList2);
      assertEquals(0, linkedList2.size());
      assertFalse(jSONPointer1.equals((Object)jSONPointer0));
      assertNotNull(jSONPointer1);
      
      JSONArray jSONArray3 = (JSONArray)jSONArray1.optQuery(jSONPointer1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONPointer1, jSONPointer0);
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3639, jSONArray3.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3639, jSONArray0.length());
      assertEquals(3639, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, linkedList2.size());
      assertFalse(jSONPointer1.equals((Object)jSONPointer0));
      assertNotNull(jSONArray3);
      
      Class<GroupLayout.Alignment> class0 = GroupLayout.Alignment.class;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.LEADING;
      GroupLayout.Alignment groupLayout_Alignment1 = jSONArray0.optEnum(class0, 4856, groupLayout_Alignment0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(groupLayout_Alignment0, groupLayout_Alignment1);
      assertSame(groupLayout_Alignment1, groupLayout_Alignment0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3639, jSONArray0.length());
      assertEquals(GroupLayout.Alignment.LEADING, groupLayout_Alignment1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(0L);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Long long0 = new Long((-95));
      assertEquals((-95L), (long)long0);
      assertNotNull(long0);
      
      JSONArray jSONArray2 = jSONArray0.put((Object) null);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      List<Object> list0 = jSONArray0.toList();
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains((-95)));
      assertTrue(list0.contains(0L));
      assertNotNull(list0);
      
      JSONArray jSONArray3 = jSONArray0.optJSONArray((-2726));
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNull(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1939, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      int int0 = 3675;
      List<Object> list0 = jSONArray1.toList();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1939, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, jSONArray1.length());
      assertEquals(1939, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(1938));
      assertNotNull(list0);
      
      JSONArray jSONArray3 = jSONArray2.put(3675, (Collection<?>) list0);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertEquals(3676, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3676, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3676, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1939, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3676, jSONArray3.length());
      assertFalse(list0.contains(1938));
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = new JSONArray((Collection<?>) list0);
      assertEquals(3676, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3676, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1939, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1939, jSONArray4.length());
      assertFalse(jSONArray4.isEmpty());
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(list0.contains(1938));
      assertNotNull(jSONArray4);
      
      try { 
        jSONArray4.getJSONArray((byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      HashMap<RowIdLifetime, DayOfWeek> hashMap0 = new HashMap<RowIdLifetime, DayOfWeek>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put(2281, (Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(2282, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2282, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      List<Object> list0 = jSONArray0.toList();
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2282, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2282, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(2281));
      assertNotNull(list0);
      
      StringReader stringReader0 = new StringReader("w3~TTL6U!!^p=Yb");
      assertNotNull(stringReader0);
      
      boolean boolean0 = jSONArray0.isEmpty();
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2282, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList1.add(clientInfoStatus0);
      assertEquals(2, linkedList1.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean3 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(0.0F, float0, 0.01F);
      
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray1.optEnum(class0, (-3060));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(iterator0);
      
      Class<Component.BaselineResizeBehavior> class1 = Component.BaselineResizeBehavior.class;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.OTHER;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior1 = jSONArray0.optEnum(class1, (-3060), component_BaselineResizeBehavior0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(component_BaselineResizeBehavior0, component_BaselineResizeBehavior1);
      assertSame(component_BaselineResizeBehavior1, component_BaselineResizeBehavior0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(Component.BaselineResizeBehavior.OTHER, component_BaselineResizeBehavior1);
      
      Object object0 = jSONArray0.opt(3492);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put((double) 182);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(183, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(183, jSONArray3.length());
      assertNotNull(jSONArray3);
      
      List<Object> list0 = jSONArray1.toList();
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(183, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(183, list0.size());
      assertFalse(list0.contains(182));
      assertNotNull(list0);
      
      JSONArray jSONArray4 = jSONArray3.optJSONArray(182);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray4);
      assertNotSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray2);
      assertNotSame(jSONArray4, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(183, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(183, jSONArray3.length());
      assertTrue(jSONArray4.isEmpty());
      assertEquals(0, jSONArray4.length());
      assertFalse(jSONArray4.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertNotNull(jSONArray4);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.optJSONArray((-2726));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(0L);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put((float) 0L);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"\":99,\"false\":7,\"z\":true,\"b\":[]}");
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      JSONArray jSONArray3 = jSONArray2.optJSONArray(1921);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertNull(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(91, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(92, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(92, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = new JSONArray();
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertNotNull(jSONArray2);
      
      try { 
        jSONArray2.put((-1815), 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1815] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = jSONArray0.length();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, int0);
      
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 4856;
      JSONArray jSONArray1 = jSONArray0.put(0L);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put((float) 0L);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      int int1 = (-95);
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"\":\"hello\",\"y\":7,\"z\":true,\"b\":{},\"xx\":{}}");
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      try { 
        jSONArray2.getLong((-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-95] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = jSONArray0.optInt(2954);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, int0);
      
      JSONArray jSONArray1 = jSONArray0.put(2954, true);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(2955, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2955, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      int int1 = jSONArray1.optInt(468, 2954);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(2955, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2955, jSONArray1.length());
      assertFalse(int1 == int0);
      assertEquals(2954, int1);
      
      JSONArray jSONArray2 = jSONArray1.put(2954, 2954);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(2955, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2955, jSONArray1.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2955, jSONArray2.length());
      assertNotNull(jSONArray2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      float float0 = jSONArray0.optFloat(61);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      MockFile mockFile0 = new MockFile("org.json.JSONPointer");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("org.json.JSONPointer", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(3, objectArray0.length);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.json.JSONPointer", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("org.json.JSONPointer", mockFile0.toString());
      assertNotNull(printWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = jSONArray0.optInt((-693));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, int0);
      
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.TOOLKIT_EXCLUDE;
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      Dialog.ModalExclusionType dialog_ModalExclusionType1 = jSONArray0.optEnum(class0, 0, dialog_ModalExclusionType0);
      assertSame(dialog_ModalExclusionType0, dialog_ModalExclusionType1);
      assertSame(dialog_ModalExclusionType1, dialog_ModalExclusionType0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(Dialog.ModalExclusionType.TOOLKIT_EXCLUDE, dialog_ModalExclusionType1);
      
      float float0 = jSONArray0.optFloat(696);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(Float.NaN, float0, 0.01F);
      
      int int1 = jSONArray0.optInt(696, (-111));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(int1 == int0);
      assertEquals((-111), int1);
      
      float float1 = (-2254.4F);
      JSONArray jSONArray1 = jSONArray0.put((float) 696);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put((Object) "] not found.");
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONArray0.put((double) (-2254.4F));
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3, jSONArray0.length());
      assertEquals(3, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(float1));
      assertNotNull(linkedList0);
      
      try { 
        jSONArray2.put((-111), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-111] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Desktop.Action desktop_Action0 = Desktop.Action.PRINT;
      boolean boolean3 = linkedList0.add(desktop_Action0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(desktop_Action0));
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList2);
      assertEquals(0, linkedList2.size());
      assertNotNull(jSONPointer0);
      
      JSONArray jSONArray2 = (JSONArray)jSONArray1.query(jSONPointer0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(0, linkedList2.size());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertTrue(linkedList0.contains(desktop_Action0));
      assertNotNull(jSONArray2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(linkedList0.contains(desktop_Action0));
      assertNotNull(bigDecimal1);
      
      JSONArray jSONArray3 = jSONArray0.put(0, (double) 0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1, jSONArray3.length());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertTrue(linkedList0.contains(desktop_Action0));
      assertNotNull(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put((float) 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList2);
      assertEquals(0, linkedList2.size());
      assertNotNull(jSONPointer0);
      
      JSONArray jSONArray2 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList2.size());
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      long long0 = jSONArray0.optLong(149);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.put((float) 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(2, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList2);
      assertEquals(0, linkedList2.size());
      assertNotNull(jSONPointer0);
      
      JSONArray jSONArray3 = (JSONArray)jSONArray1.query(jSONPointer0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, linkedList2.size());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(2, jSONArray3.length());
      assertNotNull(jSONArray3);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      JSONArray jSONArray4 = jSONArray0.put(0, (double) 0);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray4, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(2, jSONArray4.length());
      assertNotNull(jSONArray4);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      int int0 = 3681;
      boolean boolean0 = jSONArray0.optBoolean((-828), false);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(boolean0);
      
      JSONArray jSONArray1 = jSONArray0.put(1726, (-828));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1727, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1727, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      try { 
        jSONArray0.getFloat(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedList<GraphicsDevice.WindowTranslucency> linkedList0 = new LinkedList<GraphicsDevice.WindowTranslucency>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      LinkedList<Desktop.Action> linkedList2 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      boolean boolean1 = linkedList2.containsAll(linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(63, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(64, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(64, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      MockFile mockFile0 = new MockFile("org.json.JSONPointer", "false");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("] not found.", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(0, objectArray0.length);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/org.json.JSONPointer", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("false", mockFile0.getName());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/org.json.JSONPointer/false", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(printWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertNotNull(mockPrintWriter1);
      
      mockPrintWriter1.println("false");
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/org.json.JSONPointer", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("false", mockFile0.getName());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/org.json.JSONPointer/false", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "false");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PrintWriter printWriter1 = mockPrintWriter0.append('}');
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, printWriter1);
      assertNotSame(printWriter1, mockPrintWriter1);
      assertSame(printWriter1, mockPrintWriter0);
      assertSame(printWriter1, printWriter0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/org.json.JSONPointer", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("false", mockFile0.getName());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/org.json.JSONPointer/false", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter1.equals((Object)mockPrintWriter1));
      assertNotNull(printWriter1);
      
      Writer writer0 = jSONArray0.write((Writer) printWriter1, 1589, 1589);
      assertSame(mockPrintWriter0, writer0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(printWriter1, writer0);
      assertNotSame(printWriter1, mockPrintWriter1);
      assertSame(printWriter1, mockPrintWriter0);
      assertSame(printWriter1, printWriter0);
      assertSame(writer0, printWriter1);
      assertSame(writer0, mockPrintWriter0);
      assertSame(writer0, printWriter0);
      assertNotSame(writer0, mockPrintWriter1);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/org.json.JSONPointer", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("false", mockFile0.getName());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/org.json.JSONPointer/false", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter1.equals((Object)mockPrintWriter1));
      assertFalse(writer0.equals((Object)mockPrintWriter1));
      assertNotNull(writer0);
      
      boolean boolean2 = jSONArray0.optBoolean((-547));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = 790;
      JSONArray jSONArray1 = jSONArray0.put(52, false);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(53, jSONArray0.length());
      assertEquals(53, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Class<Thread.State> class0 = Thread.State.class;
      try { 
        jSONArray0.getEnum(class0, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[52] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{\"x\":\"hello\",\"y\":7,\"z\":true,\"org.json.JSONPointerException\":[{\"x\":false}],\"b\":{\"x\":\"a string\"}}");
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      try { 
        jSONArray0.put((-2364), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2364] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = jSONArray0.optInt(66, 31);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 182;
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      int int1 = jSONArray1.optInt(182, 4);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      JSONArray jSONArray2 = jSONArray0.put(182, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      String string0 = jSONArray2.join("99");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(183, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(string0);
      
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Long long0 = new Long(182);
      assertEquals(182L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = linkedList0.add(long0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(long0));
      
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKD;
      Normalizer.Form normalizer_Form1 = jSONArray2.optEnum(class0, 182, normalizer_Form0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(normalizer_Form0, normalizer_Form1);
      assertSame(normalizer_Form1, normalizer_Form0);
      assertEquals(183, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertEquals(183, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(Normalizer.Form.NFKD, normalizer_Form1);
      assertTrue(linkedList0.contains(long0));
      
      Class<Dialog.ModalExclusionType> class1 = Dialog.ModalExclusionType.class;
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(long0));
      assertNotNull(linkedList1);
      
      // Undeclared exception!
      try { 
        linkedList0.addAll(182, (Collection<? extends Long>) linkedList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 182, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("wh ^W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONArray0.optBigInteger(1920, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      MockFile mockFile0 = new MockFile("] not found.", "org.json.JSONPointer");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("org.json.JSONPointer", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(3, objectArray0.length);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("org.json.JSONPointer", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/] not found./org.json.JSONPointer", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/] not found.", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(printWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      assertEquals(3, objectArray0.length);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertNotNull(mockPrintWriter1);
      
      boolean boolean1 = mockPrintWriter1.checkError();
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertEquals(3, objectArray0.length);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("org.json.JSONPointer", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/] not found./org.json.JSONPointer", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/] not found.", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      mockPrintWriter1.println("] not found.");
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertEquals(3, objectArray0.length);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("org.json.JSONPointer", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/] not found./org.json.JSONPointer", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/] not found.", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      PrintWriter printWriter1 = mockPrintWriter1.append('W');
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter1);
      assertNotSame(printWriter0, printWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter1);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertNotSame(printWriter1, mockPrintWriter0);
      assertNotSame(printWriter1, printWriter0);
      assertSame(printWriter1, mockPrintWriter1);
      assertEquals(3, objectArray0.length);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("org.json.JSONPointer", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/] not found./org.json.JSONPointer", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/] not found.", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(printWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter1.equals((Object)printWriter0));
      assertNotNull(printWriter1);
      
      Writer writer0 = jSONArray0.write((Writer) printWriter1, 1589, (-547));
      assertNotSame(mockPrintWriter0, writer0);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter1);
      assertNotSame(printWriter0, printWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, writer0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter1);
      assertSame(mockPrintWriter1, writer0);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertNotSame(printWriter1, mockPrintWriter0);
      assertNotSame(printWriter1, printWriter0);
      assertSame(printWriter1, writer0);
      assertSame(printWriter1, mockPrintWriter1);
      assertSame(writer0, mockPrintWriter1);
      assertSame(writer0, printWriter1);
      assertNotSame(writer0, mockPrintWriter0);
      assertNotSame(writer0, printWriter0);
      assertEquals(3, objectArray0.length);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("org.json.JSONPointer", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/] not found./org.json.JSONPointer", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/] not found.", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter0.equals((Object)printWriter1));
      assertFalse(printWriter0.equals((Object)printWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(printWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter1.equals((Object)printWriter0));
      assertFalse(writer0.equals((Object)printWriter0));
      assertFalse(writer0.equals((Object)mockPrintWriter0));
      assertNotNull(writer0);
      
      boolean boolean3 = jSONArray0.optBoolean(1594);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      try { 
        jSONArray0.getJSONObject((-547));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-547] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray0.optEnum(class0, 1713);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      
      Object object0 = jSONArray0.remove(1704);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(object0);
      
      String string0 = jSONArray0.optString(163, "=_HM");
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals("=_HM", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      boolean boolean0 = linkedList1.add(clientInfoStatus0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(clientInfoStatus0));
      
      boolean boolean2 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0.0F, float0, 0.01F);
      
      JSONArray jSONArray2 = jSONArray0.put(0, 2201.69043578639);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      Class<Desktop.Action> class0 = Desktop.Action.class;
      jSONArray1.optEnum(class0, (-3060));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      
      Object object0 = jSONArray1.remove(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(2201.69043578639, object0);
      assertNotNull(object0);
      
      String string0 = jSONArray1.optString(5407, "=_HM");
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertEquals("=_HM", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.put(3794, (Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3795, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3795, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = (JSONArray)jSONArray1.remove(3794);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3794, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3794, jSONArray1.length());
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertNotNull(jSONArray2);
      
      try { 
        jSONArray1.getLong(3794);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3794] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(boolean0);
      
      boolean boolean1 = jSONArray0.optBoolean(0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      float float0 = jSONArray1.getFloat(0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertEquals(0.0F, float0, 0.01F);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1747));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1747
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      try { 
        jSONArray0.put((-556), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-556] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 182;
      try { 
        jSONArray0.getJSONObject(182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[182] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 3681;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int1 = 114;
      try { 
        jSONArray0.getJSONObject(114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[114] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      linkedList0.add(double0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      jSONArray1.put((Object) jSONArray0);
      jSONArray0.put(10, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'b';
      charArray0[2] = '@';
      charArray0[3] = '*';
      charArray0[4] = 'E';
      charArray0[5] = '>';
      jSONArray1.toString();
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      int int1 = 10;
      try { 
        jSONArray2.getString(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0L);
      Float float0 = new Float(1829.0F);
      jSONArray1.spliterator();
      Class<Window.Type> class0 = Window.Type.class;
      int int0 = (-1);
      int int1 = 2145;
      jSONArray1.optNumber(2145, (Number) float0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.similar((Object) null);
      int int2 = (-1167);
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray("J?hcq\"(Grcx@hwxpwl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      HashMap<Window.Type, GroupLayout.Alignment> hashMap0 = new HashMap<Window.Type, GroupLayout.Alignment>();
      jSONArray1.put((Map<?, ?>) hashMap0);
      jSONArray0.put((-3876.493245769));
      JSONArray jSONArray2 = jSONArray0.optJSONArray((-2726));
      assertNull(jSONArray2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.put(227.06966836056);
      jSONArray0.put((-1713.74));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONArray0.query(jSONPointer0);
      jSONArray0.spliterator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(0, bigDecimal0);
      assertEquals((byte) (-29), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((double) 182);
      jSONArray0.optInt(182, 93);
      BigDecimal bigDecimal0 = jSONArray1.optBigDecimal(44, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      linkedList0.poll();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      int int0 = 1031;
      bigDecimal0.setScale(1031);
      jSONArray0.optBigDecimal(117, bigDecimal0);
      HashMap<Resource.AuthenticationType, Byte> hashMap0 = new HashMap<Resource.AuthenticationType, Byte>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      int int1 = 2344;
      try { 
        jSONArray0.getJSONArray(2344);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2344] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(3681, 114);
      try { 
        jSONArray0.getString(1512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1512] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONArray0.put(199, (Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.optBoolean(199);
      assertEquals(200, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(66, true);
      try { 
        jSONArray0.getBigInteger(66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[66] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(58, 58);
      List<Object> list0 = jSONArray1.toList();
      assertEquals(59, jSONArray0.length());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (Collection<?>) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      linkedList1.add(clientInfoStatus0);
      linkedList0.containsAll(linkedList1);
      jSONArray0.optBoolean(0, true);
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      jSONArray1.optBoolean(0, true);
      jSONArray1.put(0, (double) 0);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("{\"fruit\":\"Apple\",\"size\":\"Large\",\"color\":null,\"value\":true,\"value2\":false,\"number\":\"1\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getInt(1491);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1491] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      linkedList0.add(byte0);
      byte byte1 = (byte)0;
      Byte byte2 = new Byte((byte)0);
      linkedList0.add(byte2);
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 46;
      try { 
        jSONArray0.getInt(46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[46] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONTokener jSONTokener0 = new JSONTokener(" [cTharacter");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(182, false);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(169, (-1534.6359));
      int int0 = jSONArray0.length();
      assertEquals(170, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      linkedList0.add(double0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      int int0 = 10;
      jSONArray1.put((Object) jSONArray0);
      jSONArray0.put(10, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'b';
      charArray0[2] = '@';
      charArray0[3] = '*';
      charArray0[4] = 'E';
      charArray0[5] = '>';
      charArray0[6] = '9';
      charArray0[7] = 'y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 0, (-592));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getBoolean(159);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[159] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1938;
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      int int1 = (-3458);
      jSONArray1.optLong(1938, (-2812L));
      int int2 = 1896;
      // Undeclared exception!
      jSONArray0.toString(1896);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      try { 
        jSONArray0.getNumber(428);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[428] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong((-599));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      int int0 = 745;
      jSONArray0.optEnum(class0, 745);
      int int1 = (-954);
      try { 
        jSONArray0.getBigInteger((-954));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-954] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.getBigInteger(117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[117] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(470, true);
      jSONArray0.isNull(59);
      assertEquals(471, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getBigDecimal(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Integer integer0 = new Integer(0);
      linkedList0.push(integer0);
      int int0 = 65;
      try { 
        jSONArray0.getBigDecimal(65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[65] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1L));
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<TrayIcon.MessageType> linkedList0 = new LinkedList<TrayIcon.MessageType>();
      LinkedList<TrayIcon.MessageType> linkedList1 = new LinkedList<TrayIcon.MessageType>(linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(10, (Collection<?>) linkedList1);
      jSONArray1.put((float) 10);
      assertEquals(12, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      jSONArray0.toString(91);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) linkedList1);
      jSONArray1.put(2, 0);
      jSONArray0.optBoolean(0, true);
      JSONArray jSONArray2 = jSONArray1.put(0, (double) 2);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray2.write((Writer) stringWriter0, 91, 698);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4856;
      JSONArray jSONArray1 = jSONArray0.put(0L);
      JSONArray jSONArray2 = jSONArray1.put((float) 0L);
      int int1 = (-95);
      JSONObject jSONObject0 = new JSONObject();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"x\":\"hello\",\"y\":7,\"z\":true,\"b\":{}}");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      // Undeclared exception!
      jSONArray2.write((Writer) mockPrintWriter0, (-95), 4856);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 182;
      JSONArray jSONArray1 = jSONArray0.put((double) 182);
      byte[] byteArray0 = new byte[0];
      try { 
        jSONArray1.getFloat(182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[182] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Resource.AuthenticationType, Float> hashMap0 = new HashMap<Resource.AuthenticationType, Float>();
      Object object0 = new Object();
      jSONArray0.put(47, object0);
      int int0 = 0;
      jSONArray0.put((double) 0);
      try { 
        jSONArray0.getFloat((-4612));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4612] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getString(5368);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[5368] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      byte byte0 = (byte)93;
      int int0 = 3675;
      List<Object> list0 = jSONArray1.toList();
      JSONArray jSONArray2 = jSONArray1.put(3675, (Collection<?>) list0);
      // Undeclared exception!
      jSONArray2.toString(28);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 114;
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray0.optBigInteger(44, bigInteger0);
      jSONArray0.optDouble(93, (double) (-2316));
      Byte byte0 = new Byte((byte)98);
      Byte byte1 = new Byte((byte)81);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.add(byte0);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("{\"\":0.0}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)93;
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray1.optBigInteger(1938, bigInteger0);
      bigInteger1.signum();
      jSONArray2.put(1938, (Object) bigInteger1);
      jSONArray0.optDouble(1938);
      jSONArray0.toString();
      try { 
        jSONArray1.getString((byte) (-41));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-41] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Collection<?>) linkedList0);
      double double0 = jSONArray1.optDouble(0, (double) 0);
      assertEquals(1, jSONArray0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONArray0.put(199, (Collection<?>) linkedList0);
      jSONArray0.put(199, (Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.optBoolean(199);
      assertEquals(200, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONArray1.put(1938, (Object) locale_Category0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = jSONArray1.optBigInteger(1938, bigInteger0);
      bigInteger2.signum();
      assertEquals(1939, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1938;
      int int1 = (-3936);
      try { 
        jSONArray0.put((-3936), (long) 1938);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3936] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-3653), (float) (-3653));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3653] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList0.add(proxy_Type0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = (-2545);
      try { 
        jSONArray0.put((-2545), (-691L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2545] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(182);
      linkedList0.add(long0);
      JSONArray jSONArray1 = jSONArray0.put(182, (Collection<?>) linkedList0);
      jSONArray0.toString();
      float float0 = jSONArray1.optFloat(182);
      assertEquals(183, jSONArray0.length());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString(175);
      jSONArray0.join("org.json.JSONArray");
      JSONArray jSONArray1 = jSONArray0.put(143);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      // Undeclared exception!
      try { 
        jSONArray0.query("#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}", "{\"x\":[],\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      jSONArray0.query(jSONPointer0);
      JSONArray jSONArray1 = jSONArray0.put(91);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{\"x\":\"hello\",\"y\":7,\"z\":\"a string\",\"a\":[],\"b\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      linkedList1.add(clientInfoStatus0);
      linkedList0.containsAll(linkedList1);
      jSONArray0.put(2238.805412219082);
      jSONArray0.optDouble(384);
      jSONArray0.toString();
      StringReader stringReader0 = new StringReader("java.io.StringWriter@0000000005");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 48;
      JSONArray jSONArray1 = jSONArray0.put(65, (Collection<?>) linkedList0);
      jSONArray1.optString(65, (String) null);
      jSONArray1.optDouble(48, (-3800.7492));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      int int1 = 2688;
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'B';
      MathContext mathContext0 = null;
      try {
        mathContext0 = new MathContext("org.json.JSONArray@0000000002");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad string format
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject((-95));
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove(184);
      jSONArray0.optString(4, "[R(Lb=0");
      HashMap<Resource.AuthenticationType, StandardLocation> hashMap0 = new HashMap<Resource.AuthenticationType, StandardLocation>();
      JSONArray jSONArray1 = jSONArray0.put(184, (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONArray1.similar(hashMap0);
      assertEquals(185, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONArray jSONArray1 = jSONArray0.put(66, (Object) locale_Category0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONArray0.put(66, (Collection<?>) linkedList0);
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.similar(jSONArray2);
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONArray1.getEnum(class0, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber((-131));
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONArray0.getEnum(class0, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(66, true);
      boolean boolean0 = jSONArray0.optBoolean(66);
      assertEquals(67, jSONArray0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(58);
      assertNull(jSONObject0);
      
      double double0 = jSONArray0.optDouble(510);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.similar("TU& X}C|qR");
      JSONObject jSONObject0 = jSONArray0.optJSONObject(58);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1938;
      JSONArray jSONArray1 = jSONArray0.put(1938, (long) 1938);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      JSONArray jSONArray2 = jSONArray1.put(1938, (Object) locale_Category0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray1.optBigInteger(1938, bigInteger0);
      bigInteger1.signum();
      jSONArray2.put(1938, (Object) bigInteger1);
      jSONArray0.optDouble(1938);
      jSONArray0.toString();
      try { 
        jSONArray1.getString((byte) (-41));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-41] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1938, (long) 1938);
      jSONArray0.optJSONObject(1938);
      assertEquals(1939, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(66, true);
      jSONArray1.join("K7V$ruN");
      assertEquals(67, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONArray0.put(0, (Collection<?>) linkedList0);
      jSONArray0.join("'wRY?P");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1569, (Collection<?>) linkedList0);
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONArray1.getEnum(class0, 1569);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1569] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray1 = jSONArray0.put(3672, (Collection<?>) linkedList0);
      jSONArray1.toString();
      assertEquals(3673, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 182;
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONArray0.put(0.0);
      JSONArray jSONArray1 = jSONArray0.put(182, (Collection<?>) linkedList0);
      jSONArray1.join("99");
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Long long0 = new Long(0L);
      linkedList0.add(long0);
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKD;
      jSONArray1.optEnum(class0, 182, normalizer_Form0);
      Class<Dialog.ModalExclusionType> class1 = Dialog.ModalExclusionType.class;
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        linkedList0.addAll(182, (Collection<? extends Long>) linkedList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 182, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Float float0 = new Float(1.0);
      linkedList0.offerFirst(float0);
      jSONArray0.spliterator();
      Class<Window.Type> class0 = Window.Type.class;
      jSONArray0.optNumber((-1), (Number) float0);
      boolean boolean0 = jSONArray0.similar((Object) null);
      assertFalse(boolean0);
      
      jSONArray0.optNumber((-1167));
      Window.Type window_Type0 = Window.Type.UTILITY;
      jSONArray0.optEnum(class0, 0, window_Type0);
      boolean boolean1 = jSONArray0.optBoolean(10);
      jSONArray0.optString(10, (String) null);
      double double0 = jSONArray0.optDouble(0, 115.58581084219);
      assertEquals(115.58581084219, double0, 0.01);
      
      boolean boolean2 = jSONArray0.isEmpty();
      assertFalse(boolean2 == boolean1);
      
      double double1 = jSONArray0.optDouble(1834);
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((double) 182);
      String string0 = jSONArray1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" [character ");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("tv$;;tr,I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"x\":\"hello\",\"y\":7,\"z\":true,\"a\":[],\"b\":{}}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      jSONArray0.optLong(1, (long) 0);
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      jSONArray0.put(316, (Collection<?>) linkedList0);
      assertEquals(317, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      double double0 = jSONArray0.optDouble(175, 2039.942);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(2039.942, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LinkedList<Desktop.Action> linkedList0 = new LinkedList<Desktop.Action>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<ClientInfoStatus> linkedList1 = new LinkedList<ClientInfoStatus>();
      jSONArray0.toJSONObject((JSONArray) null);
      LinkedList<BigInteger> linkedList2 = new LinkedList<BigInteger>();
      Object object0 = new Object();
      linkedList2.remove(object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      LinkedList<BigInteger> linkedList3 = new LinkedList<BigInteger>();
      linkedList3.push(bigInteger0);
      jSONArray0.optBoolean(1892, false);
      jSONArray0.put(93, 0.0);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.spliterator();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      linkedList0.remove((Object) "7@0bRV1j(*{xD)");
      BigInteger bigInteger0 = BigInteger.ONE;
      linkedList0.push(bigInteger0);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
