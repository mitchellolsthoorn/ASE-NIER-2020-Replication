/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 18:26:23 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.Instant;
import java.time.ZoneId;
import java.time.chrono.HijrahDate;
import java.time.chrono.JapaneseDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UUID;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IN:";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject((Object) null, stringArray0);
      boolean boolean0 = JSONPath.set((Object) jSONObject0, "Z", (Object) null);
      assertEquals(1, jSONObject0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IN:";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject((Object) null, stringArray0);
      assertNotNull(jSONObject0);
      
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("=^(.[6:wSe?%L,S[");
      JSONPath jSONPath0 = JSONPath.compile("a6N3G@{!bXF");
      Instant instant0 = MockInstant.ofEpochSecond((-2936L), 1097L);
      Date date0 = Date.from(instant0);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, date0, instant0, jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer((-1993));
      Short short0 = new Short((short) (-10953));
      boolean boolean0 = JSONPath.eqNotNull(short0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Short short0 = new Short((short)1751);
      boolean boolean0 = JSONPath.containsValue((Object) linkedList0, "0", (Object) short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("VVeZ3");
      Locale locale0 = Locale.UK;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1925, (-1935), 106);
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, javaBeanSerializer0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -35
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 0);
      Short short0 = new Short((short)104);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, bigDecimal0, short0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("wl8$7TT|)");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'w, but ')'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" SZ28c. E#>j|UV");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("scanLong");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nex! +7t");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("I0/&4'O+p8");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-32762L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9VP}/hY+Y,M^8Ni_Rv");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(9L, object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement(";g{(5r8n\"FKh?%Wdc`", 4389238039309364973L, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nD=");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntOpSegement0);
      assertSame(jSONPath_IntOpSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("evalSize error : ");
      jSONPath_JSONPathParser0.readSegement();
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("(Ljava/lang/String;Z)V", (Long[]) null, false);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_IntObjInSegement0);
      assertSame(jSONPath_Filter0, jSONPath_IntObjInSegement0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$GH.mLN`wr YbHA/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $GH.mLN`wr YbHA/
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.size((Object) "SFT%+pi", "E.'17");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("IN", "q!0SYV[");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      boolean boolean0 = jSONPath0.remove((Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("null");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("trim");
      jSONPath0.init();
      assertEquals("trim", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer");
      Byte byte0 = new Byte((byte)75);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepGetPropertyValues(byte0, arrayList0);
      assertEquals("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("K3-`?%+V");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept(')');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '), but 'K'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("[O.OsQ%5Ue#Pc/d1s", 0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("5W#tz]Z_;9Pb");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLTimeoutException0, jSONPath_WildCardSegment0, "5W#tz]Z_;9Pb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1548));
      JSONPath jSONPath0 = JSONPath.compile("BR");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("BR", hashMap0, sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLNonTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not support type :");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1753), 124, (-2609));
      // Undeclared exception!
      jSONPath_RangeSegment0.eval(jSONPath0, "create deserializeUsing ObjectDeserializer error", (Object) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'0%m4*)ti");
      jSONPath_JSONPathParser0.next();
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-1548));
      assertEquals((-1548.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("yyyy-MM-dd HH:mm:ss.SSS", "0");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.awt.Font", ",", (Throwable) null);
      int int0 = JSONPath.size((Object) sQLFeatureNotSupportedException0, ",");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      int int0 = JSONPath.size((Object) jSONPath_Operator0, "V");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.util.concurrent.atomic.LongAdder");
      int int0 = jSONPath0.size((Object) sQLSyntaxErrorException0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com", "LDTC|tZjtr)#Mk", 111, sQLClientInfoException0);
      boolean boolean0 = jSONPath0.setPropertyValue(hashMap0, "VVeZ3", (-4270347329889690746L), sQLSyntaxErrorException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("trim");
      // Undeclared exception!
      jSONPath0.setPropertyValue(jSONPath0, "fastjson.parser.deny", (-2443L), "b_/\"oIwkxY");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("0");
      int[] intArray0 = new int[6];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_MultiIndexSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/");
      BigInteger bigInteger0 = BigInteger.ONE;
      Set<?> set0 = jSONPath0.keySet((Object) bigInteger0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("m,^.9/_B'@^ie|R:F");
      assertFalse(collection0.contains("m,^.9/_B'@^ie|R:F"));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      Object object0 = jSONPath0.getPropertyValue((Object) null, "", 621L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.ParseContext");
      Class<Date> class0 = Date.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.ParseContext");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Class<Date> class0 = Date.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.ParseContext");
      Object object0 = jSONPath0.getArrayItem((Object) null, 47);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$1");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      int int0 = jSONPath0.evalSize(jSONPath_SizeSegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("cause");
      int int0 = jSONPath0.evalSize("cause");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Double double0 = new Double((-1548));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(":", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(double0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1548));
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Q3-g7Gt8\"", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_ArrayAccessSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      Object object0 = JSONPath.eval((Object) uUID0, "like");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Object object0 = jSONPath0.eval((Object) serializeConfig0);
      assertSame(serializeConfig0, object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        JSONPath.size((Object) class0, "SZ28c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.ParseContext");
      Class<Short> class0 = Short.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.ASMSerializer_228_Short
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      Locale locale0 = Locale.ITALIAN;
      SQLTransientException sQLTransientException0 = new SQLTransientException("5.%t%j(", "5.%t%j(", (-2298));
      // Undeclared exception!
      jSONPath0.setPropertyValue(locale0, "5.%t%j(", (-5808492001967845171L), sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Feature feature0 = Feature.DisableFieldSmartMatch;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Long long0 = new Long((-993L));
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(feature0, "com.alibaba.fastjson.JSONPath$ArrayAccessSegment", (-993L), long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = new JSONPath("yyyy-MM-dd");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "yyyy-MM-dd", 15, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.autoTypeAccept", "fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 127, sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Class<DataTruncation> class0 = DataTruncation.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_WildCardSegment0, "LT", (Object) throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      JSONPath.set((Object) locale0, "fastjson.parser.safeMode", (Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      JSONPath jSONPath1 = JSONPath.compile("fastjson.parser.safeMode");
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.autoTypeAccept", "5.%t%j(", 64);
      // Undeclared exception!
      jSONPath1.set((Object) jSONPath0, (Object) sQLWarning0, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_WildCardSegment0, (Object) propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sft");
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) "sft");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = JSONPath.compile("cause");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) sQLTransactionRollbackException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      Float float0 = new Float((-1452.9653F));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", but '", "km%", 1097);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) float0, (Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("AbSk?U7=$QF");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLDataException sQLDataException0 = new SQLDataException("AbSk?U7=$QF", "uq", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLDataException0, (Object) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : AbSk?U7=$QF
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RLIKE";
      stringArray0[1] = "RLIKE";
      stringArray0[2] = "not";
      stringArray0[3] = "RLIKE";
      stringArray0[4] = "RLIKE";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("/stackTrace/10", stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "null";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("null", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "%", (-2351));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLTimeoutException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "..";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_SizeSegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(938);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("zL%jfGM>II0w", serializeConfig0, parserConfig0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(class0, "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      jSONPath0.removePropertyValue(javaBeanSerializer0, "com.alibaba.fastjson.JSONPath$FilterGroup", false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.AtomicCodec");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "com.alibaba.fastjson.serializer.AtomicCodec", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 265);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = new Long(3299L);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) long0, "/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("co");
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      jSONPath0.remove((Object) locale0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("fastjson.parser.deny.internal", "fastjson.parser.safeMode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-zz8GfQW", "(Z)V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath.read("", "");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) japaneseDate0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Float> class0 = Float.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) javaBeanSerializer0, "is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) "+!?VuwP9", "55]i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 55]i
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com");
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("step must greater than zero : ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : step must greater than zero : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("error parse false");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : error parse false
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JSONPath jSONPath0 = new JSONPath("1.2.68");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer");
      Locale locale0 = Locale.UK;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(calendar0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("R;Q~EIehp749>yY/c", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue("ParseContext", "fastjson.parser.autoTypeSupport", 2522L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("VVeZ3");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("dv,c");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("dv,c", 2449);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("like", "fastjson.parser.autoTypeSupport", parserConfig0, (-2500), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "2C^Jk", parserConfig0, 1023, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("parser", "gxez*/QD{4[5y0C9,", parserConfig0, 938, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : gxez*_/QD{4[5y0C9,
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("kEC |l_pQ,r");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("kEC |l_pQ,r", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : kEC |l_pQ,r
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BR");
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) class0, "com");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("5%NpTq(?\rq2");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 5%NpTq(?\rq2
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com", "*");
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", intArray0, sQLIntegrityConstraintViolationException0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "*", (-6586085717218287427L), batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.ThrwableDeserializer");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("null", (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$1");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iK;,]|=R", "%^Z;ZftD");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLTransientConnectionException0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) class0, "expect string", (Object) "b_/\"oIwkxY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : expect string
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("P{\r?+r|)B^S_j~HW");
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("P{\r?+r|)B^S_j~HW", intArray0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "P{\r?+r|)B^S_j~HW", (Object) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : P{\r?+r|)B^S_j~HW
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "", "autoTypeAccept");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("ParseContext", (SerializeConfig) null, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$MultiPropertySegment", "R;Q~EIehp749>yY/c", (-3030));
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "fastjson.parser.autoTypeSupport", sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, hijrahDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeAccept");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLDataException0, "plB0B", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path plB0B
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%;Ps^=I?yr/K");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, sQLTransactionRollbackException0, (-17));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1548));
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("CustomMapDeserializer", false);
      JSONPath jSONPath0 = JSONPath.compile("6:9y0:FZ");
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath_ArrayAccessSegment0, "com.alibaba.fastjson.serializer.LongCodec");
      assertEquals("6:9y0:FZ", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("IN:", false);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("WriteClassName");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IN:");
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      jSONScanner0.scanFieldDate(charArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("T", sQLIntegrityConstraintViolationException0);
      boolean boolean0 = JSONPath.eq((Object) null, sQLIntegrityConstraintViolationException1);
      assertFalse(boolean0);
      
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("iIdTy*BwnV$G.!{P]2@");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath.keySet((Object) jSONPath_FilterSegment0, "parser.features.NonStringKeyAsString");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IN:";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject((Object) null, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("evalKeySet error : ");
      jSONPath_JSONPathParser0.readSegement();
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "\\m90c>AS/2";
      JSONPath jSONPath0 = JSONPath.compile("m90c>AS/2");
      SQLDataException sQLDataException0 = new SQLDataException("nin");
      jSONPath0.keySet((Object) sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) serializeConfig0, (Object) parserConfig0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("[\"l@p?[^|", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning("[\"l@p?[^|", "fastjson.parser.autoTypeAccept", 64);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      boolean boolean0 = jSONPath0.set((Object) sQLInvalidAuthorizationSpecException0, (Object) sQLInvalidAuthorizationSpecException0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.ThrwableDeserializer");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3Yry.o5I");
      jSONPath_JSONPathParser0.readValue();
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.parser.deserializer.ThrwableDeserializer");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Segment0, (Object) sQLDataException0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(90, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("UJ4'y", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) serializeConfig0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : UJ4'y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) "/stackTrace/13", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) serializeConfig0, (Object[]) null);
      assertEquals("@type", serializeConfig0.getTypeKey());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      boolean boolean0 = jSONPath0.containsValue((Object) batchUpdateException0, (Object) ",");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      JSONPath jSONPath0 = new JSONPath("/");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = jSONPath0.containsValue((Object) bigInteger0, (Object) "like");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.alibaba.fastjson.JSONPath$Context");
      BigDecimal bigDecimal0 = new BigDecimal((long) 111);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLNonTransientConnectionException0, (Object) bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.ParseContext");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeSupport", "fastjson", 1624);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", "^.i52B`O#^~f", (-348), sQLSyntaxErrorException0);
      boolean boolean0 = jSONPath0.contains((Object) sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 298);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONPath_MultiIndexSegment0, jSONReaderScanner0, parserConfig0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$Context");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("VVeZ3");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("E", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(":", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/String;)Z");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2;Ljava/lang/String;)Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("IN:");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath jSONPath0 = JSONPath.compile("!c9");
      int[] intArray0 = new int[8];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, jSONPath_MultiIndexSegment0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$MultiIndexSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(126, (-2), 4096);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "T";
      stringArray0[1] = "/stackTrace/12";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_RangeSegment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)6);
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(byte0, stringArray0);
      assertEquals((byte)6, object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(938);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fastjson.parser.autoTypeAccept";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(serializeConfig0, stringArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Short short0 = new Short((short)198);
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(short0, stringArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      JSONPath jSONPath0 = new JSONPath("({+Ye2LA_P~d");
      int int0 = jSONPath0.evalSize(calendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BR");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("vF@fWZxVxc8Tgt8ne");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5, "com.alibaba.fastjson.JSONPath$FilterGroup");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(5, 14, (-1793346306));
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("vF@fWZxVxc8Tgt8ne", "illegal state. ", (-11), hashMap0, sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException0);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, mockGregorianCalendar0, sQLRecoverableException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLClientInfoException0, object0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_Operator0, "A");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("IN:");
      SQLDataException sQLDataException0 = new SQLDataException("null", "p7SGz.", 4);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/2", true);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/Wga$D|T`v~Td");
      Byte byte0 = new Byte((byte)6);
      boolean boolean0 = jSONPath0.removePropertyValue(byte0, "/Wga$D|T`v~Td", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("p7SGz.", true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IN:";
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNotNull(object0);
      
      JSONPath jSONPath0 = JSONPath.compile("T");
      boolean boolean0 = jSONPath0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("T", "IN:", 0);
      SerializeConfig serializeConfig0 = new SerializeConfig(91, false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("parser.features.NonStringKeyAsString", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(parserConfig0, "fastjson.parser.autoTypeAccept", (-4057L), sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path parser.features.NonStringKeyAsString, segement fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Feature feature0 = Feature.IgnoreAutoType;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      int[] intArray0 = new int[0];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com", "com");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.autoTypeAccept", intArray0, sQLIntegrityConstraintViolationException0);
      jSONPath0.deepSet(feature0, "*", (-73L), batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.ParseContext");
      jSONPath0.deepSet((Object) null, "UAD/(]F+86UtZ6AQx?", (-382L), (Object) null);
      assertEquals("com.alibaba.fastjson.parser.ParseContext", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.ParseContext");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(32, (-2410), (-2410), (-2410), 32);
      jSONPath0.deepScan(mockGregorianCalendar0, "y4buL2fFJd2opXF", linkedList0);
      assertEquals("com.alibaba.fastjson.parser.ParseContext", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("IN:");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "T";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(simplePropertyPreFilter0, "com.alibaba.fastjson.JSONPath$KeySetSegment", linkedList0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com");
      JSONPath jSONPath0 = new JSONPath("com");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONPath_NotNullSegement0);
      jSONPath0.deepScan(linkedList0, "t^", linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.util.Collections$UnmodifiableMap");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLIntegrityConstraintViolationException0, "com.alibaba.fastjson.JSONPath$MultiPropertySegment", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path com.alibaba.fastjson.JSONPath$MultiPropertySegment, segement com.alibaba.fastjson.JSONPath$MultiPropertySegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("com", "stackTrace");
      boolean boolean0 = jSONPath0.set((Object) hashMap0, (Object) "stackTrace");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = new Integer((-1898));
      boolean boolean0 = JSONPath.eqNotNull(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float float0 = new Float((-2263.7222F));
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Double double0 = new Double(1L);
      boolean boolean0 = JSONPath.eqNotNull(double0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Float float0 = new Float(1000.0F);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Short short0 = new Short((short)3142);
      Float float0 = new Float((float) (short)3142);
      boolean boolean0 = JSONPath.eqNotNull(float0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Short short0 = new Short((short)456);
      Float float0 = new Float(0.0F);
      boolean boolean0 = JSONPath.eqNotNull(short0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((byte)100, (byte)12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((-1580386065683472715L), bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("LE");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      boolean boolean0 = JSONPath.eq(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      boolean boolean0 = JSONPath.eq(sQLTransientConnectionException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Long long0 = new Long((-2806L));
      boolean boolean0 = JSONPath.eq(long0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      Set<?> set0 = jSONPath0.evalKeySet("5.%t%j(");
      assertNotNull(set0);
      
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson", "5.%t%j(", intArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, batchUpdateException0, set0);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TreeSet<SQLNonTransientConnectionException> treeSet0 = new TreeSet<SQLNonTransientConnectionException>();
      JSONPath jSONPath0 = JSONPath.compile("/");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[(7wJ;lY", "iE%grp$", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, treeSet0, sQLTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("VVeZ3");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(jSONPath0, stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IN:";
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("[J");
      Object object1 = jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath0, object0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, parserConfig0, (byte)6, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.parser.ParserConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      int int0 = JSONPath.size((Object) jSONPath_WildCardSegment0, "0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("VVeZ3");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny.internal", "fastjson.parser.autoTypeSupport");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.autoTypeAccept");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("new", 2027, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_DoubleOpSegement0, false);
      SQLWarning sQLWarning0 = new SQLWarning("/cause/stackTrace", "new", (-82), sQLTransactionRollbackException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "null", sQLWarning0, jSONPath_FilterSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com");
      JSONPath jSONPath0 = new JSONPath("com");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, true);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, parserConfig0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fastjson.parser.autoTypeSupport", intArray0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("G{k");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, intArray0[0], batchUpdateException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("C`0UH", serializeConfig0, (ParserConfig) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("C`0UH", (-1548), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      MockThrowable mockThrowable0 = new MockThrowable("C`0UH");
      SQLDataException sQLDataException0 = new SQLDataException("C`0UH", "C`0UH", (-1548), mockThrowable0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLDataException0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath_KeySetSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("A");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, propertyNamingStrategy0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("groovy.lang.MetaClass", (-491), 534L, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_IntBetweenSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      JSONPath jSONPath0 = JSONPath.compile("iC8gbW,;F6@$A");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "iC8gbW,;F6@$A", sQLClientInfoException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("b!J6");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("'s*,s*'", "org.springframework.security.web.authentication.WebAuthenticationDetails", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, "/beanInfo/fields/2/method/root");
      assertEquals("/beanInfo/fields/2/method/root", object0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      JSONPath jSONPath0 = JSONPath.compile("matchStat");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("IN:");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLIntegrityConstraintViolationException0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(938);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Object object0 = JSONPath.reserveToArray(serializeConfig0, parserConfig0.DENYS);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("fastjson.parser.autoTypeAccept", "n0)j*L@3l8#AG", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("n0)j*L@3l8#AG");
      Double double0 = new Double((-7038.7));
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, double0, double0, ((JSON) object0).defaultLocale);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("g", "i])!#:URZn4", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("TE+9~s!T,u53gks},");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator0, "TE+9~s!T,u53gks},", "i])!#:URZn4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/stackTrace/13", "k3", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator0, "k3", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("K3-`?%+V", "", true);
      JSONPath jSONPath0 = JSONPath.compile("K3-`?%+V");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      SQLDataException sQLDataException0 = new SQLDataException("K3-`?%+V", "ep#B ", 7);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("yyyy-MM-dd'T'HH:mm:ss", sQLDataException0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_Operator0, (Object) null, sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "unsupported array put operation. ";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("=-vyRuon8djY$", "unsupported array put operation. ", "unclosed string : ", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("AOWAL>1]rtV8f$&F");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "unsupported array put operation. ", jSONPath_Operator0, "unsupported array put operation. ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("", "com.alibaba.fastjson.serializer.DoubleSerializer", "fastjson.parser.autoTypeAccept", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement(" {u4em;Ebq#7!m[VU)", " {u4em;Ebq#7!m[VU)", (String) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("org.joda.time.LocalTime", (String) null, "pJB#C>=(", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3256, 115, (-3646));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("parser", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("parser");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "parser";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath0, jSONPath_MultiPropertySegment0, "parser");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("?{Glq", (-1623L), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/4");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_IntOpSegement0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "unsupported";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("unsupported", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("set property error, ");
      Byte byte0 = new Byte((byte)54);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "set property error, ", byte0, "unsupported");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Long long0 = new Long((-811277319855450459L));
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("com");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, long0, long0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("VVeZ3", 1L, (-6586085717218287427L), false);
      JSONPath jSONPath0 = JSONPath.compile("VVeZ3");
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Short short0 = new Short((short)79);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, japaneseDate0, short0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      long[] longArray0 = new long[1];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("ey@ EHU7]\"k_y~pKiv", longArray0, true);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, "5.%t%j(", "bpxf#S`", bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("", "", true);
      JSONPath jSONPath0 = new JSONPath("stackTrace");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "%", (-2351));
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLTimeoutException0, "", jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("com");
      JSONPath jSONPath0 = new JSONPath("com");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, true);
      SQLDataException sQLDataException0 = new SQLDataException("~~Zj");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.autoTypeAccept", (-1580386065683472715L), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny.internal", "N#[!#[.x");
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_Operator0, sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "com", sQLDataException0, jSONArray0);
      assertTrue(boolean0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Map<String, Object> map0 = JSONPath.paths((Object) "5.%t%j(");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("5.%t%j(");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, map0, predicate0, predicate0);
      assertFalse(boolean0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("T");
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1744), (byte)104, (-637));
      DataTruncation dataTruncation0 = new DataTruncation((-637), false, true, (-2), 63);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, dataTruncation0, bigInteger0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(5, (-1), 660);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "[(7wJ;lY", bigInteger0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" }dB:3wO{Gf{a=xOh$");
      int[] intArray0 = new int[8];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "WdLI:j", (Object) null);
      assertEquals(8, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("IN:");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IN:");
      JSONPath.Operator jSONPath_Operator0 = jSONPath_JSONPathParser0.readOp();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i`/U8w";
      stringArray0[1] = ",  end ";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_SizeSegment0, jSONPath_Operator0);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("5.%t%j(", true);
      Float float0 = new Float(0.0F);
      jSONPath_PropertySegment0.setValue(jSONPath0, float0, predicate0);
      assertEquals("5.%t%j(", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[(7wJ;lY", "[(7wJ;lY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 2, line 1, column 3[(7wJ;lY
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com", true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Float float0 = new Float(0.0F);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, sQLTransactionRollbackException0, float0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Float float0 = new Float((double) 1L);
      Short short0 = new Short((short) (-76));
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, short0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Double double0 = new Double((-892));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("m90c", "null");
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, sQLNonTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLNonTransientConnectionException cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Integer integer0 = new Integer((-2217));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      int int0 = JSONPath.compare(integer0, bigDecimal0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = JSONPath.compare("/stackTrace/4", "/stackTrace/4");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLRecoverableException0, sQLSyntaxErrorException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLRecoverableException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" }dB:3wO{Gf{a=xOh$");
      Object object0 = JSONPath.reserveToArray(jSONPath0, (String[]) null);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      Object object1 = jSONPath_MinSegment0.eval(jSONPath0, object0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      Long long0 = new Long(1387L);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, long0, "5.%t%j(");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?{Glq");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("X:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("dv,c");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("dv,c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dv\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}`\"RjeNt!j&{y\"");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("}`\"RjeNt!j&{", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("IN:");
      Object object0 = jSONPath0.eval((Object) "IN:");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("><ArAskg@A_LDB_O!");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=@pGsV");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('+');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nin
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("VW5j\"'$b~)uE");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but 'E'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("K3-`?%+V");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((byte) (-84));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(3359L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("K3-`?%+V");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+:X");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("[\"l@p?[^|", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Set<?> set0 = jSONPath0.keySet((Object) bigInteger0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("3Yry.o5I");
      jSONPath_JSONPathParser0.readValue();
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("55]i");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@type");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("IN:");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. IN:
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/beanInfo/fields/2/method";
      stringArray0[1] = ":";
      stringArray0[2] = "/beanInfo/fields/1";
      stringArray0[3] = "type not match error";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray((Object) null, stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Object object0 = new Object();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("e", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet(object0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath.compile("/Wga$D|T`v~Td");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "b8{* S88us!s5jIo", (Throwable) null);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) sQLInvalidAuthorizationSpecException0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      Set<?> set0 = jSONPath0.evalKeySet("5.%t%j(");
      Map<String, Object> map0 = JSONPath.paths((Object) set0, (SerializeConfig) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("", (Pattern) null, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, map0, set0);
      assertFalse(boolean0);
      assertEquals(3, map0.size());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) classLoader0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("WriteClassName", clientInfoStatus0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0);
      //  // Unstable assertion: assertEquals(89, map0.size());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      boolean boolean0 = jSONPath0.set((Object) sQLFeatureNotSupportedException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "com.alibaba.fastjson.JSONPath$IntInSegement", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("parser.features.ErrorOnEnumNotMatch");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLIntegrityConstraintViolationException0, "com.alibaba.fastjson.JSONWriter", (Object) "kp}/%$waW2~97Q3=2w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, "(kucz8Vu7Tq.^j,o@", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2041, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/stackTrace/0", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/stackTrace/0");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("e", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",", ",");
      JSONPath jSONPath0 = JSONPath.compile(",");
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLSyntaxErrorException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      JSONPath jSONPath0 = JSONPath.compile("/parent/defaultDomain/codesource");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) bigDecimal0, (Object[]) jSONPath_OperatorArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path /parent/defaultDomain/codesource
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONPath jSONPath0 = JSONPath.compile("@type");
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals("@type", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONPath.arrayAdd((Object) set0, "~Glsv3:`=", (Object[]) longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("/beanInfo/fields/1", (SerializeConfig) null, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("not support type : ");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("pq");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("DisableASM", "DisableASM", 1918);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("pq", sQLNonTransientConnectionException0);
      int int0 = jSONPath0.size((Object) sQLFeatureNotSupportedException0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("SafeMode");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("VVeZ3");
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(33, 33, 63);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "VVeZ3", bigInteger0);
      assertNotNull(object0);
      
      boolean boolean0 = jSONPath0.containsValue(object0, (Object) "VVeZ3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "nin", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.contains((Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("BR");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("VVeZ3-%Z7");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : VVeZ3-%Z7
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^.i52B`#^~f");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Object object0 = JSONPath.extract(",", "fastjson.parser.deny");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSONPath.extract(",", ",", parserConfig0, 0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("org.springframework.aop.");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Class<Date> class0 = Date.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath jSONPath0 = JSONPath.compile("B@6IzFu[:ShU>M");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(":");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, jSONPath_FilterSegment0, ":");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5.%t%j(");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/stackTrace/0", "'", 1509950721, sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, sQLRecoverableException0, sQLTransactionRollbackException0);
      assertNotNull(hashSet0);
      assertEquals(2, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(":", longArray0, false);
      JSONPath jSONPath0 = new JSONPath(":");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Float> class0 = Float.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, ":", javaBeanDeserializer0, javaBeanDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("W", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("W");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "W", jSONPath_WildCardSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.safeMode");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('a', char0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("K3-`?%+V", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, "K3-`?%+V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/stackTrace/3", "/stackTrace/3");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLSyntaxErrorException0, "/stackTrace/3", (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("VVeZ3A%Z2", serializeConfig0, parserConfig0);
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, "VVeZ3A%Z2", parserConfig0);
      boolean boolean0 = JSONPath.remove((Object) integer0, "fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Object object0 = JSONPath.read("", "[(7wJ;lY");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(68);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("m,^.9/_B'@^ie|R:F", serializeConfig0, parserConfig0);
      String string0 = jSONPath0.getPath();
      assertEquals("m,^.9/_B'@^ie|R:F", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Long long0 = new Long((-1253L));
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) long0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "#.9Z=\u0006ksaltL^", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1548), "max");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      Set<?> set0 = JSONPath.keySet((Object) mockGregorianCalendar0, "com.alibaba.fastjson.JSONPath$KeySetSegment");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("sft");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("WriteClassName", "=8[1%r1_%v[|JecIm>Rp", 4511);
      boolean boolean0 = jSONPath0.remove((Object) sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }
}
