/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 15:32:41 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.nio.CharBuffer;
import java.sql.ClientInfoStatus;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import javax.annotation.Resource;
import javax.smartcardio.CardTerminals;
import javax.tools.JavaFileObject;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      linkedList0.removeFirstOccurrence(jSONArray0);
      // Undeclared exception!
      jSONArray0.put(1000000, (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Object) linkedList0);
      JSONArray jSONArray2 = jSONArray0.put(7, false);
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      linkedList0.add(dayOfWeek0);
      jSONArray2.optBigDecimal(7, (BigDecimal) null);
      JSONArray jSONArray3 = jSONArray2.put(0, false);
      jSONArray2.get(7);
      jSONArray0.getBoolean(7);
      jSONArray3.get(7);
      jSONArray2.spliterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Short short0 = new Short((short)29);
      linkedList1.remove((Object) short0);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      jSONArray3.query(jSONPointer0);
      JSONArray jSONArray4 = jSONArray1.put(7, 91);
      assertEquals(8, jSONArray4.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.similar(jSONArray0);
      HashMap<Desktop.Action, Dialog.ModalExclusionType> hashMap0 = new HashMap<Desktop.Action, Dialog.ModalExclusionType>();
      // Undeclared exception!
      jSONArray0.put(1000000, (Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 10;
      JSONArray jSONArray1 = jSONArray0.put(10, (Map<?, ?>) null);
      JSONPointer jSONPointer0 = new JSONPointer("/,RVur}q_y)");
      // Undeclared exception!
      try { 
        jSONArray1.query(jSONPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ,RVur}q_y) is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONArray((-598));
      BigInteger bigInteger0 = jSONArray0.optBigInteger((-598), (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(91, (double) 91);
      assertEquals(92, jSONArray0.length());
      
      jSONArray0.toString();
      jSONArray1.put((float) 91);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONArray1.optNumber(91, (Number) bigDecimal0);
      jSONArray0.optDouble(91, (double) 91);
      try { 
        jSONArray1.put((-3589), 576L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3589] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 46;
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      jSONArray0.put(46, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1000000;
      // Undeclared exception!
      jSONArray0.put(1000000, false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      Thread.State thread_State0 = Thread.State.WAITING;
      hashMap0.replace(roundingMode0, thread_State0);
      JSONArray jSONArray1 = jSONArray0.put(46, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.valueOf(46);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optNumber(46, (Number) bigDecimal0);
      float float0 = jSONArray1.optFloat(46);
      assertEquals(Float.NaN, float0, 0.01F);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.optDouble(46, (double) Float.NaN);
      float float1 = jSONArray1.optFloat(46, Float.NaN);
      assertEquals(float1, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 46;
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        jSONArray0.query("/VJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // VJ is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(1093, (long) 1093);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-34);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.equals(bigInteger0);
      jSONArray0.optBigInteger(923, bigInteger1);
      jSONArray0.toList();
      Number number0 = jSONArray0.optNumber((int) (byte)3, (Number) (byte)3);
      assertEquals((byte)3, number0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 102;
      BigDecimal bigDecimal0 = new BigDecimal(102);
      JSONArray jSONArray1 = jSONArray0.put(8448, true);
      jSONArray1.optLong(8448, (long) 8448);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray1.optBigInteger(102, bigInteger0);
      // Undeclared exception!
      jSONArray0.toList();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optQuery("/");
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(91, (double) 91);
      jSONArray0.toString();
      jSONArray0.join("java.io.StringWriter@0000000006");
      jSONArray1.getDouble(91);
      jSONArray0.optNumber(91);
      int int0 = jSONArray0.length();
      assertEquals(92, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      JSONArray jSONArray2 = jSONArray0.put(true);
      Number number0 = jSONArray1.optNumber(68);
      assertEquals(68.0, number0);
      assertNotNull(number0);
      
      String string0 = jSONArray2.toString();
      assertNotNull(string0);
      
      int int0 = jSONArray1.optInt(8192, 65);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, (Map<?, ?>) null);
      jSONArray1.optFloat(10);
      try { 
        jSONArray1.put((double) Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put(46, (Map<?, ?>) hashMap0);
      double double0 = jSONArray1.optDouble(46, (double) 46);
      assertEquals(46.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put(50, (Map<?, ?>) hashMap0);
      float float0 = jSONArray1.optFloat(50);
      assertEquals(Float.NaN, float0, 0.01F);
      
      try { 
        jSONArray0.getDouble(50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[50] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 68;
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      jSONArray1.getInt(68);
      byte byte0 = (byte)37;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "- ?k+b?U^&");
      HashMap<Authenticator.RequestorType, JSONObject> hashMap0 = new HashMap<Authenticator.RequestorType, JSONObject>();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.toString();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(102);
      JSONArray jSONArray1 = jSONArray0.put(102, false);
      jSONArray0.optLong(102, (long) 102);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray1.optBigInteger(102, bigInteger0);
      jSONArray0.toList();
      jSONArray0.optNumber(102, (Number) bigDecimal0);
      assertEquals(103, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((int) (byte)91, (-634.8967991171));
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      
      jSONArray1.query("");
      float float0 = jSONArray1.optFloat((int) (byte)91);
      assertEquals((-634.8968F), float0, 0.01F);
      
      int int0 = jSONArray1.optInt((int) (byte)91);
      assertEquals((-634), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)37;
      byteArray0[5] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 4 [character 5 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put(50, (Map<?, ?>) hashMap0);
      List<Object> list0 = jSONArray1.toList();
      assertFalse(list0.contains(50));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-902.597162524));
      bigDecimal0.stripTrailingZeros();
      jSONArray0.optNumber((-347), (Number) bigDecimal0);
      String string0 = jSONArray0.join("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      jSONArray0.put(1000000, 1000000);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(8448, (-596.331492));
      jSONArray0.optLong(72, (-1L));
      jSONArray1.toString();
      jSONArray1.get(72);
      jSONArray1.join("");
      // Undeclared exception!
      try { 
        jSONArray0.query("%Hj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)79;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONArray0.optBigInteger(1193, bigInteger0);
      JSONArray jSONArray1 = jSONArray0.optJSONArray(46);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put(22, (Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray1.getJSONObject(22);
      Set<String> set0 = jSONObject0.keySet();
      JSONArray jSONArray2 = new JSONArray((Collection<?>) set0);
      float float0 = jSONArray2.optFloat(22);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(3310);
      jSONArray0.optNumber(3310, (Number) bigDecimal0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.remove(0);
      BigDecimal bigDecimal0 = new BigDecimal(6);
      jSONArray0.optNumber(6, (Number) bigDecimal0);
      JSONObject jSONObject0 = jSONArray0.optJSONObject(0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 50;
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      byte[] byteArray0 = new byte[0];
      int int1 = (-835);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-835), 50);
      byteArrayInputStream0.markSupported();
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(91, (double) 91);
      jSONArray0.query("");
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      
      jSONArray0.join("java.io.StringWriter@0000000009");
      int int0 = jSONArray1.getInt(91);
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "- ?k+b?U^&");
      HashMap<Authenticator.RequestorType, JSONObject> hashMap0 = new HashMap<Authenticator.RequestorType, JSONObject>();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      jSONArray1.put(0, (double) 0);
      String string0 = jSONArray1.toString();
      assertNotNull(string0);
      
      int int0 = jSONArray0.optInt(0, (-1390));
      assertEquals((-1390), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float((double) 22);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) float0);
      jSONArray0.put((-3811.216F));
      // Undeclared exception!
      try { 
        jSONArray1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(102);
      JSONArray jSONArray1 = jSONArray0.put(102, false);
      jSONArray0.optLong(102, (long) 102);
      try { 
        jSONArray1.getJSONArray(102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[102] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.join("P1|!qanU;@GJNNQH(9!");
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2290, 489.626260312534);
      jSONArray1.toString();
      // Undeclared exception!
      jSONArray1.join("java.io.StringWriter@0000000012");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0F);
      jSONArray0.optInt(33, 1296);
      HashMap<Component.BaselineResizeBehavior, Resource.AuthenticationType> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Resource.AuthenticationType>();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.APPLICATION;
      hashMap0.put(component_BaselineResizeBehavior0, resource_AuthenticationType0);
      jSONArray1.spliterator();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior1 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      Resource.AuthenticationType resource_AuthenticationType1 = Resource.AuthenticationType.CONTAINER;
      JSONArray jSONArray2 = jSONArray0.put(1533, (Object) null);
      hashMap0.put(component_BaselineResizeBehavior1, resource_AuthenticationType1);
      JSONArray jSONArray3 = jSONArray1.put(1296, (Map<?, ?>) hashMap0);
      jSONArray3.optBoolean(28);
      jSONArray2.toString();
      jSONArray1.optFloat(0, 0.0F);
      Class<Window.Type> class0 = Window.Type.class;
      try { 
        jSONArray1.getEnum(class0, 1533);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1533] is not an enum of type java.io.StringWriter@0000000024.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      linkedList0.pollFirst();
      jSONArray1.getInt(0);
      Class<JDBCType> class0 = JDBCType.class;
      jSONArray1.optEnum(class0, (-1));
      JSONArray jSONArray2 = new JSONArray();
      Class<Window.Type> class1 = Window.Type.class;
      try { 
        jSONArray1.getEnum(class1, (-332));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-332] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put(50, (Map<?, ?>) hashMap0);
      int int0 = jSONArray1.optInt(50, 50);
      assertEquals(51, jSONArray0.length());
      assertEquals(50, int0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray1.put((Collection<?>) linkedList0);
      try { 
        jSONArray0.getInt(50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[50] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0F);
      int int0 = 1296;
      jSONArray0.optInt(33, 1296);
      HashMap<Component.BaselineResizeBehavior, Resource.AuthenticationType> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Resource.AuthenticationType>();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.APPLICATION;
      hashMap0.put(component_BaselineResizeBehavior0, resource_AuthenticationType0);
      jSONArray1.spliterator();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior1 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      Resource.AuthenticationType resource_AuthenticationType1 = Resource.AuthenticationType.CONTAINER;
      jSONArray0.put(1533, (Object) null);
      hashMap0.put(component_BaselineResizeBehavior1, resource_AuthenticationType1);
      jSONArray1.put(1296, (Map<?, ?>) hashMap0);
      jSONArray0.join((String) null);
      int int1 = 43;
      try { 
        jSONArray1.getInt(43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[43] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(43, (-1.0));
      jSONArray1.optInt(49, 0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.optDouble(43);
      String string0 = jSONArray1.join("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      jSONArray0.remove((byte)91);
      JSONArray jSONArray1 = jSONArray0.put((int) (byte)91, 1.0);
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      
      jSONArray1.join("");
      float float0 = jSONArray1.optFloat((int) (byte)91);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (double) 0);
      assertEquals(1, jSONArray0.length());
      
      float float0 = jSONArray0.optFloat(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)91;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)3;
      byte byte0 = (byte)44;
      byteArray0[2] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      jSONArray0.optEnum(class0, 22);
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      String string0 = jSONArray1.toString();
      assertNotNull(string0);
      
      long long0 = jSONArray1.optLong(68, 8L);
      assertEquals(68L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      int int1 = 0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray1.optBigDecimal(0, bigDecimal0);
      jSONArray1.remove(0);
      try { 
        jSONArray1.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jSONArray0.put(73, (double) 73);
      jSONArray0.optInt(73, 73);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      double double0 = jSONArray0.optDouble(73);
      assertEquals(73.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-2065));
      jSONArray0.optBigDecimal((-2065), bigDecimal0);
      jSONArray1.toString();
      Class<Window.Type> class0 = Window.Type.class;
      try { 
        jSONArray0.getEnum(class0, 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[68] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 28;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      Thread.State thread_State0 = Thread.State.WAITING;
      RoundingMode roundingMode1 = RoundingMode.HALF_DOWN;
      Thread.State thread_State1 = Thread.State.TERMINATED;
      hashMap0.put(roundingMode1, thread_State1);
      hashMap0.getOrDefault(roundingMode0, thread_State0);
      Thread.State thread_State2 = hashMap0.put(roundingMode0, thread_State0);
      RoundingMode roundingMode2 = RoundingMode.HALF_DOWN;
      hashMap0.put(roundingMode2, thread_State2);
      JSONArray jSONArray1 = jSONArray0.put(28, (Map<?, ?>) hashMap0);
      jSONArray1.optNumber(28);
      Random.setNextRandom(28);
      JSONArray jSONArray2 = jSONArray1.put((long) 28);
      try { 
        jSONArray2.getDouble(28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[28] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put(91, (Map<?, ?>) hashMap0);
      assertEquals(92, jSONArray0.length());
      
      Number number0 = jSONArray1.optNumber(91);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(51, (double) 51);
      Number number0 = jSONArray1.optNumber(51);
      assertNotNull(number0);
      assertEquals(51.0, number0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(58, 1004.875);
      jSONArray1.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Long long0 = new Long(68);
      jSONArray1.similar(long0);
      try { 
        jSONArray1.getFloat(45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[45] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put(3546, (Map<?, ?>) hashMap0);
      jSONArray1.optInt(91, (-3004));
      try { 
        jSONArray1.getFloat(60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[60] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
      
      jSONArray1.toString((-1854));
      try { 
        jSONArray1.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Byte byte0 = new Byte((byte)120);
      JSONArray jSONArray1 = jSONArray0.put(936L);
      jSONArray1.opt((short)0);
      int int0 = jSONArray1.optInt((int) (short)0);
      assertEquals(936, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(953, (double) 953);
      jSONArray1.optLong(953);
      try { 
        jSONArray1.put((-4863), 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4863] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(1811, (long) 1811);
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) null);
      jSONArray0.put(1519, (-1156L));
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.optBigDecimal(2677, (BigDecimal) null);
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-4863);
      long long0 = new Integer((-4863));
      jSONArray0.optString((-4863), (String) null);
      try { 
        jSONArray0.getBigInteger((-4863));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4863] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.isEmpty();
      jSONArray0.isNull((byte)0);
      jSONArray0.put((-1.0));
      jSONArray0.optInt(998);
      jSONArray1.optFloat(101);
      try { 
        jSONArray1.get(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 68;
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      jSONArray1.toString();
      try { 
        jSONArray0.getBigInteger(68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[68] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray0.optNumber(54, (Number) bigInteger0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.ITALIAN;
      jSONArray0.optFloat(2805, (-1.6944406F));
      jSONArray0.put(2805, 0L);
      HashMap<SocketFlow.Status, Integer> hashMap0 = new HashMap<SocketFlow.Status, Integer>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      assertEquals(2807, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Desktop.Action, Dialog.ModalExclusionType> hashMap0 = new HashMap<Desktop.Action, Dialog.ModalExclusionType>();
      assertEquals(0, hashMap0.size());
      
      jSONArray0.put(717, (Map<?, ?>) hashMap0);
      jSONArray0.optNumber(10);
      try { 
        jSONArray0.getLong(14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[14] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      jSONArray0.put(34, 736);
      try { 
        jSONArray0.getLong(6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[6] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.optString(1625, "");
      List<Object> list0 = jSONArray1.toList();
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optFloat(4, (float) 0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(1811);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      jSONArray0.optFloat(4, (float) 4);
      jSONArray0.put(4, 1L);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      jSONArray1.getLong(0);
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 34);
      jSONArray1.getLong(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(953, (double) (-4863));
      jSONArray1.optLong(953);
      jSONArray0.isNull(953);
      JSONArray jSONArray2 = jSONArray1.put((double) 953);
      assertSame(jSONArray1, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)91;
      byteArray0[1] = (byte)58;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Nesting too deep.");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      jSONArray0.isNull((byte)58);
      jSONArray0.put((double) (byte)0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      jSONArray1.toString();
      jSONArray1.similar(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.optQuery("java.io.StringWriter@0000000006");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(68, (double) 68);
      int int0 = 3730;
      // Undeclared exception!
      jSONArray0.toString(3730);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      JSONArray jSONArray2 = jSONArray0.put(612, 979);
      jSONArray0.optBoolean(979);
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      jSONArray2.optEnum(class0, 612);
      try { 
        jSONArray1.getBigDecimal(607);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[607] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      try { 
        jSONArray1.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.optInt(0, 1948);
      boolean boolean0 = jSONArray1.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean((-1719));
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      jSONArray0.toString(0);
      jSONArray1.get(0);
      int int1 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.optString(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      try { 
        jSONArray1.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      jSONArray0.optInt(0, 1106);
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 51;
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONArray0.put((-2045), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2045] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONArray0.optBigDecimal((-842), bigDecimal0);
      try { 
        jSONArray0.put((-842), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-842] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<PseudoColumnUsage> linkedList0 = new LinkedList<PseudoColumnUsage>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(373, (Collection<?>) linkedList0);
      assertEquals(374, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      int int1 = 0;
      JSONArray jSONArray2 = jSONArray1.put(0, 0);
      try { 
        jSONArray2.getString(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertTrue(jSONArray0.isEmpty());
      
      try { 
        jSONArray0.put((-4459), (-1561L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4459] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.optInt(554, (-1885));
      linkedList0.iterator();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("M_]OW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      
      JSONObject jSONObject0 = jSONArray0.optJSONObject(91);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<MultipleGradientPaint.ColorSpaceType> linkedList0 = new LinkedList<MultipleGradientPaint.ColorSpaceType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.toString((-389));
      jSONArray0.toString();
      JSONObject jSONObject0 = jSONArray0.optJSONObject((-389));
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      jSONArray1.optBoolean(0);
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      jSONArray0.getNumber(0);
      JSONArray jSONArray2 = jSONArray0.put(0, true);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray3.toJSONObject(jSONArray2);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      int int0 = jSONArray0.optInt(0, 1106);
      assertEquals(0, int0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      double double0 = jSONArray1.optDouble(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray0 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.put(93, false);
      Class<CardTerminals.State> class0 = CardTerminals.State.class;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_INSERTION;
      jSONArray0.optEnum(class0, 93, cardTerminals_State0);
      assertEquals(94, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      LinkedList<JavaFileObject.Kind> linkedList0 = new LinkedList<JavaFileObject.Kind>();
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.OTHER;
      linkedList0.add(javaFileObject_Kind0);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom((-3230L));
      JavaFileObject.Kind javaFileObject_Kind1 = JavaFileObject.Kind.SOURCE;
      linkedList0.addLast(javaFileObject_Kind1);
      mockRandom0.doubles((long) 0);
      BigInteger bigInteger1 = new BigInteger(0, mockRandom0);
      jSONArray1.optBigInteger(0, bigInteger1);
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger2 = BigInteger.TEN;
      jSONArray2.optBigInteger(8, bigInteger0);
      jSONArray0.put(289);
      JSONTokener jSONTokener0 = new JSONTokener(".a>?V\u0004dVD");
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<MultipleGradientPaint.ColorSpaceType> linkedList0 = new LinkedList<MultipleGradientPaint.ColorSpaceType>();
      StringWriter stringWriter0 = new StringWriter(1814);
      CharBuffer.allocate(932);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("JSONObject[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      Thread.State thread_State0 = Thread.State.TERMINATED;
      linkedList0.push(thread_State0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONArray0.put(1, (Object) locale_Category0);
      jSONArray0.optInt((-289));
      JSONArray jSONArray1 = new JSONArray();
      try { 
        jSONArray1.get(60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[60] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      jSONArray1.put((double) 0);
      JSONArray jSONArray2 = jSONArray1.put(0, 0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      jSONArray2.query(jSONPointer0);
      try { 
        jSONArray2.getLong(135);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[135] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JavaFileObject.Kind> linkedList0 = new LinkedList<JavaFileObject.Kind>();
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.CLASS;
      linkedList0.add(javaFileObject_Kind0);
      linkedList0.add(javaFileObject_Kind0);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.doubles(0L);
      BigInteger bigInteger1 = new BigInteger(169, mockRandom0);
      jSONArray0.optBigInteger((-3927), bigInteger0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger2 = BigInteger.TEN;
      JSONArray jSONArray2 = jSONArray1.put(169);
      double double0 = jSONArray2.optDouble(155, (-326.36));
      assertEquals((-326.36), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(110, (double) 58);
      String string0 = "] is not a JSONObject.";
      MockFile mockFile0 = new MockFile("ua)zdE40FlDFmH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      jSONArray0.write((Writer) mockPrintWriter0, 4309, 110);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(1, (double) 1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      double double0 = jSONArray0.optDouble(0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      jSONArray1.optBoolean(0);
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      jSONArray0.getNumber(0);
      jSONArray0.put(0, true);
      assertEquals(1, jSONArray0.length());
      
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      double double0 = jSONArray2.optDouble(0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(162, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Null key.");
      jSONArray1.optBoolean((-1310));
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, (-8), (-1310));
      Object object0 = new Object();
      Locale locale0 = Locale.JAPANESE;
      MockFile mockFile0 = new MockFile("ZTgrtRe[#@aC%2,O");
      MockFile.createTempFile("ZTgrtRe[#@aC%2,O", "<(dn", (File) mockFile0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1);
      JSONArray jSONArray2 = jSONArray1.put(1, (Object) pushbackInputStream0);
      jSONArray2.join(")QT=98#|?b}wjse");
      assertEquals(163, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put(31, (Map<?, ?>) hashMap0);
      float float0 = jSONArray1.optFloat(31);
      assertEquals(Float.NaN, float0, 0.01F);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = jSONArray1.optDouble(31, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      double double0 = jSONArray1.optDouble(0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<JavaFileObject.Kind> linkedList0 = new LinkedList<JavaFileObject.Kind>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.OTHER;
      linkedList0.add(javaFileObject_Kind0);
      linkedList0.add(javaFileObject_Kind0);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.doubles((long) 0);
      BigInteger bigInteger1 = new BigInteger(0, mockRandom0);
      jSONArray0.optBigInteger(0, bigInteger1);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger2 = BigInteger.TEN;
      jSONArray1.optBigInteger(0, bigInteger2);
      jSONArray0.put(597);
      double double0 = jSONArray0.optDouble(0, 938.971505428989);
      assertEquals(597.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      linkedList0.iterator();
      linkedList0.spliterator();
      int int0 = 953;
      JSONArray jSONArray1 = new JSONArray();
      long long0 = new Integer((-4863));
      jSONArray1.toJSONObject(jSONArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(":<BF Z:yH", "5(a{IJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 5(a{IJ
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L|h]''Y5!Lza");
      JSONArray jSONArray1 = jSONArray0.put((double) 162);
      StringWriter stringWriter0 = new StringWriter();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      stringWriter0.append((CharSequence) "L|h]''Y5!Lza");
      JSONObject.writeValue(stringWriter0, jSONArray0, 63, 91);
      int int0 = 720;
      int int1 = 10;
      StringWriter stringWriter1 = new StringWriter(63);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray0.put(140, (Object) null);
      JSONArray jSONArray3 = jSONArray1.put(152, (-2298));
      jSONArray3.optNumber(63);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      jSONArray1.optEnum(class0, (-1));
      jSONArray2.length();
      Float float0 = new Float(0.0F);
      JSONArray jSONArray4 = null;
      try {
        jSONArray4 = new JSONArray("L|h]''Y5!Lza");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.JAPANESE;
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      jSONArray1.toString();
      jSONArray0.join("java.io.StringWriter@0000000006");
      try { 
        jSONArray1.getDouble(41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[41] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(51, (double) 51);
      jSONArray1.getDouble(51);
      try { 
        jSONArray1.getJSONArray(51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[51] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray1.getDouble(0);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("A JSONArray text must start with '['");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.optInt((-274), 918);
      Object object0 = jSONArray0.optQuery("");
      MockFile mockFile0 = new MockFile("");
      object0.toString();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L|h]''Y5!Lza");
      JSONArray jSONArray1 = jSONArray0.put((double) 162);
      StringWriter stringWriter0 = new StringWriter();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONArray0.optNumber(138, (Number) bigDecimal0);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      try { 
        jSONArray1.getBigInteger(162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[162] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put(47, (double) 47);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3927), (Number) null);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      locale0.stripExtensions();
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = jSONArray0.similar(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray0.similar(bigInteger0);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("At}Ei\"-[c<3!Oy6Hl4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(3, (double) 3);
      String string0 = jSONArray1.toString();
      String string1 = jSONArray0.join("java.io.StringWriter@0000000007");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.optBoolean(93);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray1.toList();
      JSONArray jSONArray2 = jSONArray1.put(157, true);
      Class<CardTerminals.State> class0 = CardTerminals.State.class;
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_INSERTION;
      jSONArray1.optEnum(class0, 8448, cardTerminals_State0);
      assertEquals(158, jSONArray1.length());
      
      jSONArray2.join("JSONObject[");
      assertEquals(158, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      String string0 = jSONArray1.toString();
      String string1 = jSONArray1.join("java.io.StringWriter@0000000006");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      linkedList0.iterator();
      int int0 = 673;
      jSONArray0.optLong(673, (long) 673);
      jSONArray1.iterator();
      Integer integer0 = new Integer(2957);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      jSONArray1.optBoolean(673);
      LinkedList<JDBCType> linkedList2 = new LinkedList<JDBCType>();
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList2);
      jSONArray0.iterator();
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.put(41, 32);
      try { 
        jSONArray1.getNumber(22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[22] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      jSONArray1.optBoolean(0);
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      jSONArray0.getNumber(0);
      JSONArray jSONArray2 = jSONArray0.put(0, true);
      JSONArray jSONArray3 = jSONArray1.put((Collection<?>) linkedList0);
      try { 
        jSONArray3.toJSONObject(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3, (-674));
      assertEquals(4, jSONArray0.length());
      
      Number number0 = jSONArray0.getNumber(3);
      assertEquals((-674), number0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(162, true);
      jSONArray1.optBoolean((-1310));
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, 10, (-1310));
      Object object0 = new Object();
      Long long0 = new Long(162);
      jSONArray1.put(140, (Object) long0);
      int int0 = (-2298);
      try { 
        jSONArray0.put((-2298), 152);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2298] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L|h]''Y5!Lza");
      StringWriter stringWriter0 = new StringWriter();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      int int0 = 91;
      stringWriter0.append((CharSequence) "L|h]''Y5!Lza");
      JSONObject.writeValue(stringWriter0, jSONArray0, 63, 91);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(93, 878, mockRandom0);
      jSONArray0.optBigInteger(91, bigInteger0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger1 = BigInteger.TEN;
      jSONArray0.optBigInteger(899, bigInteger1);
      StringWriter stringWriter1 = new StringWriter(63);
      StringWriter stringWriter2 = new StringWriter(2943);
      try { 
        jSONArray0.getJSONArray(878);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[878] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = new Integer(74);
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 72, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      linkedList0.iterator();
      int int0 = 1;
      jSONArray0.put(1, true);
      jSONArray0.optBoolean(1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(locale_FilteringMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3927), (Number) null);
      Short short0 = new Short((short)8);
      JSONArray jSONArray1 = jSONArray0.put((Object) short0);
      jSONArray1.getFloat((short)0);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer(";O~b+intK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SXo!8;i!s]g:;d");
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jSONArray0.remove(39);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      int int0 = 1;
      try { 
        jSONArray0.getJSONObject(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(58, false);
      jSONArray1.optJSONArray(58);
      assertEquals(59, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L|h]''Y5!Lza");
      JSONArray jSONArray1 = jSONArray0.put((double) 162);
      StringWriter stringWriter0 = new StringWriter();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      stringWriter0.append((CharSequence) "L|h]''Y5!Lza");
      Writer writer0 = JSONObject.writeValue(stringWriter0, jSONArray0, 63, 91);
      jSONArray1.write(writer0, 720, 10);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray0.put(140, (Object) null);
      jSONArray1.put(152, (-2298));
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      jSONArray1.optEnum(class0, (-1));
      jSONArray2.length();
      Float float0 = new Float(0.0F);
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray("L|h]''Y5!Lza");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      JSONArray jSONArray2 = jSONArray1.put(0, 0);
      jSONArray2.optBoolean(0);
      Byte byte0 = new Byte((byte)123);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONArray2.put((Object) byte0);
      jSONArray2.optBoolean(0, true);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.put((long) 0);
      jSONArray2.opt((byte)123);
      assertEquals(3, jSONArray2.length());
      
      int int0 = jSONArray3.optInt(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      try { 
        jSONArray1.getBoolean(68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[68] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<JavaFileObject.Kind> linkedList0 = new LinkedList<JavaFileObject.Kind>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.OTHER;
      linkedList0.add(javaFileObject_Kind0);
      int int0 = (-1550);
      try { 
        jSONArray0.getBoolean((-1550));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1550] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " at ");
      JSONArray jSONArray1 = jSONArray0.put((-76.6176952047743));
      StringWriter stringWriter0 = new StringWriter();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      int int0 = 63;
      Writer writer0 = JSONObject.writeValue(stringWriter0, locale_Category0, 63, 63);
      jSONArray1.write(writer0, 63, 63);
      Object object0 = new Object();
      try { 
        jSONArray0.put((-1), object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3927), (Number) null);
      Short short0 = new Short((short) (-1));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON does not allow non-finite numbers.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.put(false);
      Byte byte0 = new Byte((byte)120);
      jSONArray1.put((Object) byte0);
      jSONArray1.optBoolean((int) (short)0, true);
      jSONArray1.put(936L);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3927), (Number) null);
      Short short0 = new Short((short)0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_4<-<iFm!3i2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.put(false);
      Byte byte0 = new Byte((byte)1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONArray jSONArray2 = jSONArray1.put((Object) bigDecimal0);
      boolean boolean0 = jSONArray1.optBoolean((int) (short)0, false);
      assertFalse(boolean0);
      
      JSONArray jSONArray3 = new JSONArray();
      jSONArray3.put((long) (byte)1);
      jSONArray3.opt(1945);
      int int0 = jSONArray2.optInt((int) (byte)120);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      try { 
        jSONArray0.getString(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-3927);
      jSONArray0.optNumber((-3927), (Number) null);
      try { 
        jSONArray0.getString((-3304));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3304] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(58, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray1.optBigInteger(58, bigInteger0);
      jSONArray0.toString();
      assertEquals(59, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<JavaFileObject.Kind> linkedList0 = new LinkedList<JavaFileObject.Kind>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.OTHER;
      linkedList0.add(javaFileObject_Kind0);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger1 = new BigInteger(0, mockRandom0);
      jSONArray0.optBigInteger(0, bigInteger1);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger2 = BigInteger.TEN;
      jSONArray1.optBigInteger(0, bigInteger2);
      StringWriter stringWriter0 = new StringWriter(2702);
      CharBuffer.allocate(2702);
      StringWriter stringWriter1 = new StringWriter(2702);
      try { 
        jSONArray1.getJSONArray(2702);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2702] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, (double) 10);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.optBigInteger(10, bigInteger0);
      assertEquals(11, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p,O[=AOnY]L'2@VAYb");
      jSONArray0.optBoolean((-1333));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.toList();
      String string0 = "Ac;pIl$:KlpDw)";
      try { 
        jSONArray0.getNumber((-1333));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1333] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_ASCENT;
      linkedList0.offerFirst(component_BaselineResizeBehavior0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Integer, Window.Type> hashMap0 = new HashMap<Integer, Window.Type>();
      try { 
        jSONArray0.put((-243), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-243] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      linkedList0.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      linkedList0.iterator();
      jSONArray0.put(953, (double) (-4863));
      long long0 = new Integer(953);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Avd8rJgtHhJ%");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.put(false);
      Byte byte0 = new Byte((byte)30);
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      jSONArray0.optBoolean((int) (byte) (-123), true);
      jSONArray1.put((long) (-4863));
      jSONArray1.opt(42);
      int int0 = jSONArray0.optInt((int) (byte)120);
      assertEquals(957, jSONArray0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-717), 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-717] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.toJSONObject((JSONArray) null);
      Class<MultipleGradientPaint.ColorSpaceType> class0 = MultipleGradientPaint.ColorSpaceType.class;
      try { 
        jSONArray0.getEnum(class0, 55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[55] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.put((Object) jSONArray0);
      try { 
        jSONArray1.toJSONObject(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      linkedList0.iterator();
      int int0 = 953;
      JSONArray jSONArray1 = jSONArray0.put(953, (double) (-4863));
      jSONArray1.optLong(953);
      try { 
        jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray0.optNumber(250, (Number) bigInteger0);
      short short0 = (short)0;
      Short short1 = new Short((short)1968);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.put(true);
      Byte byte0 = new Byte((byte) (-123));
      jSONArray1.put((Object) null);
      jSONArray0.optBoolean(128, false);
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray3 = jSONArray2.put(0L);
      jSONArray3.opt(60);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray4 = null;
      try {
        jSONArray4 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      int int0 = 0;
      JSONArray jSONArray2 = jSONArray1.put(0, 0);
      String string0 = "pointer cannot be null";
      int int1 = (-1333);
      jSONArray2.optBoolean((-1333));
      HashMap<Character.UnicodeScript, PseudoColumnUsage> hashMap0 = new HashMap<Character.UnicodeScript, PseudoColumnUsage>();
      jSONArray0.put(270, (Map<?, ?>) hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jSONArray0.optString(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray2.forEach(consumer0);
      try { 
        jSONArray1.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray1.optBigDecimal(0, bigDecimal0);
      Object object0 = new Object();
      jSONArray0.similar(object0);
      jSONArray1.optBigInteger(0, bigInteger0);
      jSONArray1.optString(0);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(92, bigInteger0);
      jSONArray0.optBigInteger(8448, bigInteger1);
      int int0 = 2702;
      StringWriter stringWriter0 = new StringWriter(2702);
      int int1 = 59;
      CharBuffer.allocate(59);
      jSONArray0.write((Writer) stringWriter0);
      try { 
        jSONArray0.getJSONArray(2702);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2702] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(8444, bigInteger0);
      assertEquals((short)10, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(87, (long) 87);
      jSONArray0.getNumber(87);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray2 = jSONArray1.put(0, 0);
      jSONArray2.optBoolean((-1333));
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JSONArray jSONArray3 = new JSONArray((Collection<?>) linkedList0);
      jSONArray3.put(0, (long) 0);
      Class<Window.Type> class0 = Window.Type.class;
      try { 
        jSONArray0.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000015.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getLong(517);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[517] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      JSONArray jSONArray2 = jSONArray1.put(0, 0);
      try { 
        jSONArray2.getLong(135);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[135] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      jSONArray1.put(0, 0);
      jSONArray0.optInt(0, 1106);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray2.optQuery("Vq{<kJ2)1Yh6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-274);
      int int1 = 918;
      jSONArray0.optInt((-274), 918);
      jSONArray0.optQuery("");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "false");
      mockFile0.setReadOnly();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      jSONArray0.toString(68);
      jSONArray1.toString();
      JSONObject jSONObject0 = jSONArray1.optJSONObject(68);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      linkedList0.iterator();
      int int0 = (-4863);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.optLong(953);
      int int1 = 4159;
      JSONArray jSONArray2 = jSONArray0.put(0, 4159);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      int int2 = 13;
      jSONArray2.optBigDecimal(13, bigDecimal0);
      HashMap<GraphicsDevice.WindowTranslucency, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, GraphicsDevice.WindowTranslucency>();
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.TRANSLUCENT;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency1 = GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSPARENT;
      hashMap0.put(graphicsDevice_WindowTranslucency0, graphicsDevice_WindowTranslucency1);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove((-1));
      try { 
        jSONArray0.put((-1), (float) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 0;
      Collection<ProcessBuilder.Redirect.Type> collection0 = null;
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      int int1 = (-3932);
      try { 
        jSONArray0.put((-3932), (-1690.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3932] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3927), (Number) null);
      Short short0 = new Short((short)0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON does not allow non-finite numbers.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.put(false);
      Float float0 = new Float(1006.18292024);
      JSONArray jSONArray2 = jSONArray1.put((Object) float0);
      boolean boolean0 = jSONArray2.optBoolean((-3927), true);
      assertTrue(boolean0);
      
      jSONArray0.put(0L);
      jSONArray2.opt((-3927));
      int int0 = jSONArray0.optInt(129);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3927), (Number) null);
      Short short0 = new Short((short)0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON does not allow non-finite numbers.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.put(false);
      Byte byte0 = new Byte((byte)120);
      jSONArray1.put((Object) byte0);
      boolean boolean0 = jSONArray0.optBoolean((int) (byte) (-123), false);
      JSONArray jSONArray2 = jSONArray0.put(4877L);
      Object object0 = jSONArray2.opt((short)0);
      assertTrue(object0.equals((Object)boolean0));
      
      int int0 = jSONArray2.optInt((int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(10, (double) 10);
      int int0 = jSONArray1.optInt(10, 10);
      assertEquals(11, jSONArray0.length());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      JSONArray jSONArray2 = jSONArray1.put(147, 3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONArray2.optBigDecimal(55, bigDecimal0);
      jSONArray1.remove(55);
      jSONArray0.getFloat(0);
      JSONArray jSONArray3 = jSONArray0.put((-2527L));
      jSONArray3.optBigDecimal(2374, bigDecimal1);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getNumber(1428);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1428] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(162, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p,O[=AOnY]L'2@VAYb");
      jSONArray0.optBoolean((-1333));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.toList();
      String string0 = "Ac;pIl$:KlpDw)";
      try { 
        jSONArray0.getNumber((-1333));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1333] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      HashMap<Character.UnicodeScript, Thread.State> hashMap0 = new HashMap<Character.UnicodeScript, Thread.State>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SXo!8;i!s]g:;d");
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<MultipleGradientPaint.CycleMethod, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, ProcessBuilder.Redirect.Type>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SXo!8;i!s]g:;d");
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      hashMap0.entrySet();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.WRITE;
      hashMap0.put(multipleGradientPaint_CycleMethod0, processBuilder_Redirect_Type0);
      jSONArray0.put((Map<?, ?>) hashMap0);
      int int0 = 1932;
      try { 
        jSONArray0.getBigInteger(1932);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1932] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3927), (Number) null);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      jSONArray0.remove((-673));
      try { 
        jSONArray0.getFloat(49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[49] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      jSONArray1.remove(0);
      try { 
        jSONArray1.getFloat((-1635));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1635] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      jSONArray1.put(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray1.optBigDecimal(0, bigDecimal0);
      jSONArray1.remove(0);
      try { 
        jSONArray1.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove(93);
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber(0, (Number) null);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONArray0.optQuery(jSONPointer0);
      jSONArray0.put(0, (-1918.41744));
      jSONArray0.toString();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertFalse(jSONArray1.isEmpty());
      
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-3927);
      jSONArray0.optNumber((-3927), (Number) null);
      Short short0 = new Short((short)0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON does not allow non-finite numbers.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.put(true);
      JSONArray jSONArray2 = jSONArray1.put((Object) jSONArray0);
      jSONArray1.optBoolean((-592), true);
      JSONArray jSONArray3 = jSONArray2.put((long) (-3927));
      int int1 = 921;
      jSONArray2.opt(int1);
      int int2 = 5323;
      jSONArray3.optInt(int2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 93;
      jSONArray0.optString(93);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      try { 
        jSONArray0.getJSONObject(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[93] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      JSONArray jSONArray2 = jSONArray1.put(0, 0);
      jSONArray2.optBoolean((-1333));
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      JSONArray jSONArray3 = new JSONArray((Collection<?>) linkedList0);
      Class<Window.Type> class0 = Window.Type.class;
      try { 
        jSONArray0.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000011.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(91, (double) 91);
      Class<Window.Type> class0 = Window.Type.class;
      try { 
        jSONArray1.getEnum(class0, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      jSONArray0.optLong(0, 0L);
      jSONArray0.iterator();
      jSONArray0.length();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = "";
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(22, (double) 22);
      jSONArray1.toString();
      long long0 = jSONArray1.optLong(22, (long) 22);
      assertEquals(23, jSONArray0.length());
      assertEquals(22L, long0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong((-504));
      assertEquals(0L, long0);
      
      int int0 = jSONArray0.optInt(2565);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      linkedList0.iterator();
      int int0 = (-4863);
      JSONArray jSONArray1 = jSONArray0.put(953, (double) (-4863));
      jSONArray1.optLong(953);
      int int1 = 4159;
      JSONArray jSONArray2 = jSONArray0.put(0, 4159);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      int int2 = 0;
      jSONArray2.optBigDecimal(0, bigDecimal0);
      HashMap<GraphicsDevice.WindowTranslucency, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, GraphicsDevice.WindowTranslucency>();
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.TRANSLUCENT;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency1 = GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSPARENT;
      hashMap0.put(graphicsDevice_WindowTranslucency0, graphicsDevice_WindowTranslucency1);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3927), (Number) null);
      Short short0 = new Short((short)0);
      JSONArray jSONArray1 = jSONArray0.put((Object) short0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jSONArray1.getFloat((short)0);
      jSONArray1.optJSONArray((-91));
      jSONArray0.length();
      try { 
        jSONArray0.getJSONArray((short)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2585L);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter(2702);
      CharBuffer.allocate(59);
      jSONArray0.write((Writer) stringWriter0);
      JSONArray jSONArray1 = jSONArray0.put(640L);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3914), (Number) null);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONArray0.optQuery(jSONPointer0);
      JSONArray jSONArray1 = jSONArray0.put(2703, (double) 2703);
      jSONArray1.toString();
      assertEquals(2704, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      HashMap<Authenticator.RequestorType, JSONObject> hashMap0 = new HashMap<Authenticator.RequestorType, JSONObject>();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      jSONArray1.put(0, (double) 0);
      JSONObject jSONObject0 = jSONArray0.getJSONObject(0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(68, (double) 68);
      jSONArray0.optString(68, "getClass");
      assertEquals(69, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (double) 0);
      List<Object> list0 = new LinkedList<Object>();
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(4775);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      JSONArray jSONArray2 = jSONArray1.put(0, 0);
      int int1 = (-1333);
      jSONArray2.optBoolean((-1333));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jSONArray0.optString(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray2.forEach(consumer0);
      try { 
        jSONArray1.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray1.optBigDecimal(0, bigDecimal0);
      Class<Window.Type> class0 = Window.Type.class;
      try { 
        jSONArray1.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      jSONArray1.put(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray1.optBigDecimal(0, bigDecimal0);
      HashMap<GraphicsDevice.WindowTranslucency, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, GraphicsDevice.WindowTranslucency>();
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.TRANSLUCENT;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency1 = GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSPARENT;
      hashMap0.put(graphicsDevice_WindowTranslucency1, graphicsDevice_WindowTranslucency0);
      try { 
        jSONArray1.put((-664), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-664] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(102);
      JSONArray jSONArray1 = jSONArray0.put(102, false);
      jSONArray0.optLong(102, (long) 102);
      jSONArray1.optBigDecimal(102, bigDecimal0);
      jSONArray0.toString();
      assertEquals(103, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(98, (double) 98);
      jSONArray1.toString();
      assertEquals(99, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3927), (Number) null);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONArray0.optQuery(jSONPointer0);
      JSONArray jSONArray1 = jSONArray0.put(69, (double) 69);
      jSONArray1.toString();
      assertEquals(70, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getDouble(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(4095);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((double) 50);
      try { 
        jSONArray0.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-3927);
      jSONArray0.optNumber((-3927), (Number) null);
      JSONArray jSONArray1 = jSONArray0.put((double) (-3927));
      int int1 = (-1);
      jSONArray1.put((-1));
      try { 
        jSONArray0.getDouble(8448);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8448] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = 2702;
      StringWriter stringWriter0 = new StringWriter(2702);
      try { 
        jSONArray0.getBigInteger(59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[59] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale locale0 = Locale.JAPANESE;
      try { 
        jSONArray0.getBigInteger((-6));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-6] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getInt(1269);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1269] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LinkedList<JavaFileObject.Kind> linkedList0 = new LinkedList<JavaFileObject.Kind>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.OTHER;
      linkedList0.add(javaFileObject_Kind0);
      try { 
        jSONArray0.getInt(8448);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8448] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      int int0 = 91;
      jSONArray0.toString(91);
      linkedList1.add("");
      jSONArray0.optQuery(jSONPointer0);
      List<String> list1 = new LinkedList<String>();
      JSONPointer jSONPointer1 = new JSONPointer(list1);
      JSONPointer.builder();
      JSONArray jSONArray1 = new JSONArray();
      String string0 = "Unterminated string";
      int int1 = 1;
      try { 
        jSONArray0.getJSONObject(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "- ?k+b?U^&");
      HashMap<Authenticator.RequestorType, JSONObject> hashMap0 = new HashMap<Authenticator.RequestorType, JSONObject>();
      JSONArray jSONArray2 = jSONArray0.put(0, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray2.optBigInteger(8, bigInteger0);
      jSONArray2.toList();
      try { 
        jSONArray0.getJSONArray(211);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[211] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(72, (double) 72);
      jSONArray1.toList();
      assertEquals(73, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean((-2618));
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.contains((-2618)));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertTrue(list0.isEmpty());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean((-223), true);
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(162, true);
      jSONArray0.optBoolean((-1333));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.toList();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("Ac;pIl$:KlpDw)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONArray1.put(365, (Collection<?>) linkedList0);
      jSONArray1.optString(1625, "");
      jSONArray1.toList();
      jSONArray1.put(false);
      assertEquals(367, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get(88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[88] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(15);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LinkedList<JavaFileObject.Kind> linkedList0 = new LinkedList<JavaFileObject.Kind>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.OTHER;
      linkedList0.add(javaFileObject_Kind0);
      int int0 = 0;
      jSONArray0.optInt(0);
      try { 
        jSONArray0.get(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      JSONArray jSONArray1 = new JSONArray();
      String string0 = jSONArray1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[v?PBaQUN^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      linkedList0.iterator();
      int int0 = (-4863);
      jSONArray0.optLong((-4863), (long) (-4863));
      jSONArray0.iterator();
      jSONArray0.length();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      String string0 = "";
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "- ?k+b?U^&");
      JSONArray jSONArray2 = jSONArray1.put(0, (double) 0);
      jSONArray1.toString();
      jSONArray1.put(0, false);
      jSONArray1.optLong(0, (-4165L));
      jSONArray2.toList();
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      JSONArray jSONArray2 = jSONArray1.put(0, 0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray2.optBoolean((-1333));
      StringWriter stringWriter0 = new StringWriter(0);
      try { 
        jSONArray0.put((-1333), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1333] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONArray((-2193));
      try { 
        jSONArray0.put((-2193), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2193] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.query("m2zR.pN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(162, true);
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      int int0 = 0;
      try { 
        jSONArray0.getEnum(class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Window.Type> class0 = Window.Type.class;
      try { 
        jSONArray0.getEnum(class0, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[59] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getBigDecimal(1515);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1515] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 93;
      int int1 = 0;
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery("/)-^<6.Pa?A}?V'~-");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      int int0 = 91;
      // Undeclared exception!
      try { 
        jSONArray0.toString(91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1411, Size: 2021
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.join("A JSONObject text must end with '}'");
      try { 
        jSONArray0.put((-5235), (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-5235] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = (-57);
      try { 
        jSONArray0.put((-57), (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-57] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "znU";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("znU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<RoundingMode, Thread.State> hashMap0 = new HashMap<RoundingMode, Thread.State>();
      try { 
        jSONArray0.put((-3956), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3956] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal(102);
      JSONArray jSONArray1 = jSONArray0.put(102, false);
      jSONArray0.optLong(102, (long) 102);
      jSONArray1.optBigDecimal(102, bigDecimal0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray1.optBigInteger(102, bigInteger0);
      jSONArray0.toList();
      jSONArray0.optNumber(102, (Number) bigDecimal0);
      assertEquals(103, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-610), (double) (-610));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-610] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1078);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONArray0.optBigDecimal((-1078), bigDecimal0);
      HashMap<GraphicsDevice.WindowTranslucency, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, GraphicsDevice.WindowTranslucency>();
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency0 = GraphicsDevice.WindowTranslucency.TRANSLUCENT;
      GraphicsDevice.WindowTranslucency graphicsDevice_WindowTranslucency1 = GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSLUCENT;
      hashMap0.put(graphicsDevice_WindowTranslucency0, graphicsDevice_WindowTranslucency1);
      try { 
        jSONArray0.put((-5151), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-5151] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-302), bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "[iQ;";
      StringReader stringReader0 = new StringReader("[iQ;");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 4 [character 5 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(384);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      try { 
        jSONArray1.getJSONArray(68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[68] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(659);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optNumber((-3927), (Number) null);
      Short short0 = new Short((short)0);
      JSONArray jSONArray1 = jSONArray0.put((Object) short0);
      jSONArray1.getFloat((short)0);
      jSONArray1.optJSONArray((-91));
      int int0 = jSONArray0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(68, (double) 68);
      jSONArray1.toString();
      float float0 = jSONArray0.optFloat(68);
      jSONArray0.optInt(68);
      assertEquals(69, jSONArray0.length());
      
      float float1 = jSONArray0.getFloat(68);
      assertEquals(float1, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      JSONArray jSONArray2 = jSONArray1.put(0, (double) 0);
      boolean boolean0 = jSONArray2.similar(jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (-674));
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("JSONArray[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(123, 0.0F);
      jSONArray0.toString();
      assertEquals(124, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 162;
      JSONArray jSONArray1 = jSONArray0.put(162, true);
      JSONArray jSONArray2 = jSONArray0.put(true);
      int int1 = 76;
      jSONArray2.put(76, (-262.58173F));
      // Undeclared exception!
      try { 
        jSONArray1.optQuery("K5`k-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.put(0.0F);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      jSONArray1.put(0, 0);
      JSONArray jSONArray2 = jSONArray0.put((float) 0);
      JSONArray jSONArray3 = jSONArray2.put(false);
      jSONArray3.put(76, (float) 76);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("K5`k-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.forEach((Consumer<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 68;
      try { 
        jSONArray0.getBoolean(68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[68] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong((-1633), (long) (-1633));
      assertEquals((-1633L), long0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONArray(3797);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3797] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = JSONObject.quote("NUM9?k0@S$M.RBKKK\"s", (Writer) stringWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(writer0);
      jSONArray0.write((Writer) mockPrintWriter0);
      assertEquals("\"NUM9?k0@S$M.RBKKK\\\"s\"[]", writer0.toString());
      assertEquals("\"NUM9?k0@S$M.RBKKK\\\"s\"[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      LinkedList<Thread.State> linkedList0 = new LinkedList<Thread.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter(2702);
      CharBuffer charBuffer0 = CharBuffer.allocate(59);
      stringWriter0.append((CharSequence) charBuffer0);
      jSONArray0.write((Writer) stringWriter0);
      try { 
        jSONArray0.getJSONArray(2702);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2702] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(3249);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3249] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.getFloat(65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[65] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }
}
