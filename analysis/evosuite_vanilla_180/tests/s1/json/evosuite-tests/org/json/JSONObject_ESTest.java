/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 15:19:43 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.SyncFailedException;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.nio.charset.Charset;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.sql.JDBCType;
import java.sql.RowIdLifetime;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.annotation.Resource;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.JTable;
import javax.tools.StandardLocation;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("] not found.");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0L, long0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      assertNotNull(bufferedReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'I';
      charArray0[2] = 'l';
      charArray0[3] = '!';
      charArray0[4] = '\\';
      charArray0[5] = 'Y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'@', 'I', 'l', '!', '\\', 'Y'}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(8);
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertEquals((short)8, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("RcOL_r{X\"", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertEquals((short)8, bigDecimal0.shortValue());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte) (-10), bigInteger2.byteValue());
      assertEquals((short) (-10), bigInteger2.shortValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger2);
      
      BigInteger bigInteger3 = jSONObject1.optBigInteger("toMap", bigInteger0);
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertSame(bigInteger3, bigInteger0);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger3);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertEquals((short)8, bigDecimal0.shortValue());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger3);
      
      int int0 = new Integer(8);
      assertEquals(8, int0);
      
      Number number0 = jSONObject0.getNumber("RcOL_r{X\"");
      assertSame(jSONObject0, jSONObject1);
      assertSame(number0, bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)8, number0.shortValue());
      assertEquals((byte)8, number0.byteValue());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = null;
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.TOOLKIT_EXCLUDE;
      boolean boolean0 = linkedList0.add(dialog_ModalExclusionType0);
      assertTrue(linkedList0.contains(dialog_ModalExclusionType0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = 664;
      JSONObject jSONObject2 = jSONObject1.put("dou", 664);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      int int1 = jSONObject1.optInt("dou");
      assertTrue(int1 == int0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(664, int1);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      
      BigInteger bigInteger3 = BigInteger.ZERO;
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      
      BigInteger bigInteger4 = jSONObject0.optBigInteger("dou", bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(bigInteger0, bigInteger4);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)664, bigInteger4.shortValue());
      assertEquals((byte) (-104), bigInteger4.byteValue());
      assertNotNull(bigInteger4);
      
      Object object0 = JSONObject.stringToValue("dou");
      assertNotNull(object0);
      assertEquals("dou", object0);
      
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("#/", 1.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Object object0 = jSONObject0.query("#/");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNull(object0);
      
      try { 
        jSONObject0.getString("#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 10;
      Random.setNextRandom(10);
      String string0 = "{(>\\eGE9yW[!l77)~e)";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{(>eGE9yW[!l77)~e)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 10 [character 11 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 467;
      JSONArray jSONArray1 = jSONArray0.put(467, (double) 467);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(468, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(468, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      try { 
        jSONArray2.put(467, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("#/", 1.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject0.getLong("#/");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1L, long0);
      
      try { 
        jSONObject0.getString("#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, int0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      long long0 = jSONObject0.optLong("dou", 255L);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(255L, long0);
      
      Number number0 = JSONObject.stringToNumber("9");
      assertFalse(number0.equals((Object)int0));
      assertNotNull(number0);
      assertEquals(9, number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = (-1899.088531718);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = bigDecimal0.intValueExact();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0, int0);
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = bigDecimal0.negate(mathContext0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        JSONObject.stringToNumber("4.&AOi8v|]d,&%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, int0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      long long0 = jSONObject0.optLong("dou", 255L);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(255L, long0);
      
      JSONObject jSONObject2 = jSONObject1.optJSONObject("'5{gF]><Cup");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("pollFirst", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean1 = jSONObject0.similar("pollFirst");
      assertTrue(boolean1 == boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean1);
      
      double double0 = jSONObject0.optDouble("pollFirst");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("gettoURIFragment", linkedList0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = jSONObject1.optBigDecimal("gettoURIFragment", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertEquals(0, linkedList0.size());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{(>eGE9yW[!l77)~e)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 10 [character 11 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1134.7762002007676);
      assertNotNull(string0);
      assertEquals("1134.7762002007676", string0);
      
      Number number0 = JSONObject.stringToNumber("1134.7762002007676");
      assertEquals((short)1134, number0.shortValue());
      assertEquals((byte)110, number0.byteValue());
      assertNotNull(number0);
      
      String string1 = JSONObject.doubleToString(1134.7762002007676);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("1134.7762002007676", string1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = JSONObject.stringToValue("1134.7762002007676");
      assertNotNull(object0);
      assertEquals(1134.7762002007676, object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter(19);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('}');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("}", stringWriter0.toString());
      assertEquals("}", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("5v$_}SVUv%'2 R]q~F", "5v$_}SVUv%'2 R]q~F");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject.indent(stringWriter1, 57);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("}                                                         ", stringWriter0.toString());
      assertEquals("}                                                         ", stringWriter1.toString());
      
      Number number0 = jSONObject1.optNumber((String) null, (Number) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNull(number0);
      
      long long0 = jSONObject0.optLong("5v$_}SVUv%'2 R]q~F");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0L, long0);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      try { 
        jSONObject0.getNumber("org.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(467, (double) 467);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(468, jSONArray0.length());
      assertEquals(468, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(3);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] not a string.";
      stringArray0[1] = "p#0?fF5";
      stringArray0[2] = "' and instead saw ''";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(3, stringArray0.length);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = (JSONObject)jSONObject1.optQuery("");
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertEquals(3, stringArray0.length);
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Number number0 = jSONObject0.optNumber("] could not be converted to BigDecimal.", (Number) null);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(number0);
      assertEquals((-846.4F), number0);
      
      long long0 = jSONObject1.optLong("] could not be converted to BigDecimal.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((-846L), long0);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("p#0?'F5", stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      Integer integer0 = new Integer((-1865));
      assertNotNull(integer0);
      assertEquals((-1865), (int)integer0);
      
      Object object0 = JSONObject.wrap(integer0);
      assertNotNull(object0);
      assertEquals((-1865), object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("p#0?fF5", stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('}');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("}", stringWriter0.toString());
      assertEquals("}", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("p#0?fF5", stringWriter1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("}", stringWriter0.toString());
      assertEquals("}", stringWriter1.toString());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, "2m(ne_f", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("}", stringWriter0.toString());
      assertEquals("}", stringWriter1.toString());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object object0 = jSONObject1.get("p#0?fF5");
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, object0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, object0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(object0, stringWriter1);
      assertSame(object0, stringWriter0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("}", stringWriter0.toString());
      assertEquals("}", stringWriter1.toString());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals("}", object0.toString());
      assertEquals(1, stringArray0.length);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("p#0?fF5", stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('}');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("}", stringWriter0.toString());
      assertEquals("}", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("p#0?fF5", stringWriter1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals("}", stringWriter0.toString());
      assertEquals("}", stringWriter1.toString());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      JSONObject.indent(stringWriter1, 57);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("}                                                         ", stringWriter0.toString());
      assertEquals("}                                                         ", stringWriter1.toString());
      
      Number number0 = jSONObject1.optNumber((String) null, (Number) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals("}                                                         ", stringWriter0.toString());
      assertEquals("}                                                         ", stringWriter1.toString());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNull(number0);
      
      long long0 = jSONObject1.optLong("p#0?fF5");
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals("}                                                         ", stringWriter0.toString());
      assertEquals("}                                                         ", stringWriter1.toString());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = " x|9[";
      JSONObject jSONObject1 = jSONObject0.put(" x|9[", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject1.optLong(" x|9[");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONObject1.has(" x|9[");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertTrue(boolean0);
      
      try { 
        jSONObject1.getDouble("java.lang.Float@00000000090");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("IE_SjQ", "IE_SjQ");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.optInt("IE_SjQ");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, int0);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      long long0 = jSONObject1.optLong("IE_SjQ", 255L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(255L, long0);
      
      try { 
        JSONObject.stringToNumber("IE_SjQ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [IE_SjQ] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("p#0?'F5", 1.0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      float float0 = Float.NaN;
      Float float1 = new Float(Float.NaN);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(Float.NaN, (float)float1, 0.01F);
      
      try { 
        JSONObject.testValidity(float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = "/1ohe5p(j\\J5EAqF";
      long long0 = 1023L;
      JSONObject jSONObject1 = jSONObject0.put("/1ohe5p(jJ5EAqF", 1023L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains(string0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        jSONObject0.write((Writer) pipedWriter0, (-473), (-473));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("toLanguageTag", "toLanguageTag");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.similar(pipedReader0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      JSONObject.testValidity(float0);
      double double1 = jSONObject0.optDouble("toLanguageTag", (double) 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0, double1, 0.01);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 1502);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object object0 = JSONObject.stringToValue("jvqTQo8");
      assertNotNull(object0);
      assertEquals("jvqTQo8", object0);
      
      double double0 = jSONObject0.optDouble("] could not be converted to BigDecimal.", (double) (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-846.4000244140625), double0, 0.01);
      
      String string0 = "mar";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("p#0?'F5", stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("#");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      LinkedList<MockFileReader> linkedList0 = new LinkedList<MockFileReader>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("Misplaced obje>t.", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt(")qxZq#Sj<R9UqX");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = false;
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("\b");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(467, (double) 467);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(468, jSONArray0.length());
      assertEquals(468, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getScript();
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(string0);
      assertEquals("", string0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("xSA#?%A8S2;", jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(468, jSONArray0.length());
      assertEquals(468, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = new JSONObject(jSONArray1);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(468, jSONArray0.length());
      assertEquals(468, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      JSONObject jSONObject1 = jSONObject0.put("peekLast", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Object object0 = JSONObject.stringToValue("peekLast");
      assertNotNull(object0);
      assertEquals("peekLast", object0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      long long0 = jSONObject1.getLong("peekLast");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0L, long0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 92);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt(">@ewdUy#!J4<aBW4Ff*", pipedInputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject1.getLong(">@ewdUy#!J4<aBW4Ff*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Object object0 = JSONObject.stringToValue("] could not be converted to BigDecimal.");
      assertNotNull(object0);
      assertEquals("] could not be converted to BigDecimal.", object0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      long long0 = jSONObject1.getLong("] could not be converted to BigDecimal.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((-846L), long0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JSONObject jSONObject2 = (JSONObject)JSONObject.wrap(mockFileInputStream0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      double double0 = jSONObject1.getDouble("] could not be converted to BigDecimal.");
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((-846.4000244140625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger1.shiftRight(9);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      
      BigInteger bigInteger3 = jSONObject1.optBigInteger("length", bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      
      try { 
        jSONObject0.getJSONArray("'%:+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      assertFalse(fileDescriptor1.equals((Object)fileDescriptor0));
      assertFalse(fileDescriptor1.valid());
      assertNotNull(fileDescriptor1);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor1);
      assertFalse(fileDescriptor1.equals((Object)fileDescriptor0));
      assertNotNull(mockFileInputStream0);
      
      Short short0 = new Short((short)663);
      assertNotNull(short0);
      assertEquals((short)663, (short)short0);
      
      Object object0 = JSONObject.wrap(short0);
      assertNotNull(object0);
      assertEquals((short)663, object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("HN+8TN", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject1.optLong("HN+8TN");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0L, long0);
      
      Long long1 = new Long(1546L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1546L, (long)long1);
      
      Number number0 = jSONObject0.optNumber("HN+8TN");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(number0);
      assertEquals(0.0F, number0);
      
      Short short0 = new Short((short)992);
      assertNotNull(short0);
      assertEquals((short)992, (short)short0);
      
      HashMap<CharArrayWriter, Double> hashMap0 = new HashMap<CharArrayWriter, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject2 = jSONObject1.put("HN+8TN", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      double double0 = jSONObject1.optDouble("HN+8TN");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        jSONObject0.getBigDecimal("HN+8TN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("].", "].");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Number number0 = jSONObject0.optNumber("euT");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(number0);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      double double1 = jSONObject0.optDouble("].");
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("p#0?'F5", stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("p#0?'F5", pipedWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      
      double double0 = jSONObject1.optDouble("p#0?'F5", 0.0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("'},EvXDG*LKABKz8U");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("3\"E%x*%9v>aI", (-1285.6953375845555));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("] is not a JSONObject.", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      Object object0 = JSONObject.stringToValue("3\"E%x*%9v>aI");
      assertNotNull(object0);
      assertEquals("3\"E%x*%9v>aI", object0);
      
      JSONObject jSONObject2 = jSONObject0.putOpt("", "] is not a JSONObject.");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3022);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.put(".jikvoBfF2*A", (Collection<?>) linkedList0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      JSONObject jSONObject2 = jSONObject1.append(".jikvoBfF2*A", ".jikvoBfF2*A");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "+oP6j3scN\\x%";
      String string1 = "isEmpty";
      MockFileWriter mockFileWriter0 = new MockFileWriter("isEmpty");
      assertNotNull(mockFileWriter0);
      
      mockFileWriter0.close();
      try { 
        JSONObject.writeValue(mockFileWriter0, (Object) null, 60, (-101));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t]FQA<");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("HN+8TN", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("HN+8TN", pipedWriter0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      boolean boolean1 = jSONObject2.similar("HN+8TN");
      assertTrue(boolean1 == boolean0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertFalse(boolean1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      JSONObject.testValidity(double0);
      JSONObject jSONObject3 = jSONObject1.accumulate("F,i -oc=GFY}]i", "HN+8TN");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Character character0 = Character.valueOf('6');
      assertNotNull(character0);
      assertEquals('6', (char)character0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("~", character0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.optInt("~");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.optBoolean("~", true);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
      
      Map<String, Object> map0 = jSONObject1.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      try { 
        JSONObject.stringToNumber("Expected '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [Expected '] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("toLanguageTag", "toLanguageTag");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.similar(pipedReader0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      String string0 = JSONObject.doubleToString((-598.459752));
      assertNotNull(string0);
      assertEquals("-598.459752", string0);
      
      boolean boolean0 = jSONObject1.isNull("] could not be converted to BigDecimal.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("length", bigDecimal0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Double double0 = new Double((-1364.4098145043522));
      assertNotNull(double0);
      assertEquals((-1364.4098145043522), (double)double0, 0.01);
      
      Object object0 = JSONObject.stringToValue("tpo");
      assertNotNull(object0);
      assertEquals("tpo", object0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(14, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(14, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = JSONObject.doubleToString(0.0);
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
      assertEquals("0", string0);
      
      MockFile mockFile0 = new MockFile("0");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "0";
      objectArray0[3] = (Object) double0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("@G7", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("0", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("0", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(4, objectArray0.length);
      assertNotNull(printWriter0);
      
      // Undeclared exception!
      jSONObject0.write((Writer) printWriter0, 2177, 2177);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3022);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.put(".jikvoBfF2*A", (Collection<?>) linkedList0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject0.getString(".jikvoBfF2*A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject1.getString("] could not be converted to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = jSONObject1.optString("length", "4");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("hashCode", 1.0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Object object0 = JSONObject.stringToValue("hashCode");
      assertNotNull(object0);
      
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONArray1);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JSONObject jSONObject1 = jSONObject0.put("'+6=YmzA+ao", (Object) dataInputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Number number0 = jSONObject0.optNumber("'+6=YmzA+ao");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(number0);
      
      boolean boolean0 = jSONObject0.optBoolean("toString");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("removeLast", 4744L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("removeLast"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertEquals(0, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("removeLast"));
      assertFalse(list1.contains("removeLast"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      assertFalse(linkedList1.contains("removeLast"));
      assertFalse(list1.contains("removeLast"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(jSONPointer0);
      
      Object object0 = JSONObject.stringToValue("8");
      assertNotNull(object0);
      assertEquals(8, object0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JSONObject jSONObject2 = (JSONObject)JSONObject.wrap(hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      try { 
        jSONObject0.getBigInteger("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      Number number0 = jSONObject0.optNumber("uG$c8sT)=X]\"Dr");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(number0);
      
      float float0 = jSONObject0.optFloat("length", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1.0F, float0, 0.01F);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      Map<String, Object> map0 = jSONObject2.toMap();
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        JSONObject.quote("L?%v2t{0S}5Xh9)Jd[", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = "Unable o preserve stream position";
      float float0 = (-1.0F);
      Long long0 = new Long(75L);
      assertNotNull(long0);
      assertEquals(75L, (long)long0);
      
      Object object0 = JSONObject.wrap(long0);
      assertNotNull(object0);
      assertEquals(75L, object0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(bufferedInputStream0);
      
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(188, stringArray0.length);
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.query("Unable o preserve stream position");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = "getgetVariant";
      JSONObject jSONObject1 = jSONObject0.put("getgetVariant", 1372.3086F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Float float0 = new Float(743.655502437484);
      assertNotNull(float0);
      assertEquals(743.6555F, (float)float0, 0.01F);
      
      Number number0 = jSONObject1.optNumber("getgetVariant", (Number) float0);
      assertFalse(number0.equals((Object)float0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(number0);
      assertEquals(1372.3086F, number0);
      
      try { 
        jSONObject1.getBoolean("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("/1ohe5p(jJ5EAqF", "/1ohe5p(jJ5EAqF");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Object object0 = jSONObject1.remove("/1ohe5p(jJ5EAqF");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(object0);
      assertEquals("/1ohe5p(jJ5EAqF", object0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONObject0.optNumber("/1ohe5p(jJ5EAqF", (Number) bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, number0.shortValue());
      assertEquals((byte)1, number0.byteValue());
      assertNotNull(number0);
      
      String string0 = JSONObject.doubleToString(1L);
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
      assertEquals("1", string0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "/1ohe5p(jJ5EAqF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      int int0 = pushbackInputStream0.available();
      assertEquals(0, int0);
      
      JSONObject jSONObject0 = new JSONObject(pushbackInputStream0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<WebParam.Mode> class0 = WebParam.Mode.class;
      WebParam.Mode webParam_Mode0 = WebParam.Mode.INOUT;
      WebParam.Mode webParam_Mode1 = jSONObject0.optEnum(class0, "null", webParam_Mode0);
      assertSame(webParam_Mode0, webParam_Mode1);
      assertSame(webParam_Mode1, webParam_Mode0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(WebParam.Mode.INOUT, webParam_Mode1);
      
      byte[] byteArray0 = new byte[0];
      JSONObject jSONObject1 = jSONObject0.put("O*wRSi2eu?k*M\"?", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int1 = sequenceInputStream0.read(byteArray0, 1279, 115);
      assertFalse(int1 == int0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = jSONObject0.optBoolean("O*wRSi2eu?k*M\"?", false);
      assertFalse(boolean1 == boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean1);
      
      Number number0 = jSONObject0.optNumber("gethashCode");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(number0);
      
      boolean boolean2 = pushbackInputStream0.markSupported();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O*wRSi2eu?k*M\"?");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      JSONObject jSONObject2 = jSONObject0.putOpt("\b", pushbackInputStream0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject2);
      
      String string0 = "] not a string.";
      String string1 = jSONObject2.optString("javax.", "] not a string.");
      assertTrue(string1.equals((Object)string0));
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string1);
      assertEquals("] not a string.", string1);
      
      Double double0 = new Double(115);
      assertNotNull(double0);
      assertEquals(115.0, (double)double0, 0.01);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("+^", double0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject3.isEmpty());
      assertEquals(3, jSONObject3.length());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject3);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("A JSONObject text must begin with '{'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("5+eZ`");
      assertEquals(0, linkedList0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Object object0 = JSONObject.stringToValue("umZk{");
      assertNotNull(object0);
      assertEquals("umZk{", object0);
      
      Double double0 = new Double(1405.57106166);
      assertNotNull(double0);
      assertEquals(1405.57106166, (double)double0, 0.01);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object1 = JSONObject.wrap(boolean0);
      assertNotNull(object1);
      assertEquals(false, object1);
      
      try { 
        jSONObject0.getBigInteger("umZk{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.similar("dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(boolean0);
      
      try { 
        jSONObject1.getDouble("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = jSONObject1.similar(double0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(boolean0);
      
      Number number0 = jSONObject0.optNumber("uG$c8sT)=X]\"Dr");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(number0);
      
      Object object0 = JSONObject.stringToValue("NC");
      assertNotNull(object0);
      assertEquals("NC", object0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      try { 
        jSONObject0.getBigInteger("uG$c8sT)=X]\"Dr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      HashMap<Resource.AuthenticationType, Resource.AuthenticationType> hashMap0 = new HashMap<Resource.AuthenticationType, Resource.AuthenticationType>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("] could not be converted to BigInteger.");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0L, long0);
      
      Set<String> set0 = jSONObject0.keySet();
      assertFalse(set0.contains("] could not be converted to BigInteger."));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      boolean boolean0 = jSONObject1.similar("uG$c8sT)=X]\"Dr");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(boolean0);
      
      Number number0 = jSONObject0.optNumber("uG$c8sT)=X]\"Dr");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(number0);
      
      boolean boolean1 = jSONObject0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean1);
      
      JSONObject jSONObject2 = jSONObject0.increment("length");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("] could not be converted to BigDecimal."));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(linkedList0.contains("] could not be converted to BigDecimal."));
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      Map<String, Object> map0 = jSONObject2.toMap();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertFalse(linkedList0.contains("] could not be converted to BigDecimal."));
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("] could not be converted to BigDecimal.", bigDecimal0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte) (-78), bigDecimal1.byteValue());
      assertEquals((short) (-846), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0");
      assertFalse(boolean0);
      
      String string0 = jSONObject0.optString("token cannot be null", (String) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(string0);
      
      JSONObject jSONObject1 = jSONObject0.put("javax.", 6);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<Proxy.Type, GraphicsDevice.WindowTranslucency>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      jSONObject0.optEnum(class0, "07e[,G_xv\u0002V_lVPA>");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String string1 = "Missing value";
      double double0 = jSONObject0.optDouble("Missing value");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotSame(linkedList2, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList2.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      LinkedList<String> linkedList3 = new LinkedList<String>();
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertEquals(0, linkedList3.size());
      assertNotNull(linkedList3);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList3);
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertEquals(0, linkedList3.size());
      assertNotNull(jSONPointer0);
      
      Set<Map.Entry<String, Object>> set1 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      
      Object object0 = JSONObject.stringToValue("Unable to write JSONArray value at index: 0");
      assertNotNull(object0);
      assertEquals("Unable to write JSONArray value at index: 0", object0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(list0);
      assertTrue(linkedList2.equals((Object)linkedList3));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotSame(linkedList2, linkedList3);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList2.contains(object0));
      assertFalse(list0.contains(object0));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList2.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject0.getBigInteger("Unable to write JSONArray value at index: 0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("/1ohe5p(jJ5EAqF", "/1ohe5p(jJ5EAqF");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = "r7f-GNya[f";
      JSONObject jSONObject2 = jSONObject1.put("r7f-GNya[f", (-3034L));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("r7f-GNya[f"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("r7f-GNya[f"));
      assertFalse(list0.contains("r7f-GNya[f"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      assertFalse(linkedList1.contains("r7f-GNya[f"));
      assertEquals(0, linkedList1.size());
      assertNotNull(jSONPointer0);
      
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      boolean boolean0 = jSONObject3.similar(jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertFalse(boolean0);
      
      JSONObject jSONObject4 = new JSONObject();
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertTrue(jSONObject4.isEmpty());
      assertEquals(0, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      try { 
        jSONObject4.getDouble("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject((Object) "HN+8TN");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
      
      Long long0 = new Long(1546L);
      assertNotNull(long0);
      assertEquals(1546L, (long)long0);
      
      Number number0 = jSONObject0.optNumber("HN+8TN");
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      Short short0 = new Short((short)992);
      assertNotNull(short0);
      assertEquals((short)992, (short)short0);
      
      boolean boolean1 = JSONObject.isDecimalNotation("getClass");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category[] locale_CategoryArray1 = linkedList0.toArray(locale_CategoryArray0);
      assertSame(locale_CategoryArray0, locale_CategoryArray1);
      assertSame(locale_CategoryArray1, locale_CategoryArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, locale_CategoryArray0.length);
      assertEquals(2, locale_CategoryArray1.length);
      assertNotNull(locale_CategoryArray1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      String string0 = JSONObject.valueToString(linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(string0);
      
      HashMap<Locale.FilteringMode, InputStreamReader> hashMap0 = new HashMap<Locale.FilteringMode, InputStreamReader>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) '}');
      assertEquals((short)125, bigDecimal0.shortValue());
      assertEquals((byte)125, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject3 = jSONObject2.append("alue [%s] is not an array or object therefore its key %s cannot be resolved", bigDecimal0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)125, bigDecimal0.shortValue());
      assertEquals((byte)125, bigDecimal0.byteValue());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      HashMap<KeyRep.Type, Character> hashMap1 = new HashMap<KeyRep.Type, Character>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      HashMap<KeyRep.Type, Character> hashMap2 = new HashMap<KeyRep.Type, Character>(hashMap1);
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertNotNull(hashMap2);
      
      JSONObject jSONObject4 = jSONObject3.put("length", (Map<?, ?>) hashMap2);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertTrue(hashMap1.equals((Object)hashMap2));
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject4);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject4);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertNotSame(hashMap1, hashMap2);
      assertNotSame(hashMap2, hashMap1);
      assertSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject1);
      assertNotSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)125, bigDecimal0.shortValue());
      assertEquals((byte)125, bigDecimal0.byteValue());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertNotNull(jSONObject4);
      
      float float0 = jSONObject4.optFloat("length", (float) '}');
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertTrue(hashMap1.equals((Object)hashMap2));
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject4);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject4);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertNotSame(hashMap1, hashMap2);
      assertNotSame(hashMap2, hashMap1);
      assertSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject1);
      assertNotSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)125, bigDecimal0.shortValue());
      assertEquals((byte)125, bigDecimal0.byteValue());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(125.0F, float0, 0.01F);
      
      try { 
        jSONObject3.getInt("alue [%s] is not an array or object therefore its key %s cannot be resolved");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = ">@ewdUy#!J4<aBW4Ff*";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 92);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = pipedInputStream0.read(byteArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt(">@ewdUy#!J4<aBW4Ff*", pipedInputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject1.getInt(">@ewdUy#!J4<aBW4Ff*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.doubleToString((-13L));
      assertNotNull(string0);
      assertEquals("-13", string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = JSONObject.stringToValue("gq[#e$Lq|");
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("gq[#e$Lq|", object0);
      
      Double double0 = new Double((-2443.891272203));
      assertNotNull(double0);
      assertEquals((-2443.891272203), (double)double0, 0.01);
      
      Float float0 = new Float(1650.98294);
      assertNotNull(float0);
      assertEquals(1650.9829F, (float)float0, 0.01F);
      
      Object object1 = JSONObject.wrap(float0);
      assertNotNull(object1);
      assertEquals(1650.9829F, object1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = new Double(256.6);
      assertNotNull(double0);
      assertEquals(256.6, (double)double0, 0.01);
      
      Object object0 = JSONObject.stringToValue("%s is not an array index");
      assertNotNull(object0);
      assertEquals("%s is not an array index", object0);
      
      JSONObject jSONObject0 = new JSONObject(69);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Object object1 = jSONObject0.opt((String) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '\\';
      charArray0[6] = '4';
      charArray0[7] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', ',', ',', '4', '4', '\\', '4', '\\'}, charArray0);
      
      Double double0 = new Double(',');
      assertNotNull(double0);
      assertEquals(44.0, (double)double0, 0.01);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("TYFCZjH");
      assertNotNull(mockFileWriter0);
      
      BigInteger bigInteger0 = jSONObject0.optBigInteger("TYFCZjH", (BigInteger) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip((-1L));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Xs:i");
      assertFalse(boolean0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long long1 = byteArrayInputStream0.skip((-3185L));
      assertTrue(long1 == long0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertEquals(0L, long1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      JSONObject jSONObject1 = new JSONObject(locale_FilteringMode0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Object object1 = JSONObject.stringToValue("Error reading value at index position ");
      assertNotNull(object1);
      assertEquals("Error reading value at index position ", object1);
      
      Double double0 = new Double(0L);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Object object2 = JSONObject.wrap(locale_FilteringMode0);
      assertSame(locale_FilteringMode0, object2);
      assertSame(object2, locale_FilteringMode0);
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, object2);
      
      try { 
        jSONObject1.getBigInteger("pointer cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.doubleToString((-1899.088531718));
      assertNotNull(string0);
      assertEquals("-1899.088531718", string0);
      
      Short short0 = new Short((short)655);
      assertNotNull(short0);
      assertEquals((short)655, (short)short0);
      
      JSONObject jSONObject1 = jSONObject0.append("-1899.088531718", short0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("-1899.088531718");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      try { 
        jSONObject1.getEnum(class0, "$Sq4i!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("\t", 2227.53161749);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject1.optLong("\t");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2227L, long0);
      
      String string0 = "7)t@{hodfb6|;_|@!";
      try { 
        JSONObject.stringToNumber("7)t@{hodfb6|;_|@!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7)t@{hodf\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = ',';
      charArray0[2] = '4';
      charArray0[3] = 's';
      charArray0[4] = '\\';
      charArray0[5] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', ',', '4', 's', '\\', 's'}, charArray0);
      
      Double double0 = new Double(898.88);
      assertNotNull(double0);
      assertEquals(898.88, (double)double0, 0.01);
      
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject0.get("A<R%~?!VhSt< }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("-1899.088531718.", false);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(boolean0);
      
      String string0 = "h";
      try { 
        jSONObject0.getJSONArray("h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("TM(58mfJh-lc:W3p}", 1.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject0.optEnum(class0, "TM(58mfJh-lc:W3p}", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double((-846.4F));
      assertNotNull(double0);
      assertEquals((-846.4000244140625), (double)double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'u';
      charArray0[1] = '\'';
      charArray0[2] = '}';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = ':';
      charArray0[6] = '\'';
      charArray0[7] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'u', '\'', '}', 'j', 'j', ':', '\'', 'u'}, charArray0);
      
      String string0 = "5{!SurU>UIy>Vs/";
      JSONObject jSONObject2 = jSONObject0.accumulate("5{!SurU>UIy>Vs/", character_UnicodeScript1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      try { 
        jSONObject1.getNumber("5{!SurU>UIy>Vs/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 92);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedOutputStream0.write(114);
      JSONObject jSONObject1 = jSONObject0.putOpt(">@ewdUy#!J4<aBW4Ff*", pipedInputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, pipedInputStream0.available());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate(">@ewdUy#!J4<aBW4Ff*", ">@ewdUy#!J4<aBW4Ff*");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, pipedInputStream0.available());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, pipedInputStream0.available());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      try { 
        jSONObject0.getNumber(">@ewdUy#!J4<aBW4Ff*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000016] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("/1ohe5p(jJ5EAqF", "/1ohe5p(jJ5EAqF");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("/1ohe5p(jJ5EAqF", 58);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(58, int0);
      
      LinkedList<SocketFlow.Status> linkedList0 = new LinkedList<SocketFlow.Status>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.contains(58));
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("].", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Float float0 = new Float(1801.6387F);
      assertNotNull(float0);
      assertEquals(1801.6387F, (float)float0, 0.01F);
      
      JSONObject jSONObject2 = jSONObject0.put("].", (Object) jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      String string0 = "KE2fv-o}LvV8t|";
      JSONObject jSONObject3 = jSONObject2.putOpt("KE2fv-o}LvV8t|", "].");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      JSONObject jSONObject4 = jSONObject1.getJSONObject("].");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertNotNull(jSONObject4);
      
      try { 
        JSONObject.stringToNumber("].");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [].] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("Y-aWz!M{Ov#^L#", "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.optInt("l>H([%*Dw&;fe");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
      
      Float float0 = new Float(1801.6387F);
      assertNotNull(float0);
      assertEquals(1801.6387F, (float)float0, 0.01F);
      
      String string0 = ",:]}/\\\"[{;=#";
      JSONObject jSONObject2 = jSONObject1.put("Y-aWz!M{Ov#^L#", (Object) "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      try { 
        jSONObject1.getJSONObject("Y-aWz!M{Ov#^L#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, int0);
      
      Float float0 = new Float(1801.6387F);
      assertNotNull(float0);
      assertEquals(1801.6387F, (float)float0, 0.01F);
      
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      try { 
        jSONObject2.getJSONObject("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = "~g+Cr";
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONObject0.optNumber("~g+Cr", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)0, number0.byteValue());
      assertEquals((short)0, number0.shortValue());
      assertNotNull(number0);
      
      String string1 = JSONObject.doubleToString(1L);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("1", string1);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "1");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintWriter0);
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("~g+Cr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = jSONObject0.optBoolean("+KO(den|5{ P^Z3)i");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("Misplaced object.", "+KO(den|5{ P^Z3)i");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.optInt("+KO(den|5{ P^Z3)i");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
      
      Number number0 = jSONObject1.optNumber("Misplaced object.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNull(number0);
      
      boolean boolean1 = jSONObject0.optBoolean("Misplaced object.", true);
      assertFalse(boolean1 == boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean1);
      
      try { 
        jSONObject1.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", "Null key.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.optBoolean("Null key.", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
      
      String string0 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      String string0 = "length";
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains(string0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList1.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      boolean boolean0 = jSONObject0.optBoolean("length", true);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
      
      try { 
        jSONObject1.getJSONArray("length");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Boolean boolean1 = new Boolean("4");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      String string0 = jSONObject0.optString("4", "4");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "isabs");
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.resolve(uRI0, "getisEmpty");
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertEquals("file:/tmp/getisEmpty", uRI1.toString());
      assertEquals("/tmp/getisEmpty", uRI1.getRawPath());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertTrue(uRI1.isAbsolute());
      assertNotNull(uRI1);
      
      MockFile mockFile0 = new MockFile(uRI1);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotNull(mockFileWriter0);
      
      Writer writer0 = JSONObject.quote("BFp% '9Lr", (Writer) mockFileWriter0);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertEquals("file:/tmp/getisEmpty", uRI1.toString());
      assertEquals("/tmp/getisEmpty", uRI1.getRawPath());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertTrue(uRI1.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp/getisEmpty", mockFile0.toString());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("getisEmpty", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(writer0);
      
      Writer writer1 = JSONObject.quote((String) null, writer0);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertSame(mockFileWriter0, writer1);
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, writer1);
      assertSame(writer0, mockFileWriter0);
      assertSame(writer1, writer0);
      assertSame(writer1, mockFileWriter0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertEquals("file:/tmp/getisEmpty", uRI1.toString());
      assertEquals("/tmp/getisEmpty", uRI1.getRawPath());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertTrue(uRI1.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp/getisEmpty", mockFile0.toString());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("getisEmpty", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(writer1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Float float0 = new Float((float) 1546L);
      assertNotNull(float0);
      assertEquals(1546.0F, (float)float0, 0.01F);
      
      String string0 = JSONObject.quote("#2'");
      assertNotNull(string0);
      
      double double0 = jSONObject0.optDouble("1.0");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.put("BFp% '9Lr", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("~x@]h", 2028.948);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Map<String, Object> map0 = jSONObject1.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = new JSONObject(map0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      try { 
        jSONObject1.getBoolean("~x@]h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = "toM";
      JSONObject jSONObject1 = jSONObject0.put("toM", (-532.8));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      float float0 = jSONObject0.optFloat("toM");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-532.8F), float0, 0.01F);
      
      Object object0 = JSONObject.stringToValue("toM");
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("toM", object0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "toM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, int0);
      
      Float float0 = new Float(1800.1F);
      assertNotNull(float0);
      assertEquals(1800.1F, (float)float0, 0.01F);
      
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      String string0 = "] is not an enum of type ";
      File file0 = MockFile.createTempFile(",:]}/\"[{;=#", "uG$c8sT)=X]\"Dr");
      assertEquals("\"[{;=#0uG$c8sT)=X]\"Dr", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/tmp/,:]}", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/,:]}/\"[{;=#0uG$c8sT)=X]\"Dr", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      assertNotNull(mockFileOutputStream0);
      
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, "uG$c8sT)=X]\"Dr");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("p#0?'F5", 1.0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONArray1);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("org.json.JSONPointer$Builder", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name org.json.JSONPointer$Builder, locale en_CA
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'b';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'I';
      charArray0[7] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'l', 'l', 'b', 'l', 'l', 'I', 'l'}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) 'l');
      assertEquals((byte)108, bigDecimal0.byteValue());
      assertEquals((short)108, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("get", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)108, bigDecimal0.byteValue());
      assertEquals((short)108, bigDecimal0.shortValue());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)108, bigDecimal0.byteValue());
      assertEquals((short)108, bigDecimal0.shortValue());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("RcOL_r{X\"", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      int int0 = jSONObject0.getInt("get");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(108, int0);
      
      String string0 = JSONObject.quote("8$:@e2");
      assertNotNull(string0);
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(jSONPointer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = jSONObject0.optLong("#q?9L{+4TV+9", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1L, long0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONObject jSONObject2 = new JSONObject(pipedReader0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject2.put("#q?9L{+4TV+9", (Object) null);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      JSONObject jSONObject4 = jSONObject3.putOnce("#q?9L{+4TV+9", "#q?9L{+4TV+9");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject4);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject1);
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      Float float0 = new Float((float) 1L);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      String string0 = JSONObject.quote("#q?9L{+4TV+9");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-70");
      assertNotNull(number0);
      assertEquals((-70), number0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "sIz,-A}dO+Ej#";
      stringArray0[1] = "sIz,-A}dO+Ej#";
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("sIz,-A}dO+Ej#", "sIz,-A}dO+Ej#");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray1 = JSONObject.getNames((Object) bufferedInputStream0);
      assertNull(stringArray1);
      
      String string0 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("sIz,-A}dO+Ej#");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, int0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject2 = jSONObject0.put("dou", (Object) jSONArray0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
      
      try { 
        jSONObject1.getDouble("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      boolean boolean0 = jSONObject1.similar("uG$c8sT)=X]\"Dr");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(boolean0);
      
      double double0 = jSONObject0.getDouble("length");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1.0, double0, 0.01);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(28);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "length");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(6, charArrayWriter0.size());
      assertEquals("length", charArrayWriter0.toString());
      assertEquals("length", charArrayWriter1.toString());
      assertEquals(6, charArrayWriter1.size());
      assertNotNull(charArrayWriter1);
      
      CharArrayWriter charArrayWriter2 = (CharArrayWriter)jSONObject0.write((Writer) charArrayWriter1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(67, charArrayWriter0.size());
      assertEquals(67, charArrayWriter1.size());
      assertEquals(67, charArrayWriter2.size());
      assertNotNull(charArrayWriter2);
      
      CharArrayWriter charArrayWriter3 = (CharArrayWriter)jSONObject0.write((Writer) charArrayWriter2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(charArrayWriter0, charArrayWriter3);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter3);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter3);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter2);
      assertSame(charArrayWriter3, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(128, charArrayWriter0.size());
      assertEquals(128, charArrayWriter1.size());
      assertEquals(128, charArrayWriter2.size());
      assertEquals(128, charArrayWriter3.size());
      assertNotNull(charArrayWriter3);
      
      try { 
        jSONObject1.get("{R 3y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = jSONObject0.getDouble("length");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0L);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      HashMap<Float, CryptoPrimitive> hashMap0 = new HashMap<Float, CryptoPrimitive>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Float float0 = new Float((double) 0L);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("0");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(boolean0);
      
      int int0 = jSONObject0.length();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, int0);
      
      int int1 = (-1933885047);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream((InputStream) null, (-1933885047));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      assertEquals(RoundingMode.UNNECESSARY, roundingMode0);
      
      Object object0 = JSONObject.wrap(roundingMode0);
      assertSame(roundingMode0, object0);
      assertSame(object0, roundingMode0);
      assertEquals(RoundingMode.UNNECESSARY, object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "lzvXc");
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("hashCode", (-333.7F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      JSONObject jSONObject2 = new JSONObject(map0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(3, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject2.toString();
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(3, jSONObject2.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.doubleToString((-929.48129));
      assertNotNull(string0);
      assertEquals("-929.48129", string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Object object0 = JSONObject.stringToValue("-929.48129");
      assertNotNull(object0);
      assertEquals((-929.48129), object0);
      
      Boolean boolean1 = new Boolean("-929.48129");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Object object1 = JSONObject.stringToValue("-929.48129");
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      assertEquals((-929.48129), object1);
      
      Float float0 = new Float((-887.3F));
      assertNotNull(float0);
      assertEquals((-887.3F), (float)float0, 0.01F);
      
      int int0 = jSONObject0.optInt("-929.48129", (-1163911533));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((-1163911533), int0);
      
      try { 
        jSONObject0.getFloat("-929.48129");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-24L));
      assertNotNull(string0);
      assertEquals("-24", string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = JSONObject.stringToValue("-24");
      assertNotNull(object0);
      assertEquals((-24), object0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      Boolean boolean0 = new Boolean("-24");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "-24");
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.toString(2592);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add("length");
      assertTrue(linkedList1.contains("length"));
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertTrue(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertTrue(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      Object object0 = jSONObject0.get("length");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(object0);
      assertEquals(1L, object0);
      
      boolean boolean1 = jSONObject1.similar("length");
      assertFalse(boolean1 == boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(boolean1);
      
      long long0 = jSONObject1.optLong("#_Q}\"XJ-Kvw#", (-24L));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((-24L), long0);
      
      HashMap<ByteArrayOutputStream, DataInputStream> hashMap0 = new HashMap<ByteArrayOutputStream, DataInputStream>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      boolean boolean2 = jSONObject0.has("'iEEatH");
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("wD^8z-1", 3483.5F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, "wD^8z-1", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double((-1421.8191656665022));
      assertNotNull(double0);
      assertEquals((-1421.8191656665022), (double)double0, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      charArray0[3] = '\u0084';
      charArray0[4] = '\u0084';
      charArray0[5] = '`';
      charArray0[6] = '\u0084';
      charArray0[7] = '\u0084';
      charArray0[8] = '\u0084';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0084', '\u0084', '\u0084', '\u0084', '\u0084', '`', '\u0084', '\u0084', '\u0084'}, charArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("Tsb^d7OGd{.yCR", character_UnicodeScript1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string0 = jSONObject0.toString(47);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("0000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONObject jSONObject1 = jSONObject0.put("", 98.41F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject0.optEnum(class0, "%/m~7s Z+'2", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double((-1999.89357358893));
      assertNotNull(double0);
      assertEquals((-1999.89357358893), (double)double0, 0.01);
      
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("%/m~7s Z+'2", character_UnicodeScript1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = jSONObject2.toString(2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(string0);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("'7ZY[a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)108, (byte) (-88), (byte)73, (byte)83, (byte)21}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip(1L);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertEquals(1L, long0);
      assertArrayEquals(new byte[] {(byte)47, (byte)108, (byte) (-88), (byte)73, (byte)83, (byte)21}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C)t(g<d_Y");
      assertFalse(boolean0);
      
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertNotNull(bufferedInputStream0);
      
      long long1 = byteArrayInputStream0.skip((-1215L));
      assertFalse(long1 == long0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertEquals(0L, long1);
      assertArrayEquals(new byte[] {(byte)47, (byte)108, (byte) (-88), (byte)73, (byte)83, (byte)21}, byteArray0);
      
      JSONObject jSONObject1 = new JSONObject(sequenceInputStream0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(set0);
      
      Object object0 = JSONObject.stringToValue("toCharArray");
      assertNotNull(object0);
      assertEquals("toCharArray", object0);
      
      Character character0 = new Character('-');
      assertNotNull(character0);
      assertEquals('-', (char)character0);
      
      Object object1 = JSONObject.wrap(character0);
      assertNotNull(object1);
      assertEquals('-', object1);
      
      try { 
        jSONObject0.getBigInteger("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      Character character0 = new Character('j');
      assertNotNull(character0);
      assertEquals('j', (char)character0);
      
      Object object0 = JSONObject.wrap(character0);
      assertNotNull(object0);
      assertEquals('j', object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-24L));
      assertNotNull(string0);
      assertEquals("-24", string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = JSONObject.stringToValue("-24");
      assertNotNull(object0);
      assertEquals((-24), object0);
      
      String[] stringArray0 = JSONObject.getNames(object0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      Boolean boolean0 = new Boolean("-24");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "-24");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string1 = jSONObject0.toString((-38489319));
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(string1);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("-24");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-4838.1836F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'b';
      charArray0[4] = 'l';
      charArray0[6] = 'I';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[7] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'I', 'l', 'l', 'b', 'l', '\u0000', 'I', 'l'}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) '\u0000');
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("get", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("RcOL_r{X\"", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      int int0 = jSONObject0.getInt("get");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
      
      String string0 = JSONObject.quote("8$:@e2");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.doubleToString((-1899.088531718));
      assertNotNull(string0);
      assertEquals("-1899.088531718", string0);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Number number0 = JSONObject.stringToNumber("-1899.088531718");
      assertEquals((byte) (-107), number0.byteValue());
      assertEquals((short) (-1899), number0.shortValue());
      assertNotNull(number0);
      
      String string1 = "Cd*,Y/{nTKo";
      try { 
        jSONObject1.getJSONArray("Cd*,Y/{nTKo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject(10);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.put("tri", (float) 10);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.GEORGIAN;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject0.optEnum(class0, "getintern", character_UnicodeScript0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(Character.UnicodeScript.GEORGIAN, character_UnicodeScript1);
      
      Double double0 = new Double(1016.19809447);
      assertNotNull(double0);
      assertEquals(1016.19809447, (double)double0, 0.01);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("A JSONArray text must start with '['", double0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=pQu:}m<");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = '\\';
      charArray0[3] = 'D';
      charArray0[4] = '4';
      charArray0[5] = 'h';
      charArray0[6] = '%';
      charArray0[7] = 'E';
      mockPrintWriter0.println(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'d', 'd', '\\', 'D', '4', 'h', '%', 'E'}, charArray0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "isabs", objectArray0);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, objectArray0.length);
      assertNotNull(printWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) printWriter0, 34, 32);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertFalse(writer0.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertSame(mockPrintWriter1, writer0);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertSame(printWriter0, writer0);
      assertSame(writer0, printWriter0);
      assertNotSame(writer0, mockPrintWriter0);
      assertSame(writer0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, writer0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, objectArray0.length);
      assertNotNull(writer0);
      
      Short short0 = new Short((short) (-794));
      assertNotNull(short0);
      assertEquals((short) (-794), (short)short0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double(987.3036177);
      assertNotNull(double0);
      assertEquals(987.3036177, (double)double0, 0.01);
      
      Object object0 = JSONObject.stringToValue("NzQIzvW}!J^xPAO");
      assertNotNull(object0);
      assertEquals("NzQIzvW}!J^xPAO", object0);
      
      Boolean boolean0 = new Boolean("NzQIzvW}!J^xPAO");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(double0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString(11);
      assertFalse(string0.equals((Object)object0));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("NzQIzvW}!J^xPAO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Object object0 = JSONObject.stringToValue("getintern");
      assertNotNull(object0);
      assertEquals("getintern", object0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getintern");
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getintern");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      String string0 = jSONObject0.toString((-7));
      assertFalse(string0.equals((Object)object0));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Object object0 = jSONObject0.remove("^B$eEofzabgoPm1%ul");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(object0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Substring bounds error");
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      assertNotNull(bufferedReader0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8NAwk-@Mj [";
      stringArray0[1] = "8NAwk-@Mj [";
      stringArray0[2] = "position";
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("isEmpty", (-532.8));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      Map<String, Object> map0 = jSONObject2.toMap();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONArray jSONArray0 = jSONObject2.names();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject3 = jSONObject0.append("isEmpty", "8NAwk-@Mj [");
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      long long0 = jSONObject0.optLong("qCnUwX=_C)|v", (-24L));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((-24L), long0);
      
      JSONObject jSONObject4 = new JSONObject(map0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      JSONObject jSONObject5 = jSONObject1.putOpt("8NAwk-@Mj [", "8NAwk-@Mj [");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject4));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject5.equals((Object)jSONObject4));
      assertFalse(jSONObject5.equals((Object)jSONObject3));
      assertFalse(jSONObject5.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject4);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject5);
      assertSame(jSONObject5, jSONObject1);
      assertNotSame(jSONObject5, jSONObject4);
      assertSame(jSONObject5, jSONObject2);
      assertNotSame(jSONObject5, jSONObject3);
      assertNotSame(jSONObject5, jSONObject0);
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject5.length());
      assertFalse(jSONObject5.isEmpty());
      assertNotNull(jSONObject5);
      
      Short short0 = new Short((short)36);
      assertNotNull(short0);
      assertEquals((short)36, (short)short0);
      
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
      
      String[] stringArray1 = JSONObject.getNames((Object) short0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.doubleToString(0L);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gettoLowerCase");
      assertFalse(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains(string0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains(string0));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertFalse(set0.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      char[] charArray0 = new char[0];
      Double double0 = new Double((-7830.2606009129));
      assertNotNull(double0);
      assertEquals((-7830.2606009129), (double)double0, 0.01);
      
      JSONObject jSONObject1 = new JSONObject(double0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      String string1 = jSONObject1.toString((-423));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      boolean boolean0 = jSONObject1.similar("uG$c8sT)=X]\"Dr");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
      
      Number number0 = jSONObject0.optNumber("uG$c8sT)=X]\"Dr");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNull(number0);
      
      Short short0 = new Short((short)992);
      assertNotNull(short0);
      assertEquals((short)992, (short)short0);
      
      try { 
        jSONObject0.getBigDecimal("length");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = " x|9[";
      JSONObject jSONObject1 = jSONObject0.put(" x|9[", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject0.getBigDecimal(" x|9[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Object object0 = JSONObject.stringToValue("RKFs{N");
      assertNotNull(object0);
      assertEquals("RKFs{N", object0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("RKFs{N", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-2701.056));
      assertNotNull(double0);
      assertEquals((-2701.056), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("getintern", "getintern");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tu");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) jSONObject1;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) "getintern";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "pqnBhD:!2hV).", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(5, objectArray0.length);
      assertNotNull(printWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, 2159, 77);
      assertSame(jSONObject0, jSONObject1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertSame(writer0, printWriter0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(writer0);
      
      Short short0 = new Short((short)8192);
      assertNotNull(short0);
      assertEquals((short)8192, (short)short0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", (float) 31);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, (String) null, character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Null pointer");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSONObject0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) jSONObject1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) jSONObject1;
      String[] stringArray0 = JSONObject.getNames((Object) mockPrintWriter0);
      assertNull(stringArray0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "Null key.", objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(5, objectArray0.length);
      assertNotNull(printWriter0);
      
      Writer writer0 = jSONObject1.write((Writer) mockPrintWriter0, (-2654), (-3251));
      assertSame(jSONObject0, jSONObject1);
      assertSame(writer0, mockPrintWriter0);
      assertSame(writer0, printWriter0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(writer0);
      
      Short short0 = new Short((short)3373);
      assertNotNull(short0);
      assertEquals((short)3373, (short)short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("isnot");
      assertNotNull(mockFile0);
      
      String string0 = mockFile0.getAbsolutePath();
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("isnot", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("isnot", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(string0);
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/isnot", string0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal((String) null, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      Object object0 = jSONObject0.optQuery("/home/apaniche/mitchell/generation-scripts/projects/json/isnot");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      Object object0 = JSONObject.wrap(double0);
      assertNotNull(object0);
      assertEquals((-1684.496191473), object0);
      
      JSONObject jSONObject1 = new JSONObject(2473);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(":P", bigDecimal0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("]", (-1.0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Object object0 = JSONObject.stringToValue("getintern");
      assertNotNull(object0);
      assertEquals("getintern", object0);
      
      float float0 = jSONObject0.getFloat("]");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      String string0 = "#";
      try { 
        JSONObject.stringToNumber("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [#] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      assertNotNull(bufferedReader0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Writer writer0 = jSONObject1.write((Writer) stringWriter0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, writer0);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(writer0, stringWriter0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", stringWriter0.toString());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals("{}", writer0.toString());
      assertEquals(0, stringArray0.length);
      assertNotNull(writer0);
      
      Short short0 = new Short((short)78);
      assertNotNull(short0);
      assertEquals((short)78, (short)short0);
      
      Writer writer1 = jSONObject1.write(writer0, (-1220), 8);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, writer1);
      assertSame(stringWriter0, writer0);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(writer0, stringWriter0);
      assertSame(writer0, writer1);
      assertSame(writer1, writer0);
      assertSame(writer1, stringWriter0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}{}", stringWriter0.toString());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals("{}{}", writer0.toString());
      assertEquals("{}{}", writer1.toString());
      assertEquals(0, stringArray0.length);
      assertNotNull(writer1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rIz,-A}dO+Ej#";
      stringArray0[1] = "Duplicate key \"";
      stringArray0[2] = ".";
      HashMap<Character.UnicodeScript, ByteArrayInputStream> hashMap0 = new HashMap<Character.UnicodeScript, ByteArrayInputStream>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("=W*MMv3lPm+ak?Qn", (-1273.84F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      String string0 = null;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, (String) null, character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double(511.749964892);
      assertNotNull(double0);
      assertEquals(511.749964892, (double)double0, 0.01);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(3378);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("ke", pipedOutputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string1 = null;
      try { 
        jSONObject0.putOnce("ke", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"ke\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = "@9}cUm.";
      Object object0 = JSONObject.stringToValue("@9}cUm.");
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("@9}cUm.", object0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 675);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", 3483.5F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, "getintern", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double(3483.5F);
      assertNotNull(double0);
      assertEquals(3483.5, (double)double0, 0.01);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("getintern", class0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("isabs");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "pqnBhD:!2hV).", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, objectArray0.length);
      assertNotNull(printWriter0);
      
      Writer writer0 = jSONObject2.write((Writer) printWriter0, (-16), 31);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(printWriter0, writer0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
      assertSame(writer0, printWriter0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, objectArray0.length);
      assertNotNull(writer0);
      
      Short short0 = new Short((short) (-794));
      assertNotNull(short0);
      assertEquals((short) (-794), (short)short0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("D]j:SF(~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      assertNotNull(bufferedReader0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Writer writer0 = jSONObject1.write((Writer) stringWriter0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, writer0);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(writer0, stringWriter0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", stringWriter0.toString());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals("{}", writer0.toString());
      assertEquals(0, stringArray0.length);
      assertNotNull(writer0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      String string0 = "] could not convert to BigDecimal.";
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      JSONObject jSONObject2 = jSONObject1.put("] could not convert to BigDecimal.", (Object) locale_Category0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject2);
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("smhNj-9dJ}i=_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("5v$_}SVUv%'2 R]q~F", 9.005192F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject0.optLong("5v$_}SVUv%'2 R]q~F", 1546L);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(9L, long0);
      
      JSONObject jSONObject2 = jSONObject0.optJSONObject("5v$_}SVUv%'2 R]q~F");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.query("3d#L*^@~/`f:a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1899.088531718));
      assertNotNull(string0);
      assertEquals("-1899.088531718", string0);
      
      Number number0 = JSONObject.stringToNumber("-1899.088531718");
      assertEquals((short) (-1899), number0.shortValue());
      assertEquals((byte) (-107), number0.byteValue());
      assertNotNull(number0);
      
      String string1 = JSONObject.doubleToString((-1899.088531718));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-1899.088531718", string1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0L);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0");
      assertFalse(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Number number0 = JSONObject.stringToNumber("0");
      assertNotNull(number0);
      assertEquals(0, number0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name 0, locale fr
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1157.0485547692));
      assertNotNull(string0);
      assertEquals("-1157.0485547692", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Number number0 = JSONObject.stringToNumber("-1157.0485547692");
      assertEquals((short) (-1157), number0.shortValue());
      assertEquals((byte)123, number0.byteValue());
      assertNotNull(number0);
      
      try { 
        jSONObject0.getJSONArray("-1157.0485547692");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 31;
      JSONObject jSONObject0 = new JSONObject(31);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "toU");
      assertFalse(boolean0);
      
      String string0 = null;
      Number number0 = jSONObject0.optNumber("gettoUpperCase", (Number) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      String string1 = JSONObject.doubleToString(4736.019619341386);
      assertNotNull(string1);
      assertEquals("4736.019619341386", string1);
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("4736.019619341386");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "sIz,-A}dO+Ej#";
      stringArray0[1] = "Duplicate key \"";
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", (-1.0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Object object0 = JSONObject.stringToValue(".6w!4#=");
      assertNotNull(object0);
      assertEquals(".6w!4#=", object0);
      
      StringReader stringReader0 = new StringReader("Duplicate key \"");
      assertNotNull(stringReader0);
      
      JSONObject jSONObject2 = jSONObject1.append("bTrG3", stringReader0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      double double0 = jSONObject2.optDouble("getabs", (-1.0));
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((-1.0), double0, 0.01);
      
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONPointer0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("true", double0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("true");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, int0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.shiftRight(4121);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = jSONObject0.optBigInteger("true", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      
      try { 
        jSONObject1.getJSONArray("-0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("NzQIzvW}!J^xPAO", double0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("NzQIzvW}!J^xPAO");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((-1684), int0);
      
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertTrue(boolean0);
      
      Number number0 = jSONObject0.optNumber("uG$c8sT)=X]\"Dr");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(number0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'Y';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      charArray0[6] = '\\';
      charArray0[7] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', 'Y', '\\', '\\', '\\', '\\', '\\', '\\'}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1684));
      assertEquals((short) (-1684), bigDecimal0.shortValue());
      assertEquals((byte)108, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("cDph,GZ#zT:;D0t,x", "] could not be converted to BigInteger.");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject2.optBigInteger("NzQIzvW}!J^xPAO", bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals((byte)108, bigInteger1.byteValue());
      assertEquals((short) (-1684), bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      try { 
        jSONObject2.getInt("@[/Gi%Ot|Z/`3+p^;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("/1ohe5p(jJ5EAqF", 1023L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("/1ohe5p(jJ5EAqF"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("/1ohe5p(jJ5EAqF"));
      assertFalse(list0.contains("/1ohe5p(jJ5EAqF"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList1.contains("/1ohe5p(jJ5EAqF"));
      assertFalse(list0.contains("/1ohe5p(jJ5EAqF"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}'}, charArray0);
      
      String string0 = JSONObject.valueToString(list0);
      assertFalse(linkedList1.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(string0);
      
      HashMap<Locale.FilteringMode, InputStreamReader> hashMap0 = new HashMap<Locale.FilteringMode, InputStreamReader>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject(jSONPointer0);
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(linkedList1.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONObject3);
      
      BigDecimal bigDecimal0 = new BigDecimal(123);
      assertEquals((byte)123, bigDecimal0.byteValue());
      assertEquals((short)123, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject4 = jSONObject3.append("java.io.StringWriter@0000000009", "java.io.StringWriter@0000000009");
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertSame(jSONObject3, jSONObject4);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject1);
      assertFalse(linkedList1.contains("java.io.StringWriter@0000000009"));
      assertFalse(list0.contains("java.io.StringWriter@0000000009"));
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, jSONObject4.length());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONObject4);
      
      HashMap<KeyRep.Type, Character> hashMap1 = new HashMap<KeyRep.Type, Character>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      HashMap<KeyRep.Type, Character> hashMap2 = new HashMap<KeyRep.Type, Character>(hashMap1);
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertNotNull(hashMap2);
      
      JSONObject jSONObject5 = jSONObject1.put("] is not an int.", (Map<?, ?>) hashMap2);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject4));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertTrue(hashMap1.equals((Object)hashMap2));
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertFalse(jSONObject5.equals((Object)jSONObject3));
      assertFalse(jSONObject5.equals((Object)jSONObject4));
      assertFalse(jSONObject5.equals((Object)jSONObject2));
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject5);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject4);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject5);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject4);
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(hashMap1, hashMap2);
      assertNotSame(hashMap2, hashMap1);
      assertNotSame(jSONObject5, jSONObject3);
      assertSame(jSONObject5, jSONObject1);
      assertSame(jSONObject5, jSONObject0);
      assertNotSame(jSONObject5, jSONObject4);
      assertNotSame(jSONObject5, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertFalse(jSONObject5.isEmpty());
      assertEquals(2, jSONObject5.length());
      assertNotNull(jSONObject5);
      
      float float0 = jSONObject4.optFloat("/1ohe5p(jJ5EAqF", (float) 1023L);
      assertFalse(jSONObject3.equals((Object)jSONObject5));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject5));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertSame(jSONObject3, jSONObject4);
      assertNotSame(jSONObject3, jSONObject5);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject4, jSONObject5);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject1);
      assertFalse(linkedList1.contains("java.io.StringWriter@0000000009"));
      assertFalse(list0.contains("java.io.StringWriter@0000000009"));
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, jSONObject4.length());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1023.0F, float0, 0.01F);
      
      int int0 = jSONObject0.optInt("/1ohe5p(jJ5EAqF", 123);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject5);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject4);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(1023, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("get", "get");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.optString("get", "");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      pipedReader0.connect(pipedWriter0);
      JSONObject jSONObject1 = jSONObject0.putOnce("length", pipedReader0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Number number0 = jSONObject1.optNumber("] not found.", (Number) bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, number0.byteValue());
      assertEquals((short)0, number0.shortValue());
      assertNotNull(number0);
      
      String string0 = JSONObject.doubleToString((-2071.4676673522104));
      assertNotNull(string0);
      assertEquals("-2071.4676673522104", string0);
      
      JSONObject jSONObject2 = jSONObject0.put("] not found.", (Object) "-2071.4676673522104");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      boolean boolean0 = jSONObject1.isEmpty();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(boolean0);
      
      String string1 = jSONObject0.optString("length");
      assertFalse(string1.equals((Object)string0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("NzQIzvW}!J^xPAO", double0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("NzQIzvW}!J^xPAO");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((-1684), int0);
      
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertTrue(boolean0);
      
      Number number0 = jSONObject0.optNumber("uG$c8sT)=X]\"Dr");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(number0);
      
      String string0 = "] could not be converted to BigInteger.";
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      assertNotNull(bufferedReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'I';
      charArray0[2] = 'l';
      charArray0[3] = '!';
      charArray0[4] = '\\';
      charArray0[5] = 'Y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'@', 'I', 'l', '!', '\\', 'Y'}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(8);
      assertEquals((short)8, bigDecimal0.shortValue());
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("RcOL_r{X\"", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)8, bigDecimal0.shortValue());
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("RcOL_r{X\"", bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)8, bigInteger1.byteValue());
      assertEquals((short)8, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      int int0 = jSONObject0.getInt("RcOL_r{X\"");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'b', 'b', 'b'}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(10);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject1 = new JSONObject(charArrayReader0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(3, charArray0.length);
      assertNotNull(jSONObject1);
      assertArrayEquals(new char[] {'b', 'b', 'b'}, charArray0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("RcOL_r{X\"", bigDecimal1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(3, charArray0.length);
      assertNotNull(jSONObject2);
      assertArrayEquals(new char[] {'b', 'b', 'b'}, charArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject2.optBigInteger("RcOL_r{X\"", bigInteger0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals(3, charArray0.length);
      assertNotNull(bigInteger1);
      assertArrayEquals(new char[] {'b', 'b', 'b'}, charArray0);
      
      int int0 = new Character('b');
      assertEquals('b', int0);
      
      String string0 = JSONObject.quote("NzQIzvW}!J^xPAO");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x', 'x', 'x', 'x'}, charArray0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("TX]$RETS{b", true);
      assertNotNull(mockFileWriter0);
      
      String string0 = JSONObject.valueToString(mockFileWriter0);
      assertNotNull(string0);
      
      HashMap<Locale.FilteringMode, InputStreamReader> hashMap0 = new HashMap<Locale.FilteringMode, InputStreamReader>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = new JSONObject((Object) "java.io.StringWriter@0000000003");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      BigDecimal bigDecimal0 = new BigDecimal(9);
      assertEquals((short)9, bigDecimal0.shortValue());
      assertEquals((byte)9, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject3 = jSONObject0.append("TX]$RETS{b", "java.io.StringWriter@0000000003");
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject3);
      
      HashMap<KeyRep.Type, Character> hashMap1 = new HashMap<KeyRep.Type, Character>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      HashMap<KeyRep.Type, Character> hashMap2 = new HashMap<KeyRep.Type, Character>();
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertNotNull(hashMap2);
      
      HashMap<KeyRep.Type, Character> hashMap3 = new HashMap<KeyRep.Type, Character>(hashMap2);
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertTrue(hashMap3.equals((Object)hashMap1));
      assertTrue(hashMap3.equals((Object)hashMap2));
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
      assertNotNull(hashMap3);
      
      JSONObject jSONObject4 = new JSONObject((int) 'x');
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertEquals(0, jSONObject4.length());
      assertTrue(jSONObject4.isEmpty());
      assertNotNull(jSONObject4);
      
      float float0 = jSONObject0.optFloat("X!y5zc=2", 0.0F);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("!I\"TzT", jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONObject1.optNumber("!I\"TzT", (Number) bigDecimal0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)0, number0.byteValue());
      assertEquals((short)0, number0.shortValue());
      assertNotNull(number0);
      
      String string0 = JSONObject.doubleToString((-2224.8665024));
      assertNotNull(string0);
      assertEquals("-2224.8665024", string0);
      
      String string1 = null;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject("/1ohe5p(jJ5EAqF", stringArray0);
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject3);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("] not a string.", "-2224.8665024");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -2224.8665024
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString(12);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Object object0 = JSONObject.stringToValue("]");
      assertNotNull(object0);
      assertEquals("]", object0);
      
      JSONObject jSONObject1 = jSONObject0.append("]", "]");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString();
      assertFalse(string0.equals((Object)object0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      assertNotNull(bufferedReader0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Writer writer0 = jSONObject1.write((Writer) stringWriter0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, writer0);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(writer0, stringWriter0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", stringWriter0.toString());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals("{}", writer0.toString());
      assertEquals(0, stringArray0.length);
      assertNotNull(writer0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      Writer writer1 = JSONObject.quote("/r?NVo", (Writer) stringWriter0);
      assertSame(stringWriter0, writer0);
      assertSame(stringWriter0, writer1);
      assertSame(writer1, stringWriter0);
      assertSame(writer1, writer0);
      assertEquals("{}\"/r?NVo\"", stringWriter0.toString());
      assertEquals("{}\"/r?NVo\"", writer1.toString());
      assertNotNull(writer1);
      
      Object object0 = jSONObject0.opt(".$5(w");
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", 3483.5F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, "getintern", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("getintern", class0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger1 = jSONObject2.optBigInteger("", bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)3483, bigInteger1.shortValue());
      assertEquals((byte) (-101), bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      JSONObject jSONObject3 = jSONObject2.put("", 0.0F);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("#");
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      Writer writer0 = JSONObject.quote("", (Writer) printWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, writer0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
      assertSame(writer0, printWriter0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rIz,-A}dO+Ej#";
      stringArray0[1] = "Duplicate key \"";
      stringArray0[2] = ".";
      stringArray0[3] = "position";
      stringArray0[4] = "8NAwk-@Mj [";
      stringArray0[5] = "\\";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      stringArray0[6] = "lZ_`tarP%%m1";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("\\", 238.9021548);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Map<String, Object> map0 = jSONObject1.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(map0);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONArray0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rIz,-A}dO+Ej#");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "rIz,-A}dO+Ej#");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) printWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(printWriter0, writer0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(writer0, printWriter0);
      assertSame(writer0, mockPrintWriter0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(7, stringArray0.length);
      assertNotNull(writer0);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(set0);
      
      JSONObject jSONObject2 = jSONObject1.increment("lZ_`tarP%%m1");
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject2.toString((-1840700267));
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = jSONObject1.length();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(7, stringArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("] is not a Boolean.");
      assertNotNull(object0);
      assertEquals("] is not a Boolean.", object0);
      
      JSONObject jSONObject0 = new JSONObject(98);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Object object1 = JSONObject.stringToValue("] is not a Boolean.");
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      assertEquals("] is not a Boolean.", object1);
      
      JSONObject.testValidity("4!qH,3");
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) stringWriter0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals("{}", stringWriter0.toString());
      assertEquals("{}", writer0.toString());
      assertNotNull(writer0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      Writer writer1 = JSONObject.quote("javax.", (Writer) mockPrintWriter0);
      assertSame(stringWriter0, writer0);
      assertSame(mockPrintWriter0, writer1);
      assertSame(writer1, mockPrintWriter0);
      assertEquals("{}\"javax.\"", stringWriter0.toString());
      assertNotNull(writer1);
      
      Object object2 = jSONObject0.opt("javax.");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.doubleToString(912.0389194828167);
      assertNotNull(string0);
      assertEquals("912.0389194828167", string0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)17;
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 9);
      assertNotNull(pushbackReader0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("912.0389194828167", pushbackReader0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Object object0 = JSONObject.stringToValue("912.0389194828167");
      assertNotNull(object0);
      assertEquals(912.0389194828167, object0);
      
      JSONObject jSONObject2 = new JSONObject((int) (byte)17);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      try { 
        jSONObject3.getFloat("'Y[c-n,=Nh2]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      assertNotNull(bufferedReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'I';
      charArray0[2] = 'l';
      charArray0[3] = '!';
      charArray0[4] = '\\';
      charArray0[5] = 'Y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'@', 'I', 'l', '!', '\\', 'Y'}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(8);
      assertEquals((short)8, bigDecimal0.shortValue());
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("RcOL_r{X\"", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)8, bigDecimal0.shortValue());
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject1.optBigInteger("toMap", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)8, bigDecimal0.shortValue());
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      int int0 = jSONObject1.getInt("RcOL_r{X\"");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)8, bigDecimal0.shortValue());
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertNotNull(number0);
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0L);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      MockFile mockFile0 = new MockFile("0");
      assertNotNull(mockFile0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("0");
      assertNotNull(mockFileWriter0);
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)JSONObject.quote("Nu~*U*1 _j;y", (Writer) charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("\"Nu~*U*1 _j;y\"", charArrayWriter0.toString());
      assertEquals(14, charArrayWriter0.size());
      assertEquals(14, charArrayWriter1.size());
      assertEquals("\"Nu~*U*1 _j;y\"", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      
      charArrayWriter0.writeTo(mockFileWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertEquals("\"Nu~*U*1 _j;y\"", charArrayWriter0.toString());
      assertEquals(14, charArrayWriter0.size());
      
      MockFile mockFile1 = (MockFile)MockFile.createTempFile("7S?NOS", "7S?NOS");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertEquals("/tmp/7S?NOS07S?NOS", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals("7S?NOS07S?NOS", mockFile1.getName());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.exists());
      assertEquals("/tmp", mockFile1.getParent());
      assertNotNull(mockFile1);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("d\"1EXfAIH", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      JSONObject jSONObject2 = jSONObject0.increment("d\"1EXfAIH");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject0.optEnum(class0, "Misplaced array.", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double((-846.4F));
      assertNotNull(double0);
      assertEquals((-846.4000244140625), (double)double0, 0.01);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("d\"1EXfAIH");
      assertNotNull(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject("p#0?'F5", stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("+bTzIWwW,6F*CVQ9Vw");
      assertNotNull(mockFileWriter0);
      
      Writer writer0 = JSONObject.quote("JZ}FUY", (Writer) mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      charArrayWriter0.writeTo(writer0);
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      HashMap<Component.BaselineResizeBehavior, Window.Type> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Window.Type>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringReader stringReader0 = new StringReader("S<NO");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 2692);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = hashMap0.remove((Object) null, (Object) pushbackReader0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(boolean0);
      
      double double0 = jSONObject0.optDouble("p#0?'F5", 0.0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3022);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = ".jikvoBfF2*A";
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.put(".jikvoBfF2*A", (Collection<?>) linkedList0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject1.increment(".jikvoBfF2*A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      String string0 = JSONObject.valueToString(linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(string0);
      
      HashMap<Locale.FilteringMode, InputStreamReader> hashMap0 = new HashMap<Locale.FilteringMode, InputStreamReader>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      BigDecimal bigDecimal0 = new BigDecimal(9);
      assertEquals((short)9, bigDecimal0.shortValue());
      assertEquals((byte)9, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject4 = jSONObject2.append("alue [%s] is not an array or object therefore its key %s cannot be resolved", bigDecimal0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject4);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject4, jSONObject1);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)9, bigDecimal0.shortValue());
      assertEquals((byte)9, bigDecimal0.byteValue());
      assertEquals(1, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertNotNull(jSONObject4);
      
      HashMap<KeyRep.Type, Character> hashMap1 = new HashMap<KeyRep.Type, Character>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      try { 
        jSONObject2.increment("alue [%s] is not an array or object therefore its key %s cannot be resolved");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000019].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("#/", 1342.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.increment("#/");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject("toCharArray");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, "] could not be converted to BigDecimal.", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double((-846.4F));
      assertNotNull(double0);
      assertEquals((-846.4000244140625), (double)double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '\'';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = '}';
      charArray0[6] = ':';
      charArray0[7] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', '\'', 'u', 'j', 'j', '}', ':', 'u'}, charArray0);
      
      Double double1 = new Double((-846.4F));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-846.4000244140625), (double)double1, 0.01);
      
      JSONObject jSONObject2 = new JSONObject(double0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "] could not be converted to BigDecimal.";
      stringArray0[1] = "] could not be converted to BigDecimal.";
      stringArray0[2] = "] could not be converted to BigDecimal.";
      stringArray0[3] = "] could not be converted to BigDecimal.";
      stringArray0[4] = "] could not be converted to BigDecimal.";
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertEquals(5, stringArray0.length);
      assertNotNull(jSONObject3);
      
      int int0 = jSONObject1.optInt("] could not be converted to BigDecimal.");
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject3);
      assertNotSame(jSONObject1, jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((-846), int0);
      
      JSONObject jSONObject4 = jSONObject0.optJSONObject("getBytes");
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject3);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(jSONObject4);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(" x|9[", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Object object0 = JSONObject.stringToValue(" x|9[");
      assertNotNull(object0);
      assertEquals(" x|9[", object0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.put("", 3483.5F);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      boolean boolean0 = jSONObject0.optBoolean("4");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
      
      try { 
        jSONObject0.getJSONArray("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("@9}cUm.", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Number number0 = jSONObject1.optNumber("J//#!:e");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNull(number0);
      
      JSONObject jSONObject2 = jSONObject1.put("J//#!:e", 5126);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("] is not a Boolean.");
      assertNotNull(object0);
      assertEquals("] is not a Boolean.", object0);
      
      JSONObject jSONObject0 = new JSONObject(4710);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("W!Iv&F");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      boolean boolean1 = jSONObject0.similar(mockFileWriter0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("W!Iv&F", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("W!Iv&F", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(boolean1);
      
      float float0 = jSONObject0.optFloat("jYo<", (-1357.0F));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((-1357.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, "] could not be converted to BigDecimal.", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double((-846.4F));
      assertNotNull(double0);
      assertEquals((-846.4000244140625), (double)double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '\'';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = '}';
      charArray0[6] = ':';
      charArray0[7] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', '\'', 'u', 'j', 'j', '}', ':', 'u'}, charArray0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("5{!SurU>UIy>Vs/", character_UnicodeScript0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject2.optBigInteger("v#4;W*@6|", bigInteger0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(bigInteger0, bigInteger1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(bigInteger1, bigInteger0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      int int0 = jSONObject0.getInt("] could not be converted to BigDecimal.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-846), int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      char[] charArray0 = new char[8];
      charArray0[3] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'b', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) '\u0000');
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("get", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      int int0 = jSONObject0.getInt("get");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("HN+8TN", 1749.2518F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.has("HN+8TN");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, "] could not be converted to BigDecimal.", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double((-846.4F));
      assertNotNull(double0);
      assertEquals((-846.4000244140625), (double)double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '\'';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = '}';
      charArray0[6] = ':';
      charArray0[7] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', '\'', 'u', 'j', 'j', '}', ':', 'u'}, charArray0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("5{!SurU>UIy>Vs/", character_UnicodeScript0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Number number0 = jSONObject2.getNumber("] could not be converted to BigDecimal.");
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(number0);
      assertEquals((-846.4F), number0);
      
      boolean boolean0 = jSONObject2.has("] could not be converted to BigDecimal.");
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertTrue(boolean0);
      
      Object object0 = JSONObject.stringToValue("] could not be converted to BigDecimal.");
      assertNotNull(object0);
      assertEquals("] could not be converted to BigDecimal.", object0);
      
      boolean boolean1 = jSONObject0.optBoolean("] is not an int.", true);
      assertTrue(boolean1 == boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("p#0?'F5", 1.0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = JSONObject.doubleToString(1.0);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      Number number0 = jSONObject1.getNumber("p#0?'F5");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(number0);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rIz,-A}dO+Ej#";
      stringArray0[1] = "Duplicate key \"";
      stringArray0[2] = ".";
      stringArray0[3] = "position";
      stringArray0[4] = "8NAwk-@Mj [";
      stringArray0[5] = "\\";
      stringArray0[6] = "lZ_`tarP%%m1";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("\\", 238.9021548);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Map<String, Object> map0 = jSONObject1.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(map0);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONArray0);
      
      long long0 = jSONObject1.optLong("Jqm%D&}7?85-B|", 2110L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(7, stringArray0.length);
      assertEquals(2110L, long0);
      
      JSONObject jSONObject2 = new JSONObject(map0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject2);
      
      boolean boolean0 = jSONObject2.has("false");
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Character character0 = new Character('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      HashMap<KeyRep.Type, Character> hashMap0 = new HashMap<KeyRep.Type, Character>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      KeyRep.Type keyRep_Type0 = KeyRep.Type.SECRET;
      Character character1 = hashMap0.put(keyRep_Type0, (Character) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(character1);
      
      JSONObject jSONObject1 = jSONObject0.put("d\"1EXfAIH", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      float float0 = jSONObject0.optFloat("gettryLock", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-846.4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "lzvXc");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      JSONObject jSONObject1 = new JSONObject(map0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double(590.5);
      assertNotNull(double0);
      assertEquals(590.5, (double)double0, 0.01);
      
      Object object0 = JSONObject.wrap(double0);
      assertNotNull(object0);
      assertEquals(590.5, object0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1851));
      assertNotNull(string0);
      assertEquals("-1851", string0);
      
      Object object0 = JSONObject.stringToValue("ZVqWx `)V'jLGR");
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("ZVqWx `)V'jLGR", object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("toLowerCase");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, "] could not be converted to BigDecimal.", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double((-846.4F));
      assertNotNull(double0);
      assertEquals((-846.4000244140625), (double)double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '\'';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = '}';
      charArray0[6] = ':';
      charArray0[7] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', '\'', 'u', 'j', 'j', '}', ':', 'u'}, charArray0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("5{!SurU>UIy>Vs/", character_UnicodeScript0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject2.optBigInteger("v#4;W*@6|", bigInteger0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(bigInteger0, bigInteger1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigInteger1, bigInteger0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      try { 
        jSONObject2.getJSONArray("hl11mwLAK%G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = "false";
      JSONPointer jSONPointer0 = new JSONPointer("/1ohe5p(jJ5EAqF");
      assertNotNull(jSONPointer0);
      
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(object0);
      
      try { 
        jSONObject0.getFloat("/1ohe5p(jJ5EAqF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      boolean boolean0 = jSONObject0.optBoolean("A JSONObject text must end with '}'");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("null", pipedReader0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      String string0 = "Q";
      int int0 = jSONObject1.optInt("Q");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, int0);
      
      Number number0 = jSONObject1.optNumber("Q");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNull(number0);
      
      boolean boolean1 = jSONObject1.optBoolean("Q", true);
      assertFalse(boolean1 == boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertTrue(boolean1);
      
      try { 
        jSONObject1.getJSONArray("xSP^oGVSb`q\"QTO;S#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "] is not a Boolean.";
      Object object0 = JSONObject.stringToValue("] is not a Boolean.");
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("] is not a Boolean.", object0);
      
      int int0 = 4710;
      JSONObject jSONObject0 = new JSONObject(4710);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string1 = "W!Iv&F";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("W!Iv&F", "] is not a Boolean.");
      assertNotNull(mockFile0);
      
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 31;
      JSONObject jSONObject0 = new JSONObject(31);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "\"\"";
      Float float0 = new Float((double) 31);
      assertNotNull(float0);
      assertEquals(31.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("\"\"", float0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int1 = jSONObject0.optInt("\"\"");
      assertTrue(int1 == int0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(31, int1);
      
      Number number0 = jSONObject1.optNumber("\"\"");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(number0);
      assertEquals(31.0F, number0);
      
      try { 
        jSONObject0.getJSONArray(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-111L));
      assertEquals((short) (-111), bigDecimal0.shortValue());
      assertEquals((byte) (-111), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONObject0.optNumber("", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short) (-111), bigDecimal0.shortValue());
      assertEquals((byte) (-111), bigDecimal0.byteValue());
      assertEquals((byte) (-111), number0.byteValue());
      assertEquals((short) (-111), number0.shortValue());
      assertNotNull(number0);
      
      String string0 = JSONObject.doubleToString(1.0);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      Long long0 = new Long((-713L));
      assertNotNull(long0);
      assertEquals((-713L), (long)long0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1157.0485547692));
      assertNotNull(string0);
      assertEquals("-1157.0485547692", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("~1", 0L);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0L, long0);
      
      String string1 = null;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONObject0.optNumber("~g+Cr", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, number0.shortValue());
      assertEquals((byte)0, number0.byteValue());
      assertNotNull(number0);
      
      String string0 = JSONObject.doubleToString(1L);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      URI uRI0 = MockURI.aFileURI;
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "1");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      File file0 = MockFile.createTempFile("false", "/1ohe5p(jJ5EAqF", (File) mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("1", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/tmp/foo.bar/1", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isFile());
      assertEquals("/tmp/foo.bar", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals("1ohe5p(jJ5EAqF", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/foo.bar/1/false0", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/foo.bar/1/false0/1ohe5p(jJ5EAqF", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("/1ohe5p(jJ5EAqF", "/1ohe5p(jJ5EAqF");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "/1ohe5p(jJ5EAqF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[8];
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONObject0.optNumber("/1ohe5p(jJ5EAqF", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((short)1, number0.shortValue());
      assertEquals((byte)1, number0.byteValue());
      assertNotNull(number0);
      
      String string0 = JSONObject.doubleToString(1L);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "/1ohe5p(jJ5EAqF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2804.498471);
      assertNotNull(string0);
      assertEquals("2804.498471", string0);
      
      Number number0 = JSONObject.stringToNumber("2804.498471");
      assertNotNull(number0);
      assertEquals(2804.498471, number0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      Object object0 = JSONObject.stringToValue("-0");
      assertNotNull(object0);
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("A");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("A"));
      assertFalse(list1.contains("A"));
      assertEquals(0, linkedList1.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      boolean boolean0 = linkedList1.addAll((Collection<? extends String>) list1);
      assertFalse(linkedList1.contains("A"));
      assertFalse(list1.contains("A"));
      assertEquals(0, linkedList1.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(boolean0);
      
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertTrue(list2.equals((Object)list1));
      assertNotSame(list2, list1);
      assertFalse(linkedList1.contains("A"));
      assertFalse(list2.contains("A"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      JSONPointer jSONPointer0 = new JSONPointer(list2);
      assertTrue(list2.equals((Object)list1));
      assertFalse(linkedList1.contains("A"));
      assertFalse(list2.contains("A"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(jSONPointer0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockFile mockFile0 = new MockFile("length");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      boolean boolean2 = jSONObject1.similar(mockFile0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("length", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("length", mockFile0.toString());
      assertFalse(boolean2);
      
      double double0 = jSONObject0.optDouble(".", (double) 1L);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1.0, double0, 0.01);
      
      float float0 = jSONObject0.getFloat("length");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] could not convert to BigInteger.", 8192);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
      
      float float0 = jSONObject0.getFloat("] could not convert to BigInteger.");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(8192.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Boolean boolean0 = new Boolean("4");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = JSONObject.doubleToString((-486.6140995899692));
      assertNotNull(string0);
      assertEquals("-486.6140995899692", string0);
      
      String string1 = "q{8G0";
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("] is not a Boolean.");
      assertNotNull(object0);
      assertEquals("] is not a Boolean.", object0);
      
      JSONObject jSONObject0 = new JSONObject(4710);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("W!Iv&F");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      boolean boolean1 = jSONObject0.similar(mockFileWriter0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(mockFile0.isHidden());
      assertEquals("W!Iv&F", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("W!Iv&F", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(boolean1);
      
      double double0 = jSONObject0.optDouble("|4WT!Yovu#", (double) 4710);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(4710.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("]", 5350.2039476088175);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      // Undeclared exception!
      try { 
        jSONObject1.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("NzQIzvW}!J^xPAO", double0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("NzQIzvW}!J^xPAO");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((-1684), int0);
      
      Number number0 = jSONObject0.optNumber("uG$c8sT)=X]\"Dr");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNull(number0);
      
      String string0 = "] could not be converted to BigInteger.";
      try { 
        jSONObject1.getJSONArray("] could not be converted to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Double double0 = new Double((-1684.496191473));
      assertNotNull(double0);
      assertEquals((-1684.496191473), (double)double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("NzQIzvW}!J^xPAO", double0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("NzQIzvW}!J^xPAO");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals((-1684), int0);
      
      Boolean boolean0 = new Boolean("NzQIzvW}!J^xPAO");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-1684), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, int0);
      
      String string0 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject("p#0?'F5", stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.put("p#0?'F5", (-1053.5757885910102));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      Object object0 = JSONObject.stringToValue("false");
      assertNotNull(object0);
      assertEquals(false, object0);
      
      Map<String, Object> map0 = jSONObject2.toMap();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      String string0 = "] not a string.";
      int int0 = jSONObject2.length();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, int0);
      
      JSONObject jSONObject3 = new JSONObject(114);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = jSONObject3.has("p#0?'F5");
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject0);
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertFalse(boolean0);
      
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      assertEquals(RoundingMode.HALF_UP, roundingMode0);
      
      String string1 = "a";
      MockFile mockFile0 = new MockFile("n>tHS\"++$`#", "a");
      assertNotNull(mockFile0);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "] not a string.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"] not a string.\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Object object0 = JSONObject.wrap("] could not convert to BigInteger.");
      assertNotNull(object0);
      assertEquals("] could not convert to BigInteger.", object0);
      
      JSONObject jSONObject1 = jSONObject0.append("] could not convert to BigInteger.", "] could not convert to BigInteger.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = JSONObject.doubleToString((-1899.088531718));
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
      assertEquals("-1899.088531718", string0);
      
      Short short0 = new Short((short)655);
      assertNotNull(short0);
      assertEquals((short)655, (short)short0);
      
      JSONObject jSONObject2 = jSONObject0.append("-1899.088531718", short0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      String string1 = jSONObject2.toString();
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.doubleToString(1.0);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      short short0 = (short) (-24910);
      Short short1 = new Short((short) (-24910));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-24910), (short)short1);
      
      String string1 = JSONObject.valueToString(short1);
      assertTrue(short1.equals((Object)short0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        jSONObject0.getString("KdEhT5Yl3~P9a~^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = JSONObject.stringToValue("0");
      assertNotNull(object0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.doubleToString(0L);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.put("gq[#e$Lq|", 0.0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Object object0 = JSONObject.stringToValue("0");
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Boolean boolean0 = new Boolean("int");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.append("null", boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(160);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7JDK*B)D9JBKDRY";
      stringArray0[1] = "@9}cUm.";
      stringArray0[2] = "@9}cUm.";
      stringArray0[3] = "@9}cUm.";
      stringArray0[3] = "@9}cUm.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(5, stringArray0.length);
      assertNotNull(jSONObject1);
      
      long long0 = new Integer(160);
      assertEquals(160, long0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("(U4", true);
      assertNotNull(mockFileWriter0);
      
      JSONObject jSONObject2 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      // Undeclared exception!
      try { 
        jSONObject3.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject(969);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      String string0 = "";
      try { 
        jSONObject0.put("", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = "d\"1EXfAIH";
      try { 
        jSONObject0.put("d\"1EXfAIH", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = "p#0?'F5";
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 5);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      String string0 = null;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, pipedInputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("``Y&\"F-");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append(',');
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      File file0 = MockFile.createTempFile("get", "] is not a JSONArray.");
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/get0] is not a JSONArray.", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("get0] is not a JSONArray.", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      Object object0 = JSONObject.stringToValue("0..");
      assertNotNull(object0);
      assertEquals("0..", object0);
      
      JSONObject jSONObject0 = new JSONObject(70);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getFloat("gettoMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-24L));
      assertNotNull(string0);
      assertEquals("-24", string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = JSONObject.stringToValue("-24");
      assertNotNull(object0);
      assertEquals((-24), object0);
      
      Boolean boolean0 = new Boolean("int");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object1 = JSONObject.stringToValue("-24");
      assertNotNull(object1);
      assertEquals((-24), object1);
      
      JSONObject jSONObject0 = new JSONObject(107);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean1 = jSONObject0.similar(boolean0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(boolean1);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject1.putOpt("len", object0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertNotNull(jSONObject3);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.valueToString((Object) null);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      pipedReader0.close();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 14);
      assertNotNull(bufferedReader0);
      
      Object object0 = JSONObject.stringToValue("4!qH,3");
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("4!qH,3", object0);
      
      JSONObject.testValidity("4!qH,3");
      StringWriter stringWriter0 = new StringWriter(14);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) stringWriter0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", stringWriter0.toString());
      assertEquals("{}", writer0.toString());
      assertNotNull(writer0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(writer0);
      assertNotNull(mockPrintWriter0);
      
      Writer writer1 = JSONObject.quote("javax.", (Writer) mockPrintWriter0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertSame(mockPrintWriter0, writer1);
      assertSame(writer1, mockPrintWriter0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}\"javax.\"", stringWriter0.toString());
      assertEquals("{}\"javax.\"", writer0.toString());
      assertNotNull(writer1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-U^6?g_9@");
      assertNotNull(object0);
      assertEquals("-U^6?g_9@", object0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0000");
      assertNotNull(object0);
      assertEquals("0000", object0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject("p#0?'F5", stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.put("p#0?'F5", (-1053.5757885910102));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      Object object0 = JSONObject.stringToValue("false");
      assertNotNull(object0);
      assertEquals(false, object0);
      
      Map<String, Object> map0 = jSONObject2.toMap();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("] not a string.");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.print(17);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(writer0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = jSONObject1.keySet();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertFalse(set0.contains("p#0?'F5"));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(1, stringArray0.length);
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertFalse(set0.contains("p#0?'F5"));
      assertFalse(list0.contains("p#0?'F5"));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, stringArray0.length);
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(set0.contains("p#0?'F5"));
      assertFalse(list0.contains("p#0?'F5"));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONPointer0);
      
      JSONObject jSONObject3 = (JSONObject)jSONObject1.query(jSONPointer0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject0);
      assertFalse(set0.contains("p#0?'F5"));
      assertFalse(list0.contains("p#0?'F5"));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject3);
      
      int int0 = jSONObject0.optInt("uNO?1EOgQw8s-'");
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B");
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString((-45));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      Object object0 = JSONObject.stringToValue("");
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Byte byte0 = new Byte((byte)108);
      assertNotNull(byte0);
      assertEquals((byte)108, (byte)byte0);
      
      Object object0 = JSONObject.wrap(byte0);
      assertNotNull(object0);
      assertEquals((byte)108, object0);
      
      String string0 = "9}a\\lZ.xiT";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "try");
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("9}alZ.xiT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject("p#0?'F5", stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.put("p#0?'F5", (-1053.5757885910102));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      Object object0 = JSONObject.stringToValue("false");
      assertNotNull(object0);
      assertEquals(false, object0);
      
      Map<String, Object> map0 = jSONObject2.toMap();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("] not a string.");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.print(17);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(writer0);
      
      boolean boolean0 = jSONObject0.has("*j(!h v?2dpj/E(1#7");
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(iterator0);
      
      String string0 = jSONObject0.toString();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("getgetBytes", 3483.5F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript1 = jSONObject1.optEnum(class0, "", character_UnicodeScript0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(character_UnicodeScript0, character_UnicodeScript1);
      assertSame(character_UnicodeScript1, character_UnicodeScript0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(Character.UnicodeScript.IMPERIAL_ARAMAIC, character_UnicodeScript1);
      
      Double double0 = new Double(3483.5F);
      assertNotNull(double0);
      assertEquals(3483.5, (double)double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'u';
      charArray0[2] = ')';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = 'S';
      charArray0[6] = 'F';
      charArray0[7] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', 'u', ')', '\'', '\'', 'S', 'F', 'O'}, charArray0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("getgetBytes", charArrayReader0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(8, charArray0.length);
      assertNotNull(jSONObject2);
      assertArrayEquals(new char[] {'j', 'u', ')', '\'', '\'', 'S', 'F', 'O'}, charArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("N(^u~!g(e{]uf'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      try { 
        jSONObject2.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 92);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt(">@ewdUy#!J4<aBW4Ff*", pipedInputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate(">@ewdUy#!J4<aBW4Ff*", ">@ewdUy#!J4<aBW4Ff*");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      boolean boolean0 = jSONObject1.similar(jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("getDeclaringClass", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("p#0?'F5", stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("^(/qU", "p#0?'F5");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      HashMap<KeyRep.Type, Character> hashMap0 = new HashMap<KeyRep.Type, Character>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      float float0 = jSONObject0.optFloat("^(/qU", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      HashMap<Character.UnicodeScript, Locale.LanguageRange> hashMap0 = new HashMap<Character.UnicodeScript, Locale.LanguageRange>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("Misplaced key.", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      String string0 = JSONObject.valueToString(linkedList1);
      assertFalse(linkedList1.contains(string0));
      assertEquals(0, linkedList1.size());
      assertNotNull(string0);
      
      HashMap<Locale.FilteringMode, InputStreamReader> hashMap0 = new HashMap<Locale.FilteringMode, InputStreamReader>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      BigDecimal bigDecimal0 = new BigDecimal(9);
      assertEquals((byte)9, bigDecimal0.byteValue());
      assertEquals((short)9, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject4 = jSONObject2.append("alue [%s] is not an array or object therefore its key %s cannot be resolved", bigDecimal0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((byte)9, bigDecimal0.byteValue());
      assertEquals((short)9, bigDecimal0.shortValue());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      HashMap<KeyRep.Type, Character> hashMap1 = new HashMap<KeyRep.Type, Character>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      HashMap<KeyRep.Type, Character> hashMap2 = new HashMap<KeyRep.Type, Character>(hashMap1);
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertNotNull(hashMap2);
      
      JSONObject jSONObject5 = jSONObject4.put("length", (Map<?, ?>) hashMap2);
      assertTrue(hashMap1.equals((Object)hashMap2));
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertFalse(jSONObject5.equals((Object)jSONObject1));
      assertFalse(jSONObject5.equals((Object)jSONObject3));
      assertFalse(jSONObject5.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertNotSame(hashMap1, hashMap2);
      assertNotSame(hashMap2, hashMap1);
      assertNotSame(jSONObject5, jSONObject1);
      assertSame(jSONObject5, jSONObject4);
      assertSame(jSONObject5, jSONObject2);
      assertNotSame(jSONObject5, jSONObject3);
      assertNotSame(jSONObject5, jSONObject0);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject5);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject4, jSONObject5);
      assertSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertFalse(jSONObject5.isEmpty());
      assertEquals(2, jSONObject5.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals((byte)9, bigDecimal0.byteValue());
      assertEquals((short)9, bigDecimal0.shortValue());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertNotNull(jSONObject5);
      
      float float0 = jSONObject5.optFloat("length", (float) 9);
      assertTrue(hashMap1.equals((Object)hashMap2));
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertFalse(jSONObject5.equals((Object)jSONObject1));
      assertFalse(jSONObject5.equals((Object)jSONObject3));
      assertFalse(jSONObject5.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertNotSame(hashMap1, hashMap2);
      assertNotSame(hashMap2, hashMap1);
      assertNotSame(jSONObject5, jSONObject1);
      assertSame(jSONObject5, jSONObject4);
      assertSame(jSONObject5, jSONObject2);
      assertNotSame(jSONObject5, jSONObject3);
      assertNotSame(jSONObject5, jSONObject0);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject5);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject4, jSONObject5);
      assertSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertFalse(jSONObject5.isEmpty());
      assertEquals(2, jSONObject5.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals((byte)9, bigDecimal0.byteValue());
      assertEquals((short)9, bigDecimal0.shortValue());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertEquals(9.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("false", 0.0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Map<String, Object> map0 = jSONObject1.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      JSONObject jSONObject2 = new JSONObject(map0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      float float0 = jSONObject1.optFloat("false", 0.0F);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", "dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("dou");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, int0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      HashMap<KeyRep.Type, Character> hashMap0 = new HashMap<KeyRep.Type, Character>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      float float0 = jSONObject0.optFloat("dou", 297.12296F);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(297.12296F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, linkedList0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(boolean0);
      
      String string0 = Locale.lookupTag(linkedList0, list0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, linkedList0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("\"Yn?", 91);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(91, int0);
      
      float float0 = jSONObject0.optFloat((String) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(Float.NaN, float0, 0.01F);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Float float1 = new Float((float) 91);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(91.0F, (float)float1, 0.01F);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      JSONObject jSONObject1 = jSONObject0.put("F!K!.Tj\"mT!MQ(>J3%", (long) 91);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(1238);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getFloat("nU>+(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertNotNull(object0);
      assertEquals(0, object0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getString("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.doubleToString((-719.3));
      assertNotNull(string0);
      assertEquals("-719.3", string0);
      
      String string1 = JSONObject.valueToString("-719.3");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = " zQ1*S!\"V}(pND";
      int int0 = 128;
      String string3 = null;
      try { 
        jSONObject0.getString("-719.3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      HashMap<Locale.FilteringMode, InputStreamReader> hashMap0 = new HashMap<Locale.FilteringMode, InputStreamReader>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) '}');
      assertEquals((byte)125, bigDecimal0.byteValue());
      assertEquals((short)125, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONObject jSONObject3 = jSONObject2.append("alue [%s] is not an array or object therefore its key %s cannot be resolved", bigDecimal0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((byte)125, bigDecimal0.byteValue());
      assertEquals((short)125, bigDecimal0.shortValue());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      HashMap<KeyRep.Type, Character> hashMap1 = new HashMap<KeyRep.Type, Character>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      JSONObject jSONObject4 = jSONObject3.put("length", (Map<?, ?>) hashMap1);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject4);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals((byte)125, bigDecimal0.byteValue());
      assertEquals((short)125, bigDecimal0.shortValue());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      float float0 = jSONObject4.optFloat("length", (float) '}');
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject4);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals((byte)125, bigDecimal0.byteValue());
      assertEquals((short)125, bigDecimal0.shortValue());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertEquals(125.0F, float0, 0.01F);
      
      Map<String, Object> map0 = jSONObject3.toMap();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject4);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals((byte)125, bigDecimal0.byteValue());
      assertEquals((short)125, bigDecimal0.shortValue());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.valueToString((Object) null);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      pipedReader0.close();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 14);
      assertNotNull(bufferedReader0);
      
      Object object0 = JSONObject.stringToValue("4!qH,3");
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("4!qH,3", object0);
      
      JSONObject.testValidity("4!qH,3");
      long long0 = jSONObject0.optLong("null");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("getread", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      String[] stringArray0 = JSONObject.getNames((Object) boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(stringArray1);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      try { 
        jSONObject0.getNumber("si");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = JSONObject.quote("?c&(yh");
      assertNotNull(string0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JSONObject jSONObject0 = new JSONObject(11);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<Locale.FilteringMode, RoundingMode> hashMap0 = new HashMap<Locale.FilteringMode, RoundingMode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("?c&(yh", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      HashMap<PipedWriter, Thread.State> hashMap1 = new HashMap<PipedWriter, Thread.State>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap1);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      try { 
        jSONObject2.getBoolean("isposition");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject((Object) "dou");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("dou");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, int0);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rIz,-A}dO+Ej#";
      stringArray0[1] = "Duplicate key \"";
      stringArray0[2] = ".";
      stringArray0[3] = "position";
      String string0 = "8NAwk-@Mj [";
      stringArray0[4] = "8NAwk-@Mj [";
      stringArray0[5] = "\\";
      stringArray0[6] = "lZ_`tarP%%m1";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("\\", 238.9021548);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Map<String, Object> map0 = jSONObject1.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(7, stringArray0.length);
      assertNotNull(map0);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONArray0);
      
      long long0 = jSONObject1.optLong("Jqm%D&}7?85-B|", 2110L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(7, stringArray0.length);
      assertEquals(2110L, long0);
      
      long long1 = jSONObject0.optLong("t b6'g-$,p_lkH");
      assertFalse(long1 == long0);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(7, stringArray0.length);
      assertEquals(0L, long1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("rIz,-A}dO+Ej#", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(7, stringArray0.length);
      assertNotNull(bigInteger1);
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = JSONObject.getNames((Object) "\\");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = JSONObject.getNames(jSONObject0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(7, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      JSONArray jSONArray1 = jSONObject0.names();
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONArray1);
      
      try { 
        jSONObject1.getNumber("5-/N-6a1h=K(G*~)O-]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("_ea-LLP!!S~P`:~f", (-2595L));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((-2595L), long0);
      
      String string0 = "p#0?'F5";
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject("p#0?'F5", stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string1 = "fese";
      MockFile mockFile0 = new MockFile("fese");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("p#0?'F5", "p#0?'F5", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("fese", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("fese", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/fese/p#0?'F50p#0?'F5", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("p#0?'F50p#0?'F5", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/fese", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockFileInputStream0);
      
      File file1 = MockFile.createTempFile("Jr,(d+]", "");
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp/Jr,(d+]1", file1.toString());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertEquals("Jr,(d+]1", file1.getName());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertNotNull(file1);
      
      boolean boolean0 = file0.renameTo(file1);
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("fese", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("fese", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/fese/p#0?'F50p#0?'F5", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("p#0?'F50p#0?'F5", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/fese", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp/Jr,(d+]1", file1.toString());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertEquals("Jr,(d+]1", file1.getName());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertFalse(boolean0);
      
      boolean boolean1 = mockFileInputStream0.markSupported();
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("fese", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("fese", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/fese/p#0?'F50p#0?'F5", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("p#0?'F50p#0?'F5", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/fese", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0, mockFileInputStream0.available());
      assertFalse(boolean1);
      
      JSONTokener jSONTokener0 = new JSONTokener(mockFileInputStream0);
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("fese", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("fese", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/fese/p#0?'F50p#0?'F5", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("p#0?'F50p#0?'F5", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/fese", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0, mockFileInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      try { 
        JSONObject.stringToNumber("fese");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [fese] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = "].";
      JSONObject jSONObject1 = jSONObject0.put("].", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject0.optLong("].", 1546L);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0L, long0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONObject jSONObject2 = jSONObject0.put("].", (Object) jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      String string1 = "#2'";
      // Undeclared exception!
      try { 
        jSONObject1.query("#2'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("length"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList1.contains("length"));
      assertFalse(list0.contains("length"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONPointer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      String string0 = JSONObject.valueToString(linkedList1);
      assertFalse(linkedList1.contains(string0));
      assertEquals(0, linkedList1.size());
      assertNotNull(string0);
      
      HashMap<Locale.FilteringMode, InputStreamReader> hashMap0 = new HashMap<Locale.FilteringMode, InputStreamReader>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      String string1 = "alue [%s] is not an array or object therefore its key %s cannot be resolved";
      try { 
        jSONObject1.get("alue [%s] is not an array or object therefore its key %s cannot be resolved");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          JSONObject jSONObject0 = new JSONObject();
          String[] stringArray0 = new String[1];
          JSONObject jSONObject1 = new JSONObject("p#0?'F5", stringArray0);
          String string0 = "false";
          jSONObject0.put("p#0?'F5", (-1053.5757885910102));
          JSONObject.stringToValue("false");
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.GeneratedConstructorAccessor175.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:235)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:190)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:296)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:202)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not a string.", 0.0F);
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoStrng", (-846.8501F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        jSONObject1.getJSONArray("gettoStrng");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      JSONObject jSONObject1 = jSONObject0.put("", 3483.5F);
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      jSONObject1.optEnum(class0, "getintern", character_UnicodeScript0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject0.accumulate("getintern", class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject2.optBigInteger("", bigInteger0);
      try { 
        jSONObject2.getJSONArray("getintern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String string0 = "7S?NOS";
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"\"");
      Writer writer0 = JSONObject.quote("B+t#", (Writer) charArrayWriter0);
      charArrayWriter0.writeTo(writer0);
      int int0 = 12;
      HashMap<Component.BaselineResizeBehavior, Window.Type> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Window.Type>(12, 12);
      hashMap0.remove((Object) writer0, (Object) "7S?NOS");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B+t#");
      hashMap0.clone();
      String string1 = "] is not a Boolean.";
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      JSONTokener jSONTokener0 = new JSONTokener(inputStreamReader0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]");
      JSONObject jSONObject1 = jSONObject0.put("]", 5350.2039476088175);
      try { 
        jSONObject1.getBigInteger("]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject.doubleToString((-1.0));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "get";
      String string1 = "] is not a JSONArray.";
      File file0 = MockFile.createTempFile("get", "] is not a JSONArray.");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.skip(12);
      mockFileInputStream0.mark(12);
      mockFileInputStream0.markSupported();
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      String string2 = "bN9k,?TS";
      jSONObject0.optLong("bN9k,?TS");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)14;
      mockFileInputStream0.read(byteArray0, 57, (int) (byte) (-89));
      JSONObject.getNames((Object) jSONObject0);
      try { 
        mockFileInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileInputStream0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      String string0 = "getgetBytes";
      jSONObject0.optBoolean("A JSONObject text must end with '}'");
      JSONObject jSONObject1 = jSONObject0.accumulate("getgetBytes", pipedReader0);
      String string1 = "Q";
      jSONObject1.optInt("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%s is not an array index", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "getgetBytes", 0, 0);
      JSONObject jSONObject2 = new JSONObject(printStream0);
      try { 
        jSONObject1.getJSONArray("%s is not an array index");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject("p#0?'F5", stringArray0);
      MockFile mockFile0 = new MockFile("false");
      File file0 = MockFile.createTempFile("p#0?'F5", "p#0?'F5", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.markSupported();
      JSONTokener jSONTokener0 = new JSONTokener(mockFileInputStream0);
      jSONObject1.optBigDecimal("false", (BigDecimal) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("p#0?'F5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = 31;
      JSONObject jSONObject0 = new JSONObject(31);
      String string0 = "~g+Cr";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"\"", float0);
      String string1 = "Q";
      jSONObject1.optInt("A JSONObject text must end with '}'");
      jSONObject1.optNumber("\"\"");
      try { 
        jSONObject0.getJSONArray(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1647);
      jSONObject0.putOpt("getgetVariant", "getgetVariant");
      jSONObject0.optNumber("getgetVariant");
      jSONObject0.put("ciaaP", 1647);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1684.496191473));
      JSONObject jSONObject1 = jSONObject0.accumulate("value [%s] is not an array or object therefore its key %s cannot be resolved", double0);
      jSONObject0.optNumber("value [%s] is not an array or object therefore its key %s cannot be resolved");
      JSONObject jSONObject2 = new JSONObject();
      double double1 = jSONObject1.optDouble("value [%s] is not an array or object therefore its key %s cannot be resolved");
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-1684.496191473), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean(";z<T{gWS10fw~");
      JSONObject jSONObject1 = jSONObject0.accumulate("7wyi,UC|5vx", (Object) null);
      jSONObject1.optInt("7wyi,UC|5vx");
      JSONObject jSONObject2 = new JSONObject(0);
      jSONObject2.optNumber("qN,fLeT");
      try { 
        jSONObject2.getJSONArray("toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("EE#msf|N", (Object) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      jSONObject0.optBoolean("A JSONObject text must end with '}'");
      JSONObject jSONObject1 = jSONObject0.accumulate("getgetBytes", pipedReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A JSONObject text must end with '}'");
      jSONObject1.optInt("Q");
      jSONObject1.optNumber("Q");
      JSONObject.getNames((Object) pipedReader0);
      try { 
        jSONObject1.getJSONArray("xSP^oGVSb`q\"QTO;S#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8);
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'I';
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      jSONObject0.optEnum(class0, "getintern", character_UnicodeScript0);
      Double double0 = new Double(8);
      PipedReader pipedReader1 = new PipedReader();
      JSONObject jSONObject1 = jSONObject0.accumulate("getintern", pipedReader1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject1.optBigInteger("getintern", bigInteger0);
      try { 
        jSONObject1.getJSONArray("1m*I1i9$6+4[c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.getNames((Object) byteArrayOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "(v-y>");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.putOnce("(v-y>", stringWriter0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("(v-y>", bigDecimal0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("&BOc+e]s/c", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.similar((Object) null);
      JSONObject jSONObject1 = jSONObject0.put("length", 0L);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      jSONObject1.optQuery(jSONPointer0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "length";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[2] = "length";
      stringArray0[3] = "length";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal(4);
      jSONObject1.optBigDecimal("s'!", bigDecimal0);
      try { 
        jSONObject2.getInt(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000018] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      JSONObject jSONObject1 = jSONObject0.put("length", 1L);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject0.toMap();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("length", bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.wrap((Object) null);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONObject.stringToValue("clone");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("`:_U{gL<G.T8KKr%R~d");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONObject.quote("trim");
      JSONObject jSONObject0 = new JSONObject((Object) "trim");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject1 = jSONObject0.put("trim", (Collection<?>) linkedList0);
      Integer integer0 = new Integer(2);
      jSONObject1.remove(" at ");
      Integer integer1 = new Integer(0);
      linkedList0.addFirst(integer1);
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject("false", stringArray0);
      JSONObject.stringToValue("]");
      JSONObject jSONObject2 = jSONObject0.append("]", "]");
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      jSONObject0.put("]", 5350.2039476088175);
      JSONObject.stringToValue("]");
      try { 
        jSONObject0.append("]", "]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[]] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("p#0?'F5", 1.0);
      JSONObject.stringToValue("p#0?'F5");
      try { 
        jSONObject1.append("p#0?'F5", "p#0?'F5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[p#0?'F5] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      LinkedList<JDBCType> linkedList0 = new LinkedList<JDBCType>();
      LinkedList<JDBCType> linkedList1 = new LinkedList<JDBCType>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      jSONArray0.optJSONObject(47);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wJ|>}6Tel'e5CWyp:]";
      stringArray0[1] = "len";
      stringArray0[2] = "gettoUpperCase";
      stringArray0[3] = "7O_]3})R3C8?e 6]R";
      stringArray0[4] = "ny7GU:I7)M";
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject.getNames((Object) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("%=VN-)<4JLx},-%f[;E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DayOfWeek, BigDecimal> hashMap0 = new HashMap<DayOfWeek, BigDecimal>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      Byte byte0 = new Byte((byte)3);
      JSONObject.getNames((Object) byte0);
      jSONObject1.put("getDeclaringClass", (Object) "getDeclaringClass");
      MockFile.createTempFile("40)}at0#R6SExhPfJXU", "getDeclaringClass");
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject1.getFloat("getDeclaringClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DayOfWeek, BigDecimal> hashMap0 = new HashMap<DayOfWeek, BigDecimal>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("getDeclaringClass", (Object) "getDeclaringClass");
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject.valueToString(hashMap0);
      jSONObject2.put("java.io.StringWriter@0000000007", (double) '\u0000');
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(912.0389194828167);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-9);
      JSONObject.indent((Writer) null, (byte) (-9));
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 9);
      Long long0 = new Long((-3939L));
      MockFile.createTempFile("912.0389194828167", "I~");
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getFloat("I~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("gettrim", false);
      assertFalse(boolean0);
      
      String string0 = jSONObject0.toString();
      String string1 = jSONObject0.optString("java.io.StringWriter@0000000002");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Object object0 = JSONObject.wrap(fileDescriptor0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "p#0?'F5";
      stringArray0[1] = "p#0?'F5";
      stringArray0[2] = "Misplaced array.";
      stringArray0[3] = "p#0?'F5";
      stringArray0[4] = "Misplaced array.";
      stringArray0[5] = "Misplaced array.";
      stringArray0[6] = "p#0?'F5";
      stringArray0[7] = "Misplaced array.";
      stringArray0[8] = "p#0?'F5";
      JSONObject jSONObject0 = new JSONObject("Misplaced array.", stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "p#0?'F5");
      Object object0 = JSONObject.wrap(stringWriter1);
      assertNotNull(object0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Misplaced array.");
      JSONObject.writeValue(stringWriter0, mockPrintWriter0, 111, 727);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.optString("Misplaced array.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONObject.quote("trim");
      JSONObject jSONObject0 = new JSONObject((Object) "trim");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.put("trim", (Collection<?>) linkedList0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.io.StringWriter@0000000001");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getlength";
      stringArray0[1] = "getlength";
      stringArray0[2] = "getlength";
      jSONObject0.putOnce("C", (Object) null);
      stringArray0[3] = "getlength";
      stringArray0[4] = "trim";
      stringArray0[5] = "java.io.StringWriter@0000000001";
      JSONObject jSONObject1 = new JSONObject(mockFileOutputStream0, stringArray0);
      JSONObject.stringToValue("java.io.StringWriter@0000000001");
      jSONObject0.append("getintern", "getlength");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      JSONObject jSONObject1 = jSONObject0.put("getgetBytes", 3483.5F);
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      jSONObject1.optEnum(class0, "", character_UnicodeScript0);
      Double double0 = new Double(3483.5F);
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0084';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      jSONObject0.accumulate("getgetBytes", bufferedOutputStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.toString(304);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("0000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("0");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "N=7Qx:");
      JSONObject.doubleToString(0L);
      byte byte0 = (byte) (-9);
      MockFile mockFile0 = new MockFile("0");
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optNumber("get", (Number) bigInteger0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = 'j';
      charArray0[2] = '%';
      charArray0[3] = ';';
      // Undeclared exception!
      try { 
        mockFileWriter0.write(charArray0, 11, (-1339));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("/1ohe5p(jJ5EAqF", "/1ohe5p(jJ5EAqF");
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      jSONObject0.optNumber("/1ohe5p(jJ5EAqF", (Number) bigDecimal0);
      JSONObject.doubleToString(1L);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) "/1ohe5p(jJ5EAqF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.stringToNumber("-0");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "istoUpperCase";
      try { 
        JSONObject.stringToNumber("istoUpperCase");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [istoUpperCase] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("AJSONObject text must end with ''");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [AJSONObject text must end with ''] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("[?qmi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject1.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getdescendingIterator";
      JSONObject jSONObject1 = jSONObject0.put("getdescendingIterator", 0.0F);
      try { 
        jSONObject1.putOnce("getdescendingIterator", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"getdescendingIterator\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('`');
      JSONObject.indent(stringWriter1, 1);
      PipedReader pipedReader0 = new PipedReader();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject("p#0?'F5", stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5x`i=,1v{^p");
      int int0 = 8448;
      JSONObject.indent(mockPrintWriter0, 8448);
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1899.088531718));
      JSONObject.stringToNumber("-1899.088531718");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockRandom mockRandom0 = new MockRandom();
      JSONObject jSONObject1 = jSONObject0.put("-1899.088531718", 0.0F);
      jSONObject0.similar((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("-1899.088531718", bigInteger0);
      try { 
        jSONObject1.getBoolean("-1899.088531718");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", "dou");
      jSONObject1.optInt("dou");
      jSONObject0.names();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftRight(0);
      jSONObject0.optBigInteger("dou", bigInteger0);
      try { 
        jSONObject0.getJSONArray("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      JSONObject jSONObject1 = jSONObject0.put("", 3483.5F);
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.IMPERIAL_ARAMAIC;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      jSONObject1.optEnum(class0, "getintern", character_UnicodeScript0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject0.accumulate("getintern", class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject2.optBigInteger("", bigInteger0);
      jSONObject2.put("", 0.0F);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 2);
      HashMap<Thread.State, JDBCType> hashMap0 = new HashMap<Thread.State, JDBCType>();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger((String) null, bigInteger0);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("'WU\":3xBQCe", (float) 2);
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.getNames((Object) bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, bigInteger1, 8448, (-1044));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("java.");
      JSONObject jSONObject1 = new JSONObject(460);
      jSONObject1.similar("java.");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject1.putOpt("Rlug3k&S.zn;&", (Object) null);
      assertSame(jSONObject1, jSONObject4);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("U=o~x,", "U=o~x,");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(912.0389194828167);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-9);
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 9);
      jSONObject0.putOpt("912.0389194828167", pushbackReader0);
      Long long0 = new Long((-3939L));
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = '>';
      charArray0[2] = ']';
      charArray0[3] = 'O';
      charArray0[4] = '#';
      charArray0[5] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONObject.valueToString(charArrayReader0);
      jSONObject0.put(".", 0.0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      jSONObject0.optBoolean("A JSONObject text must end with '}'");
      JSONObject jSONObject1 = jSONObject0.accumulate("getgetBytes", pipedReader0);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 32);
      jSONObject0.putOpt((String) null, pipedReader0);
      Long long0 = new Long(32);
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Double double0 = new Double(32);
      JSONObject.valueToString(double0);
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (double) 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 64);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";z<T{gWS10fw~";
      stringArray0[1] = ";z<T{gWS10fw~";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.testValidity(bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 0.0);
      Map<String, Object> map0 = jSONObject1.toMap();
      JSONObject jSONObject2 = new JSONObject(map0);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        jSONObject2.put("iIV7-q@3OT/", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      boolean boolean0 = jSONObject0.has("true");
      assertFalse(boolean0);
      
      boolean boolean1 = jSONObject0.isNull("true");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      double double0 = jSONObject0.optDouble("isshortValueExact");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Window.Type> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("7S?NOS");
      Writer writer0 = JSONObject.quote("\"\"", (Writer) mockFileWriter0);
      charArrayWriter0.writeTo(writer0);
      hashMap0.remove((Object) null, (Object) charArrayWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"\"");
      hashMap0.clone();
      jSONObject0.optDouble("] is not a Boolean.");
      jSONObject0.isNull("] is not a Boolean.");
      String string0 = ";_+";
      try { 
        jSONObject0.put(";_+", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(912.0389194828167);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 111, (byte)0);
      byteArrayInputStream0.reset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.stringToValue("!cGl9O");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("!cGl9O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONObject.doubleToString(0.0);
      JSONObject.stringToValue("0000");
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("lzwXc");
      assertEquals("lzwXc", object0);
      
      String string0 = JSONObject.quote("PW\"`QT");
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte)13);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w{Z+Dz&|Gul'");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byteArrayInputStream0.skip(0L);
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0);
      jSONObject0.entrySet();
      JSONObject.stringToValue("w{Z+Dz&|Gul'");
      try { 
        jSONObject0.getBigInteger("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      int int0 = 31;
      JSONObject.wrap("N%w Tq7vw");
      String string0 = "le";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("le");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("p#0?'F5", 1.0);
      JSONObject.stringToValue("p#0?'F5");
      try { 
        jSONObject1.getBoolean("p#0?'F5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("d\"1EXfAIH", (-846.4F));
      boolean boolean0 = jSONObject1.optBoolean("d\"1EXfAIH", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      JSONObject jSONObject1 = jSONObject0.put("", 3483.5F);
      boolean boolean0 = jSONObject0.optBoolean("");
      boolean boolean1 = jSONObject1.has("gettoLowerCase");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.put("org.json.JSONObject", (-1L));
      try { 
        jSONObject0.getDouble("~0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("p#0?'F5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("}d]E>6KBaq");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      String string0 = "X}]y',\\uuOF.";
      MockFile mockFile0 = new MockFile(string0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JSONObject jSONObject1 = new JSONObject(65);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject1.has("true");
      try { 
        jSONObject0.getBoolean(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] could not be converted to BigDecimal.", (-846.4F));
      assertEquals(1, jSONObject0.length());
      
      long long0 = jSONObject0.getLong("] could not be converted to BigDecimal.");
      assertEquals((-846L), long0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DayOfWeek, BigDecimal> hashMap0 = new HashMap<DayOfWeek, BigDecimal>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.put("getDeclaringClass", (Object) "getDeclaringClass");
      try { 
        jSONObject1.getFloat("getDeclaringClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "8");
      String string0 = JSONObject.doubleToString((-1738.0));
      assertEquals("-1738", string0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("vi2udJIL}");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ";z<T{gWS10fw~";
      PipedReader pipedReader0 = new PipedReader();
      jSONObject0.optBoolean("getgetBytes");
      JSONObject jSONObject1 = jSONObject0.accumulate(";z<T{gWS10fw~", "getgetBytes");
      jSONObject0.optInt("d^nG8<{WB|z8C");
      jSONObject0.optNumber("''.T}LP+'[}A]CfaY");
      try { 
        jSONObject1.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Character.valueOf('U');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p#0?'F5";
      MockFile mockFile0 = new MockFile("QeWj3Yn\"5RodXAJ[Wb@", "getintern");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("&=:;MI2}?q");
      PrintWriter printWriter0 = mockPrintWriter1.append('g');
      HashMap<Component.BaselineResizeBehavior, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<Component.BaselineResizeBehavior, MultipleGradientPaint.CycleMethod>();
      HashMap<Component.BaselineResizeBehavior, MultipleGradientPaint.CycleMethod> hashMap1 = new HashMap<Component.BaselineResizeBehavior, MultipleGradientPaint.CycleMethod>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap1);
      Writer writer0 = jSONObject0.write((Writer) printWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(writer0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter2, 326);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)74, (-2135));
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, byteArrayInputStream0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      jSONObject0.write(writer0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 326);
      Short short0 = new Short((short) (-1054));
      jSONObject0.putOnce("Substring bounds error", short0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      // Undeclared exception!
      try { 
        Locale.LanguageRange.parse("Pwh4&d21<", (Map<String, List<String>>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=pwh4&d21<
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      jSONObject0.putOnce("", "");
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      JSONObject.doubleToString(Double.NaN);
      String string0 = null;
      try { 
        jSONObject0.getJSONObject("72Pd}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)10, 111);
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 1170);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1222.50702238);
      assertEquals("1222.50702238", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      int int0 = 31;
      JSONObject jSONObject0 = new JSONObject(31);
      String string0 = "X}]y',\\uuOF.";
      MockFile mockFile0 = new MockFile(string0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('s');
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      jSONTokener0.nextTo('m');
      Class<RoundingMode> class0 = RoundingMode.class;
      String string1 = "Mv]";
      try { 
        jSONObject0.getEnum(class0, "Mv]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] is not an enum of type java.io.StringWriter@0000000004.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONObject.isDecimalNotation("B+t#");
      JSONObject.valueToString("B+t#");
      JSONObject jSONObject0 = new JSONObject(3245);
      JSONObject jSONObject1 = jSONObject0.put(" zQ1*S!V}(pND", 128);
      int int0 = 91;
      jSONObject0.optInt("toC", 3245);
      jSONObject1.optFloat("toC");
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 3245);
      String string0 = "Unable to write JSONArray value at index: ";
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 3245);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
      
      float float0 = jSONObject0.optFloat("ekH|");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getFloat("tri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DayOfWeek, BigDecimal> hashMap0 = new HashMap<DayOfWeek, BigDecimal>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.put("getDeclaringClass", (Object) "getDeclaringClass");
      MockFile.createTempFile("40)}at0#R6SExhPfJXU", "getDeclaringClass");
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject1.getFloat("getDeclaringClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DayOfWeek, BigDecimal> hashMap0 = new HashMap<DayOfWeek, BigDecimal>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      MockFile.createTempFile("40)}at0#R6SExhPfJXU", "getDeclaringClass");
      String[] stringArray0 = new String[0];
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject1.getFloat("getDeclaringClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "p#0?'F5";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject("p#0?'F5", stringArray0);
      JSONObject.wrap("p#0?'F5");
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, jSONObject0, 111, 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      MockFile mockFile0 = new MockFile("getgetUnicodeLocaleKeys");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      JSONObject.writeValue(mockFileWriter0, (Object) null, 34, 34);
      Double double0 = new Double(0.0);
      try { 
        JSONObject.stringToNumber("getgetUnicodeLocaleKeys");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [getgetUnicodeLocaleKeys] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintStream mockPrintStream0 = new MockPrintStream("p#0?'F5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Integer integer0 = new Integer((-2586));
      String string0 = "Lh&>(7GkkD9yU";
      jSONObject0.remove("p#0?'F5");
      Integer integer1 = new Integer(396);
      BigInteger bigInteger0 = BigInteger.ONE;
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, bigInteger0, 0, 396);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      bufferedWriter0.append('&');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      JSONObject.writeValue(writer0, byteArrayOutputStream0, (-533), 8);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject0.getEnum(class0, "p#0?'F5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] is not an enum of type java.io.StringWriter@0000000005.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("Expected '");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      try { 
        jSONObject0.getEnum(class0, "<-s}QDtD36gpm(C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = "trim";
      JSONObject.quote("trim");
      JSONObject jSONObject0 = new JSONObject((Object) "trim");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.put("trim", (Collection<?>) linkedList0);
      String string1 = "getlength";
      MockPrintStream mockPrintStream0 = new MockPrintStream("getlength");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Integer integer0 = new Integer(2);
      jSONObject1.remove(" at ");
      Integer integer1 = new Integer(0);
      linkedList0.addFirst(integer1);
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, integer0, 2, 102);
      BufferedWriter bufferedWriter0 = new BufferedWriter(writer0);
      mockPrintStream0.println();
      bufferedWriter0.append('&');
      JSONObject.writeValue(bufferedWriter0, (Object) null, (-533), (-533));
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject0.getEnum(class0, "trim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000021] is not an enum of type java.io.StringWriter@0000000022.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 64);
      jSONObject0.append(";z<T{gWS10fw~", bufferedReader0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("#/");
      jSONObject0.append("#/", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.similar((Object) null);
      JSONObject jSONObject1 = jSONObject0.put("length", 0L);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      jSONObject1.optQuery(jSONPointer0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "length";
      stringArray0[2] = "length";
      stringArray0[3] = "length";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject2.getInt(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000018] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = "\"Yn?";
      Locale locale0 = Locale.ROOT;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONObject.quote("\"Yn?");
      Locale.getISOCountries();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"Yn?", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name \"Yn?, locale 
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      HashMap<Float, StandardProtocolFamily> hashMap0 = new HashMap<Float, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("29emYNyJFiy+,i2dyu", 190);
      jSONObject0.put("[1aVC3+5TG-e=", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getNumber((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      jSONObject0.put("hP>h!>m)ktJiU3", (Collection<?>) linkedList0);
      PipedReader pipedReader0 = new PipedReader();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      jSONObject0.put("", 3483.5F);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "intern";
      JSONObject jSONObject2 = jSONObject1.put("intern", 926.5230217628929);
      Map<String, Object> map0 = jSONObject0.toMap();
      JSONArray jSONArray0 = jSONObject2.names();
      jSONObject1.optLong("'d{Dt#7", (-40L));
      JSONObject jSONObject3 = new JSONObject(map0);
      try { 
        jSONArray0.getJSONObject((-920));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-920] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Object object0 = JSONObject.wrap("lzwXc");
      assertEquals("lzwXc", object0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((-587L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w?r");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byteArrayInputStream0.skip((-587L));
      Object object0 = JSONObject.wrap((Object) null);
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject0.entrySet();
      JSONObject.stringToValue("umZk{");
      Double double0 = new Double((-587L));
      JSONObject.wrap(double0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "!cGl9O");
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getBigInteger("org.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jSONObject0.getBigInteger("#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "HN+8TN";
      JSONObject jSONObject1 = jSONObject0.put("HN+8TN", 0.0F);
      jSONObject1.accumulate("HN+8TN", jSONObject0);
      jSONObject1.optInt("HN+8TN", 8448);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("HN+8TN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "\\.";
      JSONTokener jSONTokener0 = new JSONTokener(".");
      jSONTokener0.skipTo('F');
      String string1 = "}0sE>}jhgcz:a&fk~j";
      jSONTokener0.next(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSONObject[");
      JSONException jSONException0 = jSONTokener0.syntaxError("y\"R.qc)9$~!)7");
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.optInt("k!zEH\"1+3rQND|oa';", 0);
      MockThrowable mockThrowable0 = new MockThrowable("}0sE>}jhgcz:a&fk~j", jSONException0);
      jSONTokener0.syntaxError(".", (Throwable) mockThrowable0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("dou");
      jSONObject0.names();
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      jSONObject0.write((Writer) mockPrintWriter0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(set0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      String string0 = "X}]y',\\uuOF.";
      MockFile mockFile0 = new MockFile(string0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      mockFileWriter0.write(31);
      jSONObject0.write((Writer) mockFileWriter0);
      boolean boolean0 = jSONObject0.has("Al}`8n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      JSONObject jSONObject0 = new JSONObject(object1);
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      try { 
        jSONObject0.getEnum(class0, "Misplaced key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("'XAC?uT(_t'ov");
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("4", "4");
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -20
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "] could not be converted to BigDecimal.";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.putOnce("java.io.StringWriter@0000000002", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p}i>b9bC:'HLty{yi*";
      stringArray0[1] = "";
      stringArray0[2] = "Wdpn%aZ0([^Mr\u0003V)e";
      stringArray0[3] = "3/KYf";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "~0";
      try { 
        jSONObject0.getDouble("~0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Nesting error.";
      try { 
        jSONObject0.getLong("Nesting error.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      HashMap<StandardLocation, BigDecimal> hashMap0 = new HashMap<StandardLocation, BigDecimal>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getLong("!cGl9O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-446L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a JSONArray.", (-2504L));
      JSONObject.getNames(jSONObject0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.similar((Object) null);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      HashMap<RowIdLifetime, Character> hashMap0 = new HashMap<RowIdLifetime, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      JSONObject.stringToValue("] is not a Boolean.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("false");
      Writer writer0 = JSONObject.quote("false", (Writer) mockFileWriter0);
      charArrayWriter0.writeTo(writer0);
      HashMap<Component.BaselineResizeBehavior, Window.Type> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Window.Type>(16, 16);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject.isDecimalNotation("false");
      MockFile.createTempFile("false", "7S?NOS");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("o>A68fI8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("7)t@{hodfb6|;_|@!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7)t@{hodf\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      JSONObject.isDecimalNotation("B+t#");
      JSONObject.valueToString("B+t#");
      JSONObject jSONObject0 = new JSONObject(3245);
      String string0 = " zQ1*S!V}(pND";
      JSONObject jSONObject1 = jSONObject0.put(" zQ1*S!V}(pND", 128);
      String string1 = null;
      try { 
        jSONObject1.getBigDecimal((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("#/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      boolean boolean0 = jSONObject0.has("Al}`8n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.shortValueExact();
      JSONObject.numberToString(bigDecimal0);
      Short short0 = new Short((short)78);
      assertEquals((short)78, (short)short0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Short short0 = new Short((short) (-27553));
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.shortValueExact();
      bigDecimal0.signum();
      JSONObject.numberToString(bigDecimal0);
      String string0 = "\\b";
      String string1 = "C)\"g^V";
      String string2 = "";
      Locale locale0 = new Locale("\b", "C)\"g^V", "");
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("Z>^[#4?#{%-{o)7O;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: Z>^[#4?#{%-{o)7O;
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("hashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      HashMap<Authenticator.RequestorType, JDBCType> hashMap0 = new HashMap<Authenticator.RequestorType, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("zwJH]IqYhK/DC_22[V");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("jW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = "\\.";
      JSONTokener jSONTokener0 = new JSONTokener(".");
      jSONTokener0.skipTo('F');
      String string1 = "}0sE>}jhgcz:a&fk~j";
      jSONTokener0.next(0);
      JSONException jSONException0 = jSONTokener0.syntaxError("y\"R.qc)9$~!)7");
      MockThrowable mockThrowable0 = new MockThrowable("}0sE>}jhgcz:a&fk~j", jSONException0);
      jSONTokener0.syntaxError(".", (Throwable) mockThrowable0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getNumber("MN5%l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      HashMap<BigInteger, Dialog.ModalityType> hashMap0 = new HashMap<BigInteger, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigDecimal((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("BR{vp>\"fK", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name BR{vp>\"fK, locale en_CA
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble(";z<T{gWS10fw~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      HashMap<Float, StandardProtocolFamily> hashMap0 = new HashMap<Float, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      try { 
        jSONObject0.getEnum(class0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("hYjYq?rdE6=1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject.stringToValue("lzwXc");
      HashMap<Window.Type, JTable.PrintMode> hashMap0 = new HashMap<Window.Type, JTable.PrintMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("p#0?'F5", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p#0?'F5";
      stringArray0[1] = "&=:;MI2}?q";
      stringArray0[2] = "l";
      stringArray0[3] = "t5[{`'.T>#";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JSONObject jSONObject0 = new JSONObject(character0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(31);
      jSONObject0.put("", 3483.5F);
      jSONObject0.optBoolean("4");
      boolean boolean0 = jSONObject0.has("Al}`8n");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "p#0?'F5");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-356));
      int int0 = 0;
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(objectOutputStream0, true, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
