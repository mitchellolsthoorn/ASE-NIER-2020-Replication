/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 16:22:58 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.DropMode;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9E-");
      assertEquals("9E-", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(",:]}/\"[{;=#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [,:]}/\"[{;=#] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9}OL]KmAy1ts");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9}O\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}TAE,\"g.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject.indent(pipedWriter0, (-740));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("val [", 0.0);
      try { 
        jSONObject0.getBigInteger("val [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = JSONObject.writeValue(stringWriter0, stringWriter0, 160, 160);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".");
      StringWriter stringWriter0 = new StringWriter(59);
      jSONObject0.write((Writer) stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("2.308469596856315");
      assertEquals((short)2, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0.7699262556475183");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-927.0809777661");
      assertEquals((byte)97, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-2400.257316528904");
      assertEquals((byte) (-96), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("aCSu][", "aCSu][");
      Object object0 = jSONObject0.remove("aCSu][");
      assertEquals("aCSu][", object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<CardTerminals.State, Float> hashMap0 = new HashMap<CardTerminals.State, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("false");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".");
      jSONObject0.optString("getClass", (String) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double(408.76);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONPointer jSONPointer0 = new JSONPointer("");
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Number number0 = jSONObject0.optNumber("] is not an int.", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-124);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, mathContext0);
      jSONObject0.optNumber("java.lang.Float@00000000050", (Number) bigDecimal0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject0.optNumber("", (Number) bigInteger0);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("intValue", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<ObjectOutputStream, DropMode> hashMap0 = new HashMap<ObjectOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", (-1.0F));
      int int0 = jSONObject1.optInt("0");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      double double0 = jSONObject0.optDouble("is", (double) 63);
      assertEquals(63.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Boolean> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("~", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-3);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger(",g`o{{>B{'|", bigInteger0);
      assertEquals((short) (-768), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-28);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger(",g`o{{>B{'|", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".");
      jSONObject0.optBigDecimal("b|", (BigDecimal) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1474.70685807);
      jSONObject0.append("%YFto}FCo ,", double0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("%YFto}FCo ,");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.io.StringWriter@0000000003", (-510));
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate(",g`o{{>B{'|", hashMap0);
      boolean boolean0 = jSONObject0.isNull(",g`o{{>B{'|");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(114);
      jSONObject0.put("nll", (float) 114);
      float float0 = jSONObject0.getFloat("nll");
      assertEquals(114.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<ObjectOutputStream, DropMode> hashMap0 = new HashMap<ObjectOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", (-1.0F));
      float float0 = jSONObject1.getFloat("0");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<ObjectOutputStream, DropMode> hashMap0 = new HashMap<ObjectOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("0", (-1.0F));
      double double0 = jSONObject0.getDouble("0");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, "has", (-97), (-97));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("^n*R", stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, (-1156623255), 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "org.json.JSONArray");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 111, 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "^n*R");
      try { 
        jSONObject0.toString(3019);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("AqV31X", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("[UV_$=1l%N;[RrEwbzU", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<MockFileOutputStream> linkedList0 = new LinkedList<MockFileOutputStream>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float(191.792861425148);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      JSONObject jSONObject0 = new JSONObject(locale0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 660.21674F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.append(stringArray0[0], (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("aCSu4[", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1980), (byte)8);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONTokener jSONTokener0 = new JSONTokener(dataInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "^n*R");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Error reading value at index position ", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Error reading value at index position , locale ja_JP
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1210));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1210
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".");
      StringWriter stringWriter0 = new StringWriter(59);
      jSONObject0.write((Writer) stringWriter0, 16, 59);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".");
      StringWriter stringWriter0 = new StringWriter(59);
      jSONObject0.write((Writer) stringWriter0, (-1), 59);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Boolean> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("aj|ch", false);
      jSONObject0.put("aj|ch", true);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, (-351), (-351));
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(5);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\f", true);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 5, 5);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("true", false);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Object object0 = JSONObject.wrap(locale0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(79);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(79, object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = JSONObject.wrap("~q<");
      assertEquals("~q<", object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<PseudoColumnUsage> linkedList0 = new LinkedList<PseudoColumnUsage>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((-71.0F));
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.testValidity(long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = new Double((-1.0F));
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}*/\"4");
      Writer writer0 = JSONObject.quote("}*/\"4", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      JSONObject.quote((String) null, (Writer) mockPrintWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Character> hashMap0 = new HashMap<ByteArrayInputStream, Character>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a valid number.", (Map<?, ?>) hashMap0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        jSONObject1.putOnce("] is not a valid number.", pushbackInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"] is not a valid number.\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Boolean> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("aj|ch", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(59);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, stringWriter0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("KT!-?9kCGY DCO\u0004Td", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.put(stringArray0[3], (Object) stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Character.UnicodeScript, CardTerminals.State> hashMap0 = new HashMap<Character.UnicodeScript, CardTerminals.State>();
      jSONObject0.put("toS", (Map<?, ?>) hashMap0);
      String string0 = jSONObject0.optString("toS", "20.0115581806");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Character> hashMap0 = new HashMap<ByteArrayInputStream, Character>();
      jSONObject0.put("] is not a valid number.", (Map<?, ?>) hashMap0);
      Integer integer0 = new Integer((-449));
      Number number0 = jSONObject0.optNumber("] is not a valid number.", (Number) integer0);
      assertEquals((-449), number0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      BigDecimal bigDecimal0 = new BigDecimal(2066);
      jSONObject0.put("", 0);
      jSONObject0.optNumber("", (Number) bigDecimal0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Number number0 = jSONObject0.optNumber("java.io.StringWriter@0000000002", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean boolean0 = new Boolean(".");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put(".", (float) 9);
      jSONObject0.optLong(".", (long) 9);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("L\"", (Object) "java.io.StringWriter@0000000003");
      int int0 = jSONObject1.optInt("L\"", (-2727));
      assertEquals(3, jSONObject0.length());
      assertEquals((-2727), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 90);
      assertEquals(90, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("KT!-?9kCGY DCO\u0004Td", (-2244.6309F));
      assertEquals((-2244.6309F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "!m-dm'0\u0005j");
      jSONObject0.optDouble("F~<z", (-857.4992158));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("' and instead saw '", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1474.70685807);
      JSONObject jSONObject1 = jSONObject0.append("%YFto}FCo ,", double0);
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      Dialog.ModalExclusionType dialog_ModalExclusionType1 = jSONObject1.optEnum(class0, "%YFto}FCo ,", dialog_ModalExclusionType0);
      assertEquals(Dialog.ModalExclusionType.APPLICATION_EXCLUDE, dialog_ModalExclusionType1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      Dialog.ModalExclusionType dialog_ModalExclusionType1 = jSONObject0.optEnum(class0, "'Rl", dialog_ModalExclusionType0);
      assertSame(dialog_ModalExclusionType1, dialog_ModalExclusionType0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Object object0 = jSONObject0.opt(" at ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Object object1 = jSONObject0.opt(stringArray0[4]);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(2066);
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertTrue(jSONObject0.isEmpty());
      
      jSONObject0.increment("0");
      boolean boolean0 = jSONObject0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      jSONObject0.putOnce("*}qh)y/<", pushbackInputStream0);
      try { 
        jSONObject0.getBoolean("*}qh)y/<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = new Float(191.792861425148);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("Trbc0Y)JvePMB&Q!br", float0);
      Object object0 = jSONObject1.get("Trbc0Y)JvePMB&Q!br");
      assertEquals(191.79286F, object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("^B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      jSONObject0.optEnum(class0, "is");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<CardTerminals.State, Float> hashMap0 = new HashMap<CardTerminals.State, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(9);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("toLowerCase");
      HashMap<String, FilterOutputStream> hashMap0 = new HashMap<String, FilterOutputStream>();
      hashMap0.put("-423.046", mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "^n*R");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "^n*R");
      jSONObject0.toString(48);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",g`o{{>B{'|", hashMap0);
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<JDBCType> class0 = JDBCType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      String string0 = jSONObject0.toString();
      //  // Unstable assertion: assertNull(string0);
      //  // Unstable assertion: assertEquals(34, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, (-2186), 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(110);
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(object0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double((-1604.7939759));
      Object object0 = JSONObject.wrap(double0);
      assertEquals((-1604.7939759), object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(430.75388F, object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long long0 = new Long(1440L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(1440L, object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Short short0 = new Short((short)57);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)57, object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Character character0 = new Character('3');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('3', object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = JSONObject.wrap(jSONArray0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<ObjectOutputStream, DropMode> hashMap0 = new HashMap<ObjectOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      String[] stringArray0 = new String[11];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<ObjectInputStream, ObjectOutputStream> hashMap0 = new HashMap<ObjectInputStream, ObjectOutputStream>();
      JSONObject jSONObject1 = jSONObject0.put("?)<vkeMos~_Th0|e9", (Map<?, ?>) hashMap0);
      Object object1 = jSONObject1.get("?)<vkeMos~_Th0|e9");
      assertFalse(object1.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<PseudoColumnUsage> linkedList0 = new LinkedList<PseudoColumnUsage>();
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.NO_USAGE_RESTRICTIONS;
      linkedList0.add(pseudoColumnUsage0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Dialog.ModalityType, JTable.PrintMode> hashMap0 = new HashMap<Dialog.ModalityType, JTable.PrintMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Double, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Double, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("F:kv;$@Zdw", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("/,$&m{E", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-927.0809777661");
      assertEquals((-927.0809777661), object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0..");
      assertEquals("0..", object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-1");
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("intValue");
      assertEquals("intValue", object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("+>tU)>");
      assertEquals("+>tU)>", object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0000");
      assertEquals("0000", object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("getkeySet");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<ObjectOutputStream, DropMode> hashMap0 = new HashMap<ObjectOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", (-1.0F));
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("has", "has");
      HashMap<Dialog.ModalExclusionType, WebParam.Mode> hashMap0 = new HashMap<Dialog.ModalExclusionType, WebParam.Mode>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject2.similar(jSONObject1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-153.85");
      jSONObject0.similar("-153.85");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<JDBCType> class0 = JDBCType.class;
      try { 
        jSONObject0.getEnum(class0, "ORaV{ roO$</*4Bd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JSONObject.quote("nll");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("8Y\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(5);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\f", true);
      jSONObject0.put("\f", false);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 93, (-2593));
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.io.StringWriter@0000000003");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      Writer writer0 = JSONObject.quote("\n", (Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("token cannot be null", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "^n*R");
      jSONObject0.putOpt("^n*R", "^n*R");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(5);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, stringWriter0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("has", "has");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "has";
      stringArray0[1] = "has";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<ObjectOutputStream, DropMode> hashMap0 = new HashMap<ObjectOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<ObjectOutputStream, DropMode> hashMap0 = new HashMap<ObjectOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("0", (-1.0F));
      String string0 = jSONObject0.optString("0");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      BigDecimal bigDecimal0 = new BigDecimal(2066);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "java.io.StringWriter@0000000003");
      jSONObject1.optNumber("", (Number) bigDecimal0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("has", "has");
      Number number0 = jSONObject0.optNumber("has");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("aCSu][", "aCSu][");
      long long0 = jSONObject0.optLong("aCSu][", (-1L));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.increment("@voz");
      long long0 = jSONObject1.optLong("@voz");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("has", "has");
      long long0 = jSONObject1.optLong("has", 1845L);
      assertEquals(1845L, long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("\b");
      HashMap<String, FilterOutputStream> hashMap0 = new HashMap<String, FilterOutputStream>();
      hashMap0.put("u*r_y", mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("u*r_y");
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("0");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      jSONObject0.append("%YFto}FCo ,", evoSuiteFile0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("%YFto}FCo ,");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("gg");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("~0", "~0");
      int int0 = jSONObject1.optInt("~0");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put(",g`o{{>B{'|", 2918L);
      int int0 = jSONObject0.optInt(",g`o{{>B{'|", 1715);
      assertEquals(2918, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate(",g`o{{>B{'|", hashMap0);
      int int0 = jSONObject0.optInt(",g`o{{>B{'|", (int) (short)79);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(79, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Boolean> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("aj|ch", false);
      jSONObject0.put("aj|ch", (Object) mockFileWriter0);
      float float0 = jSONObject0.optFloat("aj|ch", (float) 44);
      assertEquals(44.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-488));
      JSONObject jSONObject1 = jSONObject0.put("~", (Object) bigDecimal0);
      float float0 = jSONObject1.optFloat("~", (-1.0F));
      assertEquals((-488.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.io.StringWriter@0000000003", (Object) "java.io.StringWriter@0000000003");
      float float0 = jSONObject1.optFloat("java.io.StringWriter@0000000003", (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("is", hashMap0);
      double double0 = jSONObject0.optDouble("is", 0.0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("aCSu][", "aCSu][");
      double double0 = jSONObject1.optDouble("aCSu][");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(",g`o{{>B{'|", ",g`o{{>B{'|");
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger(",g`o{{>B{'|", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jSONObject0.accumulate("ha", bigDecimal0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONObject0.optBigInteger("ha", bigInteger0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "nll");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("nll", bigInteger0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("@voz");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("@voz", bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HashMap<ObjectOutputStream, DropMode> hashMap0 = new HashMap<ObjectOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", (-1.0F));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("0", bigDecimal0);
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("*P.", 0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("*P.", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal(",c", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("aCSu][", "aCSu][");
      BigDecimal bigDecimal0 = new BigDecimal(2066);
      jSONObject1.optBigDecimal("aCSu][", bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Long long0 = new Long(1L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      JSONObject jSONObject0 = new JSONObject(locale0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("aCSu4[", "aCSu4[");
      try { 
        jSONObject0.increment("aCSu4[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("aCSu][", "aCSu][");
      boolean boolean0 = jSONObject1.has("aCSu][");
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("a;U7P*.6??FTaVS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "java.io.StringWriter@0000000003");
      String string0 = jSONObject1.getString("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("*P.", 0.0);
      try { 
        jSONObject0.getString("*P.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "nl");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("c)");
      long long0 = jSONObject0.getLong("c)");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Float float0 = Float.valueOf(430.75388F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("", (Object) "java.io.StringWriter@0000000003");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<ByteArrayInputStream, Character> hashMap0 = new HashMap<ByteArrayInputStream, Character>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a valid number.", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("] is not a valid number.");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2380);
      JSONObject jSONObject1 = jSONObject0.put("gettoCharArray", (float) 2380);
      try { 
        jSONObject1.getJSONObject("gettoCharArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HashMap<ObjectOutputStream, DropMode> hashMap0 = new HashMap<ObjectOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("0", (-1.0F));
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("has", "has");
      try { 
        jSONObject1.getInt("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("has", "has");
      try { 
        jSONObject1.getNumber("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",g`o{{>B{'|", 0.0F);
      float float0 = jSONObject0.getFloat(",g`o{{>B{'|");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(",g`o{{>B{'|", ",g`o{{>B{'|");
      try { 
        jSONObject0.getFloat(",g`o{{>B{'|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("aF,g`o{{>B{|", 1L);
      double double0 = jSONObject0.getDouble("aF,g`o{{>B{|");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(")ip`{1@j", ")ip`{1@j");
      try { 
        jSONObject1.getDouble(")ip`{1@j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("CSu]", "CSu]");
      try { 
        jSONObject1.getBoolean("CSu]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Boolean> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("=qkN%", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("=qkN%", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-7.444690189390518));
      assertEquals("-7.444690189390518", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",g`o{{>B{'|", hashMap0);
      Float float0 = new Float(0.0);
      try { 
        jSONObject1.append(",g`o{{>B{'|", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,g`o{{>B{'|] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HashMap<Formatter.BigDecimalLayoutForm, Boolean> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("aj|ch", (Map<?, ?>) hashMap0);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("aj|ch", byteArrayInputStream0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("aCSu][", "aCSu][");
      try { 
        jSONObject1.getBigDecimal("aCSu][");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("has", "has");
      JSONObject jSONObject2 = jSONObject1.accumulate("has", jSONObject0);
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      StringReader stringReader0 = new StringReader("le");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      hashMap0.put(lineNumberReader0, (JSONObject) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("toS");
      HashMap<String, FilterOutputStream> hashMap0 = new HashMap<String, FilterOutputStream>();
      hashMap0.put((String) null, mockPrintStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("toLowerCase");
      HashMap<String, FilterOutputStream> hashMap0 = new HashMap<String, FilterOutputStream>();
      hashMap0.put("-423.04599253896436", mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{\"j.fa F_{1M68J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at 15 [character 16 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Resource.AuthenticationType, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Resource.AuthenticationType, LayoutStyle.ComponentPlacement>();
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement0 = LayoutStyle.ComponentPlacement.UNRELATED;
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement1 = hashMap0.getOrDefault(object0, layoutStyle_ComponentPlacement0);
      assertEquals(LayoutStyle.ComponentPlacement.UNRELATED, layoutStyle_ComponentPlacement1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("aCSu][");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("Bad value from toJSONString: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("toC");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONObject jSONObject1 = jSONObject0.put("Yb$", (Collection<?>) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("/-B</eFHUARLYv?XJx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value [null] is not an array or object therefore its key eFHUARLYv?XJx cannot be resolved
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject0 = new JSONObject(pipedWriter0);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        jSONObject0.query("qg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("eGZ5C5a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Mp%:iubmHmD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      HashMap<ObjectOutputStream, DropMode> hashMap0 = new HashMap<ObjectOutputStream, DropMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("true", 0.0F);
      int int0 = jSONObject1.getInt("true");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      HashMap<LineNumberReader, JSONObject> hashMap0 = new HashMap<LineNumberReader, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull(",g`o{{>B{'|");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("^HJR", stringArray0);
      float float0 = jSONObject0.optFloat("^HJR");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Class<JDBCType> class0 = JDBCType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(34, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }
}
