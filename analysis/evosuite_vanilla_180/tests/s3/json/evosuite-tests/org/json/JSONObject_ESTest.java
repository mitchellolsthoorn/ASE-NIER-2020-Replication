/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 16:02:37 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.TrayIcon;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.StandardProtocolFamily;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.swing.LayoutStyle;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9:;y^dc;Wy*:");
      assertEquals("9:;y^dc;Wy*:", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("8={W2.@:OF;6T");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val ['] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9zsiW5[q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9zsiW5[q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("08");
      assertEquals(8, number0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}E%u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      JSONObject.indent(mockPrintWriter0, 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      JSONObject jSONObject1 = jSONObject0.put("-_Fl", false);
      try { 
        jSONObject1.getBigInteger("-_Fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      MockFileWriter mockFileWriter0 = new MockFileWriter("isavailable", true);
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, jSONObject0, 1628, (-2400));
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Locale.FilteringMode, ClientInfoStatus> hashMap0 = new HashMap<Locale.FilteringMode, ClientInfoStatus>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("null");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-2256.120887022");
      assertEquals((short) (-2256), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      Object object0 = jSONObject1.remove("4eJ{S0*V.3g");
      assertEquals("4eJ{S0*V.3g", object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<BufferedWriter, MockPrintStream> hashMap0 = new HashMap<BufferedWriter, MockPrintStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.query("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("tr", (-792.5104F));
      String string0 = jSONObject0.optString("tr");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("len");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.optQuery("#/");
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<BufferedWriter, MockPrintStream> hashMap0 = new HashMap<BufferedWriter, MockPrintStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("java.", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jSONObject0.optNumber("4eJ{S0*V.3g", (Number) bigInteger0);
      assertEquals((short)1, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ouCQ!Ec-l-R,mSFyl/6");
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optNumber("ouCQ!Ec-l-R,mSFyl/6", (Number) bigInteger0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (float) 517);
      long long0 = jSONObject1.optLong("] is not a JSONArray.");
      assertEquals(517L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      int int0 = jSONObject1.optInt("", 2698);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<SocketFlow.Status, LineNumberReader> hashMap0 = new HashMap<SocketFlow.Status, LineNumberReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("510", (int) (byte)126);
      int int0 = jSONObject0.optInt("510");
      assertEquals(126, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("~{%K$[n|n6gUs\"./WB", true);
      assertTrue(boolean0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(510);
      BigInteger bigInteger0 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("&.AU\"&B6l;Fe#|2WQH", bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "clonK");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("clonK", stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-3597L));
      jSONObject0.optBigDecimal("str", bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      Object object0 = jSONObject0.opt("4eJ{S0*V.3g");
      assertEquals("4eJ{S0*V.3g", object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("get", stringArray0);
      Short short0 = new Short((byte)0);
      jSONObject0.accumulate("get", short0);
      boolean boolean0 = jSONObject0.isNull("get");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("org.json.JSONObject$Null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(pipedReader0, stringArray0);
      jSONObject0.put("\b", (double) 0);
      float float0 = jSONObject0.getFloat("\b");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      Object object0 = jSONObject0.get("4eJ{S0*V.3g");
      assertEquals("4eJ{S0*V.3g", object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(510);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, 24, 884);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("Ne{S0*.3g", "Ne{S0*.3g");
      File file0 = MockFile.createTempFile("java.org.evosuite.runtime.mock.java.io", "Ne{S0*.3g");
      JSONObject jSONObject2 = jSONObject1.increment("<@");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      // Undeclared exception!
      jSONObject2.write((Writer) mockFileWriter0, 0, 3716);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 3780, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Byte, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<Byte, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put(stringArray0[0], (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, FilterInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, FilterInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1829));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 319.2F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 835.477);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1217);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("R,BP#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 111);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("-0", stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "-0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(13);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "isstripExtensions");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("clone", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name clone, locale ja_JP
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1607
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Boolean> hashMap0 = new HashMap<Authenticator.RequestorType, Boolean>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      Boolean boolean0 = Boolean.valueOf("xV(O");
      hashMap0.put(authenticator_RequestorType0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getavailable");
      JSONObject jSONObject1 = jSONObject0.accumulate("getavailable", "getavailable");
      Writer writer0 = jSONObject1.write((Writer) mockPrintWriter0, (-606), 20);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Boolean> hashMap0 = new HashMap<Authenticator.RequestorType, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getavailable");
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, (-245563411), (-245563411));
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pointer cannot be null");
      Writer writer0 = jSONObject1.write((Writer) mockPrintWriter0, 5, 44);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Boolean> hashMap0 = new HashMap<Authenticator.RequestorType, Boolean>();
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      Boolean boolean0 = Boolean.valueOf("xV(O");
      hashMap0.put(authenticator_RequestorType0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getavailable");
      jSONObject0.write((Writer) mockPrintWriter0, (-245563411), (-245563411));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = MockFile.createTempFile("java.org.evosuite.runtime.mock.java.io", "4eJ{S0*V.3g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      Object object0 = JSONObject.wrap(objectOutputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Character character0 = Character.valueOf('Y');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('Y', object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer(114);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(114, object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = JSONObject.wrap("pointer cannot &e null");
      assertEquals("pointer cannot &e null", object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Short short0 = new Short((short)22950);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)22950, object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      Object object0 = JSONObject.wrap(roundingMode0);
      assertSame(roundingMode0, object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(181, false);
      assertEquals(182, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(19, (-1429.5));
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("clo");
      assertEquals("clo", object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("v*x#J0B`c");
      Writer writer0 = JSONObject.quote("Duplicate key \"", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("08");
      Writer writer0 = JSONObject.quote("du/WS`}n|'`v%'sUh", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote((String) null, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<BufferedWriter, MockPrintStream> hashMap0 = new HashMap<BufferedWriter, MockPrintStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce("java.", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Boolean> hashMap0 = new HashMap<Authenticator.RequestorType, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, "xV(O");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("VgIdz\u0001", "VgIdz\u0001");
      assertEquals("VgIdz\u0001", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJS0*V.3g", "4eJS0*V.3g");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject0.optNumber("4eJS0*V.3g", (Number) bigInteger0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("cl6o?S%|UHly07Kc^", (-3760L));
      assertEquals((-3760L), long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(510);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", false);
      int int0 = jSONObject1.optInt("] is not a JSONArray.", (-1629));
      assertEquals((-1629), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("getavailable", "getavailable");
      int int0 = jSONObject0.optInt("getavailable", (-245563411));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-245563411), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("&C5G$#Hq5ZXYUS!2vC", (-11));
      assertEquals((-11), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<SocketFlow.Status, LineNumberReader> hashMap0 = new HashMap<SocketFlow.Status, LineNumberReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("].", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(".", 1070.19429937);
      assertEquals(1070.19429937, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", false);
      boolean boolean0 = jSONObject1.optBoolean("pointer cannot be null", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      jSONObject0.put("pointer cannot be null", true);
      Class<TrayIcon.MessageType> class0 = TrayIcon.MessageType.class;
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.WARNING;
      TrayIcon.MessageType trayIcon_MessageType1 = jSONObject0.optEnum(class0, "pointer cannot be null", trayIcon_MessageType0);
      assertSame(trayIcon_MessageType0, trayIcon_MessageType1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<DayOfWeek> class0 = DayOfWeek.class;
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      DayOfWeek dayOfWeek1 = jSONObject0.optEnum(class0, ".", dayOfWeek0);
      assertSame(dayOfWeek1, dayOfWeek0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("~");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Boolean> hashMap0 = new HashMap<Authenticator.RequestorType, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(510);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "b0VI^k'F1l9_ZxL\"");
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      try { 
        jSONObject0.getBoolean("4eJ{S0*V.3g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("pointer canno be nll", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer canno be nll", 0L);
      try { 
        jSONObject1.getBoolean("pointer canno be nll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Short short0 = new Short((short)22950);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      hashMap0.put((Float) null, short0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1575);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SF", false);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      JSONObject jSONObject0 = new JSONObject(locale0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(14, map0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-1752.1");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(128);
      jSONObject0.write((Writer) charArrayWriter0, 128, 123);
      assertEquals(3834, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray", (float) 517);
      String string0 = jSONObject1.toString(517);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      JSONObject jSONObject1 = jSONObject0.put("Vx", 111);
      jSONObject0.put("] is not a JSONArray.", (float) 517);
      // Undeclared exception!
      jSONObject1.toString(6106);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Thread.State> class0 = Thread.State.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("len", object0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, (-1293), (-1293));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(510);
      HashMap<BigDecimal, BigDecimal> hashMap0 = new HashMap<BigDecimal, BigDecimal>();
      BigDecimal bigDecimal0 = new BigDecimal((double) 510);
      hashMap0.put(bigDecimal0, bigDecimal0);
      JSONObject jSONObject1 = jSONObject0.put("7W;SoP0/O&{w9", (Map<?, ?>) hashMap0);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float((-1085.0));
      Object object0 = JSONObject.wrap(float0);
      assertEquals((-1085.0F), object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Long long0 = new Long(517);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(517L, object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = JSONObject.wrap(jSONArray0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1049.0F);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("] is not a JSONArray.", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<MockFileOutputStream, Thread.State> hashMap0 = new HashMap<MockFileOutputStream, Thread.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("hashCode", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("1");
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("08");
      assertEquals("08", object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("$3WJ+g?&I{<f_w");
      assertEquals("$3WJ+g?&I{<f_w", object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("1164.9910722197885");
      assertEquals((short)1164, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("1ObE");
      assertEquals("1ObE", object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("2Hwe>@1TP&kU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      Object object0 = JSONObject.wrap(number0);
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      boolean boolean0 = jSONObject1.similar(jSONObject1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      JSONObject jSONObject2 = new JSONObject();
      boolean boolean0 = jSONObject1.similar(jSONObject2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar("pUVI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.quote("-/-9Kq");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\t");
      Writer writer0 = JSONObject.quote("\t", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getProtectionDomain", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("09", (-2099));
      try { 
        jSONObject1.putOnce("09", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"09\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^U=QYt~nM";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("2]^9 :vG>[u)[G`z", "2]^9 :vG>[u)[G`z");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("-174.73798580", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(510);
      JSONObject jSONObject1 = jSONObject0.accumulate("G /.Y", "] is not a JSONArray.");
      jSONObject1.optString("G /.Y", "Misplaced endArray.");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      Number number0 = jSONObject0.optNumber("4eJ{S0*V.3g");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.org.evosuite.runtime.mock.java.io", (double) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jSONObject0.optNumber("java.org.evosuite.runtime.mock.java.io", (Number) bigInteger0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("$3WJ+g?&I{<f_w", true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONObject0.optNumber("$3WJ+g?&I{<f_w", (Number) bigInteger0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJS0*V.3g", "4eJS0*V.3g");
      long long0 = jSONObject0.optLong("4eJS0*V.3g", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("$3WJ+g?&I{<f_w", true);
      long long0 = jSONObject1.optLong("$3WJ+g?&I{<f_w", (-45L));
      assertEquals((-45L), long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("EOQW q<", 0.0);
      long long0 = jSONObject0.optLong("EOQW q<", (-932L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("P<*<xgcR\"fDo&");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("^U=QYt~nM");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject(98);
      jSONObject0.putOpt("4eJ{S0*V.3g", locale0);
      int int0 = jSONObject0.optInt("4eJ{S0*V.3g");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      jSONObject0.put("] is not a JSONArray.", (float) 517);
      int int0 = jSONObject0.optInt("] is not a JSONArray.", 1774);
      assertEquals(517, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      float float0 = jSONObject1.optFloat("4eJ{S0*V.3g", (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", false);
      float float0 = jSONObject1.optFloat("] is not a JSONArray.", (-3038.33F));
      assertEquals((-3038.33F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (float) 517);
      float float0 = jSONObject1.optFloat("] is not a JSONArray.", (-3038.33F));
      assertEquals(517.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("getavailable", "getavailable");
      double double0 = jSONObject0.optDouble("getavailable", (double) (-245563411));
      assertFalse(jSONObject0.isEmpty());
      assertEquals((-2.45563411E8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", 1060L);
      double double0 = jSONObject0.optDouble(".", 0.0);
      assertEquals(1060.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", false);
      double double0 = jSONObject0.optDouble(".", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(73);
      JSONObject jSONObject1 = jSONObject0.put("H4WSjh2", (long) 73);
      BigInteger bigInteger0 = jSONObject1.optBigInteger("H4WSjh2", (BigInteger) null);
      assertEquals((short)73, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("i<uS#_b_i]i_\"76/R&", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("i<uS#_b_i]i_\"76/R&", bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "clonK");
      jSONObject0.put("ObpeQxS!!,WN``", (-1.0));
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("ObpeQxS!!,WN``", bigInteger0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("4eJ{S0*V.3g", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<Short, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<Short, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("keys", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("qa^0f.iP-J?$", 0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("qa^0f.iP-J?$", bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("$3WJ+g?&I{<f_w", true);
      boolean boolean0 = jSONObject1.optBoolean("$3WJ+g?&I{<f_w");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      Class<Thread.State> class0 = Thread.State.class;
      jSONObject1.optEnum(class0, "4eJ{S0*V.3g");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-3615));
      JSONObject jSONObject1 = new JSONObject(short0);
      jSONObject1.accumulate("$R'~", jSONObject0);
      String string0 = jSONObject1.toString();
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<SequenceInputStream, CharArrayReader> hashMap0 = new HashMap<SequenceInputStream, CharArrayReader>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      try { 
        jSONObject1.increment("4eJ{S0*V.3g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      boolean boolean0 = jSONObject0.has("4eJ{S0*V.3g");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("gettoUpperCase");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      String string0 = jSONObject0.getString("4eJ{S0*V.3g");
      assertEquals("4eJ{S0*V.3g", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      jSONObject0.put("-_Fl", false);
      try { 
        jSONObject0.getString("-_Fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Thread.State> class0 = Thread.State.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      jSONObject0.put("] is not a JSONArray.", (float) 517);
      long long0 = jSONObject0.getLong("] is not a JSONArray.");
      assertEquals(517L, long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("$3WJ+g?&I{<f_w", true);
      try { 
        jSONObject0.getLong("$3WJ+g?&I{<f_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<MockRandomAccessFile, Dialog.ModalityType> hashMap0 = new HashMap<MockRandomAccessFile, Dialog.ModalityType>();
      jSONObject0.put("W", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("W");
      assertNotSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      jSONObject0.put("] is not a JSONArray.", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("] is not a JSONArray.");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      jSONObject0.put("] is not a JSONArray.", (float) 517);
      try { 
        jSONObject0.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("~", 1178.462F);
      int int0 = jSONObject1.getInt("~");
      assertEquals(1178, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("~", true);
      try { 
        jSONObject0.getInt("~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/g1", (double) 0);
      Number number0 = jSONObject0.getNumber("/g1");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", true);
      try { 
        jSONObject0.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      jSONObject0.put("] is not a JSONArray.", (float) 517);
      float float0 = jSONObject0.getFloat("] is not a JSONArray.");
      assertEquals(517.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("s*Ly39GI{F61@q9:9mg", true);
      try { 
        jSONObject0.getFloat("s*Ly39GI{F61@q9:9mg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("", 0);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      try { 
        jSONObject0.getDouble("4eJ{S0*V.3g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[3];
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONObject jSONObject0 = new JSONObject(pipedWriter0, stringArray0);
      jSONObject0.put("pointer cannot be null", (Object) pipedWriter0);
      boolean boolean0 = jSONObject0.optBoolean("pointer cannot be null");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      boolean boolean0 = jSONObject0.optBoolean("4eJ{S0*V.3g", false);
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", true);
      try { 
        jSONObject1.getJSONObject("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-245563416));
      assertEquals("-2.45563416E8", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.9733080164013626));
      assertEquals("-1.9733080164013626", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("pointer cannot be null", true);
      try { 
        jSONObject1.append("pointer cannot be null", "pointer cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[pointer cannot be null] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("pointer cannot be null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("pointer cannot be null", "pointer cannot be null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pointer cannot be null");
      jSONObject1.accumulate("pointer cannot be null", mockPrintWriter0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getavailable", "getavailable");
      try { 
        jSONObject1.getBigDecimal("getavailable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.VAI;
      hashMap0.put(character_UnicodeScript0, (Character) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, StandardProtocolFamily> hashMap0 = new HashMap<String, StandardProtocolFamily>();
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      hashMap0.put((String) null, standardProtocolFamily0);
      // Undeclared exception!
      try { 
        jSONObject0.put("pointer cannot be null", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.HANUNOO;
      Character character0 = Character.valueOf('t');
      hashMap0.put(character_UnicodeScript0, character0);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{A{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.wrap(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short) (-2615));
      Short short1 = hashMap0.getOrDefault(object0, short0);
      assertEquals((short) (-2615), (short)short1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove(".HEfN,uG!So_Q%rIu;");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("r&Vvue{CZ<P!m", (Map<?, ?>) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      HashMap<Character.UnicodeScript, Character> hashMap0 = new HashMap<Character.UnicodeScript, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      try { 
        jSONObject0.getEnum(class0, "A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Object object0 = jSONObject0.query("/gi$AC<^k'+hBMyQm?");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      double double0 = jSONObject0.optDouble("] is not a Boolean.");
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(58);
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("getLanguage");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      HashMap<KeyRep.Type, Byte> hashMap0 = new HashMap<KeyRep.Type, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1525L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ey#n=o%x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(517);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (float) 517);
      jSONObject1.accumulate("] is not a JSONArray.", "] is not a JSONArray.");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("get", stringArray0);
      boolean boolean0 = jSONObject0.isNull("get");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Set<String> set0 = jSONObject0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4);
      long long0 = jSONObject0.optLong("`MGmq;J");
      assertEquals(0L, long0);
  }
}
