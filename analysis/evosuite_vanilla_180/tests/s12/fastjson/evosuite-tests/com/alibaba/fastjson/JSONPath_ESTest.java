/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 19:31:09 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.MapSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.UUID;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("N");
      Map<String, Object> map0 = JSONPath.paths((Object) null, (SerializeConfig) null);
      DataTruncation dataTruncation0 = new DataTruncation(1494, true, true, (-1), 1494);
      boolean boolean0 = jSONPath0.containsValue((Object) map0, (Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LIKE");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("LIKE");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "LIKE", hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((byte)123, (byte)112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("8pFyi%SU^?-6]~Ml", "8pFyi%SU^?-6]~Ml", "com", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3478, 10, 10);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3478, 3478, 10, (-141), 3478);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, class0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -345
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("dalvik");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(47, 0, 92);
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.JSONPath$StringInSegement", "[M(6");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLDataException0, sQLDataException0);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">b");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("xCp0b @TllI)");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. xCp0b @TllI)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("x;#x?3{BZg-AK|pp%");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$^Piij-v_FaQ[Nc");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6nA*z[O0|r*;u");
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-3040));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("eVp,p", "hNsTc#R!bD-7", "qq1CHB", stringArray0, true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("eVp,p");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_MatchSegement0);
      assertSame(jSONPath_MatchSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$ref");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".'v|Mq /,$c$QkM.?\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. .'v|Mq /,$c$QkM.?\"
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("&");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!x(z{-Cg4UQAq&a";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. !x(z{-Cg4UQAq&a
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("A");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSONPath.extract("evalKeySet error : ", "fastjson.parser.autoTypeSupport", parserConfig0, (-3723), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("s+wGgSZK@e0eyg5K");
      DataTruncation dataTruncation0 = new DataTruncation(14, false, true, 4, 1443168256);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(dataTruncation0);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("springfox.documentation.spring.web.json.Json");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("pringfox.documentation.", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("mmz;");
      jSONPath0.init();
      assertEquals("mmz;", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("stackTrace");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(121, 121, 121);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_SizeSegment0, "stackTrace");
      assertNotNull(object0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("stackTrace");
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, object0, sQLTransientConnectionException0);
      assertEquals(4, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("] ROj<[8");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$IntInSegement");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('M');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'M, but 'c'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(" J*Su#f 01>;gb#6K+a", (-1272), jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("className", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, serializeConfig0, jSONPath_WildCardSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1220));
      JSONPath jSONPath0 = new JSONPath("/stackTrace/11");
      Float float0 = new Float((double) (-1220));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, "/stackTrace/11", float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("s+wGgSZK@e0eyg5K");
      Short short0 = new Short((short)1024);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("s+wGgSZK@e0eyg5K");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`8&k<sru&'SlK@$5#z)", "s+wGgSZK@e0eyg5K", (-1173));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      jSONPath_FilterSegment0.eval(jSONPath0, short0, sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "\\.", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) sQLTransactionRollbackException0, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(65, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(14);
      int int0 = JSONPath.size((Object) jSONPath_ArrayAccessSegment0, "*");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = JSONPath.size((Object) "wttD", "*");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = JSONPath.size((Object) "dalvik", "min");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("]");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      int int0 = jSONPath0.size((Object) jSONPath_SizeSegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("double");
      boolean boolean0 = jSONPath0.setPropertyValue("double", (String) null, (-5808501897572499070L), (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("dalvik");
      boolean boolean0 = JSONPath.set((Object) null, "dalvik", (Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("org");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org", "org", 376);
      Integer integer0 = new Integer(376);
      boolean boolean0 = jSONPath0.set((Object) sQLFeatureNotSupportedException0, (Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = JSONPath.read(" ", "/parent/packages/sun.util.resources.fr");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Set<?> set0 = JSONPath.keySet((Object) sQLSyntaxErrorException0, "=");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-698), (-698), (-698));
      JSONPath jSONPath0 = new JSONPath(";");
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_RangeSegment0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("'");
      JSONPath jSONPath0 = JSONPath.compile("'");
      Set<?> set0 = jSONPath0.keySet((Object) sQLFeatureNotSupportedException0);
      assertEquals(4, set0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("millis");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("+");
      Object object0 = jSONPath0.getPropertyValue(classLoader0, "dalvik", (-4147L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaa.fastjson.JSONPath$StrinOpSegement");
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("_ePY3jSG4-zU}0*US", serializeConfig0, parserConfig0);
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Z");
      Object object0 = jSONPath0.getArrayItem("Z", 0);
      assertEquals("Z", object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("MgB/Za(TBZW&5K&Wu)#");
      int int0 = jSONPath0.evalSize(classLoader0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/packages/com.thoughtworks.xstream.io.path");
      int int0 = jSONPath0.evalSize(jSONPath0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath0 = JSONPath.compile("not");
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("51Vk:@9a4uN],Q");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_WildCardSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("U");
      Set<?> set0 = jSONPath0.evalKeySet("U");
      assertFalse(set0.contains("U"));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) " ", " ");
      assertEquals(" ", object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      MockDate mockDate0 = new MockDate(32, 32, (-590), 32, 32);
      Object object0 = jSONPath0.eval((Object) mockDate0);
      assertSame(mockDate0, object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "JSONPt$StringOSegement", (Object) "and");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = JSONPath.compare("||~DQ7STMLud", "e}#RregG3k&>o");
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("|9S9co]]Xo=");
      // Undeclared exception!
      try { 
        JSONPath.size((Object) jSONPath0, "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.size((Object) "$^Piij-v_FaQ[Nc", ";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("millis");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("2");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("millis", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_MultiIndexSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_WildCardSegment0, "com.alibaba.fastjson.JSONPath$JSONPathParser", 0L, "context");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("list_item_desc");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, ",X2B #%yn2`Qv#%\"M+", (-448), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("dalvik");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 3126, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(106, 106, 93);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) classLoader0, "/stackTrace/0", (Object) jSONPath_RangeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("wttD");
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "wttD", (Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vg[czS");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "Vg[czS", "Vg[czS", (Object) jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Long long0 = new Long((-1017L));
      // Undeclared exception!
      try { 
        JSONPath.set((Object) long0, "com.alibaba.fastjson.JSONPath$DoubleOpSegement", (Object) long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("*UcGH(j", "*UcGH(j");
      SQLWarning sQLWarning0 = new SQLWarning("AbK#]]$S4UacX[", sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*UcGH(j", "AbK#]]$S4UacX[", 2511, sQLWarning0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLFeatureNotSupportedException0, "*UcGH(j", (Object) "*UcGH(j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. *UcGH(j
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("davik");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) classLoader0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      jSONPath0.set((Object) bigInteger0, (Object) "com.alibaa.fastjson.JSONPath$StrinOpSegement", false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[jv]");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("[jv]", 2574.693608, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[jv]", "[jv]", intArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockThrowable0);
      boolean boolean0 = jSONPath0.set((Object) jSONPath_FilterSegment0, (Object) sQLTimeoutException0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("rlike");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) classLoader0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vg[lczS");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "Vg[lczS", (Object) "Vg[lczS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s", "com.alibaba.fastjson.JSONPath$StringOpSegement");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$StringOpSegement", "_asm", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_FilterSegment0, (Object) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("jy|3|<F*");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "jy|3|<F*", (Object) "jy|3|<F*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : jy|3|<F*
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "t";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[]";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(bigDecimal0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Long long0 = new Long((-3624L));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(long0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Vg[lczS";
      JSONPath.reserveToArray((Object) null, stringArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("com.alibaba.fastjson.JSONPath$StringOpSegement", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("+");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(classLoader0, "=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      jSONPath0.removePropertyValue(javaBeanDeserializer0, "fastjson.parser.deny.internal", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("_ePY3jSG4-zU}0*US", serializeConfig0, parserConfig0);
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(class0, "hI'dx%X6L/=%r", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "/parent", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("nin", serializeConfig0, (ParserConfig) null);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("nin");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, jSONPath_FilterSegment0, 30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$FilterSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) " ", "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_Operator0, "'");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("double");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("double");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      jSONPath0.remove((Object) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("nin", serializeConfig0, (ParserConfig) null);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("nin");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_FilterSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "[");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) classLoader0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      String[] stringArray0 = new String[3];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-76));
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) byte0, "[,q*dWCZ\"mYT8(\".X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(427);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      MapSerializer mapSerializer0 = new MapSerializer();
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) mapSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.MapSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      MockDate mockDate0 = new MockDate(315497910460527221L);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) mockDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Q1+:rw{ Kn C");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Q1+:rw{ Kn C
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[C");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("&Gf3aqB");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. &Gf3aqB
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[?");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'s*,s*'");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 's*,s*'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("type not match. ", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue("qq1CHB", "k1~DMJq(htc>", (-4147L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/packages/org.evosuite.runtime.javaee.injection", (SerializeConfig) null, (ParserConfig) null);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("E`b=xhZJX");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("d}dW[f");
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("edr", serializeConfig0, (ParserConfig) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("org");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("org", (-3695));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", "fastjson.parser.deny.internal", parserConfig0, 2604, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract(" J*Su#f 01>;gb#6K+a", "className", parserConfig0, 0, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null, parserConfig0, 184, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("1tY4Iq}y2zRY6,[^", "[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "_e*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibba.fastjson.JSONPth$StringOpSegement");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("com", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize("com");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("dalvik");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) "com.alibaba.fastjson.JSONPath$StringOpSegement", "6");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("MgB/Za(TBZW&5K&Wu)#");
      // Undeclared exception!
      try { 
        JSONPath.eval((Object) jSONPath0, "MgB/Za(TBZW&5K&Wu)#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : MgB/Za(TBZW&5K&Wu)#
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NdA");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("=", true);
      JSONPath jSONPath0 = new JSONPath("+");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) jSONPath_PropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("[]", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1707, 2052, 8);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) mockGregorianCalendar0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("timezoneOffset", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "s+wGgSZK@e0eyg5K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V");
      Object object0 = jSONPath0.eval((Object) "java.time.Duration");
      assertEquals("java.time.Duration", object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vg[czS");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(class0, "O#>zErbz-NC`?g", (byte) (-97), "Vg[czS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = JSONPath.compile("O#>zErbz-NC`?g");
      Class<SQLException> class0 = SQLException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      jSONPath0.deepSet(javaBeanSerializer0, "fastjson.parser.deny", (-6586085717218287427L), (Object) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\\.");
      Locale locale0 = new Locale("\\.", "_jZjq^_#^G|easpm(", "_jZjq^_#^G|easpm(");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(mockGregorianCalendar0, "", 0L, jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path \\., segement 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nin");
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[0];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues((Object) null);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("nin", (String) null, list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path nin, segement null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JSONPath jSONPath0 = JSONPath.compile("[");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(class0, arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("s+wGgSZK@e0eyg5K");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(">l'Nc'^");
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) class0, "between", (Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("SQLRecoverableException");
      boolean boolean0 = JSONPath.containsValue((Object) "alibaa", "[]", (Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.containsValue((Object) "", "_asm", (Object) "not");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$KeySetSegment");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.JSONPath$KeySetSegment", "com.alibaba.fastjson.JSONPath$KeySetSegment");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) " ", (Object) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2272), (-2272), (-2272), 188, (-3053), (-2272));
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) mockGregorianCalendar0, (Object) jSONPath_MultiPropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "DYspQ$ESN[&@$>%0atn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("millis", "8", (-3318));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("-", "millis", 44, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLInvalidAuthorizationSpecException0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "[jv]", "[jv]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) jSONPath_SizeSegment0, "(R.@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. (R.@
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vg[czS");
      boolean boolean0 = jSONPath0.contains((Object) "Vg[czS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ql1~GHj*xhN~beDF");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "8lV%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : ql1~GHj*xhN~beDF
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JSONPath jSONPath0 = new JSONPath("+");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=", "g)6xoH[WEIA", sQLSyntaxErrorException0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLFeatureNotSupportedException0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("lang");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      jSONPath0.deepSet(propertyNamingStrategy0, (String) null, (-3755L), (Object) null);
      assertEquals("lang", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("\\.");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("step must greater than zero : ", true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, "step must greater than zero : ", sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("\\.");
      Object object1 = jSONPath_PropertySegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, object0);
      assertTrue(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("q1bd*,F^vjrLx? 5");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-728));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Zk@83tl1^;l^1");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = (JSONPath.PropertySegment)jSONPath_JSONPathParser0.buildArraySegement("Zk@83tl1^;l^1");
      JSONPath jSONPath0 = JSONPath.compile("P<#WQBmP\u0000!Ht");
      ParserConfig parserConfig0 = new ParserConfig(false);
      jSONPath_PropertySegment0.setValue(jSONPath0, "r-sIHjdk3I]+}KfA", parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(416);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("0~QU4e.JOkCbDUzp'", false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, sQLNonTransientConnectionException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/uRLs/1");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('-');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("type not match. ");
      jSONPath_JSONPathParser0.readSegement();
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("dalvik");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      boolean boolean0 = jSONPath0.set((Object) sQLClientInfoException0, (Object) sQLTransientConnectionException0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" ");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" ", "/stackTrace/11");
      boolean boolean0 = jSONPath0.set((Object) jSONPath_Operator0, (Object) sQLTimeoutException0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+");
      MockDate mockDate0 = new MockDate((-982), 3038, 97, 693, 97);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vg[*zS");
      Float float0 = new Float(700.09216F);
      boolean boolean0 = jSONPath0.remove((Object) float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Object[] objectArray0 = new Object[2];
      jSONPath0.arrayAdd((Object) bigInteger0, objectArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("?v('`?Hx");
      Object[] objectArray0 = new Object[5];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("millis");
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath_MultiIndexSegment0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_WildCardSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("m");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("B");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      StringReader stringReader0 = new StringReader(";");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONScanner jSONScanner0 = new JSONScanner("FX", (-698));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("0XO={Mh");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{#&}yfOj4", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 0XO={Mh
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("u8&", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Object object0 = jSONPath0.eval((Object) sQLTimeoutException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(416);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("ui5H_*kZ>Ni");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(59);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(193);
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken", "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken", 193, intArray0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue((JSONPath) null, (Object) null, batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$ArrayAccessSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSONPath.extract("\\-", (String) null, parserConfig0, 1005, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_JSONPathParser0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dalvik";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath_Operator0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject("t", stringArray0);
      assertEquals("t", object0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("'kzmB0O0YPVmI'iYP'", stringArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vg[*zS");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      hashMap0.put("fastjson.deserializer.fileRelativePathSupport", (Field) null);
      JSONPath jSONPath0 = new JSONPath("sc6yYTo", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize(hashMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      int int0 = jSONPath0.size((Object) "*");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Ji");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ji", ";-&@<'b` xu,");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      boolean boolean0 = jSONPath0.removePropertyValue(sQLInvalidAuthorizationSpecException0, "Ji", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = JSONPath.remove((Object) hashMap0, "LIKE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("stackTrace");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(121, 121, 121);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_SizeSegment0, "stackTrace");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("stackTrace");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransientConnectionException0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set property error, java.sql.SQLTransientConnectionException#stackTrace
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.FieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("TODO");
      jSONPath0.deepSet((Object) null, ":QHI@$x7QZy\"*!", 1364L, ":QHI@$x7QZy\"*!");
      assertEquals("TODO", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("-z?3`z)6j", true);
      JSONPath jSONPath0 = new JSONPath("FmL");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((byte)38, 963, (byte)38);
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_RangeSegment0, "sc6yYTo:NH*KB7");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, jSONPath_WildCardSegment0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("s+wGgSZK@e0eyg5K");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("d", "s+wGgSZK@e0eyg5K");
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepScan(hashMap0, "", stack0);
      assertFalse(stack0.contains("s+wGgSZK@e0eyg5K"));
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NdA");
      SQLException sQLException0 = new SQLException();
      jSONPath0.deepScan(sQLException0, "NdA", (List<Object>) null);
      assertEquals(0, sQLException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java/lang/Enum", "java/lang/Enum", 120);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java/lang/Enum";
      stringArray0[1] = "java/lang/Enum";
      stringArray0[2] = "java/lang/Enum";
      stringArray0[3] = "java/lang/Enum";
      stringArray0[4] = "java/lang/Enum";
      Object object0 = JSONPath.reserveToArray(sQLFeatureNotSupportedException0, stringArray0);
      JSONPath jSONPath0 = new JSONPath("processKey");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd(object0, (Object[]) stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = JSONPath.remove((Object) hashMap0, "com.alibaa.fastjson.JSONPath$StrinOpSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = new Float(46.487022F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Double double0 = new Double(Double.NaN);
      boolean boolean0 = JSONPath.eqNotNull(double0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = new Float(46.487022F);
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Float float0 = new Float((-3015.07201549));
      Byte byte0 = new Byte((byte)42);
      boolean boolean0 = JSONPath.eqNotNull(float0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Short short0 = new Short((short) (-583));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(short0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Short short0 = new Short((short) (-583));
      boolean boolean0 = JSONPath.eqNotNull(short0, 2187);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Short short0 = new Short((short)9);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Long long0 = new Long((-1085L));
      Float float0 = new Float(3898.6);
      boolean boolean0 = JSONPath.eq(long0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      SQLWarning sQLWarning0 = new SQLWarning();
      boolean boolean0 = JSONPath.eq(bigInteger0, sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("]", "com.alibaba.fastjson.JSONPath$NullSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(65, (byte)93, 65);
      boolean boolean0 = JSONPath.eq(jSONPath_RangeSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<YudzKeX$_o&k");
      boolean boolean0 = JSONPath.eq((Object) null, jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = JSONPath.eq(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", ";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("t");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("t", "'{");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLFeatureNotSupportedException0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringOpSegement");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, classLoader0, aSMDeserializerFactory0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("com.alibaba.fastjson.JSONPath$StringOpSegement");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JSONPath jSONPath0 = JSONPath.compile("sc6yYTo:NH*KB7");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, sQLNonTransientConnectionException0, jSONPath_NullSegement0);
      jSONPath0.deepGetPropertyValues(hashSet0, (List<Object>) null);
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(4202);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("(8gpvyGyl~<L|f", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4202, 4202, 63);
      Object object0 = JSONPath.reserveToArray(mockGregorianCalendar0, (String[]) null);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(object0);
      assertSame(object0, collection0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*");
      SerializeConfig serializeConfig0 = new SerializeConfig(43);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath_JSONPathParser0, serializeConfig0);
      boolean boolean0 = JSONPath.contains((Object) map0, "*");
      assertEquals(1, map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NdA");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("dalvik");
      JSONPath jSONPath0 = JSONPath.compile("dalvik");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath_NotNullSegement0, 1767, jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$NotNullSegement
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rlike");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Object object0 = jSONPath0.getArrayItem(hashMap0, (-2011));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 75, 75);
      JSONPath jSONPath0 = new JSONPath("ak@C83tl1^;l^1");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, "ak@C83tl1^;l^1", "62;|GEH;J}_`!");
      assertNotNull(arrayList0);
      
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      MathContext mathContext0 = new MathContext(17);
      BigDecimal bigDecimal0 = new BigDecimal((-3463L), mathContext0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, bigDecimal0, arrayList0);
      assertEquals(1, arrayList0.size());
      assertEquals(3, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("rkZ<La\"OO&");
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, "rkZ<La\"OO&", "rkZ<La\"OO&");
      int[] intArray0 = new int[3];
      intArray0[2] = (-1911);
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_MultiPropertySegment0, object0);
      assertEquals(3, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("] ROj<[8", (SerializeConfig) null, parserConfig0);
      Object object0 = jSONPath0.getArrayItem((Object) null, (-1));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("+3J?{d~4\"");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("+3J?{d~4\"", 326.0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, false);
      Class<Double> class0 = Double.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("+3J?{d~4\"", sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "syntax error, expect [, actual ", 476, (Throwable) null);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, javaBeanDeserializer0, sQLTransactionRollbackException0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("k22tp", false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("E`b=xhZJX", jSONPath_PropertySegment0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      SQLDataException sQLDataException0 = new SQLDataException("E`b=xhZJX", "oracle.sql.DATE");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLDataException0, jSONPath_SizeSegment0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(", but '");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$WildCardSegment");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.alibaba.fastjson.JSONPath$WildCardSegment", "m", (-2092419962));
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, calendar0, "3=C@8kmI!`M<-.ZT", sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$MultiIndexSegment", "*", true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_ValueSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = new JSONPath(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(4115);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_StringInSegement0, jSONPath_ArrayAccessSegment0);
      assertSame(jSONPath_ArrayAccessSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("s+wGgSZK@e0eyg5K");
      Short short0 = new Short((short)1017);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("s+wGgSZK@e0eyg5K");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`8&k<sru&'SlK@$5#z)", "s+wGgSZK@e0eyg5K", (-1173));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, short0, sQLFeatureNotSupportedException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-698), (-698), (-698));
      JSONPath jSONPath0 = JSONPath.compile(";");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("evalKeySet error : ", jSONPath_RangeSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      BigDecimal bigDecimal0 = new BigDecimal(4647432019745535567L);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, bigDecimal0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("[", (Pattern) null, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("u8&", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath0, (Object) null, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("]", "]", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("]");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, serializeConfig0, "]", batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$FilterSegment", "_asm", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$FilterSegment");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, serializeConfig0, "]", batchUpdateException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPat$FilterSement", "_ePY3jSG4-zU}0*US", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("_ePY3jSG4-zU}0*US");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_Operator0, "_ePY3jSG4-zU}0*US", jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("serializer", "serializer", "uH+NAD", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("eVp,p", "hNsTc#R!bD-7", "qq1CHB", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("qq1CHB");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "eVp,p", jSONPath0, "eVp,p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("3;6P;xL", (String) null, (String) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath jSONPath0 = new JSONPath("/");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/", jSONPath_SizeSegment0, jSONPath_Operator0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LT;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(103, 1403, 1403);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("F", "/");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, bigDecimal0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(object0);
      
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLTransientConnectionException0, jSONPath_Operator1, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("SQLRecoverableException", 2095.0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      JSONPath jSONPath0 = new JSONPath("SQLRecoverableException");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("SQLRecoverableException", "SQLRecoverableException");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";Ljava/Yang/reflect/Type;Ljava/lang/Object;)Ljava/lang/ObjecV;");
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement(";Ljava/Yang/reflect/Type;Ljava/lang/Object;)Ljava/lang/ObjecV;", (-6586085717218287427L), jSONPath_Operator0);
      SQLException sQLException0 = new SQLException((Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("i", (String) null, 11, sQLException0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, jSONPath0, sQLTransientConnectionException0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$^Piij-v_FaQ[Nc");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$^Piij-v_FaQ[Nc";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("time", stringArray0, false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(14);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "time", fileSystemHandling0, jSONPath_ArrayAccessSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("d}dW[f");
      jSONPath_JSONPathParser0.next();
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("d}dW[f", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/3");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, object0, (Object) null, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("org");
      Long[] longArray0 = new Long[2];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("org", longArray0, true);
      Double double0 = new Double(1082341148265766208L);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org", "org", 1848, (Throwable) null);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, longArray0[0], double0, sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(3794316665763266033L);
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("i0w~#y%2jd%\"s", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("{");
      BigDecimal bigDecimal0 = new BigDecimal((long) longArray0[0]);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, bigDecimal0, bigDecimal0, longArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("Vg", (-2439930098895578154L), (-2439930098895578154L), true);
      JSONPath jSONPath0 = JSONPath.compile("edr:<.W4");
      MockDate mockDate0 = new MockDate(110, 200, 10000);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, mockDate0, "edr:<.W4", "edr:<.W4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      long[] longArray0 = new long[5];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("fastjson.parser.deny", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(2<'S|aC)P (4T$");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("S", "(2<'S|aC)P (4T$", sQLTransientConnectionException0);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, sQLTransientConnectionException0, sQLInvalidAuthorizationSpecException0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("hI'dx%X6L/=%r");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(13);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("hI'dx%X6L/=%r", intArray0);
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, batchUpdateException0);
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("", longArray0, true);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, object0, "hI'dx%X6L/=%r", object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("O3M,As+M)M<$");
      SQLDataException sQLDataException0 = new SQLDataException("true", "O3M,As+M)M<$", 40, (Throwable) null);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("O3M,As+M)M<$", jSONPath0, false);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "O3M,As+M)M<$", jSONPath0, sQLDataException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("Wc4>I\"^;f");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("Wc4>I\"^;f", (SerializeConfig) null, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", (String) null, 3252);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, (Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(103, 32, 32);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("F", "/");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, bigDecimal0, sQLInvalidAuthorizationSpecException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-575), (-575), (-575));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath(";G0(38iCntv~}EtJn4", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("*", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ti#me";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("ti#me");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.alibaba.fastjson.JSONPath$DoubleOpSegement", "zexolLI^y@2w:", (-784));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLNonTransientConnectionException0, jSONPath_Operator0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.serializer.JSONAwareSerializer", true);
      JSONPath jSONPath0 = new JSONPath("`aw{`kDn~cSldK(0");
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", "com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", 32, (Throwable) null);
      jSONPath_PropertySegment0.setValue(jSONPath0, "`aw{`kDn~cSldK(0", sQLDataException0);
      assertEquals("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", sQLDataException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-3130));
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, "PM-EYi-8p/gkP*l");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
      int int0 = JSONPath.compare(uUID0, uUID0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("dalvik");
      // Undeclared exception!
      try { 
        JSONPath.compare("dalvik", jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("sn4Yip2sm");
      JSONPath jSONPath0 = JSONPath.compile("B");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(4);
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, jSONPath_NullSegement0);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      Object object1 = jSONPath_MinSegment0.eval(jSONPath0, "B", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("evalKeySet error : ");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("evalKeySet error : ", "com.alibaba.fastjson.JSONPath$MinSegment", sQLTransientException0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, jSONPath0, sQLRecoverableException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("org");
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "org", "org");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":true");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"true\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-TWT:");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-TWT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'kzmB0O0YPVmI'iYP'");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<YudzKeX$_o&k");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '<, but 'k'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("FmL");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "FmL");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("<YudzKeX$_o&k");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!j9 ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'j'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6nA*z[O0|r*;u");
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6nA*z[O0|r*;u
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'kzmB0O0YPVmI'iYP'");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("kzmB0O0YPVmI", object0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6nA*z[O0|r*;u");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(6L, object0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+24}%@bA+7");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(1237L);
      assertEquals(1261.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$*T,h$+");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1706));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(")");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+24}%@bA+7");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(24L, long0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(")MnStIMp(f`h*Y^", 606.96137, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$VALUES");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_DoubleOpSegement0);
      assertSame(jSONPath_DoubleOpSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("*cC.[@j_zI");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/1");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("millis", "[o>7Z]L1>Z");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2millis
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("FTRb=E=Ib{~'+35TG");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Z[?< T&6");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "Z[?< T&6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but '<'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "..x<%HH|fu(<F", "..x<%HH|fu(<F", objectArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Vg[*zS");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("Vg[*zS");
      Map<String, Object> map0 = JSONPath.paths((Object) collection0);
      assertEquals(9, map0.size());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = new SerializeConfig(120, true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) classLoader0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaa.fastjson.JSONPath$StrinOpSegement", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com.alibaa.fastjson.JSONPath$StrinOpSegement", (Object) "com.alibaa.fastjson.JSONPath$StrinOpSegement", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaa.fastjson.JSONPath$StrinOpSegement", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "com.alibaa.fastjson.JSONPath$StrinOpSegement", (Object) "com.alibaa.fastjson.JSONPath$StrinOpSegement", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) fileSystemHandling0, (Object) jSONPath_Operator0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{");
      boolean boolean0 = jSONPath0.set((Object) "{", (Object) "{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("wnyl", (SerializeConfig) null, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException();
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLDataException0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("2a5.`QBny7)e9e%B", false);
      JSONPath jSONPath0 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_PropertySegment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("FmL", true);
      JSONPath jSONPath0 = new JSONPath("3;6P;xL");
      Double double0 = new Double((-4251.514941832265));
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, jSONPath0, double0);
      // Undeclared exception!
      try { 
        JSONPath.remove(object0, "/parent/acc");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) class0, "e/_6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaa.fastjson.JSONPath$StrinOpSegement");
      boolean boolean0 = jSONPath0.remove((Object) "com.alibaa.fastjson.JSONPath$StrinOpSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("double");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("port");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      Object[] objectArray0 = new Object[12];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) javaBeanSerializer0, "'", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.aliba.fastjson.JSONPt$StringOSegement", "*");
      Object[] objectArray0 = new Object[5];
      JSONPath.arrayAdd((Object) sQLSyntaxErrorException0, "*", objectArray0);
      assertEquals("com.aliba.fastjson.JSONPt$StringOSegement", sQLSyntaxErrorException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.deserializer.fileRelativePathSupport");
      Short short0 = new Short((short)799);
      Object[] objectArray0 = new Object[13];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) short0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.deserializer.fileRelativePathSupport
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("V&1=S:1~ko{6t");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(17);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("u8&", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      Set<?> set0 = jSONPath0.keySet((Object) "*");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("double");
      int int0 = jSONPath0.size((Object) jSONPath0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("evalKeySet error : ");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      JSONPath jSONPath0 = JSONPath.compile("/cause/stackTrace/10");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLException0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "ak@C83tl1^;l^1", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      Class<Float> class0 = Float.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      
      boolean boolean0 = jSONPath0.containsValue((Object) "java/lang/Enum", (Object) javaBeanDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("U");
      SQLWarning sQLWarning0 = new SQLWarning();
      boolean boolean0 = jSONPath0.contains((Object) sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("}IG@R?]/C!'E", "/stackTrace/7");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("GE", "rLk$ho['`OvC`r.");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Object object0 = JSONPath.extract("[]", "_e*");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("LocalVariableTable", "[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2LocalVariableTable
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/11");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Set<?> set0 = JSONPath.keySet((Object) classLoader0, "com.alibaba.fastjson.parser.deserializer.OptionalCodec");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      boolean boolean0 = jSONPath0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fLp+k{8tE", jSONPath_MaxSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("fLp+k{8tE");
      SQLDataException sQLDataException0 = new SQLDataException(" lh])*SQ=", "d%#Y;#eR' ", 1107297537);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLDataException0, jSONPath_Operator0, " lh])*SQ=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      Object object0 = JSONPath.reserveToArray(jSONPath_KeySetSegment0, (String[]) null);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("serializer", "serializer", "uH+NAD", (String[]) null, false);
      JSONPath jSONPath0 = JSONPath.compile("serializer");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, object0, jSONPath0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("ql1~GHj*xhN~beDF", "ql1~GHj*xhN~beDF", true);
      JSONPath jSONPath0 = JSONPath.compile("ql1~GHj*xhN~beDF");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ql1~GHj*xhN~beDF");
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "ql1~GHj*xhN~beDF", sQLTimeoutException0, "ql1~GHj*xhN~beDF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("sn4Yip2sm");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("B");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, "B", "B");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("time", longArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("time", serializeConfig0, parserConfig0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.safeMode");
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, serializeConfig0, jSONPath0, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("not support Type Annotation.");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("not support Type Annotation.", pattern0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      JSONPath jSONPath0 = JSONPath.compile("not support Type Annotation.");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("#,h%", "$VAUES");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("x3B");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2567), (-2567), (-2567));
      boolean boolean0 = jSONPath0.set((Object) mockGregorianCalendar0, (Object) null, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("com.alibaa.fastjson.JSONPath$StrinOpSegement");
      boolean boolean0 = JSONPath.contains((Object) sQLDataException0, "/stackTrace/0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("dalvik");
      JSONPath jSONPath0 = JSONPath.compile("dalvik");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath0, jSONPath0, "dalvik");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath jSONPath0 = new JSONPath("hI'dx%X6L/=%r");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(13);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("hI'dx%X6L/=%r", intArray0);
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, batchUpdateException0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("@type");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, (Object) null, jSONPath_WildCardSegment0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/7");
      jSONPath0.arrayAdd((Object) jSONPath_SizeSegment0, (Object[]) null);
      assertEquals("/cause/stackTrace/7", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile("RK");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("RK", "RK");
      String[] stringArray0 = new String[9];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("EN:", stringArray0, true);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLNonTransientConnectionException0, "EN:", jSONPath_MinSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("org", "org");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2org
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Vg[*zS");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("Vg[*zS");
      // Undeclared exception!
      try { 
        JSONPath.size((Object) collection0, "org");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[");
      String string0 = jSONPath0.getPath();
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/uRLs");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) null, "Cm 7");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("parser", "parser");
      boolean boolean0 = JSONPath.set((Object) sQLRecoverableException0, "parser", (Object) "parser");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("?21p##/|?O}<=#_ U", 711449177569584898L, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("java/lang/Enum");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, "java/lang/Enum", jSONPath0, "?21p##/|?O}<=#_ U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_ePY3jSG4-zU}0*US");
      JSONPath jSONPath0 = JSONPath.compile("B__HhZh@");
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_JSONPathParser0);
      assertFalse(boolean0);
  }
}
