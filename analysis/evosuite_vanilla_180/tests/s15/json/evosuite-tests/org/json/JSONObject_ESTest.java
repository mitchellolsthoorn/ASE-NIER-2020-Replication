/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 20:35:17 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.GraphicsDevice;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.sql.RowIdLifetime;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.annotation.Resource;
import javax.swing.LayoutStyle;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      JSONObject jSONObject1 = jSONObject0.append("Unable to write JSONArray value at index: 0", mockPrintWriter0);
      Writer writer0 = jSONObject1.write((Writer) mockPrintWriter0, (-38689130), 2140);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9|");
      assertEquals("9|", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-2529.29536684");
      assertEquals((-2529.29536684), number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}DY=PKV=Z'NBHCm8_I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.putOpt(",k*-8Ngm4+{Dsh2|i?", "~m>|TJ|z*MX@B");
      try { 
        jSONObject0.getBigInteger(",k*-8Ngm4+{Dsh2|i?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "BW%=");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("BW%=", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Writer writer0 = JSONObject.writeValue(mockPrintWriter0, mockPrintWriter0, 0, 0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(qJ");
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Month> class0 = Month.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("getnames");
      jSONObject0.put("getnames", (Object) mockFileOutputStream0);
      jSONObject0.toString();
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("1900.26516698164");
      assertEquals((short)1900, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LineNumberReader, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<LineNumberReader, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject1 = jSONObject0.put("N|F", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = (JSONObject)jSONObject1.remove("N|F");
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("N|k", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("getintern");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(330);
      Object object0 = jSONObject0.optQuery("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(roundingMode0, stringArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Number number0 = jSONObject0.optNumber(":q8o,Zf?~2@aSle!(V", (Number) bigDecimal0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Character, Thread.State> hashMap0 = new HashMap<Character, Thread.State>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      Number number0 = jSONObject0.optNumber("fw]p:\r=_im8+E*w", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1595);
      long long0 = jSONObject0.optLong("s.4kNBQ", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("] not found.", (-631L));
      assertEquals((-631L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(330);
      jSONObject0.put("", 3300.0);
      long long0 = jSONObject0.optLong("");
      assertEquals(3300L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(105);
      int int0 = jSONObject0.optInt("val [", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(330);
      JSONObject jSONObject1 = jSONObject0.put("", 3300.0);
      int int0 = jSONObject1.optInt("");
      assertEquals(3300, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      float float0 = jSONObject0.optFloat("TINP9Zp]JTY", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(114);
      JSONObject jSONObject1 = jSONObject0.put("value [%s] is not an array or object therefore its key %s cannot be resolved", (float) 105);
      float float0 = jSONObject1.optFloat("value [%s] is not an array or object therefore its key %s cannot be resolved");
      assertEquals(105.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-1299.21));
      float float0 = jSONObject1.optFloat("");
      assertEquals((-1299.21F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      double double0 = jSONObject0.optDouble("", (-2058.44177992));
      assertEquals((-2058.44177992), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Iapn#M", true);
      boolean boolean0 = jSONObject1.optBoolean("Iapn#M");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("gethashCode", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-104);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("Xv9l *]N", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("{", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-330));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("Unable to write JSONArray value at index: 0", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Window.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Window.Type>();
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.WARNING;
      Window.Type window_Type0 = Window.Type.NORMAL;
      hashMap0.put(trayIcon_MessageType0, window_Type0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LineNumberReader, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<LineNumberReader, LayoutStyle.ComponentPlacement>();
      jSONObject0.put("9|", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("9|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("UdEA\"?");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("cr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1654);
      jSONObject0.put("vhLdP", 103);
      float float0 = jSONObject0.getFloat("vhLdP");
      assertEquals(103.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((int) (byte)1);
      jSONObject0.append("1PBAI/:YoDj", "java.io.StringWriter@0000000016");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("1PBAI/:YoDj");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("kpes`GQ{C`D9Bz", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, pipedWriter0, (-1496), (-1496));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0, (-264), 3633);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("%oPUaD|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [%oPUaD|] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote((String) null, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.query("\t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0.0");
      JSONObject jSONObject0 = new JSONObject(number0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-12.2432575F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "names");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Window.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(105);
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, "O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-108916131), 3504);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("key", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name key, locale zh
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(stringArray0[0], stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-767));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -767
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~m>|TJ|z*MX@B");
      jSONObject0.write((Writer) mockPrintWriter0, 2287, 51);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(513);
      jSONObject0.write((Writer) charArrayWriter0, (int) (byte) (-77), (int) (byte)119);
      assertEquals("{}", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("value [%s] is not an array or object therefore its key %s cannot be resolved");
      JSONObject jSONObject0 = new JSONObject(114);
      jSONObject0.put("value [%s] is not an array or object therefore its key %s cannot be resolved", (float) 105);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, 0, 2287);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~m>|TJ|z*MX@B");
      jSONObject0.write((Writer) mockPrintWriter0, (-1132031712), 2287);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 763);
      jSONObject0.putOpt("0", bufferedWriter0);
      jSONObject0.write((Writer) bufferedWriter0, 12, 763);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      Object object0 = JSONObject.wrap(bufferedInputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Character character0 = Character.valueOf(']');
      Object object0 = JSONObject.wrap(character0);
      assertEquals(']', object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.wrap("M(;\"6]Y\"/%2aY0W");
      assertEquals("M(;\"6]Y\"/%2aY0W", object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      RowIdLifetime rowIdLifetime0 = RowIdLifetime.ROWID_UNSUPPORTED;
      linkedList0.add(rowIdLifetime0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(683.1552072434748);
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = new Double(355.10879);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("Unable to increment [");
      assertEquals("Unable to increment [", object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unable to write JSONArray value at index: 0");
      Writer writer0 = JSONObject.quote("X.z`<R:B'#rh\"1Wz5h7", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("T.h!|/rL3 ", (Writer) charArrayWriter0);
      assertEquals(12, charArrayWriter0.size());
      assertEquals("\"T.h!|/rL3 \"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("", (Writer) stringWriter0);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, jSONObject0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) ",k*-8Ngm4+{Dsh2|i?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M;R2$LY#|");
      JSONObject jSONObject1 = jSONObject0.append("O2f*S!iNBp$) _ 'M", mockPrintWriter0);
      String string0 = jSONObject1.optString("O2f*S!iNBp$) _ 'M", "81`{8uG5baAL");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.optString("!JK{UP2-[<>`;/u7", "");
      assertEquals("", string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, DataOutputStream> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, DataOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3010);
      jSONObject0.append("", bufferedInputStream0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = jSONObject0.optNumber("", (Number) bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("org.json.JSONObject@0000000001", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, DataOutputStream> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, DataOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("", 1L);
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = jSONObject0.optNumber("", (Number) bigInteger0);
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Proxy.Type, Locale.FilteringMode> hashMap0 = new HashMap<Proxy.Type, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong((String) null, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      int int0 = jSONObject0.optInt("^CQmx(_2(&tccv", 34);
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, DataOutputStream> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, DataOutputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      float float0 = jSONObject1.optFloat("", (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat((String) null, 1162.0F);
      assertEquals(1162.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(330);
      double double0 = jSONObject0.optDouble("] could not be converted to BigInteger.", (double) 3300.0F);
      assertEquals(3300.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      JSONObject jSONObject1 = jSONObject0.append("Unable to write JSONArray value at ind;x: 0", mockPrintWriter0);
      boolean boolean0 = jSONObject1.optBoolean("Unable to write JSONArray value at ind;x: 0", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("ARe~", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("~m>|TJ|z*MX@B", (Object) ",k*-8Ngm4+{Dsh2|i?");
      Class<Thread.State> class0 = Thread.State.class;
      Thread.State thread_State0 = Thread.State.TERMINATED;
      jSONObject1.optEnum(class0, "~m>|TJ|z*MX@B", thread_State0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Thread.State> class0 = Thread.State.class;
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      Thread.State thread_State1 = jSONObject0.optEnum(class0, "0", thread_State0);
      assertSame(thread_State1, thread_State0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Proxy.Type, StandardProtocolFamily> hashMap0 = new HashMap<Proxy.Type, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.opt("T4!#W/4M~;/8u9/e]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 201);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      JSONObject jSONObject0 = new JSONObject(pushbackInputStream0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      boolean boolean0 = jSONObject1.isEmpty();
      assertEquals(1, jSONObject1.length());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("uXmve:G\"OUkOAg8z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1595);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      jSONObject0.optEnum(class0, "=ZB^\"(P9~4zjWg ?LLd");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<ByteArrayOutputStream, ProcessBuilder.Redirect.Type> hashMap0 = new HashMap<ByteArrayOutputStream, ProcessBuilder.Redirect.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vhLdP");
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Month> class0 = Month.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(34, map0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<LineNumberReader, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<LineNumberReader, LayoutStyle.ComponentPlacement>();
      jSONObject0.put("", (Map<?, ?>) hashMap0);
      jSONObject0.toMap();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(46);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.0");
      try { 
        jSONObject0.toString(2114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<BufferedInputStream> linkedList0 = new LinkedList<BufferedInputStream>();
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, linkedList0, (-5), (-5));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Window.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Window.Type>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONObject jSONObject0 = new JSONObject(pipedInputStream0);
      jSONObject0.put("key", (Object) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, jSONObject0, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Month> class0 = Month.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(34, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 105, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Locale locale0 = new Locale("N|F", "N|F");
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals(12, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, mathContext0);
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double double0 = new Double(1.0);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long long0 = new Long(3006L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(3006L, object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.wrap(jSONArray0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-1");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("hSOG", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Month> class0 = Month.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      try { 
        jSONObject0.put("getBytes", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0000");
      assertEquals("0000", object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      Object object1 = JSONObject.wrap(object0);
      assertEquals(0, object1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-1.00");
      assertEquals((-1.0), object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("#f4I)]N00H{IPE|");
      assertEquals("#f4I)]N00H{IPE|", object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-3174.3513183884");
      assertEquals((short) (-3174), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("37fe`x=sro!x]CLlI1");
      assertEquals("37fe`x=sro!x]CLlI1", object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.accumulate(".|F", jSONObject0);
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      boolean boolean0 = jSONObject0.similar(jSONArray0);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      try { 
        jSONObject0.getBigDecimal("/m2Cl-O$l9-</@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.quote("W%qy,<4/Eph&&");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("names", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "java.io.StringWriter@0000000003");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("org.json.JSONWriter", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileInputStream0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("yQ0N", 1549.0245F);
      String string0 = jSONObject1.optString("yQ0N");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("8*z^`+2", 3626);
      Number number0 = jSONObject0.optNumber("8*z^`+2");
      assertEquals(3626, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Iapn#M", true);
      Number number0 = jSONObject1.optNumber("Iapn#M");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("JSON does not allow non-finite numbers.", "JSON does not allow non-finite numbers.");
      long long0 = jSONObject1.optLong("JSON does not allow non-finite numbers.", 2L);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Iapn#M", false);
      long long0 = jSONObject1.optLong("Iapn#M", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<LineNumberReader, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<LineNumberReader, LayoutStyle.ComponentPlacement>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map<?, ?>) hashMap0);
      jSONObject1.optJSONObject("");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("int");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      JSONObject jSONObject1 = jSONObject0.append("Unable to write JSONArray value at index: 0", mockPrintWriter0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("Unable to write JSONArray value at index: 0");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("}R(koJh:$h+");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("nam", "nam");
      int int0 = jSONObject1.optInt("nam");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-1");
      JSONObject jSONObject1 = jSONObject0.put("-1", (-1L));
      int int0 = jSONObject1.optInt("-1", 32);
      assertEquals(3, jSONObject0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(34);
      jSONObject0.put("^CQmx(_2(&tccv", false);
      int int0 = jSONObject0.optInt("^CQmx(_2(&tccv", 34);
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("*&", 0L);
      float float0 = jSONObject0.optFloat("*&");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("'9HyS5x!SE6t9[&^yg", false);
      float float0 = jSONObject0.optFloat("'9HyS5x!SE6t9[&^yg", Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("{", "{");
      double double0 = jSONObject0.optDouble("{");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject jSONObject1 = jSONObject0.putOnce("C).X&{IMse:)", bigDecimal0);
      double double0 = jSONObject1.optDouble("C).X&{IMse:)", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("N|k", true);
      double double0 = jSONObject0.optDouble("N|k", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(114);
      jSONObject0.put("value [%s] is not an array or object therefore its key %s cannot be resolved", (float) 105);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("value [%s] is not an array or object therefore its key %s cannot be resolved", bigInteger0);
      assertEquals((short)105, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(330);
      jSONObject0.put("", 3300.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("", bigInteger0);
      assertEquals((short)3300, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("xD z9$soMFC^9*. 0", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(330);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("", bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(345.359);
      Long long0 = new Long(160);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("java.math.BigDecimal@0000000001", 160);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("java.math.BigDecimal@0000000001", bigDecimal0);
      assertEquals((byte) (-96), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("*&", 0L);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("*&", bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(105);
      JSONObject jSONObject1 = jSONObject0.put("value [%s] is not an array or object therefore its key %s cannot be resolved", (float) 105);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("value [%s] is not an array or object therefore its key %s cannot be resolved", bigDecimal0);
      assertEquals((short)105, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("toM");
      JSONObject jSONObject1 = jSONObject0.append("toM", mockPrintWriter0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("toM", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Iapn#M", true);
      boolean boolean0 = jSONObject1.optBoolean("Iapn#M", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("{", "{");
      boolean boolean0 = jSONObject0.optBoolean("{");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      Class<JavaFileObject.Kind> class0 = JavaFileObject.Kind.class;
      try { 
        jSONObject1.getEnum(class0, "true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Short short0 = new Short((short) (-873));
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1409.9543684078428));
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(114);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(114);
      jSONObject0.put("value [%s] is not an array or object therefore its key %s cannot be resolved", (float) 105);
      JSONObject jSONObject1 = jSONObject0.increment("value [%s] is not an array or object therefore its key %s cannot be resolved");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(330);
      jSONObject0.put("", (double) 330);
      JSONObject jSONObject1 = jSONObject0.increment("");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Iapn#M", true);
      try { 
        jSONObject1.increment("Iapn#M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("'9HyS5x!SE6t9[&^yg", false);
      boolean boolean0 = jSONObject1.has("'9HyS5x!SE6t9[&^yg");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("Iapn#M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("N|k", true);
      try { 
        jSONObject0.getString("N|k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = JSONObject.getNames((Object) stringWriter0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(114);
      JSONObject jSONObject1 = jSONObject0.put("value [%s] is not an array or object therefore its key %s cannot be resolved", (float) 105);
      long long0 = jSONObject1.getLong("value [%s] is not an array or object therefore its key %s cannot be resolved");
      assertEquals(105L, long0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("toM", true);
      try { 
        jSONObject1.getLong("toM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("'9HyS5x!SE6t9[&^yg", false);
      try { 
        jSONObject0.getJSONObject("'9HyS5x!SE6t9[&^yg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M3R2$LY3|");
      JSONObject jSONObject1 = jSONObject0.append("0.0", mockPrintWriter0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("0.0");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("$;gIbhZ?V;|");
      int int0 = jSONObject0.getInt("$;gIbhZ?V;|");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not anumber.", false);
      try { 
        jSONObject0.getInt("] is not anumber.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isA", (-29.8));
      Number number0 = jSONObject1.getNumber("isA");
      assertEquals(1, jSONObject0.length());
      assertEquals((-29.8), number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("{", stringArray0);
      jSONObject0.accumulate("{", "{");
      try { 
        jSONObject0.getNumber("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(97);
      Float float0 = new Float((-1.0));
      JSONObject jSONObject1 = jSONObject0.putOnce("\"\"", float0);
      float float1 = jSONObject1.getFloat("\"\"");
      assertEquals((-1.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Nk", false);
      try { 
        jSONObject1.getFloat("Nk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("length", (double) 1549.0245F);
      double double0 = jSONObject1.getDouble("length");
      assertEquals(1549.0245361328125, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(330);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not anumber.", false);
      try { 
        jSONObject1.getBigDecimal("] is not anumber.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("`SdfYJ", true);
      boolean boolean0 = jSONObject0.getBoolean("`SdfYJ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      jSONObject0.accumulate("{a", locale_FilteringMode0);
      try { 
        jSONObject0.getBoolean("{a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("~a&Bq", "~a&Bq");
      try { 
        jSONObject1.getBoolean("~a&Bq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "^CQmx(_2(&tccv");
      JSONObject jSONObject1 = jSONObject0.put("^CQmx(_2(&tccv", false);
      boolean boolean0 = jSONObject1.getBoolean("^CQmx(_2(&tccv");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-4780.590192246));
      assertEquals("-4780.590192246", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("toM");
      JSONObject jSONObject1 = jSONObject0.append("toM", mockPrintWriter0);
      jSONObject0.append("toM", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2224);
      JSONObject jSONObject1 = jSONObject0.increment("0.0");
      try { 
        jSONObject0.append("0.0", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[0.0] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("toM");
      JSONObject jSONObject1 = jSONObject0.append("toM", mockPrintWriter0);
      jSONObject1.accumulate("toM", mockPrintWriter0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("\"", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("{", "{");
      boolean boolean0 = jSONObject0.similar(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not anumber.", 12);
      jSONObject1.accumulate("] is not anumber.", "] is not anumber.");
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      TrayIcon.MessageType trayIcon_MessageType0 = TrayIcon.MessageType.INFO;
      HashMap<TrayIcon.MessageType, Window.Type> hashMap0 = new HashMap<TrayIcon.MessageType, Window.Type>();
      hashMap0.put(trayIcon_MessageType0, (Window.Type) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HashMap<MockFileReader, Month> hashMap0 = new HashMap<MockFileReader, Month>();
      Month month0 = Month.JULY;
      hashMap0.put((MockFileReader) null, month0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.valueToString(stringWriter0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("izN9$p[63", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("+getSigners");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "to");
      String string0 = jSONObject0.optString("to");
      assertEquals(2, jSONObject0.length());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, TrayIcon.MessageType> hashMap0 = new HashMap<Boolean, TrayIcon.MessageType>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Resource.AuthenticationType> linkedList0 = new LinkedList<Resource.AuthenticationType>();
      jSONObject0.put(")!OUm*)ZQ", (Collection<?>) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1654);
      JSONObject jSONObject1 = jSONObject0.put("vhLdP", 1654);
      try { 
        jSONObject0.putOnce("vhLdP", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"vhLdP\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Ez");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("yscN", 1549.0245F);
      try { 
        jSONObject0.getJSONArray("yscN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      HashMap<Proxy.Type, StandardProtocolFamily> hashMap0 = new HashMap<Proxy.Type, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isNull("{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0000", 5064.2458);
      long long0 = jSONObject1.optLong("0000", 3084L);
      assertEquals(1, jSONObject0.length());
      assertEquals(5064L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      jSONObject0.putOpt("9Eq>bk]YvP;h[BJ?sbg", iterator0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("org.json.JSONPointerException");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "key");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (-1522), (-1522));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
