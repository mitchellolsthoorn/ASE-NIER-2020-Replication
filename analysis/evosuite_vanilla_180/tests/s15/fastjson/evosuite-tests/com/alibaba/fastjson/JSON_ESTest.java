/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 20:50:08 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.JSONValidator;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.MiscCodec;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.time.ZoneId;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("SGi}h$,$v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<JSON> class0 = JSON.class;
      // Undeclared exception!
      try { 
        JSON.parseArray(" ;s6sXcL ?=^", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but ;, pos 2, line 1, column 3 ;s6sXcL ?=^
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(989);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      JSON.writeJSONString((Writer) mockPrintWriter0, (Object) null, 989, serializerFeatureArray0);
      assertEquals(6, serializerFeatureArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeatureArray0[5];
      serializerFeatureArray0[8] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.writeJSONStringTo("", charArrayWriter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1004);
      jSONArray0.writeJSONString((Appendable) charArrayWriter0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SerializeWriter serializeWriter0 = new SerializeWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3089);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      JSON.writeJSONString((Writer) serializeWriter0, (Object) pipedInputStream0, serializerFeatureArray0);
      assertEquals(2, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "h;m*n,TKZ/J)";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) simplePropertyPreFilter0, serializeConfig0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      Method method0 = JSON.parseObject(charArray0, 1, (Type) null, featureArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject("", (Type) class0, 6, featureArray0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("fastjson.parser.features.ErrorOnEnumNotMatch");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("true", "type not match. ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 607);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) bufferedOutputStream0, (Object) mockPrintStream0, serializerFeatureArray0);
      assertEquals(62, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      MockFile mockFile0 = new MockFile("1.2.68");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      int int0 = JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) mockFileOutputStream0, (-3), serializerFeatureArray0);
      assertEquals(83, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      String string0 = jSONObject0.toString(serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSON.toJavaObject((JSON) null, class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      Class<Object> class0 = Object.class;
      JSONObject jSONObject1 = (JSONObject)JSON.toJavaObject((JSON) jSONObject0, class0);
      assertEquals(0, jSONObject1.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      String string0 = JSON.toJSONStringZ((Object) null, serializeConfig0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.isValid("nju >]]`/#l");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("nju >]]`/#l", "fastjson.parser.deny", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[8];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "true";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) "true", serializeFilterArray0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = new Integer(26376);
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) integer0, (SerializeFilter) null, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      SerializeConfig serializeConfig0 = new SerializeConfig((byte)119);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) serializerFeature0, 26376, serializerFeatureArray0);
      assertEquals("'UseSingleQuotes'", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = JSON.toJSONString((Object) pipedOutputStream0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(26);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) stringWriter0, serializerFeatureArray0);
      assertEquals(33, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      byte[] byteArray0 = JSON.toJSONBytes((Object) serializerFeature0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals(22, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[3];
      serializerFeatureArray0[6] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, (SerializeConfig) null, serializeFilterArray0, "", 27, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeatureArray0[5];
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, (SerializeConfig) null, serializeFilterArray0, 65536, serializerFeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TreeMap<SimplePropertyPreFilter, SimplePropertyPreFilter> treeMap0 = new TreeMap<SimplePropertyPreFilter, SimplePropertyPreFilter>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) treeMap0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TreeMap<PropertyNamingStrategy, SimplePropertyPreFilter> treeMap0 = new TreeMap<PropertyNamingStrategy, SimplePropertyPreFilter>();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) treeMap0, serializeConfig0, 989, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedHashMap<JSONPath.Operator, Integer> linkedHashMap0 = new LinkedHashMap<JSONPath.Operator, Integer>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) linkedHashMap0, 10, serializerFeatureArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.toJSON((Object) null, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = JSON.toJSON((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Charset charset0 = uTF8Decoder0.charset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      Feature[] featureArray0 = new Feature[2];
      StringWriter stringWriter0 = JSON.parseObject(byteArray0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 9, featureArray0);
      assertNull(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Object> class0 = Object.class;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      Enum<JSONPath.Operator> enum0 = JSON.parseObject(byteArray0, (Type) class0, (Feature[]) null);
      assertNotNull(enum0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      JSONObject jSONObject0 = JSON.parseObject("", featureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Feature[] featureArray0 = new Feature[2];
      JSON.parseObject("", (Type) null, featureArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Feature[] featureArray0 = new Feature[8];
      JSON.parseObject("", (Type) null, (ParseProcess) null, featureArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[4];
      LinkedList<Integer> linkedList0 = JSON.parseObject((String) null, (Type) class0, parserConfig0, featureArray0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[3];
      JSONArray jSONArray0 = JSON.parseObject("", (Type) null, parserConfig0, 73, featureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      Feature[] featureArray0 = new Feature[4];
      PascalNameFilter pascalNameFilter0 = JSON.parseObject("", class0, (ParseProcess) null, featureArray0);
      assertNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3089, (byte)89);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      JSONPObject jSONPObject0 = JSON.parseObject((InputStream) bufferedInputStream0, charset0, (Type) parameterizedTypeImpl0, (Feature[]) null);
      assertNull(jSONPObject0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[9];
      Integer integer0 = JSON.parseObject((InputStream) dataInputStream0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 1012, featureArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      byte[] byteArray0 = JSON.toJSONBytes(object0, serializeConfig0, serializerFeatureArray0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      Object object1 = JSON.parse(byteArray0, featureArray0);
      assertNotNull(object1);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Object object0 = JSON.parse(byteArray0, (int) (byte)0, (int) (byte)0, (CharsetDecoder) uTF8Decoder0, 1542);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = feature0;
      featureArray0[3] = featureArray0[1];
      featureArray0[4] = featureArray0[1];
      featureArray0[5] = featureArray0[1];
      featureArray0[6] = feature0;
      featureArray0[7] = featureArray0[0];
      featureArray0[8] = featureArray0[0];
      Object object0 = JSON.parse("", featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Feature feature0 = Feature.AllowComment;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Feature[] featureArray0 = new Feature[6];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      Object object0 = JSON.parse((String) null, parserConfig0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSON.parse("", 14);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = JSON.parse("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = JSON.getMixInAnnotations(parameterizedTypeImpl0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      Type type0 = JSON.getMixInAnnotations(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[2];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeatureArray0[0];
      serializerFeatureArray0[8] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONStringTo("", charArrayWriter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        jSONArray0.writeJSONString((Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("]");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        jSONArray0.writeJSONString((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Charset) null, (Object) class1, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      try { 
        JSON.writeJSONString((OutputStream) filterOutputStream0, charset0, (Object) charset0, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[23];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) propertyNamingStrategy0, serializeConfig0, serializeFilterArray0, "", 1509950721, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3089);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) objectOutputStream0, (Object) "", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSON.isValid("");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) "", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      try { 
        JSON.writeJSONString((OutputStream) pipedOutputStream0, (Object) string0, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      serializerFeatureArray0[6] = serializerFeatureArray0[3];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, (Object) null, (-1287), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteBigDecimalAsPlain;
      JSONObject jSONObject0 = new JSONObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature2;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature0;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[4] = serializerFeature3;
      String string0 = jSONObject0.toString(serializerFeatureArray0);
      assertEquals("{}", string0);
      
      boolean boolean0 = JSON.isValid(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("1.2.68", (Object) "1.2.68");
      // Undeclared exception!
      try { 
        jSONObject0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      jSONArray0.toString();
      // Undeclared exception!
      try { 
        JSON.parseArray(jSONArray0.DEFAULT_TYPE_KEY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<GenericArrayTypeImpl> class0 = GenericArrayTypeImpl.class;
      String[] stringArray0 = new String[6];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(javaBeanSerializer0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(serializerFeature0, (SerializeConfig) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, serializeFilterArray0, "", (-1316), serializerFeatureArray0);
      boolean boolean0 = JSON.isValidObject("");
      assertFalse(boolean0);
      
      String string0 = JSON.toJSONString((Object) serializeConfig1, serializerFeatureArray0);
      assertEquals("{\"asmEnable\":true,\"typeKey\":\"@type\"}", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = JSONObject.SecureObjectInputStream.fields_error;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      pascalNameFilter0.process(propertyNamingStrategy0, "can not cast to Date, value : ", (Object) null);
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, false);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[5];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) simplePropertyPreFilter0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) serializeConfig0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.serializer.SerializeConfig, write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.serializer.ASMSerializerFactory, fieldName : asmFactory, write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.util.ASMClassLoader, fieldName : classLoader, write javaBean error, fastjson version 1.2.68, class org.evosuite.instrumentation.InstrumentingClassLoader, fieldName : parent, write javaBean error, fastjson version 1.2.68, class sun.misc.Launcher$AppClassLoader, fieldName : classLoader, Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<Method> class0 = Method.class;
      String[] stringArray0 = new String[6];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) simplePropertyPreFilter0, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ConcurrentSkipListMap<SimplePropertyPreFilter, PipedInputStream> concurrentSkipListMap0 = new ConcurrentSkipListMap<SimplePropertyPreFilter, PipedInputStream>();
      TreeMap<SimplePropertyPreFilter, InputStream> treeMap0 = new TreeMap<SimplePropertyPreFilter, InputStream>((Map<? extends SimplePropertyPreFilter, ? extends InputStream>) concurrentSkipListMap0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) treeMap0, serializeConfig0, serializeFilterArray0, "true", (-2), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter1;
      Integer integer0 = new Integer((-2278));
      pascalNameFilter1.process(serializeFilterArray0[0], "true", integer0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, serializeFilterArray0, "true", 35, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SerializeConfig serializeConfig0 = new SerializeConfig(184, false);
      String[] stringArray0 = new String[6];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", (SerializeConfig) null, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeature1;
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) uTF8Decoder0, (int) (byte)0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.util.UTF8Decoder, method : isCharsetDetected
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      Charset charset0 = Charset.defaultCharset();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) serializeConfig0, serializeConfig0, (SerializeFilter[]) null, "[Skbf58f6", 65536, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.serializer.SerializeConfig, write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.serializer.ASMSerializerFactory, fieldName : asmFactory, write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.util.ASMClassLoader, fieldName : classLoader, write javaBean error, fastjson version 1.2.68, class org.evosuite.instrumentation.InstrumentingClassLoader, fieldName : parent, write javaBean error, fastjson version 1.2.68, class sun.misc.Launcher$AppClassLoader, fieldName : classLoader, create asm serializer error, verson 1.2.68, class class java.security.CodeSource
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) null, serializeConfig0, serializeFilterArray0, "", (-1290), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "1.2.68", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) pascalNameFilter0, (SerializeFilter[]) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "1.2.68", (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      serializerFeatureArray0[8] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) simplePropertyPreFilter0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[4] = serializerFeature1;
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeatureArray0[6];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", serializeConfig0, serializeFilterArray0, "1.2.68", 989, serializerFeatureArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConcurrentSkipListMap<JavaBeanSerializer, PropertyNamingStrategy> concurrentSkipListMap0 = new ConcurrentSkipListMap<JavaBeanSerializer, PropertyNamingStrategy>();
      TreeMap<JavaBeanSerializer, PropertyNamingStrategy> treeMap0 = new TreeMap<JavaBeanSerializer, PropertyNamingStrategy>((SortedMap<JavaBeanSerializer, ? extends PropertyNamingStrategy>) concurrentSkipListMap0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) treeMap0, (SerializeConfig) null, serializeFilterArray0, 2187, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TreeMap<Integer, SimplePropertyPreFilter> treeMap0 = new TreeMap<Integer, SimplePropertyPreFilter>();
      String[] stringArray0 = new String[7];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) treeMap0, (SerializeConfig) null, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", 3, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeatureArray0[0];
      serializerFeatureArray0[5] = serializerFeatureArray0[2];
      // Undeclared exception!
      JSON.toJSONBytes((Object) "", 1542, serializerFeatureArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      jSONArray0.fluentRemove((Object) jSONObject0);
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) jSONObject0, 55232, serializerFeatureArray0);
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.writeJSONString(appendable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) serializeConfig0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature2;
      serializerFeatureArray0[4] = serializerFeature0;
      SerializerFeature serializerFeature3 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[5] = serializerFeature3;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(20);
      JSON.toJSON((Object) pipedInputStream0);
      Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      String string0 = "&qD+}%y&W<// :>cU";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(string0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.NonStringKeyAsString;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.OrderedField;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.OrderedField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowISO8601DateFormat;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.SupportArrayToBean;
      featureArray0[6] = feature6;
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.setDefaultTypeKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[8];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 6, (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 6, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, 1999, 1999, (CharsetDecoder) null, (Type) class0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Object> class0 = Object.class;
      byte[] byteArray0 = new byte[5];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) 16, (int) 14, charset0, (Type) class0, featureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Feature feature0 = Feature.DisableFieldSmartMatch;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("true", featureArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Feature[] featureArray0 = new Feature[9];
      // Undeclared exception!
      try { 
        JSON.parseObject("Oj\"?_xh?/YJ \"b", (Type) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = feature0;
      featureArray0[4] = featureArray0[2];
      featureArray0[5] = featureArray0[4];
      // Undeclared exception!
      try { 
        JSON.parseObject(",u7U12rP])FEPoM_", (Type) null, parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2,u7U12rP])FEPoM_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = featureArray0[0];
      featureArray0[3] = feature0;
      featureArray0[4] = featureArray0[0];
      featureArray0[5] = featureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("toJSON error", (Type) class0, parserConfig0, 55, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<StringWriter> class0 = StringWriter.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("com.alibaba.fastjson.serializer.JSONAwareSerializer", class0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.AutoCloseSource;
      featureArray0[0] = feature0;
      featureArray0[1] = featureArray0[0];
      featureArray0[2] = featureArray0[1];
      // Undeclared exception!
      JSON.parseObject("1.2.68", class0, featureArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("}e>x", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual }, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<JSONValidator.Type> class0 = JSONValidator.Type.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("-}5zpZrKg,P[Uwz14");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) byteArrayInputStream0, (Charset) null, (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 2, line 1, column 3\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Feature[] featureArray0 = new Feature[7];
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-789), (byte)89);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) bufferedInputStream0, charset0, (Type) parameterizedTypeImpl0, (Feature[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) null, charset0, (Type) null, parserConfig0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ParserConfig parserConfig0 = ParserConfig.global;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) dataInputStream0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 4639, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) dataInputStream0, (Type) null, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 16, line 1, column 17\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(148);
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      Feature[] featureArray0 = new Feature[9];
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, (Type) parameterizedTypeImpl0, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Feature feature0 = Feature.SupportNonPublicField;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = featureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 1, 1, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 1, line 1, column 2\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 3089, 3089, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", (ParserConfig) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.autoTypeSupport", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("float", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", 3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("-Tw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      MiscCodec miscCodec0 = MiscCodec.instance;
      boolean boolean0 = serializeConfig0.put((Type) null, (ObjectSerializer) miscCodec0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSON.toJSON((Object) serializeConfig0, serializeConfig0);
      Class<Integer> class0 = Integer.class;
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializeConfig0.setTypeKey("%6f7Dz8");
      serializeConfig0.config(class0, serializerFeature0, false);
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("com.alibaba.fastjson.serializer.SerializeConfig@0000000004", (String) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) "null:", serializeConfig0);
      assertEquals("null:", object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Feature feature0 = Feature.ErrorOnEnumNotMatch;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) feature0, serializeConfig0);
      assertEquals("ErrorOnEnumNotMatch", object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Object object0 = JSON.toJSON((Object) null, serializeConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[3];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[5];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockPrintStream0, charset0, (Object) class0, serializeConfig0, (SerializeFilter[]) null, "true", 1266320455, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      Charset charset0 = Charset.defaultCharset();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes(charset0, (Object) "", (SerializeConfig) null, serializeFilterArray0, (String) null, 10, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[0];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeatureArray0[4];
      serializerFeatureArray0[6] = serializerFeatureArray0[3];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) stringWriter0, (SerializeConfig) null, (SerializeFilter[]) null, "true", (-1996), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      String[] stringArray0 = new String[6];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) serializerFeature0, (SerializeConfig) null, serializeFilterArray0, stringArray0[0], 6, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ParserConfig parserConfig0 = ParserConfig.global;
      byte[] byteArray0 = new byte[4];
      Feature[] featureArray0 = new Feature[6];
      StringWriter stringWriter0 = JSON.parseObject(byteArray0, 3089, (int) 0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 25, featureArray0);
      assertNull(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parseObject("p_~eOEcB&\"yoYlin/", (Type) null, parserConfig0, (ParseProcess) null, 2, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2p_~eOEcB&\"yoYlin/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.68", (Type) null, parserConfig0, (ParseProcess) null, 198070406, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[6];
      JSON.parseObject("", (Type) null, parserConfig0, (ParseProcess) null, (-1043), featureArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("[Skbf58f6", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 9, line 1, column 10[Skbf58f6
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parse("@type", parserConfig0, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2@type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Object object0 = JSON.parse((String) null, parserConfig0, (int) (byte)8);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SerializeWriter serializeWriter0 = new SerializeWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3089);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((Writer) serializeWriter0, (Object) pipedInputStream0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "{", serializeConfig0, serializeFilterArray0, "{", 610351562, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("1.2.68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) propertyNamingStrategy0, (-55), serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      ParserConfig parserConfig0 = new ParserConfig(false);
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, charset0, (Type) null, parserConfig0, (Feature[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      byte[] byteArray0 = new byte[5];
      Charset charset0 = Charset.defaultCharset();
      Feature[] featureArray0 = new Feature[0];
      JSONPObject jSONPObject0 = JSON.parseObject(byteArray0, 5312, (int)  (-20), charset0, (Type) parameterizedTypeImpl0, featureArray0);
      assertNull(jSONPObject0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "[Skbf58f6", serializeConfig0, serializeFilterArray0, 109, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toJSONString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("false", (Type) null, (ParserConfig) null, 15, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig0 = new SerializeConfig(1116);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      String string0 = JSON.toJSONString((Object) pascalNameFilter0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1.2.68");
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, (Object) jSONObject0, 8, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1417);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Feature[] featureArray0 = new Feature[2];
      try { 
        JSON.parseObject((InputStream) sequenceInputStream0, charset0, (Type) null, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSON.removeMixInAnnotations(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSON.removeMixInAnnotations((Type) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.addMixInAnnotations(class0, (Type) null);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      JSON.addMixInAnnotations(class0, class0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSON.addMixInAnnotations((Type) null, (Type) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("com.alibaba.fastjson.serializer.AppendableSerializer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("[bxpvO0^$Ai6o5hF:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSON.isValidArray("");
      Class<JSON> class0 = JSON.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "<#ODS\"6r#F?)X)x<'";
      stringArray0[4] = "";
      stringArray0[5] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.MapSortField;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[7] = serializerFeature7;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) simplePropertyPreFilter0, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.68, class com.alibaba.fastjson.serializer.SimplePropertyPreFilter, create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("SGi}h$,$v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = JSON.isValid("{4d9WLMac.Ll/:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = JSON.isValid("as[son.2YsmEnple");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = JSON.isValid("[Skbf58f6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = JSON.isValid("{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = JSON.isValid(")4)\"+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = JSON.isValid("([C)Ljava/math/BigInteger;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = JSON.isValid("new");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = JSON.isValid("null:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = JSON.isValid("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = JSON.isValid("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSON.isValid("1.2.68");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSON.isValidObject("%6w0XmKbM[tWN#");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%6w0XmKbM[tWN#";
      stringArray0[1] = "1.2.68";
      stringArray0[2] = "%6w0XmKbM[tWN#";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      simplePropertyPreFilter0.setMaxLevel((-2311));
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      Feature[] featureArray0 = null;
      // Undeclared exception!
      try { 
        JSON.parseObject(stringArray0[2], featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = JSON.isValid("1wfXrk)?y8LZFS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = JSON.isValid(" }^Q)bmY==^CFczY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = JSON.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 65533, 65533, (CharsetDecoder) uTF8Decoder0, (-1162));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ParserConfig parserConfig0 = ParserConfig.global;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        JSON.parseObject((InputStream) mockFileInputStream0, charset0, (Type) null, parserConfig0, (ParseProcess) null, (-2211), (Feature[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaObject(class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-36), (-2));
      Feature[] featureArray0 = new Feature[0];
      Annotation annotation0 = JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, featureArray0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) classLoader0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPObject jSONPObject0 = new JSONPObject();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONPObject0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) classLoader0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      Object object0 = JSON.toJSON((Object) jSONArray0, serializeConfig0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[23];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeatureArray0[1];
      serializerFeatureArray0[3] = serializerFeatureArray0[0];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeatureArray0[3];
      serializerFeatureArray0[7] = serializerFeatureArray0[2];
      serializerFeatureArray0[8] = serializerFeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) propertyNamingStrategy0, serializeConfig0, serializeFilterArray0, "", 1509950721, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(35);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      LinkedHashMap<String, SimplePropertyPreFilter> linkedHashMap0 = new LinkedHashMap<String, SimplePropertyPreFilter>();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      int int0 = JSON.writeJSONString((OutputStream) byteArrayOutputStream0, charset0, (Object) linkedHashMap0, serializeConfig0, serializeFilterArray0, "v0&\fXi6\"ivS<7]", (-1304), serializerFeatureArray0);
      assertEquals("{@type:\"java.util.LinkedHashMap\"}", byteArrayOutputStream0.toString());
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      String string0 = JSON.toJSONString((Object) serializerFeature0, serializeConfig0, serializeFilterArray0, "", (-2), serializerFeatureArray0);
      assertEquals("'IgnoreNonFieldGetter'", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      List<Object> list0 = JSON.parseArray((String) null, typeArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("", (Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("_", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Object> list0 = JSON.parseArray((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseArray("", class0);
      JSON.isValid("");
      MockFile mockFile0 = new MockFile("toJSON error");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) mockFile0, serializerFeatureArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("null:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : :
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) dataInputStream0, charset0, (Type) null, parserConfig0, (ParseProcess) null, 1, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 16, line 1, column 17\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PipedInputStream pipedInputStream0 = new PipedInputStream(357);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature[] featureArray0 = new Feature[2];
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, (Charset) null, (Type) class0, parserConfig0, (ParseProcess) null, 1542, featureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[6];
      Feature feature0 = Feature.SupportAutoType;
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-796), (Type) null, featureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 15, (Type) null, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      char[] charArray0 = new char[0];
      Method method0 = JSON.parseObject(charArray0, 15, (Type) null, (Feature[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = JSON.parseObject((char[]) null, 8, (Type) class0, (Feature[]) null);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Object> class0 = Object.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-17);
      Feature[] featureArray0 = new Feature[1];
      Enum<JSONPath.Operator> enum0 = JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, 447, (-1369), (Charset) null, (Type) null, parserConfig0, (ParseProcess) null, 0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 1, fastjson-version 1.2.68
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Feature[] featureArray0 = new Feature[3];
      Annotation annotation0 = JSON.parseObject((String) null, class0, featureArray0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("([C)Ljava/math/BigInteger;", (Type) null, (-501), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2([C)Ljava/math/BigInteger;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      Class<?> class1 = javaBeanSerializer0.getType();
      Feature[] featureArray0 = new Feature[9];
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject((String) null, (Type) class1, (-5223), featureArray0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("", (Type) class0, 1, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[1];
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte)20, (int) (byte)20, (CharsetDecoder) uTF8Decoder0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[0];
      Object object0 = JSON.parse(byteArray0, 3089, 3089, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Object object0 = JSON.parse((byte[]) null, (-687), 2, (CharsetDecoder) uTF8Decoder0, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-96);
      Object object0 = JSON.parse(byteArray0, (Feature[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject((String) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.deny.internal", parserConfig0, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parse("fastjson.parser.safeMode", parserConfig0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = JSON.parseObject("", class0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@type");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JSON.handleResovleTask(defaultJSONParser0, jSONObject0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.toString((SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        JSON.toJSONStringWithDateFormat("nju >]]`/#l", "fastjson.parser.deny", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "1.2.68", serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(5);
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONPObject> class0 = JSONPObject.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONPObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject("}e>x", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSON.clearMixInAnnotations();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSON.setDefaultTypeKey("k");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Integer integer0 = new Integer(26376);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) integer0, (SerializeFilter) null, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Feature[] featureArray0 = new Feature[9];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-1048), (int) 19, (CharsetDecoder) uTF8Decoder0, (Type) null, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss", (Type) null, (ParseProcess) null, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte)5, 65536, (CharsetDecoder) null, (-2040));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "", 3, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) pascalNameFilter0, (SerializeFilter[]) null, serializerFeatureArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSON.parseObject("\u0000", (Type) genericArrayTypeImpl0, (ParserConfig) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) propertyNamingStrategy0, (SerializeConfig) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Object object0 = JSON.toJSON((Object) "{4d9WLMac.Ll/:", parserConfig0);
      assertEquals("{4d9WLMac.Ll/:", object0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ((Object) null, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        JSON.parseObject("rB5v9M$8>", (Type) parameterizedTypeImpl0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but error, pos 1, line 1, column 2rB5v9M$8>
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.parse("", parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = JSON.toJSONString((Object) propertyNamingStrategy0, true);
      assertEquals("\"KebabCase\"", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(" }^Q)bmY==^CFczY", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, line 1, column 3 }^Q)bmY==^CFczY
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      // Undeclared exception!
      try { 
        JSON.writeJSONStringTo("", charArrayWriter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONArray0, serializeConfig0, serializeFilterArray0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      JSONPObject jSONPObject0 = new JSONPObject("hPZAd`[");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      // Undeclared exception!
      try { 
        JSON.writeJSONString((OutputStream) null, charset0, (Object) jSONPObject0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) "1.2.68", (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
