/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 19:04:21 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.lang.annotation.Annotation;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "writeNormal";
      stringArray0[1] = "writeNormal";
      stringArray0[2] = "writeNormal";
      stringArray0[3] = "country";
      stringArray0[4] = "writeNormal";
      stringArray0[5] = "country";
      stringArray0[6] = "org";
      stringArray0[7] = "country";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLRecoverableException0, hashMap0);
      assertEquals(8, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("false");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(2, 2, (-2028));
      UUID uUID0 = MockUUID.fromString("");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, uUID0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("_asm_list_item_deser__", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1, (-2020), 128);
      SQLDataException sQLDataException0 = new SQLDataException("_asm_list_item_deser__", "xSDf,JN>ulb-<8XDH");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "_asm_list_item_deser__", sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -14
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MinSegment");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 251);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";e*5oX|h-|s^i[`oSo", "LN]qj<mBBi@uv<j");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeAccept", "dC&1F", sQLInvalidAuthorizationSpecException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLSyntaxErrorException0, (Object) null);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -_IqO[6fMI|");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -_IqO[6fMI|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  -_IqO[6fMI|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o:|3QDLNqo");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$F");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-9223372036854775808");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-606L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o:|3QDLNqo");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2544L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -_IqO[6fMI|");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("wTb[$E-9:xLqt[yf", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)39);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. wTb[$E-9:xLqt[yf
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("Z", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning();
      boolean boolean0 = jSONPath0.remove((Object) sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("A");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a";
      stringArray0[1] = "/stackTrace/2";
      stringArray0[2] = "cou@ntry";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_Operator0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : cou@ntry
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0b/CODcx#I8((");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("E");
      jSONPath0.init();
      assertEquals("E", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONPath jSONPath0 = new JSONPath("FIELD");
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepGetPropertyValues(bigInteger0, stack0);
      assertEquals(1, stack0.size());
      assertEquals("[0]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.symbolic");
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.symbolic");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, "x *H4YC", jSONPath_NullSegement0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/7");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g4}G2fZ");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[8D*G{NDtcy?,#wPe");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('.');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but '['
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long[] longArray0 = new long[4];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("i2]>)wp>", longArray0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("write clob error", serializeConfig0, parserConfig0);
      Class<Short> class0 = Short.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, javaBeanDeserializer0, parserConfig0, "write clob error");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath jSONPath0 = new JSONPath("w=8p");
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath_MinSegment0, "w=8p");
      assertEquals("w=8p", object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_Operator0, serializeConfig0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("\"o/G.]8", serializeConfig0, parserConfig0);
      DataTruncation dataTruncation0 = new DataTruncation((-7), false, false, 0, 0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 58, (-554));
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, dataTruncation0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$Operator", true);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.BigIntegerCodec");
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, jSONPath0, (Object) null);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("w=8p");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("unsupported set operation.");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/asmFactory/classLoader/parent/classLoader/packages/javax.ejb", "Or", 3832);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("unsupported set operation.");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("unsupported set operation.");
      jSONPath_NullSegement0.apply(jSONPath0, ".", sQLSyntaxErrorException0, sQLTransactionRollbackException0);
      JSONPath jSONPath1 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.testcase.statements.reflection");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("unsupported set operation.");
      JSONPath.SizeSegment jSONPath_SizeSegment1 = new JSONPath.SizeSegment();
      Byte byte0 = new Byte((byte) (-72));
      jSONPath0.deepSet(byte0, ".", 3832, jSONPath1);
      assertEquals("unsupported set operation.", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(";", true);
      JSONPath jSONPath0 = new JSONPath(";");
      int int0 = jSONPath0.size((Object) jSONPath_PropertySegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("K,i9k261|");
      Class<SQLDataException> class0 = SQLDataException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      boolean boolean0 = jSONPath0.setPropertyValue("K,i9k261|", "K,i9k261|", 1445L, javaBeanSerializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("nin");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", ">8KP~::eGoI", hashMap0);
      boolean boolean0 = JSONPath.set((Object) jSONPath_NullSegement0, "str", (Object) sQLClientInfoException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile("Jf%)I<miiR%NY+X");
      boolean boolean0 = jSONPath0.removePropertyValue(jSONPath_SizeSegment0, "Jf%)I<miiR%NY+X", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "fastjson.parser.deny.internal");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "/-{s%-SqVLn0t=M", "'");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";");
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_MultiIndexSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<JSONPath> class0 = JSONPath.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not support jsonpath : ");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("uYSIY0");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath0.getPropertyValue(jSONPath_WildCardSegment0, "evosuite", (byte)7);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      Class<BigDecimal> class0 = BigDecimal.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("|_N][");
      Class<Object> class0 = Object.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not support jsonpath : ");
      Object object0 = jSONPath0.getArrayItem((Object) null, 5);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fied_ser");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      Object object0 = jSONPath0.getArrayItem(propertyNamingStrategy0, 0);
      assertSame(object0, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = JSONPath.extract("{\"$ref\":\"@\"}", "country");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      int int0 = jSONPath0.evalSize("country");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("~k");
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MatchSegement", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet("com.alibaba.fastjson.JSONPath$MatchSegement");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      Object object0 = JSONPath.eval((Object) javaBeanDeserializer0, "fastjson.parser.deny");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      Set<?> set0 = JSONPath.keySet(object0, "^");
      HashSet hashSet0 = (HashSet)JSONPath.eval((Object) set0, "^");
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath(";", serializeConfig0, parserConfig0);
      Object object0 = jSONPath0.eval((Object) jSONPath_MinSegment0);
      assertSame(jSONPath_MinSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(O.2Rm2kU8 t)");
      boolean boolean0 = JSONPath.eq(jSONPath0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.javaee.db", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.contains((Object) bigInteger0, "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      int int0 = JSONPath.size((Object) sQLNonTransientConnectionException0, " -_IqO[6fMI|");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("L4-", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "L4-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath(">>iTD<s[[R)G", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. >>iTD<s[[R)G
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-fjPW");
      JSONPath jSONPath0 = new JSONPath("syntax error, expect ");
      // Undeclared exception!
      jSONPath0.setPropertyValue(jSONPath0, "[u.Iv_2T)3>", (-1014497654951707614L), jSONPath_JSONPathParser0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_Operator0, "country", 4647432019745535567L, jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "setToken", (-7856755718203959621L), "fastjson");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("^");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 8, "bIe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2930L));
      longArray0[2] = long0;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) longArray0[2], "/asmFactory/classLoader/parent/classLoader/parent/packages", (Object) long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(19, 1832, 117);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_RangeSegment0, "Be\"mlp>Ya", (Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : Be\"mlp>Ya
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) class0, (Object) sQLFeatureNotSupportedException0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      JSONPath jSONPath0 = JSONPath.compile("modulANam]");
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_LIKE;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) jSONPath_Operator1, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" -_IqO[6fMI|");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(" -_IqO[6fMI|");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_NullSegement0, (Object) mockGregorianCalendar0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  -_IqO[6fMI|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.ObjectArrayCodec");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) javaBeanSerializer0, (Object) longArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("AllowArbitraryCommus");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      jSONPath0.set((Object) bigDecimal0, (Object) "Sgc");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" -_IqO[6fMI|");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) " -_IqO[6fMI|", (Object) jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  -_IqO[6fMI|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "country";
      stringArray0[1] = "country";
      stringArray0[2] = "country";
      stringArray0[3] = ":";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(sQLDataException0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[P");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("[P");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[P";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_Segment0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("S$Q)dt+2S>h4{g");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(classLoader0, (String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", but '");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      jSONPath0.removePropertyValue(javaBeanSerializer0, "q\"", true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{");
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath0, "{");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Ui", (String) null);
      JSONPath.remove((Object) sQLTransactionRollbackException0, "24Z&\"NP}laNLB}p");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("daxk");
      // Undeclared exception!
      jSONPath0.remove((Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MultiIndexSegment", (SerializeConfig) null, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_SizeSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSONPath jSONPath0 = new JSONPath("'");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("country", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<DataTruncation> class0 = DataTruncation.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<Float> class0 = Float.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[P");
      JSONPath.keySet((Object) jSONPath_JSONPathParser0, "[P");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Byte byte0 = new Byte((byte)26);
      JSONPath.keySet((Object) byte0, ".9;uZ7U8yAM,;C{,");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", (SerializeConfig) null, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath_Operator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".9;uZ7U8yAM,;C{,");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9;uZ7U8yAM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("O*mlTh/U");
      jSONPath0.isRef();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".9;uZ7U8yAM,;C{,");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9;uZ7U8yAM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(">|V_]");
      jSONPath0.init();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("country");
      Class<Annotation> class0 = Annotation.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Feature feature0 = Feature.AllowComment;
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.Labels");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(feature0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" -_IqO[6fMI|");
      JSONPath jSONPath1 = new JSONPath(" -_IqO[6fMI|", (SerializeConfig) null, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath1.getPropertyValues(jSONPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("F");
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("EV");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/ucp/path");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(jSONPath_SizeSegment0, 1849);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.deny", "fastjson.parser.autoTypeAccept", parserConfig0, (-1077374574), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("?A%}%cv+", "fastjson.parser.autoTypeAccept", parserConfig0, (-1077374588), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        JSONPath.extract("[/ZnH;0g", "[/ZnH;0g", parserConfig0, 3089, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract(", line ", "N", (ParserConfig) null, (-1786), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("b`,P", "7)FS<].", parserConfig0, 8, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2b`,P
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "#N,#XvT43M[O.X5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("j>gM35_f", "j>gM35_f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2j>gM35_f
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", but '");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("o:|3QDLNqo");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. , but '
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("QP7{");
      Class<SQLWarning> class0 = SQLWarning.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".9;uZ7U8yAM,;C{,");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "mG`BdCr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9;uZ7U8yAM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", (SerializeConfig) null, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("?mH$=;h3+N9QbET8", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ?mH$=;h3+N9QbET8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("syntax error, expect ");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Long long0 = new Long(3856L);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "error", 4814658433570175927L, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("false");
      JSONPath jSONPath1 = new JSONPath("false");
      // Undeclared exception!
      jSONPath1.deepSet(jSONPath0, "false", (-2169L), "false");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONPath jSONPath0 = new JSONPath("4[^k3~t~Z]w(/");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(javaBeanSerializer0, (String) null, arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("country", "1.2.68", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path country, segement 1.2.68
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not match enum value, ");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("not match enum value, ", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[s");
      JSONPath.containsValue((Object) jSONPath0, "[s", (Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONPath.containsValue((Object) "=_5PV<`;N9:x{\u001CVI", "DXK'_d_", (Object) stringArray0[1]);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" -+IqO[6fMI|");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) " -+IqO[6fMI|", (Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax.  -+IqO[6fMI|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "RFzIJ|0", "3I%8'qNQ>le13#\"2I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 3I%8'qNQ>le13#\"2I
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1500);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("unclosed.str", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[m");
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "[m", objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) sQLRecoverableException0, "Q1H,mNNQuoj)/", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("cTunCry");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cTunCry";
      stringArray0[1] = " UvcI/+z";
      stringArray0[2] = "cTunCry";
      Object object0 = JSONPath.reserveToObject(jSONPath0, stringArray0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(93);
      jSONPath0.deepSet(object0, "", (-8165637398350707645L), jSONPath_ArrayAccessSegment0);
      assertEquals("cTunCry", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-535), (-535), (-3144));
      JSONPath jSONPath0 = JSONPath.compile("Jf%)I<miiR%NY+X");
      jSONPath0.deepSet((Object) null, "like", (-466L), jSONPath_RangeSegment0);
      assertEquals("Jf%)I<miiR%NY+X", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("counry");
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, stringArray0);
      jSONPath0.deepScan(jSONArray0.DEFAULT_GENERATE_FEATURE, "counry", jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("false");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, jSONPath0, (-1718902736));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("stackTrace");
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("classLoader", stringArray0);
      boolean boolean0 = jSONPath0.setArrayItem(jSONPath0, jSONArray0, 526, "classLoader");
      assertEquals(527, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeSupport", false);
      JSONPath jSONPath0 = JSONPath.compile("ll/`$(iRwQd%i");
      jSONPath_PropertySegment0.setValue(jSONPath0, parserConfig0, (Object) null);
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("lrexL", false);
      JSONPath jSONPath0 = JSONPath.compile("lrexL");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("~-W&2lGmrWZ3>a");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, sQLFeatureNotSupportedException0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/10");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[PbzqO~");
      Long long0 = new Long((-4207865850564917696L));
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. [PbzqO~
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(" Uvc/+z");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("zt[*#;Pj");
      Set<?> set0 = jSONPath0.keySet((Object) "_aJ");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=_5PV<`;N9:x{\u001CVI");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=_5PV<`;N9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -_IqO[6fMI|");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("rBg}/;", "eH!4I", (-2522));
      JSONPath jSONPath1 = new JSONPath("<");
      boolean boolean0 = jSONPath1.set((Object) jSONPath0, (Object) sQLTimeoutException0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/stackTrace/10", "/stackTrace/10", jSONPath_Operator0);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = jSONPath0.set((Object) jSONPath_StringOpSegement0, (Object) bigInteger0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      Double double0 = new Double((-5029.0));
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-32), (-32), (-32));
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) double0, (Object) jSONPath_RangeSegment0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("parser");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1389), 585, (-1389));
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) jSONPath_RangeSegment0, false);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("-", (SerializeConfig) null, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException("-");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) sQLDataException0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{W{Ui[c");
      Float float0 = new Float((-1000.48528));
      jSONPath0.arrayAdd((Object) float0, (Object[]) null);
      assertEquals("{W{Ui[c", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1500);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("unclose.str", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.containsValue((Object) serializeConfig0, (Object) "unclose.str");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MinSegment");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("UAtbyac3R ", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("B");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("w=8p", false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath jSONPath0 = new JSONPath("w=8p");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, jSONPath_PropertySegment0, jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$PropertySegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Object object0 = JSONPath.reserveToObject(sQLDataException0, (String[]) null);
      assertEquals("java.sql.SQLDataException", object0.toString());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", but '");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray((Object) null, stringArray0);
      Set<?> set0 = jSONPath0.keySet(object0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(", but '");
      LinkedHashSet<JavaBeanDeserializer> linkedHashSet0 = new LinkedHashSet<JavaBeanDeserializer>();
      int int0 = jSONPath0.evalSize(linkedHashSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(";", true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/parent/classAssertionStatus");
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_RLIKE");
      boolean boolean0 = jSONPath0.removePropertyValue("NOT_RLIKE", "OEXbM>DJ(fh~EIn", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray((Object) null, stringArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      jSONPath0.deepSet(object0, "country", 8963398325558730460L, propertyNamingStrategy0);
      assertEquals("country", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("cou@ntry");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("@type", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*", hashMap0);
      jSONPath0.deepSet(sQLClientInfoException0, "duYB}K**+wJ J0^w", 3089, sQLClientInfoException0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("modulANam]");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepScan(jSONPath_Operator0, "modulANam]", vector0);
      assertEquals("modulANam]", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("cou@ntry");
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, stringArray0);
      jSONPath0.deepScan(jSONArray0, "yyyy-MM-dd HH:mm:ss", jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("+IeXXw", hashMap0);
      JSONPath jSONPath0 = new JSONPath("illegal ref, ");
      SQLDataException sQLDataException0 = new SQLDataException("{", "+IeXXw", 105, sQLClientInfoException0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("{", true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLDataException0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLTimeoutException0, sQLTimeoutException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path illegal ref, , segement {
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Short short0 = new Short((short)2312);
      boolean boolean0 = JSONPath.eqNotNull(short0, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Double double0 = new Double((-3635.0));
      boolean boolean0 = JSONPath.eq(bigDecimal0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Integer integer0 = new Integer(124);
      Double double0 = Double.valueOf((double) 81);
      boolean boolean0 = JSONPath.eqNotNull(integer0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Double double0 = Double.valueOf((-1695.81359));
      boolean boolean0 = JSONPath.eqNotNull(double0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Double double0 = new Double(1.0);
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Long long0 = new Long((-2930L));
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer integer0 = new Integer(91);
      Double double0 = Double.valueOf((double) 91);
      boolean boolean0 = JSONPath.eqNotNull(double0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((-1580386065683472715L), bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(989, 3089);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Integer integer0 = new Integer((-3361));
      boolean boolean0 = JSONPath.eqNotNull(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Long long0 = new Long((-2930L));
      BigDecimal bigDecimal0 = new BigDecimal(5884.347);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.eq(bigDecimal0, "LIKE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("I)t?7S._^DT", "unclosed.str");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      boolean boolean0 = JSONPath.eq(sQLTimeoutException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Long long0 = new Long(848L);
      boolean boolean0 = JSONPath.eq((Object) null, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONPath jSONPath0 = new JSONPath("country", serializeConfig0, parserConfig0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(classLoader0, stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.lang.Class
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("util");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_WildCardSegment0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(set0);
      assertFalse(collection0.contains("util"));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("j\fB(UDWGWBv", 2109L, jSONPath_Operator0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_IntOpSegement0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("r");
      Object object0 = JSONPath.reserveToArray("_aJ", (String[]) null);
      Double double0 = new Double((-575));
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, object0, (-575), double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, "_aJ", 3089, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/stackTrace/10", "/stackTrace/10", jSONPath_Operator0);
      Object object0 = jSONPath0.eval((Object) jSONPath_StringOpSegement0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2930L));
      longArray0[2] = long0;
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      SQLWarning sQLWarning0 = new SQLWarning("/asmFactory/classLoader/parent/classLoader/parent/defaultDomain", "/asmFactory/classLoader/parent/classLoader/parent/defaultDomain", 15, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/asmFactory/classLoader/parent/classLoader/parent/defaultDomain", "/asmFactory/classLoader/parent/classLoader/parent/defaultDomain", sQLWarning0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, sQLNonTransientConnectionException0, longArray0[2]);
      assertTrue(object0.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Long long0 = new Long((-5808507395130640125L));
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement(";", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile(";");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, longArray0[1], (Object) null, bigInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("E");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("/asmFactory/classLoader/parent/classLoader/parent/package2certs", "/stackTrace/2", false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RlikeSegement0, jSONPath_RlikeSegement0, false);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, "E", "`MrT9)s8n6n[~fR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("classloader", "fDVH_1V<i3(U+-");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("org", sQLTransientConnectionException0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = new JSONPath("u,=XbtR%");
      Double double0 = new Double(3205);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, double0, sQLRecoverableException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("coupty");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("LIKE", jSONPath_MinSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/ucp/lmap/file:///usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64/jre/lib/ext/jaccess.jar/metaIndex");
      long[] longArray0 = new long[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("LIKE", "coupty", 68, longArray0, sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLIntegrityConstraintViolationException0, batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("andIncrement");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "M~ou@'\fzC3W}]";
      stringArray0[1] = "M~ou@'\fzC3W}]";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("'&<GUZ(v[", "M~ou@'\fzC3W}]", "8Ei,WzXd76!~nBV+", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      JSONPath jSONPath0 = new JSONPath("R ");
      Integer integer0 = new Integer(17);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, integer0, "8Ei,WzXd76!~nBV+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.autoTypeSupport", jSONPath0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      MockThrowable mockThrowable0 = new MockThrowable("LT");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("yyyy-MM-dd HH:mm:ss", "fastjson.parser.autoTypeAccept", (-1), mockThrowable0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLTimeoutException0);
      assertNotNull(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(", but '");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement(", but '", 719.345149, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_DoubleOpSegement0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, bigInteger0, sQLTransactionRollbackException0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(" -_IqO[6fMI|");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement(" -_IqO[6fMI|");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, " -_IqO[6fMI|", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Short short0 = new Short((short) (-23532));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/stackTrace/10", "/stackTrace/10", jSONPath_Operator0);
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, short0, serializeConfig0, uUID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("o:|3QDLNqo", ":<Xm#'V97", jSONPath_Operator0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement1 = new JSONPath.StringOpSegement("ii8ufC;.W<z1T=.s", "o:|3QDLNqo", jSONPath_Operator1);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath(":<Xm#'V97", serializeConfig0, parserConfig0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringOpSegement0);
      boolean boolean0 = jSONPath_StringOpSegement1.apply(jSONPath0, bigInteger0, "o:|3QDLNqo", jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/stackTrace/10", "/stackTrace/10", jSONPath_Operator0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, bigDecimal0, "/stackTrace/10", jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("*", "ngiY.a+7~5]mU'#&H3G", true);
      JSONPath jSONPath0 = new JSONPath("/U3OPZtsi7TH");
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "/U3OPZtsi7TH", jSONPath_MultiIndexSegment0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("wq/K8Eby.6QOwV1v");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wq/K8Eby.6QOwV1v";
      stringArray0[1] = "wq/K8Eby.6QOwV1v";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("'", stringArray0, false);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("6QOwV1v", "6QOwV1v", true);
      SQLDataException sQLDataException0 = new SQLDataException("'");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      Object object0 = JSONPath.reserveToArray(jSONPath_FilterSegment0, stringArray0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, batchUpdateException0, sQLDataException0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "country";
      stringArray0[1] = "H`s\"x$`$8?&v";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("H`s\"x$`$8?&v", "country", "H`s\"x$`$8?&v", stringArray0, false);
      Byte byte0 = new Byte((byte)94);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath_MinSegment0, jSONPath_MinSegment0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("packages", "?z|\t{6WTX\u0002e(hpX+", (String) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny", "nmlvh", "%xX2sc-vP^?v", (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("Sg~%eLCGTP0Z^", (String) null, "tri6b_~", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("country", jSONPath_MinSegment0, jSONPath_Operator0);
      Integer integer0 = new Integer(68);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, "country", jSONPath0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("Or", 3228.2, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("WmI)]kM", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, serializeConfig0, parserConfig0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("j\fB(UDWGWBv", 2109L, jSONPath_Operator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson", (Throwable) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, sQLNonTransientConnectionException0, jSONPath_WildCardSegment0, sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("", 989, jSONPath_Operator0);
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath_IntOpSegement0, "size");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, "country", jSONPath_MultiPropertySegment0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("NOT_LIKE", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("NOT_LIKE");
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-2885L), 266);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("udT00$Ci<pP", true);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_PropertySegment0, bigDecimal0, "0W1{rcE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ll/`$(iRwQd%i";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("ll/`$(iRwQd%i", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath("g7#lq|WofqDr7%]`Tbe");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("null", (String) null, (-1783));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("udT00$Ci<pP", (String) null, sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("0W1{rcE", "null", sQLNonTransientConnectionException0);
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) (-1783), 0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath0, sQLDataException0, bigDecimal0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("com.alibaba.fastjson.JSONPath$MaxSegment", stringArray0, true);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, (Object) null, "com.alibaba.fastjson.JSONPath$MaxSegment", jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Long long0 = new Long(4186L);
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("like", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("like");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<Short> class0 = Short.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLClientInfoException0, javaBeanSerializer0, uUID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("like", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("like");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<Short> class0 = Short.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, sQLClientInfoException0, javaBeanSerializer0, uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("parser", 3056L, 2964L, false);
      JSONPath jSONPath0 = new JSONPath("/u_r_ls");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("\":", false);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "parser", jSONPath_PropertySegment0, "\":");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("country");
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("country", (long[]) null, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntInSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "country", "country");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(47);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("L(`JyKD7RHR6H/@&Qi[", sQLTransientException0, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("L(`JyKD7RHR6H/@&Qi[", serializeConfig0, parserConfig0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLFeatureNotSupportedException0, jSONPath0, "L(`JyKD7RHR6H/@&Qi[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com", "com", true);
      JSONPath jSONPath0 = new JSONPath("[|;}");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "com", sQLClientInfoException0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("country");
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("3F:fT9aBrOt");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, "country", "3F:fT9aBrOt", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(".9;uZ7U8yAM,;C{,");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("mG`Bd<r", false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(109, 36, 116);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_PropertySegment0, ".9;uZ7U8yAM,;C{,");
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2028), (-2028), 105);
      JSONPath jSONPath0 = new JSONPath("b`,P");
      Integer integer0 = new Integer(2996);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, integer0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[9];
      Object object0 = JSONPath.extract("", "/stackTrace/0", parserConfig0, 989, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      JSONScanner jSONScanner0 = new JSONScanner("invalid comment", 4);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("like", true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("d|Q{hY#pN![Y", "like", 65);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("d|Q{hY#pN![Y");
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLFeatureNotSupportedException0, sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: d|Q{hY#pN![Y", sQLIntegrityConstraintViolationException0.toString());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Float float0 = new Float(721.36163F);
      Long long0 = new Long((-1814L));
      int int0 = JSONPath.compare(float0, long0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Float float0 = new Float(1918.6659F);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, jSONPath_SizeSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$SizeSegment cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Float float0 = new Float(721.36163F);
      Double double0 = new Double(721.36163F);
      int int0 = JSONPath.compare(double0, float0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Integer integer0 = new Integer(3822);
      Double double0 = Double.valueOf((-228.3));
      int int0 = JSONPath.compare(double0, integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Double double0 = new Double(3228.2);
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, jSONPath_SizeSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$SizeSegment cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object object0 = JSONPath.reserveToArray((Object) null, (String[]) null);
      UUID uUID0 = MockUUID.fromString("B@");
      // Undeclared exception!
      try { 
        JSONPath.compare(((JSON) object0).DEFAULT_PARSER_FEATURE, uUID0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.UUID cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Integer integer0 = new Integer(3822);
      Double double0 = Double.valueOf((double) 113);
      int int0 = JSONPath.compare(integer0, double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("c2{/4K b7;");
      Long long0 = new Long((-3840L));
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        JSONPath.compare(bigDecimal0, jSONPath0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath cannot be cast to java.math.BigDecimal
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1416), 47, (-3939));
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_RangeSegment0, jSONPath_RangeSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$RangeSegment cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_Operator0, vector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to java.lang.Enum
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("s$q");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLTransactionRollbackException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("5ki$Ii.");
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray(jSONPath0, stringArray0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      Object object1 = jSONPath_MaxSegment0.eval(jSONPath0, "5ki$Ii.", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("NS,|)sZTeg}");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "NS,|)sZTeg}", batchUpdateException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":o");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Long long0 = new Long((-3851359326990528739L));
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.assertion");
      int int0 = jSONPath0.size((Object) long0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.runtime.util");
      boolean boolean0 = jSONPath0.remove((Object) "writeNormal");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o:|3QDLNqo");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals(":|3QDLNqo", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("hashCode");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("as", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("between");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("LIKE");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not close json text, token : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m>JU%=CDK");
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=_5PV<`;N9:x{\u001CVI");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not close json text, token : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'%+cd_9oKkSIP/z");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but 'z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6zp");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(3102L);
      assertEquals(3108.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("F3)^V");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-50675760));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("4uG},d_RMnv3");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(4L, object0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -_IqO[6fMI|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" -_IqO[6fMI|");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|x=,_E[Q&;9S");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("|x=,_E[Q&;9S", 3.0, jSONPath_Operator0);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_DoubleOpSegement0);
      assertSame(jSONPath_Filter0, jSONPath_DoubleOpSegement0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "country";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$FilterGroup";
      stringArray0[2] = "country";
      stringArray0[3] = "NT[1ia.E7[N&x5<";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath_MinSegment0, stringArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("(O.2Rm2kU8 t)");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}@@3H?/(Ht");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("^Lbog3k(*!(Wtf]");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("[cSDiTk9cw0]_)G_");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.explain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '), but '_'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("@type");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("GT");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?z|\t{6WTX\u0002e(hpX+");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '(, but 'z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(4);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("$v", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) parserConfig0);
      assertFalse(set0.contains("$v"));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("{");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("-", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Map<String, Object> map0 = JSONPath.paths((Object) classLoader1, serializeConfig0);
      //  // Unstable assertion: assertEquals(3451, map0.size());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "country");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.contains((Object) bigInteger0, "false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(1500);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("unclosed.str", serializeConfig0, parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) propertyNamingStrategy0, (Object) "I)t?7S._^DT");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("wq/K8Eby.6QOwV1v", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) mockGregorianCalendar0, (Object) "wq/K8Eby.6QOwV1v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("wq/K8Eby.6QOwV1v", serializeConfig0, parserConfig0);
      Object object0 = JSONPath.reserveToArray(parserConfig0, (String[]) null);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath0.set(object0, (Object) jSONPath_SizeSegment0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("RLIKE", "RLIKE", 3263);
      boolean boolean0 = JSONPath.set((Object) sQLInvalidAuthorizationSpecException0, "/", (Object) "h'62IMW]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray((Object) null, stringArray0);
      // Undeclared exception!
      try { 
        jSONPath0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) propertyNamingStrategy0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath jSONPath0 = JSONPath.compile("~");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_Operator0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$FilterGroup");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.JSONPath$FilterGroup", "com.alibaba.fastjson.JSONPath$FilterGroup");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com", "com.alibaba.fastjson.JSONPath$FilterGroup", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTimeoutException0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$FilterGroup
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.TypeReference");
      Object[] objectArray0 = new Object[4];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("{");
      String[] stringArray0 = new String[0];
      jSONPath0.arrayAdd((Object) "{", (Object[]) stringArray0);
      assertEquals("{", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("LXUx3S^t/w[xRBxHE>]", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(910, 910, 910);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, parserConfig0);
      boolean boolean0 = jSONPath0.containsValue(object0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Y=UmQQ^,Rn|$_Q");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("C),@ID^?", "?kDQN?f/", sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLNonTransientConnectionException0, (Object) sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("~");
      boolean boolean0 = jSONPath0.containsValue((Object) jSONPath0, (Object) "P7D`+1oCB>4l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("_asm_list_item_deser__", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.containsValue((Object) "_asm_list_item_deser__", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Object object0 = JSONPath.reserveToArray(parserConfig0, (String[]) null);
      boolean boolean0 = jSONPath0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/10");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      boolean boolean0 = jSONPath0.contains((Object) sQLRecoverableException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("between");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("and");
      boolean boolean0 = jSONPath0.contains((Object) "and");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("0", "/stackTrace/2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("^", "^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2^
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("a_d6");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(4010);
      JSONPath jSONPath0 = new JSONPath("unclosed.str", serializeConfig0, (ParserConfig) null);
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      JSONPath jSONPath1 = new JSONPath("*");
      // Undeclared exception!
      try { 
        jSONPath1.size((Object) jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("country");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("country", "country", false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("@oIzNvFB%}Q;*[URu/");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, jSONPath_RlikeSegement0, sQLIntegrityConstraintViolationException0);
      assertNotNull(hashSet0);
      assertEquals(4, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("", (-435));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("", pattern0, jSONPath_Operator0);
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("eBeanCFntext", "", true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RegMatchSegement0, jSONPath_RlikeSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("`MrT9)s8n6n[~fR");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UY t?uigUd6HCj";
      stringArray0[1] = "`MrT9)s8n6n[~fR";
      stringArray0[2] = "UY t?uigUd6HCj";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "UY t?uigUd6HCj", "", jSONPath_MultiPropertySegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("util");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("util", pattern0, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("_|qS/q%w-*s");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_FilterSegment0, pattern0, "util");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&qpxSnBIK(=7y");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NotNullSegement0);
      assertSame(jSONPath_NotNullSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1602));
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$MinSegment");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      Short short0 = new Short((short) (-23532));
      boolean boolean0 = jSONPath0.set((Object) "/stackTrace/10", (Object) short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("keySet");
      JSONPath jSONPath0 = JSONPath.compile("keySet");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("imyrhza", "imyrhza", 151);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, "keySet", "keySet");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.DoubleSerializer", serializeConfig0, parserConfig0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "com.alibaba.fastjson.serializer.DoubleSerializer", parserConfig0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("security", "/asmFactory/classLoader/parent/classLoader/parent/package2certs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2security
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Integer integer0 = new Integer(124);
      boolean boolean0 = JSONPath.containsValue((Object) integer0, "R ", (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Integer integer0 = new Integer(91);
      int int0 = JSONPath.size((Object) integer0, "com.alibaba.fastjson.JSONPath$JSONPathParser");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.instrumentation.testability");
      String string0 = jSONPath0.getPath();
      assertEquals("/asmFactory/classLoader/parent/classLoader/packages/org.evosuite.instrumentation.testability", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Map<String, Object> map0 = JSONPath.paths((Object) bigInteger0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/10");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) null, "L(`JyKD7RHR6H/@&Qi[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONPath.arrayAdd((Object) null, "/ucp/lmap/file:///usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64/jre/lib/ext/localedata.jar/jar/inflaterCache/0", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_MaxSegment0, "toString");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) serializeConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }
}
