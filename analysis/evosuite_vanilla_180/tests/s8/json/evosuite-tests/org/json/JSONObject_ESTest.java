/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 18:04:39 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.TrayIcon;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Proxy;
import java.security.KeyRep;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.GroupLayout;
import javax.tools.DocumentationTool;
import javax.tools.StandardLocation;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9/Q2(';kN?");
      assertEquals("9/Q2(';kN?", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("138.369557/1k0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9''tI*Q6;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"''tI*Q6;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|Ew^#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.indent(charArrayWriter0, 20);
      assertEquals(20, charArrayWriter0.size());
      assertEquals("                    ", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("138.349557110", (-1379.048F));
      try { 
        jSONObject0.getBigInteger("138.349557110");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("-0");
      JSONObject jSONObject1 = jSONObject0.append("get", mockFileWriter0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "get";
      stringArray0[3] = "get";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short) (-247));
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONObject jSONObject1 = jSONObject0.accumulate("u", sequenceInputStream0);
      Object object0 = jSONObject1.remove("u");
      assertSame(sequenceInputStream0, object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<BigInteger, ObjectInputStream> hashMap0 = new HashMap<BigInteger, ObjectInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = jSONObject0.optString("p#WVBN7n)JVY-?D +", (String) null);
      assertNull(string0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put("is", (Collection<?>) linkedList0);
      String string0 = jSONObject1.optString("is");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("");
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Number number0 = jSONObject0.optNumber("'P.bdhSbGR5]&7n", (Number) bigDecimal0);
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Short, MockPrintWriter> hashMap0 = new HashMap<Short, MockPrintWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-10L));
      Number number0 = jSONObject0.optNumber("8l|qYLSx%hG4?=", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Character, Locale.FilteringMode> hashMap0 = new HashMap<Character, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("Stepping back two steps is not supported", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      int int0 = jSONObject0.optInt("Expected a ':' after a key", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      int int0 = jSONObject0.optInt("y|\"]794C*LH");
      assertEquals(1, jSONObject0.length());
      assertEquals((-1385), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<RowIdLifetime, RowIdLifetime> hashMap0 = new HashMap<RowIdLifetime, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("is", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("138.349557110", (-1379.048F));
      float float0 = jSONObject0.optFloat("138.349557110");
      assertEquals((-1379.048F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("138.349557110", (-840.15839725));
      assertEquals((-840.15839725), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("_K5(rkhK$~C&!],", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.put("Null key.", true);
      boolean boolean0 = jSONObject0.optBoolean("Null key.");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1767, 1767, mockRandom0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("islength", bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<RowIdLifetime, RowIdLifetime> hashMap0 = new HashMap<RowIdLifetime, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal((String) null, (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<RowIdLifetime, RowIdLifetime> hashMap0 = new HashMap<RowIdLifetime, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("138.34955711", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<WebParam.Mode> linkedList0 = new LinkedList<WebParam.Mode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject0.putOnce("HA+hM", jSONArray0);
      jSONObject0.opt("HA+hM");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      jSONObject0.put("", (Collection<?>) linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("o6q8*3", 0.0F);
      boolean boolean0 = jSONObject0.isNull("o6q8*3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("y|\"]794C*LH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0.0F);
      long long0 = jSONObject0.getLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Desktop.Action, RoundingMode> hashMap0 = new HashMap<Desktop.Action, RoundingMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("JSON does not allow non-finite numbers.", (float) 3147);
      long long0 = jSONObject0.getLong("JSON does not allow non-finite numbers.");
      assertEquals(3147L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.putOnce("Null key.", bigInteger0);
      jSONObject0.getInt("Null key.");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("138.349557110", (-1379.048F));
      int int0 = jSONObject1.getInt("138.349557110");
      assertEquals((-1379), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(1L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.put("z&.J}onNAtax}+w:hC", (float) 1L);
      jSONObject0.getFloat("z&.J}onNAtax}+w:hC");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0.0F);
      double double0 = jSONObject0.getDouble("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(1L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.put("z&.J}onNAtax}+w:hC", (float) 1L);
      jSONObject0.getDouble("z&.J}onNAtax}+w:hC");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("to", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 0, 3113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("_ ", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.quote("JSONArray initial value should be a string or collection or array.", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("istoString");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<TrayIcon.MessageType, OutputStreamWriter> hashMap0 = new HashMap<TrayIcon.MessageType, OutputStreamWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.put("tr", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-1807));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "j/gaXbBJprT+");
      try { 
        jSONObject0.put("j/gaXbBJprT+", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 804.6695578219);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, "' and instead saw ''");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("toC");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1499);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("_ ", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name _ , locale fr_FR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(";C", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer(69);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(integer0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-2316));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2316
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<BigInteger, SocketFlow.Status> hashMap0 = new HashMap<BigInteger, SocketFlow.Status>();
      BigInteger bigInteger0 = BigInteger.TEN;
      SocketFlow.Status socketFlow_Status0 = SocketFlow.Status.ALREADY_CREATED;
      hashMap0.put(bigInteger0, socketFlow_Status0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.increment("m97a.");
      StringWriter stringWriter0 = new StringWriter(2439);
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, (-3722), 114);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float((double) 3147);
      StringWriter stringWriter0 = new StringWriter(39);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.write((Writer) stringWriter0, 70, 32);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "C=U55,bf4tNSj");
      try { 
        jSONObject0.write((Writer) charArrayWriter0, 3922, 3922);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(9);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 100);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write((Writer) bufferedWriter0, (-634), 1117);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, 48, 125);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.put("C", (Map<?, ?>) null);
      jSONObject0.write((Writer) charArrayWriter0, 456, 12);
      assertEquals(37, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = JSONObject.wrap(byteArrayOutputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3147);
      Object object0 = JSONObject.wrap(bigDecimal0);
      assertSame(object0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Byte byte0 = new Byte((byte)111);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)111, object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.wrap(" at ");
      assertEquals(" at ", object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      Object object0 = JSONObject.wrap(roundingMode0);
      assertSame(roundingMode0, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float((-357.88));
      JSONObject.testValidity(float0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("A JSONObject text must begin with '{'");
      assertEquals("A JSONObject text must begin with '{'", object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("+yPlyLK%0i+{NS^PE[");
      assertEquals("+yPlyLK%0i+{NS^PE[", object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("\"", (Writer) charArrayWriter0);
      assertEquals(4, charArrayWriter0.size());
      assertEquals("\"\\\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("j/gaXbBJprT+", (Writer) charArrayWriter0);
      assertEquals(14, charArrayWriter0.size());
      assertEquals("\"j/gaXbBJprT+\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("", (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JSONObject jSONObject0 = new JSONObject(dataInputStream0);
      JSONObject jSONObject1 = jSONObject0.putOnce("Null key.", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("37mfb6lL[7", "37mfb6lL[7");
      assertEquals("37mfb6lL[7", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("1{Nc(gf#Xw^p");
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("JSONArray initial value should be a string or collection or array.", "JSONArray initial value should be a string or collection or array.");
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optNumber("JSONArray initial value should be a string or collection or array.", (Number) bigInteger0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "j/gaXbBJprT");
      jSONObject0.put("j/gaXbBJprT", (-1379.05F));
      Number number0 = jSONObject0.optNumber("j/gaXbBJprT");
      jSONObject0.optNumber("j/gaXbBJprT", number0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3045);
      Number number0 = jSONObject0.optNumber("pop", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("138.349557110", (-1379.048F));
      long long0 = jSONObject0.optLong("138.349557110", 1L);
      assertEquals((-1379L), long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      jSONObject0.put("", (Collection<?>) linkedList0);
      long long0 = jSONObject0.optLong("", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      long long0 = jSONObject0.optLong("H,:3=)jZro", 2884L);
      assertEquals(2884L, long0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("138.369557/1k0", (-1379.048F));
      int int0 = jSONObject0.optInt("138.369557/1k0", 2416);
      assertEquals((-1379), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      int int0 = jSONObject0.optInt("j/gaXbBJprT+", 44);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("getgetCountry", 1454.5413F);
      assertEquals(1454.5413F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      double double0 = jSONObject0.optDouble("4E=", (double) 0L);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("138.369557/1k0", (-1379.048F));
      boolean boolean0 = jSONObject0.optBoolean("138.369557/1k0", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("C", (Map<?, ?>) null);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      Component.BaselineResizeBehavior component_BaselineResizeBehavior1 = jSONObject0.optEnum(class0, "C", component_BaselineResizeBehavior0);
      assertSame(component_BaselineResizeBehavior0, component_BaselineResizeBehavior1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Month> class0 = Month.class;
      Month month0 = Month.OCTOBER;
      Month month1 = jSONObject0.optEnum(class0, "no", month0);
      assertSame(month1, month0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt("HA+hM");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "j/gaXbBJprT+");
      jSONObject0.opt((String) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double double0 = (Double)JSONObject.stringToValue("138.349557110");
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
      
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("#/", (Collection<?>) linkedList0);
      boolean boolean0 = jSONObject1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      try { 
        jSONObject0.getBoolean("y|\"]794C*LH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<RowIdLifetime, RowIdLifetime> hashMap0 = new HashMap<RowIdLifetime, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      jSONObject0.put("NAmUl|", (Collection<?>) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("NAmUl|");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Thread.State> class0 = Thread.State.class;
      jSONObject0.optEnum(class0, (String) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote(" 5| ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(1L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      String string0 = jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("138.349557110");
      assertEquals(138.34955711, object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(2098);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.writeValue(charArrayWriter0, linkedList0, 34, 47);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, object0, 110, 110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = new JSONObject(locale0);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<GroupLayout.Alignment, BigDecimal> hashMap0 = new HashMap<GroupLayout.Alignment, BigDecimal>();
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.LEADING;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      hashMap0.put(groupLayout_Alignment0, bigDecimal0);
      JSONArray jSONArray1 = jSONArray0.put(87, (Map<?, ?>) hashMap0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = JSONObject.wrap(bigInteger0);
      assertSame(bigInteger0, object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("13.3495710");
      Object object1 = JSONObject.wrap(object0);
      assertEquals(13.349571, object1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-51));
      Float float0 = new Float(0.0F);
      hashMap0.put(byte0, float0);
      JSONObject jSONObject1 = jSONObject0.put("KlC<@xW^MvG~~", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)84);
      linkedList0.add(short0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<GroupLayout.Alignment, BigDecimal> hashMap0 = new HashMap<GroupLayout.Alignment, BigDecimal>();
      jSONArray0.put(87, (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("] is not an enum of type ", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-1");
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("138.349557110");
      assertEquals(138.34955711, number0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0000");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-36.05080417879689");
      assertEquals((byte) (-36), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("#/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [#/] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-0");
      assertEquals(-0.0, object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("I,E");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("8}@WG0&anf(2{et=8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.similar("isnegate");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      try { 
        jSONObject0.getBigDecimal("z&.J}onNAtax}+w:hC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.get("2:)/C@Gq_a&kZvlE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote((String) null, (Writer) charArrayWriter0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("org.json.JSONArray", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(1733);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = jSONObject0.putOnce("Null key.", bigInteger0);
      Integer integer0 = new Integer(354);
      try { 
        jSONObject1.putOnce("Null key.", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"Null key.\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("`FxRv#1", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unable to increment [", false);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.add((Short) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("138.349557110", (-1379.048F));
      String string0 = jSONObject0.optString("138.349557110", "138.349557110");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(2077L);
      jSONObject0.append("7u|`fkx?Y0-/", bigDecimal0);
      Number number0 = jSONObject0.optNumber("7u|`fkx?Y0-/", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("A JSONObject text must end with '}'", "A JSONObject text must end with '}'");
      jSONObject1.optNumber("A JSONObject text must end with '}'");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("isnegate", "isnegate");
      long long0 = jSONObject1.optLong("isnegate");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2470);
      jSONObject0.increment("138.34957110");
      long long0 = jSONObject0.optLong("138.34957110");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JSONObject jSONObject1 = jSONObject0.append("get", bigDecimal0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("get");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("C");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("t$(", "t$(");
      int int0 = jSONObject1.optInt("t$(");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("]Jz", 32);
      int int0 = jSONObject0.optInt("]Jz");
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<RowIdLifetime, RowIdLifetime> hashMap0 = new HashMap<RowIdLifetime, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("#xL$TDrnnTrW/:{", (Object) "#xL$TDrnnTrW/:{");
      float float0 = jSONObject0.optFloat("#xL$TDrnnTrW/:{");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("138.349557110", (-1379.048F));
      float float0 = jSONObject1.optFloat("138.349557110", (-1.0F));
      assertEquals((-1379.048F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject1 = jSONObject0.put("pqDMv>Nphq", (Map<?, ?>) hashMap0);
      float float0 = jSONObject1.optFloat("pqDMv>Nphq", (-24.92F));
      assertEquals((-24.92F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("138.349557110", false);
      double double0 = jSONObject0.optDouble("138.349557110", 67.3);
      assertEquals(67.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = jSONObject0.put("z&.J}onNAtax}+w:hC", (float) 0L);
      jSONObject1.optDouble("z&.J}onNAtax}+w:hC", (double) 0L);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<RowIdLifetime, RowIdLifetime> hashMap0 = new HashMap<RowIdLifetime, RowIdLifetime>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("#xL$TDrnnTrW/:{", (Object) "#xL$TDrnnTrW/:{");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("#xL$TDrnnTrW/:{", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = jSONObject0.optBigInteger("$r?!RKK>v`^5@<P+oX", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("138.3495J57110", (-1379.048F));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject1.optBigInteger("138.3495J57110", bigInteger0);
      assertEquals((short) (-1379), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<BigInteger, SocketFlow.Status> hashMap0 = new HashMap<BigInteger, SocketFlow.Status>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.increment("m97a.");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("m97a.", bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("138.349557110", (-1379.048F));
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("138.349557110", bigDecimal0);
      assertEquals((short) (-1379), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("#/", (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("#/", bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.put("Null key.", false);
      boolean boolean0 = jSONObject0.optBoolean("Null key.");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject1 = jSONObject0.put("pqDMvj>Nphq", (Map<?, ?>) hashMap0);
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      try { 
        jSONObject1.getEnum(class0, "pqDMvj>Nphq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not an enum of type java.io.StringWriter@0000000009.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Short short0 = new Short((short)47);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("KlC<@xW^MvG~~", (Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(1L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      JSONObject jSONObject1 = jSONObject0.put("z&.J}onNAtax}+w:hC", (Collection<?>) linkedList0);
      try { 
        jSONObject1.increment("z&.J}onNAtax}+w:hC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000011].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("pqDMvj>Nphq", 2922L);
      JSONObject jSONObject1 = jSONObject0.increment("pqDMvj>Nphq");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("?$u&5DTu)/r");
      JSONObject jSONObject1 = jSONObject0.increment("?$u&5DTu)/r");
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = jSONObject0.putOnce("Null key.", bigInteger0);
      jSONObject1.increment("Null key.");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(1L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.put("z&.J}onNAtax}+w:hC", (float) 1L);
      jSONObject0.increment("z&.J}onNAtax}+w:hC");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("dQprd`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<DocumentationTool.Location, StandardLocation> hashMap0 = new HashMap<DocumentationTool.Location, StandardLocation>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = JSONObject.getNames((Object) charArrayWriter0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("138.349557110", (-1379.048F));
      long long0 = jSONObject1.getLong("138.349557110");
      assertEquals((-1379L), long0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("' and instead saw ''", "' and instead saw ''");
      try { 
        jSONObject1.getLong("' and instead saw ''");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("j/gaXbBJprT+", stringArray0);
      jSONObject0.put(",:+S.Hw", (Collection<?>) null);
      JSONArray jSONArray0 = jSONObject0.getJSONArray(",:+S.Hw");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.putOnce("t$(", "t$(");
      try { 
        jSONObject0.getJSONArray("t$(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "j/gaXbBJprT");
      jSONObject0.put("j/gaXbBJprT", 382);
      jSONObject0.getInt("j/gaXbBJprT");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      jSONObject0.put("z&.J}onNAtax}+w:hC", (Collection<?>) linkedList0);
      try { 
        jSONObject0.getInt("z&.J}onNAtax}+w:hC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      jSONObject0.putOnce("Null key.", bigInteger0);
      jSONObject0.getNumber("Null key.");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("isnegate", "isnegate");
      try { 
        jSONObject1.getNumber("isnegate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(">^np!xftj", (-1379.05F));
      float float0 = jSONObject1.getFloat(">^np!xftj");
      assertEquals((-1379.05F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      HashMap<CardTerminals.State, FilterInputStream> hashMap0 = new HashMap<CardTerminals.State, FilterInputStream>();
      JSONObject jSONObject1 = jSONObject0.put("5&AhRZ", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.getFloat("5&AhRZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("138.349557110", (-1379.048F));
      assertFalse(jSONObject0.isEmpty());
      
      double double0 = jSONObject1.getDouble("138.349557110");
      assertEquals((-1379.0479736328125), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONObject jSONObject1 = jSONObject0.put(" line ", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getDouble(" line ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      JSONObject jSONObject1 = jSONObject0.put("z&.J}onNAtax}+w:hC", (float) 0L);
      try { 
        jSONObject1.getBigDecimal("z&.J}onNAtax}+w:hC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("t$(", "t$(");
      boolean boolean0 = jSONObject1.optBoolean("t$(");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("isnegate", "isnegate");
      try { 
        jSONObject0.getJSONObject("isnegate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = JSONObject.doubleToString(138.34955711);
      assertEquals("138.34955711", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-12473307));
      assertEquals("-1.2473307E7", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("-0");
      JSONObject jSONObject1 = jSONObject0.append("get", mockFileWriter0);
      jSONObject1.append("get", "get");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("138.349557110", (-1357.6853F));
      Integer integer0 = new Integer((-532));
      try { 
        jSONObject1.append("138.349557110", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[138.349557110] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("|CPjyZ;(UJk", true);
      jSONObject1.accumulate("|CPjyZ;(UJk", "|CPjyZ;(UJk");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HashMap<Object, Character> hashMap0 = new HashMap<Object, Character>();
      Integer integer0 = new Integer((-58));
      hashMap0.put(integer0, (Character) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HashMap<Long, Proxy.Type> hashMap0 = new HashMap<Long, Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      hashMap0.put((Long) null, proxy_Type0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{g\"#}p{G&Qt|`v7Fw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 3 [character 4 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Normalizer.Form, Formatter.BigDecimalLayoutForm>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("get", object0);
      jSONObject0.toMap();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("138.349557110");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(82);
      jSONObject0.write((Writer) charArrayWriter0);
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("pqDMvj>Nphq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("KlC<@xW^MvG~~", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.has("KlC<@xW^MvG~~");
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      jSONObject0.put("gettoLowerCase", (Collection<?>) linkedList0);
      int int0 = jSONObject0.optInt("gettoLowerCase", 1917);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1917, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(";hH\"");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("value [%s] is not an array or object therefore its key %s cannot be resolved");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(":8dqr*c..qY3xK", (-2711.936421879127));
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>();
      jSONObject0.put("z&.J}onNAtax}+w:hC", (Collection<?>) linkedList0);
      PipedReader pipedReader0 = new PipedReader(61);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONObject0.accumulate("z&.J}onNAtax}+w:hC", pipedWriter0);
      assertEquals(2, jSONObject0.length());
  }
}
