/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 17:52:40 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.StandardProtocolFamily;
import java.security.CryptoPrimitive;
import java.sql.ClientInfoStatus;
import java.sql.JDBCType;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.jws.WebParam;
import javax.tools.DocumentationTool;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.put(55, (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertEquals(56, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(true);
      int int0 = jSONArray0.optInt(0, 746);
      assertEquals(746, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("] is not a boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JSONTokener jSONTokener0 = new JSONTokener(pushbackInputStream0);
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      List<Object> list0 = jSONArray0.toList();
      JSONArray jSONArray2 = jSONArray1.put((Object) jSONArray1);
      jSONArray2.put(0, (Collection<?>) list0);
      String string0 = jSONArray0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0);
      try { 
        jSONArray1.getBigInteger(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(127, true);
      try { 
        jSONArray1.getBigDecimal(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(127, true);
      jSONArray1.remove(8);
      assertEquals(127, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<RowIdLifetime> linkedList0 = new LinkedList<RowIdLifetime>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      Object object0 = jSONArray0.query(jSONPointer0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2728, (float) 2728);
      assertEquals(2729, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Normalizer.Form> linkedList0 = new LinkedList<Normalizer.Form>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString(1797, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      String string0 = jSONArray0.optString(0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Q");
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONArray0.optNumber(91, (Number) bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-35L));
      Number number0 = jSONArray0.optNumber(1, (Number) bigDecimal0);
      assertEquals((short) (-35), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      long long0 = jSONArray0.optLong((-3346), (-3505L));
      assertEquals((-3505L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(127, (long) 127);
      long long0 = jSONArray1.optLong(127);
      assertEquals(127L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Normalizer.Form, Character.UnicodeScript> hashMap0 = new HashMap<Normalizer.Form, Character.UnicodeScript>();
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKC;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.LEPCHA;
      hashMap0.put(normalizer_Form0, character_UnicodeScript0);
      jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray0.optJSONObject(0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(2551, 1081.39F);
      assertEquals(1081.39F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat((-2982), (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble((-1), (double) (-1));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(1, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-103);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(0, bigInteger0);
      assertEquals((short) (-26368), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-120);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(0, bigInteger0);
      assertEquals((short)136, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal((-31), (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-3355L));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-767), bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((long) 3012);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-1922), bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Component.BaselineResizeBehavior> linkedList0 = new LinkedList<Component.BaselineResizeBehavior>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((Collection<?>) linkedList0);
      int int0 = jSONArray0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONArray1.isNull(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((float) 48);
      int int0 = jSONArray0.getInt(0);
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 453, 453);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(5121, true);
      // Undeclared exception!
      jSONArray1.toList();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("b+^bA6;N9rm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1042), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1042] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.put(1000000, true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<CryptoPrimitive, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<CryptoPrimitive, GraphicsDevice.WindowTranslucency>();
      // Undeclared exception!
      jSONArray0.put(1000000, (Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      Double double0 = new Double(0);
      hashMap0.put((JSONArray) null, double0);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.put(0, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      try { 
        jSONArray0.put((-731), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-731] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2998), 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2998] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-4221), 622);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-4221] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1493), 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1493] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("hE6TTf:^3*$J?u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[\"g<DuSq.o6y**3");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at 15 [character 16 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-7), (byte)91);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JSONTokener jSONTokener0 = new JSONTokener(pushbackInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      jSONArray1.put((Map<?, ?>) hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(511);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, 4, 16);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      jSONArray1.put((Map<?, ?>) hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(505);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, (-1), 16);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1130, (double) 1130);
      StringWriter stringWriter0 = new StringWriter(451);
      // Undeclared exception!
      jSONArray0.write((Writer) stringWriter0, 1130, 1130);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.put(true);
      Writer writer0 = jSONArray0.write((Writer) stringWriter0, 2728, 0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, 2728, (-4));
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.put(0, object0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      jSONArray0.put(101, (long) 68);
      JSONArray jSONArray1 = jSONArray0.put(91, (Object) roundingMode0);
      assertEquals(102, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long((-1));
      try { 
        jSONArray0.put((-1640), (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1640] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString((-63), "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<BigDecimal, WebParam.Mode> hashMap0 = new HashMap<BigDecimal, WebParam.Mode>();
      JSONArray jSONArray1 = jSONArray0.put(32, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray1.optNumber(32, (Number) bigInteger0);
      assertEquals(33, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(114, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      jSONArray1.put(0L);
      Integer integer0 = new Integer(1);
      Number number0 = jSONArray1.optNumber(1, (Number) integer0);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(1, (long) 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.ROWID;
      JDBCType jDBCType1 = jSONArray0.optEnum(class0, (-2176), jDBCType0);
      assertSame(jDBCType0, jDBCType1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<BigInteger, Authenticator.RequestorType> hashMap0 = new HashMap<BigInteger, Authenticator.RequestorType>();
      JSONArray jSONArray1 = jSONArray0.put(1, (Map<?, ?>) hashMap0);
      Class<StandardLocation> class0 = StandardLocation.class;
      StandardLocation standardLocation0 = StandardLocation.NATIVE_HEADER_OUTPUT;
      jSONArray1.optEnum(class0, 1, standardLocation0);
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-460L));
      int int0 = jSONArray1.optInt(0, 0);
      assertEquals((-460), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(2221, 2221);
      assertEquals(2221, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      int int0 = jSONArray0.optInt(0, 0);
      assertEquals(1, jSONArray0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(2805, (double) 2805);
      assertEquals(2805.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      double double0 = jSONArray0.optDouble(0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = (JSONObject)jSONArray0.opt(0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt(32);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.opt((-836));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(2244, (-1.0));
      try { 
        jSONArray1.getString(2161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2161] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(127, true);
      assertEquals(128, jSONArray0.length());
      
      boolean boolean0 = jSONArray1.getBoolean(127);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((-1365.0F));
      jSONArray0.put(8192, (Object) float0);
      Object object0 = jSONArray0.get(671);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean(83, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Byte, Component.BaselineResizeBehavior> hashMap0 = new HashMap<Byte, Component.BaselineResizeBehavior>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(17, false);
      List<Object> list0 = jSONArray1.toList();
      assertEquals(18, jSONArray0.length());
      assertTrue(list0.contains(false));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      jSONArray0.put((Map<?, ?>) hashMap0);
      String string0 = jSONArray0.toString((-2789));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(5253, false);
      // Undeclared exception!
      jSONArray0.toString(5253);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Month, ClientInfoStatus> hashMap0 = new HashMap<Month, ClientInfoStatus>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.toJSONObject(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(569, (Map<?, ?>) hashMap0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) null);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertEquals(570, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[\"g<DuSq.o6y**3");
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.similar(jSONTokener0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-1815));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (Map<?, ?>) hashMap0);
      jSONArray1.optString(0, "{+");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, 0.0);
      Number number0 = jSONArray0.optNumber(0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(5253, false);
      jSONArray0.optNumber(5253);
      assertEquals(5254, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(3865, 3865);
      long long0 = jSONArray0.optLong(3865, 1L);
      assertEquals(3866, jSONArray0.length());
      assertEquals(3865L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      long long0 = jSONArray1.optLong(0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray1.optJSONObject(0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(32);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONArray1.optBigDecimal(0, bigDecimal0);
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((double) 8448);
      jSONArray0.put(8448, (Object) float0);
      BigDecimal bigDecimal0 = new BigDecimal(110);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(8448, bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(1210, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      jSONArray0.put(1);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONArray0.optBigDecimal(1, bigDecimal0);
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(18, (double) 18);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(18, bigInteger0);
      assertEquals((short)18, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONArray jSONArray1 = jSONArray0.put((Object) bigInteger0);
      BigInteger bigInteger1 = jSONArray1.optBigInteger((byte)0, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1154, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray0.optBigInteger(1154, bigInteger0);
      assertEquals(1155, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(127, false);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      jSONArray0.optEnum(class0, 127);
      assertEquals(128, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      jSONArray1.put(0L);
      int int0 = jSONArray0.optInt(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(127, (-4710.0));
      float float0 = jSONArray0.optFloat(127);
      assertEquals((-4710.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      float float0 = jSONArray1.optFloat(0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, 848L);
      double double0 = jSONArray0.optDouble(0);
      assertEquals(848.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(5253, false);
      // Undeclared exception!
      jSONArray0.join("/jh.r|");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<StandardProtocolFamily, TrayIcon.MessageType> hashMap0 = new HashMap<StandardProtocolFamily, TrayIcon.MessageType>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      String string0 = jSONArray0.join("$+{FQg#B:wosl>1[");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONArray0.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0.0);
      long long0 = jSONArray1.getLong(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(17, false);
      try { 
        jSONArray1.getLong(17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[17] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray1.getJSONObject(0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(17, false);
      try { 
        jSONArray0.getJSONArray(17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[17] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1549.3832669798));
      int int0 = jSONArray0.getInt(0);
      assertEquals((-1549), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getInt(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(894, (long) 0);
      Number number0 = jSONArray0.getNumber(894);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getNumber(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(16, false);
      try { 
        jSONArray1.getFloat(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[16] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(127, true);
      boolean boolean0 = jSONArray1.optBoolean(127);
      assertEquals(128, jSONArray0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(17, false);
      boolean boolean0 = jSONArray1.optBoolean(17);
      assertEquals(18, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1154, true);
      try { 
        jSONArray1.getJSONObject(635);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[635] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".(r.}~5PeVWM#>z");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(roundingMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.APPEND;
      linkedList0.offerLast(processBuilder_Redirect_Type0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      try { 
        jSONArray0.get(88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[88] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[<]TI");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[7wEM,zW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 9 [character 10 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(" [chara*cter ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 13 [character 14 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<StandardLocation> class0 = StandardLocation.class;
      try { 
        jSONArray0.getEnum(class0, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[52] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONArray0.optLong(871);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery("");
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Authenticator.RequestorType, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<Authenticator.RequestorType, MultipleGradientPaint.ColorSpaceType>();
      try { 
        jSONArray0.put((-875), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-875] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull(28);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<DocumentationTool.Location, Dialog.ModalityType> hashMap0 = new HashMap<DocumentationTool.Location, Dialog.ModalityType>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-2767), (float) (-2767));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2767] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(5538);
      assertEquals("", string0);
  }
}
