/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 19:48:42 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/9");
      Double double0 = new Double((-1));
      boolean boolean0 = jSONPath0.set((Object) double0, (Object) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("min");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2386), 0, 93);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "", "min");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$RefOpSegement");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'c, but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Q6>_djjT2UuDf9Kw/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("pZ:d;,9G{j2Ti<gdw");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!oJSON erDor");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("k29+sYA72Q[");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-2508L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!oJSON erDor");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("~nU/A", stringArray0, false);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~nU/A");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      assertSame(jSONPath_StringInSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%%");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      assertSame(jSONPath_NullSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$MultiIndexSegment", ",QjnKOXKSmL", intArray0, sQLClientInfoException0);
      SQLWarning sQLWarning0 = new SQLWarning("com.alibaba.fastjson.JSONPath$MultiIndexSegment", "com.alibaba.fastjson.JSONPath$MultiIndexSegment", (-751), batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      JSONPath.contains((Object) sQLTransientConnectionException0, ".']OuO:Uc>");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("#B", "#B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2#B
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONPath jSONPath0 = new JSONPath("q");
      Object object0 = jSONPath0.eval((Object) long0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("a");
      Set<?> set0 = jSONPath0.keySet((Object) "a");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0T7o!Y87<*?vT5'&Gw");
      jSONPath_JSONPathParser0.readValue();
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("T7o", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.beans.Transient");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("java.beans.Transient", (-1.0), jSONPath_Operator0);
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepGetPropertyValues(jSONPath_DoubleOpSegement0, vector0);
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath jSONPath0 = JSONPath.compile("}j>QtKTu$hd)OvC");
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("7U");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#B");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('I');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(";Ljava/lang/String;)Z");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('u');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'u, but ';'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPath$MultiIndexSegment", ",QjnKOXKSmL", intArray0, sQLClientInfoException0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-751), 3168, (-1969112322));
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath(",QjnKOXKSmL", (SerializeConfig) null, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("icL8$r!h{ }d'.rF\"G", batchUpdateException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTransientConnectionException0, (Object) null);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2wXi%F";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = new JSONPath("2wXi%F");
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "2wXi%F", "2wXi%F");
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("V?o[8;fyee(wEP");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(112);
      jSONPath0.contains((Object) jSONPath_ArrayAccessSegment0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSONPath.extract("e(", "e(", parserConfig0, (-1842), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "zTz";
      JSONPath jSONPath0 = new JSONPath("zTz");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(40, 40, 78);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 92);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, string0, sQLTransientConnectionException0);
      int int0 = JSONPath.size(object0, "zTz");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      int int0 = JSONPath.size((Object) jSONPath_SizeSegment0, "fastjson.parser.autoTypeSupport");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",");
      int[] intArray0 = new int[8];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      int int0 = jSONPath0.size((Object) jSONPath_MultiIndexSegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      int int0 = jSONPath0.size((Object) "o]9O_0Q");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      Byte byte0 = new Byte((byte)90);
      boolean boolean0 = jSONPath0.setPropertyValue("com.alibaba.fastjson.JSONPath$RefOpSegement", "com.alibaba.fastjson.JSONPath$RefOpSegement", (-582813228520337988L), byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1620706518));
      boolean boolean0 = JSONPath.set((Object) null, "R", (Object) jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("illegal");
      Set<?> set0 = JSONPath.keySet((Object) jSONPath0, "illegal");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Set<?> set0 = JSONPath.keySet((Object) "A|$CUt1T)b5?XMR>~+", ":");
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("#");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_MinSegment0);
      assertFalse(set0.contains("#"));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("rrXo0>$vZj83", ",", 881);
      Set<?> set0 = jSONPath0.keySet((Object) sQLTransactionRollbackException0);
      assertFalse(set0.contains(","));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T");
      SQLTransientException sQLTransientException0 = new SQLTransientException("T");
      Object object0 = jSONPath0.getPropertyValue(sQLTransientException0, "P,R%AH7.>'CrifY", 153L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_Qc<0zg).4?", true);
      JSONPath jSONPath0 = new JSONPath("F#");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("F#", "ZFvte_-W?");
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, sQLTransactionRollbackException0, jSONPath_PropertySegment0);
      Object object1 = jSONPath0.getPropertyValue(object0, "_Qc<0zg).4?", (-1744L));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      Class<UUID> class0 = UUID.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      Class<Object> class0 = Object.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[RF");
      Object object0 = jSONPath0.getArrayItem("[RF", 0);
      assertEquals("[RF", object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[9];
      Object object0 = JSONPath.extract("", "com.alibaba.fastjson.JSONPath$FilterSegment", parserConfig0, 2266, featureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize(jSONPath_MaxSegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("TZ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("TZ");
      int int0 = jSONPath0.evalSize(sQLTransientConnectionException0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("q", serializeConfig0, parserConfig0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = jSONPath0.evalSize(calendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("OZ8Bsj8wlJ@");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 30, (-1), 30, 536870912);
      Set<?> set0 = jSONPath0.evalKeySet(mockGregorianCalendar0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("^5 >RH_");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_WildCardSegment0);
      assertFalse(set0.contains("^5 >RH_"));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("null");
      Set<?> set0 = jSONPath0.evalKeySet("null");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = (ParserConfig)JSONPath.eval((Object) parserConfig0, ",");
      assertFalse(parserConfig1.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-19), 34, 92);
      Object object0 = jSONPath0.eval((Object) jSONPath_RangeSegment0);
      assertSame(jSONPath_RangeSegment0, object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "nuViJ", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = JSONPath.compare("com.ilibaba.fastjson.parser.deserializer.Jdk8DateCodec", "j");
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        JSONPath.size((Object) sQLIntegrityConstraintViolationException0, "+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath.size((Object) "com.alibaba.fastjson.JSONPath$MultiIndexSegment", ",QjnKOXKSmL");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(57, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("java.util.OptionalInt", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(classLoader0, "fastjson.parser.deny", 57, "fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = new Integer((short)609);
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigInteger0, "!oJSON ereDor", (short)609, integer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      BigDecimal bigDecimal0 = new BigDecimal(2019L);
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigDecimal0, "fastjson.parser.autoTypeSupport", (-178L), "/stackTrace/10");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, (String) null, (-1014497654951707614L), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("3Eh6-hr@6uVIutma!0");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 2816, "/cause/stackTrace/6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<Calendar> class0 = Calendar.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) javaBeanSerializer0, "fastjson.parser.autoTypeSupport", (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) javaBeanSerializer0, "fastjson.parser.deny.internal", (Object) map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath_Operator0, "fastjson.parser.safeMode", (Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 289, 32, 1356, 124, 1);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) mockGregorianCalendar0, "com.alibaba.fastjson.JSONPath$RefOpSegement", (Object) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Class<JSONPath.PropertySegment> class0 = JSONPath.PropertySegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      jSONPath0.set((Object) javaBeanDeserializer0, (Object) class0, false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("/R'oww)");
      Double double0 = new Double(1544.576372);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) double0, (Object) parserConfig0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : /R'oww)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nuViJ");
      long[] longArray0 = new long[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastEson.parser.safeMode");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("&uK>kYC /", (String) null, 386, longArray0, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "/stackTrace/10", (Object) jSONPath_SizeSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.ilibaba.fastjson.parser.deserializer.Jdk8DateCodec");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.ilibaba.fastjson.parser.deserializer.Jdk8DateCodec", "j", 881);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny.internal", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransactionRollbackException0, (Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "#";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath_Operator0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("xiKQ9");
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$MultiIndexSegment";
      stringArray0[1] = "xiKQ9";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(javaBeanSerializer0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("/stackTrace/1", stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "null";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray("null", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("4");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLException> class0 = SQLException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(throwableDeserializer0, "VrZK(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.beans.Transient");
      JSONPath jSONPath1 = new JSONPath("java.beans.Transient");
      // Undeclared exception!
      jSONPath1.removePropertyValue(jSONPath0, "n0OLnh", true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("null");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(propertyNamingStrategy0, (String) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("toJSON error");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, "%%", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", "j", 887);
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(spliterator0, "ODj#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("evalSize error : ", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) javaBeanSerializer0, "/uRLs/0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short short0 = new Short((short)41);
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) short0, ",");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("is");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("null");
      BigDecimal bigDecimal0 = new BigDecimal((-5808516191223665813L));
      // Undeclared exception!
      jSONPath0.remove((Object) bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("dd.MM.yyyy", (SerializeConfig) null, (ParserConfig) null);
      Double double0 = new Double((-2412.5));
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("-", "!oJSON erDor");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("UY;;m", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      String[] stringArray0 = new String[2];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("toJSON error", "fastjson.parser.safeMode", (-2640));
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) sQLTransactionRollbackException0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath.keySet((Object) "~nU/A", "~nU/A");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/j");
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("{>tHDhkzY;dF)bGwM");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. {>tHDhkzY;dF)bGwM
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("rT1 7o8sG(v|U?`Y");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : rT1 7o8sG(v|U?`Y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      JSONPath jSONPath0 = new JSONPath("I(6Wh*N5O~<b@4", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue(class0, "&Pu#r';?^a`", (-124L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("^99nlaZZXm", serializeConfig0, parserConfig0);
      Class<JSONPath.WildCardSegment> class0 = JSONPath.WildCardSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanDeserializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("value not found in path ");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("value not found in path ", 1014);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.safeMode", "between", parserConfig0, (-1971), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("`zt`w:k]=g<", "org.joda.time.UTCDateTimeZone", (ParserConfig) null, (-1971), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("com.alibaba.fstjon.JSONPath$MinSegment", "toJSON error", parserConfig0, (-1236), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("-", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      JSONScanner jSONScanner0 = new JSONScanner("rlike", 7);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("A|$CUt1T)b5?XMR>~+");
      JSONScanner jSONScanner0 = new JSONScanner("]cro'p-m{\"2'nGs<&GN", 39);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : A|$CUt1T)b5?XMR>~+
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("illeal", serializeConfig0, parserConfig0);
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("q", (SerializeConfig) null, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("fastjson.parser.autoTypeAccept", false);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("fastjson.parser.deny.internal", jSONPath_PropertySegment0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(jSONPath_FilterSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[5< V0)4-ptL`&CgTFX");
      Class<UUID>[] classArray0 = (Class<UUID>[]) Array.newInstance(Class.class, 4);
      Class<UUID> class0 = UUID.class;
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(classArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) (byte)124);
      JSONPath.eval((Object) bigDecimal0, "T[Fk");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath.eval((Object) "}j>QtKTu$hd)OvC", "O68)]D&Z!Fv0+");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      String[] stringArray0 = new String[4];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) simplePropertyPreFilter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("zkRE`~>Nl29o~it/", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "5hZ\u0001>-SVWof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : zkRE`~>Nl29o~it/
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("NOT_IN");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONPath_WildCardSegment0, "NOT_IN", 2087, sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("xiKQ9");
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "/stackTrace/10", 3343L, "wcr9");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("\"Bt`^2K]pl @JZ", serializeConfig0, (ParserConfig) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\u0017XEzn]", "9rY }+S3Grzm%TG:", 13);
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(sQLTransientConnectionException0, ">*~D: hJ)^p`", 4647432019745535567L, "\"Bt`^2K]pl @JZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      jSONPath0.deepSet(javaBeanSerializer0, (String) null, 920, classLoader0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Short> class0 = Short.class;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONPath jSONPath0 = JSONPath.compile(":7");
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(class0, "JSONPath$SizeSegment", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "");
      JSONPath jSONPath0 = new JSONPath("VrZK(");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(map0, (String) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Fqoi=fK UrE8j+");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("7RNU", "Fqoi=fK UrE8j+", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path Fqoi=fK UrE8j+, segement Fqoi=fK UrE8j+
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("com.alibaba.fastjson.serializer.EnumerationSerializer", vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("Gaf6Kqd6&){]UpG.-`", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", "currency", 887);
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(spliterator0, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("g");
      Class<Double> class0 = Double.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.safeMode", "fastjson.parser.autoTypeSupport", (-1892));
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) javaBeanSerializer0, (Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("oNX{^3DT1CcZMV(");
      Short short0 = new Short((short)1742);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "oNX{^3DT1CcZMV(", (Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : oNX{^3DT1CcZMV(
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<JSONPath.FilterSegment> class0 = JSONPath.FilterSegment.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(33);
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) jSONPath_ArrayAccessSegment0, "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) "null", "t2j_7{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Method> class0 = Method.class;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("-");
      Long long0 = new Long(10);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("AllowComment");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "6", "6", objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "", "rt08jb", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("R");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONPath0.deepScan(linkedList0, "R", linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Map<String, Object> map0 = JSONPath.paths((Object) parserConfig0);
      JSONPath.remove((Object) map0, "/stack_trace/0");
      assertEquals(9, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(105);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("uY+}McEXA5o", serializeConfig0, parserConfig0);
      Double double0 = new Double(105);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, double0, 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Double
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("!oJSON erDor", false);
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, "-", javaBeanSerializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("wcbr9sx5", (SerializeConfig) null, parserConfig0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$MatchSegement");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(4, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\.");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \\.
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#B");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",");
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeAccept", (String) null, 3);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",", "fastjson.parser.safeMode", sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("writeFieldValue", "fastjson.parser.deny.internal", 3);
      boolean boolean0 = jSONPath0.set((Object) sQLTransientConnectionException0, (Object) sQLIntegrityConstraintViolationException0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      Double double0 = new Double(1285.662093);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Double
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("min");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",");
      SQLTransientException sQLTransientException0 = new SQLTransientException("LT");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("LT", "Ac&", 63, sQLTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning("com.alibaba.fastjson.JSONPath$MultiPropertySegment", "", 1443168256, sQLTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = sQLWarning0.getStackTrace();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) jSONPath_WildCardSegment0, (Object[]) stackTraceElementArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.beans.Transient");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9L:dUL3/WY/", "jORi", 96, (Throwable) null);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) sQLTransactionRollbackException0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path java.beans.Transient
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("java/util/ArrayList", serializeConfig0, parserConfig0);
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("java/util/ArrayList", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      jSONPath0.arrayAdd((Object) sQLTimeoutException0, (Object[]) null);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("u5V3QF");
      TimeZone timeZone0 = TimeZone.getTimeZone("u5V3QF");
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) mockGregorianCalendar0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      boolean boolean0 = jSONPath0.containsValue((Object) "%", (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/1");
      SQLDataException sQLDataException0 = new SQLDataException("not");
      boolean boolean0 = jSONPath0.contains((Object) sQLDataException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%f", 131072);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/8");
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/0", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny", "fastjson.parser.deny", 9);
      Object object0 = jSONPath0.eval((Object) sQLTimeoutException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("A|$CUt1T)b5?XMR>~+");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("java.beans.Transient", "java.beans.Transient", false);
      JSONPath jSONPath0 = JSONPath.compile("java.beans.Transient");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("XrU8X'Poujc", true);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("q");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-2764));
      SQLDataException sQLDataException0 = new SQLDataException("G:h'g9fmfVs0`");
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1533);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, (Object) null, jSONPath_WildCardSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("OZ8Bsj8wlJ@");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "OZ8Bsj8wlJ@";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/stackTrace/10";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = JSONPath.reserveToObject((Object) null, (String[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("Value", (-1555L), jSONPath_Operator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Value";
      stringArray0[1] = "Value";
      stringArray0[2] = "Value";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_IntOpSegement0, stringArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLNonTransientConnectionException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("q", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("!Ay5\"TSH @!qA<r4#", "l|Rm{SvLv-?jbcK.", (-1), sQLTransactionRollbackException0);
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLTransactionRollbackException0, sQLSyntaxErrorException0);
      Set<?> set0 = jSONPath0.keySet(object0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nuViJ");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Map<String, Object> map0 = JSONPath.paths((Object) "nuViJ", serializeConfig0);
      Set<?> set0 = jSONPath0.evalKeySet(map0);
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("nuViJ"));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Map<String, Object> map0 = JSONPath.paths((Object) classLoader0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1898, 1898, (-911));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "com.alibaba.fastjson.JSONPath$RefOpSegement";
      stringArray0[1] = "com.alibaba.fastjson.JSONPath$RefOpSegement";
      stringArray0[2] = "com.alibaba.fastjson.JSONPath$RefOpSegement";
      stringArray0[3] = "com.alibaba.fastjson.JSONPath$RefOpSegement";
      stringArray0[4] = "SuZ>x^`o\"Cjq*A>";
      stringArray0[5] = "F{(2nF/ge6yP<pWZ";
      stringArray0[6] = "com.alibaba.fastjson.JSONPath$RefOpSegement";
      stringArray0[7] = "com.alibaba.fastjson.JSONPath$RefOpSegement";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_MultiPropertySegment0, map0);
      assertEquals(19, map0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      boolean boolean0 = jSONPath0.removePropertyValue(sQLFeatureNotSupportedException0, ",", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "");
      JSONPath jSONPath0 = new JSONPath("VrZK(");
      boolean boolean0 = jSONPath0.removePropertyValue(map0, "%%", false);
      assertFalse(boolean0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "");
      JSONPath jSONPath0 = new JSONPath("VrZK(");
      boolean boolean0 = jSONPath0.removePropertyValue(map0, "%%", true);
      assertFalse(boolean0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibba.fastjson.JSONPath$DoubleOpSegemen");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibba.fastjson.JSONPath$DoubleOpSegemen", "=", 625);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLTransientConnectionException0, "com.alibba.fastjson.JSONPath$DoubleOpSegemen");
      boolean boolean0 = jSONPath0.set((Object) jSONArray0, (Object) null);
      assertTrue(boolean0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("illegal");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("illegal");
      jSONPath0.deepSet(collection0, "illegal", 2997L, "illegal");
      assertFalse(collection0.contains("illegal"));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put(":false", clientInfoStatus0);
      JSONPath jSONPath0 = JSONPath.compile("q");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("q", "q", (-1617712235));
      jSONPath0.deepSet(hashMap0, "q", (-4540135604787511831L), sQLFeatureNotSupportedException0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("not support type ");
      jSONPath0.deepSet("not support type ", "not support type ", 2774L, "not support type ");
      assertEquals("not support type ", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("PrettyFormat");
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) jSONPath0);
      jSONPath0.deepScan(stack0, "X/f", stack0);
      assertEquals("PrettyFormat", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "");
      JSONPath jSONPath0 = new JSONPath("[5< V0)4-ptL`&CgTFX");
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepScan(map0, "%V%", vector0);
      assertEquals(1, map0.size());
      assertFalse(vector0.contains(""));
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepScan(sQLTransientConnectionException0, "com.alibaba.fastjson.JSONValidator$UTF16Validator", arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q6>_djjT2UuDf9Kw/");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      Locale locale0 = Locale.UK;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      boolean boolean0 = JSONPath.contains((Object) mockGregorianCalendar0, "java.beans.Transient");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("org.joda.");
      ChronoField chronoField0 = ChronoField.MICRO_OF_DAY;
      Object object0 = jSONPath0.getPropertyValue(chronoField0, "%%", (-1014497654951707614L));
      assertEquals(3, object0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("illegal");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("illegal");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wcr9";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(collection0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(5614464919154503228L, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Float float0 = new Float((float) (short) (-2025));
      BigDecimal bigDecimal0 = new BigDecimal((int) (short) (-2025));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      BigDecimal bigDecimal0 = new BigDecimal(6);
      boolean boolean0 = JSONPath.eqNotNull(float0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = new Float((float) (short) (-2025));
      boolean boolean0 = JSONPath.eqNotNull(float0, (-2025));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Short short0 = new Short((short) (-2025));
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Integer integer0 = new Integer((-1617712235));
      Byte byte0 = new Byte((byte)49);
      boolean boolean0 = JSONPath.eqNotNull(integer0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Double double0 = new Double(1.0);
      boolean boolean0 = JSONPath.eqNotNull(0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Short short0 = new Short((short)41);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Short short0 = new Short((short)620);
      BigDecimal bigDecimal0 = new BigDecimal((int) (short) (-2025));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Float float0 = new Float((-150.4253F));
      boolean boolean0 = JSONPath.eqNotNull(float0, float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eq(bigDecimal0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.MINUTE_OF_DAY;
      boolean boolean0 = JSONPath.eq(chronoField0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = JSONPath.eq((Object) null, jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      boolean boolean0 = JSONPath.eq(serializeConfig0, serializeConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("A|$CUt1T)b5?XMR>~+");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zQ?wi", 629);
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, (Object) null, jSONReaderScanner0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // sun.util.calendar.ZoneInfo
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Q,hC<@SXuXX", serializeConfig0, parserConfig0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLClientInfoException0, hashMap0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("z");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.alibaba.fastjson.serializer.EnumerationSerializer", "z", 62);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(sQLNonTransientConnectionException0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // [Ljava.lang.StackTraceElement;
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath jSONPath0 = new JSONPath("Value");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/1");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeAccept", sQLTransientConnectionException0);
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLFeatureNotSupportedException0, (Object) javaBeanDeserializer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("/@6j9ZDOrd4cj93w:-u", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath0, 2816, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Double double0 = new Double(10000.0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      boolean boolean0 = JSONPath.set((Object) double0, "/uRLs/0", (Object) propertyNamingStrategy0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      int[] intArray0 = new int[0];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-1));
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath0, jSONPath_ArrayAccessSegment0);
      boolean boolean0 = jSONPath0.setArrayItem(jSONPath0, jSONArray0, (-1), jSONPath_MultiIndexSegment0);
      assertEquals(1, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath jSONPath0 = new JSONPath("-");
      Object object0 = jSONPath0.getArrayItem(hashMap0, 10);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("#B");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-1462L));
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONPath$IntOpSegement", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, false);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3399, 3399, 3399);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, serializeConfig0, jSONPath_RangeSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("(II)V");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, true);
      JSONPath jSONPath0 = JSONPath.compile("%%");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%%", "27Nab\"Lzum)yC?9");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, sQLRecoverableException0, jSONPath_NotNullSegement0, classLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      Pattern pattern0 = Pattern.compile("V48<BJl,e", (-56613888));
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("V48<BJl,e", pattern0, jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_RegMatchSegement0, jSONPath_RegMatchSegement0, false);
      JSONPath jSONPath0 = new JSONPath("scanDecimal");
      Byte byte0 = new Byte((byte)11);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, byte0, byte0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("+p,~%)?7n3A]?c*");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("X");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("SQq/)");
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, sQLSyntaxErrorException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.SQLException$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("ZFvte_-W?", longArray0, true);
      JSONPath jSONPath0 = new JSONPath("ZFvte_-W?");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("sPJ%\u0005[V8\t%q", "sPJ%\u0005[V8\t%q", (Throwable) null);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, (Object) null, sQLSyntaxErrorException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement(")sL", (Pattern) null, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile(")sL");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, parserConfig0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.And;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement(")sL", (Pattern) null, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile(")sL");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RegMatchSegement0);
      Integer integer0 = new Integer((byte) (-13));
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, integer0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("illegal");
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("illegal", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", but '");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(",", "illegal", (-535), sQLTimeoutException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLTransientConnectionException0, sQLRecoverableException0);
      assertEquals(2, jSONArray0.size());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      assertSame(jSONPath0, object0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("A|$CUt1T)b5?XMR>~+");
      Pattern pattern0 = Pattern.compile("D#ki(|ETE", 16);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("stackTrace", pattern0, jSONPath_Operator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny.internal", "fastjson.parser.safeMode");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeSupport", (Map<String, ClientInfoStatus>) null, sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.safeMode", sQLClientInfoException0);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, sQLSyntaxErrorException0, sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("q");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("/mockitoInterceptor", "FGy4uPv5b", jSONPath_Operator0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.EQ;
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "FGy4uPv5b", "/stackTrace/13", jSONPath_Operator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$RefOpSegement");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.JSONPath$RefOpSegement");
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$RefOpSegement", "com.alibaba.fastjson.JSONPath$RefOpSegement", jSONPath_Operator0);
      Byte byte0 = new Byte((byte) (-19));
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, sQLInvalidAuthorizationSpecException0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("fastjson.parser.autoTypeAccept", "fastjson.parser.safeMode", false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, jSONPath_Operator0, classLoader0, classLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nin";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("nin", "X(IA ", "nin", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("nin");
      SQLDataException sQLDataException0 = new SQLDataException("nin", "X(IA ", (-1121));
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, "X(IA ", sQLDataException0, fileSystemHandling0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("rT1 7o8sG(v|U?`Y", "rT1 7o8sG(v|U?`Y", (String) null, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("(\"*Ni)*5*", (String) null, "00-B{R76D%8&aYo", stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.beans.Transient");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("java.beans.Transient", (-1.0), jSONPath_Operator0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, jSONPath0, jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("Value", (-1555L), jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("Value");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, fileSystemHandling0, fileSystemHandling0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Byte byte0 = new Byte((byte)124);
      String[] stringArray0 = new String[7];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("fastjson", stringArray0, true);
      JSONPath jSONPath0 = new JSONPath("ML];81|o");
      Float float0 = new Float(0.0F);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, float0, byte0, "can not cast oracle.sql.TIMESTAMP to Date");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "~nU/A";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("~nU/A", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("~nU/A");
      DataTruncation dataTruncation0 = new DataTruncation(6, false, true, 6, 370);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, dataTruncation0, "~nU/A", jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("C.", stringArray0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath jSONPath0 = new JSONPath("C.");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", but '");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",", ", but '", 304, sQLTimeoutException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, sQLTimeoutException0, sQLIntegrityConstraintViolationException0);
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-6835437086156813536L));
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("+xt?V;dmUbP$p a)O", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("+xt?V;dmUbP$p a)O");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, (Object) null, javaBeanDeserializer0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.beans.Transient");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("java.beans.Transient", (-1.0), jSONPath_Operator0);
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("java.beans.Transient", 1000L, 1000L, false);
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, jSONPath_DoubleOpSegement0, jSONPath_DoubleOpSegement0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("EOF");
      long[] longArray0 = new long[2];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("EOF", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("fsg+;L--K[");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, jSONPath_JSONPathParser0, (Object) null, sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("java.beans.Transient", "java.beans.Transient", false);
      JSONPath jSONPath0 = JSONPath.compile("java.beans.Transient");
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, jSONPath0, "java.beans.Transient");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("java.beans.Transient", "java.beans.Transient", true);
      JSONPath jSONPath0 = JSONPath.compile("java.beans.Transient");
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, jSONPath0, jSONPath0, "java.beans.Transient");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment(",", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = new JSONPath("mln");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("e$+(0lqy2t");
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, mockDate0, mockDate0, jSONPath_WildCardSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("A<ig");
      ArrayList<PropertyNamingStrategy> arrayList0 = new ArrayList<PropertyNamingStrategy>();
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("writeWithFormat");
      Long long0 = Long.valueOf((long) 661);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, long0, arrayList0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToArray((Object) null, stringArray0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("yyyy-MM-dd HH:mm:ss");
      JSONPath jSONPath0 = JSONPath.compile("yyyy-MM-dd HH:mm:ss");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1.2.68", "@type");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, sQLTransientConnectionException0, jSONPath_Segment0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(80, (-1599), (-1599));
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("^99nlaZZXm", serializeConfig0, parserConfig0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, serializeConfig0, "^99nlaZZXm");
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!oJSON erDor");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-911), 1182, (-911));
      JSONPath jSONPath0 = new JSONPath("8(V}JvRjl7n'");
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_JSONPathParser0, sQLDataException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibba.fastjson.JSONPath$DoubleOpSegemen");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibba.fastjson.JSONPath$DoubleOpSegemen", "=", 625);
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Object object0 = jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLTransientConnectionException0, "com.alibba.fastjson.JSONPath$DoubleOpSegemen");
      Collection<Object> collection0 = jSONPath0.getPropertyValues(object0);
      assertTrue(collection0.contains("com.alibba.fastjson.JSONPath$DoubleOpSegemen"));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object object0 = JSONPath.extract("", "0");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      Object object0 = JSONPath.reserveToObject(jSONPath_MultiPropertySegment0, stringArray0);
      assertSame(object0, jSONPath_MultiPropertySegment0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.beans.Transient");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("XrU8X'Poujc", true);
      jSONPath_PropertySegment0.setValue(jSONPath0, (Object) null, "XrU8X'Poujc");
      assertEquals("java.beans.Transient", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("[+*2L{'TJ9qE@|j", "com.alibaba.fastjson.parser.DefaultJSONParser");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal json : pos 3, line 1, column 4[+*2L{'TJ9qE@|j
         //
         verifyException("com.alibaba.fastjson.JSONPath$PropertySegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("_Qc<0zg).4?", true);
      JSONPath jSONPath0 = JSONPath.compile("/jORi#C*=vU");
      SQLDataException sQLDataException0 = new SQLDataException("wcbr9sx5");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLDataException0, "_Qc<0zg).4?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path /jORi#C*=vU, segement _Qc<0zg).4?
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("rT1 7o8sG(v|U?`Y", "rT1 7o8sG(v|U?`Y", (-100));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        JSONPath.compare(sQLSyntaxErrorException0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLSyntaxErrorException cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Integer integer0 = new Integer((-1617712235));
      // Undeclared exception!
      try { 
        JSONPath.compare(integer0, sQLTransactionRollbackException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransactionRollbackException cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Long long0 = new Long((-3393714734093696063L));
      int[] intArray0 = new int[7];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        JSONPath.compare(long0, jSONPath_MultiIndexSegment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$MultiIndexSegment cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = JSONPath.compare(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Float float0 = new Float((double) 10);
      // Undeclared exception!
      try { 
        JSONPath.compare(float0, ",");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath("OZ8Bsj8wlJ@");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("}j>QtKTu$hd)OvC");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, (Object) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("ZFvte_-W?");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement(":TRj");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"TRj\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("#B");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.buildArraySegement("jsonpath error, path ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jsonpath error\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(",");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("av=2e{NHsBNM;rFp+y");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("'^W5Lb_u9WH-g{0");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/10");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("stackTrace", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%%");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("in");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rlike");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Z<Pte_-W?");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("!oJSON erDor");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but 'o'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=*M@6sA#5fu(asIN>C");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("null");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("not");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"lB");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but 'B'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("min");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(2488L);
      assertEquals(2489.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("-!+d1lm-gHQD|K{Jd");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+%}u2c<5/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("L");
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("|XiQS.6\"fmifTks");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_NullSegement0);
      assertSame(jSONPath_NullSegement0, jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">&J?5mMc<i 0o=F3AM");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      double double0 = jSONPath_JSONPathParser0.readDoubleValue(2488L);
      assertEquals(2488.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+%}u2c<5/");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"Bt`^2K]pl @JZ");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("rfA2b>)");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("[@?++9Q+", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "[@?++9Q+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '., but '?'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("VF3zFX1e>0G");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$VALUES");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(2547);
      boolean boolean0 = jSONPath0.contains((Object) jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T");
      jSONPath0.init();
      assertEquals("T", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibba.fastjson.JSONPath$DoubleOpSegemen");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "l");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("q");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) consumer0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(",  end ", ",  end ", (-1), hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("3", clientInfoStatus0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(85, map0.size());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("2!h3,$&1qc0ISrL9X9", "", 24, hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put((String) null, clientInfoStatus0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLClientInfoException0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Map<String, Object> map0 = JSONPath.paths((Object) sQLNonTransientConnectionException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(166, map0.size());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) "");
      Map<String, Object> map1 = JSONPath.paths((Object) map0);
      JSONPath jSONPath0 = new JSONPath("[5< V0)4-ptL`&CgTFX");
      Vector<Object> vector0 = new Vector<Object>();
      jSONPath0.deepScan(map1, "%V%", vector0);
      assertFalse(vector0.contains(""));
      assertEquals(1, map0.size());
      assertEquals(2, map1.size());
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "alibaba");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath0 = new JSONPath("Value");
      boolean boolean0 = jSONPath0.set((Object) fileSystemHandling0, (Object) "Value", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = jSONPath0.set((Object) bigDecimal0, (Object) bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) classLoader0, (Object) "/stackTrace/13", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.misc.Launcher$AppClassLoader
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("SMOjvQ9BSQ~");
      UUID uUID0 = MockUUID.fromString("SMOjvQ9BSQ~");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) uUID0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath jSONPath0 = new JSONPath("M_[{6VY625QyyZ`~C");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(190, 190, 190);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, parserConfig0, classLoader0);
      // Undeclared exception!
      try { 
        jSONPath0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("illegal");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("illegal");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      boolean boolean0 = jSONPath0.remove((Object) "com.alibaba.fastjson.JSONPath$DoubleOpSegement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSONPath_SizeSegment0;
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd(objectArray0[0], ",", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class com.alibaba.fastjson.JSONPath$SizeSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONPath.Operator[] jSONPath_OperatorArray0 = JSONPath.Operator.values();
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) jSONPath_SizeSegment0, "java.time.ZoneOffset", (Object[]) jSONPath_OperatorArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path java.time.ZoneOffset
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      JSONPath.arrayAdd((Object) null, "'e4Fx|D", objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      int int0 = jSONPath0.size((Object) serializeConfig0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("TgpQ]owja-P{");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) "TgpQ]owja-P{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : TgpQ]owja-P{
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",");
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeAccept", "fastjson.parser.deny.internal", 3);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",", "fastjson.parser.safeMode", sQLDataException0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLIntegrityConstraintViolationException0, (Object) ",");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientException sQLTransientException0 = new SQLTransientException(mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I}2r!ABeGf8,f4", "8", sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny.internal", sQLRecoverableException0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLDataException0, (Object) "8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("");
      UUID uUID0 = MockUUID.fromString("");
      boolean boolean0 = jSONPath0.containsValue((Object) uUID0, (Object) uUID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("illegal");
      Object object0 = JSONPath.reserveToArray("illegal", (String[]) null);
      boolean boolean0 = jSONPath0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Byte byte0 = new Byte((byte)27);
      boolean boolean0 = JSONPath.contains((Object) byte0, "0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("EO");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.ilibaba.fastjson.parser.deserializer.Jdk8DateCodec");
      JSONScanner jSONScanner0 = new JSONScanner("", 39);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",");
      JSONScanner jSONScanner0 = new JSONScanner("rlike", 881);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2rlike
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Nl}q[|gw!7S&p>t3L");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "i.'U");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("+");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$StringInSegement");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("T");
      JSONPath jSONPath0 = new JSONPath("*");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("*", (-699L), jSONPath_Operator0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransientException0, (Object) jSONPath_IntOpSegement0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2554);
      JSONPath jSONPath0 = new JSONPath(":n<L%=G,yi0^^ie|", serializeConfig0, (ParserConfig) null);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, serializeConfig0, ":n<L%=G,yi0^^ie|");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("m;~xTONHI4", longArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntObjInSegement0, jSONPath_IntObjInSegement0, true);
      JSONPath jSONPath0 = new JSONPath("m;~xTONHI4");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Integer integer0 = new Integer(160);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, "m;~xTONHI4", mockGregorianCalendar0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("#", "q!f%ptDw", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("#");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, "}j>QtKTu$hd)OvC", "q!f%ptDw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("java.beans.Transient", "java.beans.Transient", false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = new JSONPath("java.beans.Transient");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, "java.beans.Transient");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("_Qc<0zg).4?");
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$RlikeSegement");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("q");
      JSONPath jSONPath0 = new JSONPath("/stackTrace/13");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("$\"[}6&", "q", hashMap0, sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath0.set((Object) sQLClientInfoException0, (Object) "$\"[}6&", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(1130, 1, 1);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntObjInSegement");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "com.alibaba.fastjson.JSONPath$IntObjInSegement", "com.alibaba.fastjson.JSONPath$IntObjInSegement");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1128
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("nuViJ", "nuViJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((short)41);
      boolean boolean0 = JSONPath.containsValue((Object) serializeConfig0, ",", (Object) jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("/stackTrace/11");
      SQLDataException sQLDataException0 = new SQLDataException("/stackTrace/11", sQLNonTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/stackTrace/11", "/stackTrace/11", 114, sQLDataException0);
      int int0 = JSONPath.size((Object) sQLSyntaxErrorException0, "/stackTrace/11");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("andDecrement");
      String string0 = jSONPath0.getPath();
      assertEquals("andDecrement", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("`zt`w:k]=g<");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) "T", "*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/stackTrace/13", "q", (-1));
      Object object0 = JSONPath.eval((Object) sQLTransientConnectionException0, "/stackTrace/13");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Set<?> set0 = JSONPath.keySet((Object) bigDecimal0, ".");
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("wDEltxSR,ufIe2lk");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) parserConfig0, (Object) "wDEltxSR,ufIe2lk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : wDEltxSR,ufIe2lk
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.set((Object) "*", (String) null, (Object) "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nuViJ");
      boolean boolean0 = jSONPath0.remove((Object) "nuViJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/R'oww)", jSONPath_MinSegment0, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("/R'oww)");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/R'oww)", "K*v_", 22);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, "/R'oww)", bigInteger0);
      assertFalse(boolean0);
  }
}
