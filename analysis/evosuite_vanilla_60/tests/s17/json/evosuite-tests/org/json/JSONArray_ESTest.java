/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 16:04:36 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.MultipleGradientPaint;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.security.KeyRep;
import java.sql.PseudoColumnUsage;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.LayoutStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1311, 1598.6849F);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put(0L);
      try { 
        jSONArray0.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONArray jSONArray2 = jSONArray1.put((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONArray2.similar(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("org.json.JSONArray");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2319, (float) 2319);
      try { 
        jSONArray0.getBigInteger(2319);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2319] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1311, 1598.6849F);
      try { 
        jSONArray1.getBigDecimal(116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[116] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query(jSONPointer0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jSONArray0.optNumber(2331, (Number) bigInteger0);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = jSONArray0.optNumber((-1019), (Number) bigInteger0);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      Number number0 = jSONArray0.optNumber(2139, (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      long long0 = jSONArray0.optLong(93, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      long long0 = jSONArray0.optLong(2369);
      assertEquals((-1992L), long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.optInt(2014, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(91, (float) 2369);
      float float0 = jSONArray0.optFloat(91, (-2507.1F));
      assertEquals(2369.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(55, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.optBoolean(1273, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<StandardProtocolFamily> linkedList0 = new LinkedList<StandardProtocolFamily>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(434, bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(1759, bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-621L));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(2340, bigDecimal0);
      assertEquals((short) (-621), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2340, (float) 2340);
      int int0 = jSONArray1.length();
      assertEquals(2341, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(0, 3188.0376F);
      long long0 = jSONArray0.getLong(0);
      assertEquals(3188L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      jSONArray0.put(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U$=R*wHjaz");
      // Undeclared exception!
      jSONArray1.write((Writer) mockPrintWriter0, 2372, 2372);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 2358, 2358);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      jSONArray1.join("");
      try { 
        jSONArray0.toString((-2053));
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unable to write JSONArray value at index: 523
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Formatter.BigDecimalLayoutForm> linkedList0 = new LinkedList<Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.query("/#|'v#S1Q${/o{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // #|'v#S1Q${ is not an array index
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("(s&[{QS2n-Lki1(6/S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      hashMap0.put((Short) null, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.put((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Thread.State, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<Thread.State, MultipleGradientPaint.ColorSpaceType>();
      try { 
        jSONArray0.put((-1577), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1577] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      try { 
        jSONArray0.put((-805), (Collection<?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-805] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1274), 1383);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1274] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1), (-1046.8473F));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(3226, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<ProcessBuilder.Redirect.Type> linkedList0 = new LinkedList<ProcessBuilder.Redirect.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("\"\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getDouble(116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[116] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2359, (-1.1427176F));
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((-1L));
      jSONArray1.put(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")Q}MDZH~&");
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, (int) (byte) (-58), (int) (byte) (-58));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U$=R*wHjaz");
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0, (-605), (-4640));
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unable to write JSONArray value at index: 0");
      Writer writer0 = jSONArray1.write((Writer) mockPrintWriter0, 0, 3202);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1262);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      JSONArray jSONArray2 = jSONArray1.put(1, (Object) pushbackInputStream0);
      assertEquals(2, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      Float float0 = new Float((float) 55);
      JSONArray jSONArray1 = jSONArray0.put(1383, (Object) float0);
      assertEquals(2370, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-3473), (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3473] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2557, (Object) jSONArray0);
      String string0 = jSONArray0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, 0.0F);
      String string0 = jSONArray1.optString(2369, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(2650, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Object) linkedList0);
      Number number0 = jSONArray1.optNumber(0, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2372, (-1.1427176F));
      long long0 = jSONArray0.optLong(2372, 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, Desktop.Action> hashMap0 = new HashMap<Dialog.ModalityType, Desktop.Action>(2331);
      jSONArray0.put(2338, (Map<?, ?>) hashMap0);
      long long0 = jSONArray0.optLong(2338, (long) 2374);
      assertEquals(2339, jSONArray0.length());
      assertEquals(2374L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      Normalizer.Form normalizer_Form0 = Normalizer.Form.NFKD;
      Normalizer.Form normalizer_Form1 = jSONArray0.optEnum(class0, 1278, normalizer_Form0);
      assertSame(normalizer_Form0, normalizer_Form1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2374, (float) 2374);
      int int0 = jSONArray0.optInt(2374, 2331);
      assertEquals(2374, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(5850, (-477));
      assertEquals((-477), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      float float0 = jSONArray0.optFloat((-1473), (float) (-1473));
      assertEquals((-1473.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(2341, (-3093.843306689));
      assertEquals((-3093.843306689), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1311, 1598.6849F);
      Object object0 = jSONArray0.opt(11);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.opt(1301);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.opt((-10));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(91, (float) 2374);
      try { 
        jSONArray1.getBoolean(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get(2372);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2372] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, (float) 10);
      Object object0 = jSONArray0.get(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONPointer jSONPointer0 = new JSONPointer("");
      Object object0 = jSONArray0.optQuery(jSONPointer0);
      assertSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Locale.Category> class0 = Locale.Category.class;
      jSONArray0.optEnum(class0, 3110);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<KeyRep.Type> linkedList0 = new LinkedList<KeyRep.Type>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((Object) jSONArray1);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2374, (float) 2374);
      List<Object> list0 = jSONArray0.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      List<Object> list0 = jSONArray1.toList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2299, (float) 2299);
      // Undeclared exception!
      jSONArray1.toString(2299);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      JSONArray jSONArray2 = jSONArray1.put(false);
      String string0 = jSONArray2.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      jSONArray0.put((Object) linkedList0);
      String string0 = jSONArray0.toString((-2263));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.toJSONObject(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList0.add(proxy_Type0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(37.960128306423904);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      linkedList0.add(proxy_Type0);
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.similar(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-3318.2437268768736));
      boolean boolean0 = jSONArray0.similar(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(91, (float) 2374);
      jSONArray0.remove(58);
      assertEquals(91, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.remove(32);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-2347));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(55, true);
      assertEquals(56, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-792), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-792] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      String string0 = jSONArray0.optString(0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(91, (float) 2374);
      Number number0 = jSONArray0.getNumber(91);
      Number number1 = jSONArray0.optNumber(91, number0);
      assertEquals(2374.0F, number1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((Object) linkedList0);
      Number number0 = jSONArray0.optNumber(0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2374, (float) 2374);
      long long0 = jSONArray1.optLong(2374);
      assertEquals(2374L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      jSONArray0.put((Object) hashMap0);
      long long0 = jSONArray0.optLong(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(16);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(2319);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(2340, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0, (long) 0);
      BigDecimal bigDecimal0 = new BigDecimal((-669.0));
      BigDecimal bigDecimal1 = jSONArray1.optBigDecimal(0, bigDecimal0);
      assertEquals(1, jSONArray0.length());
      assertNotSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(91, (float) 2374);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONArray0.optBigInteger(91, bigInteger0);
      assertEquals((byte)70, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = jSONArray0.optBigInteger(0, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((Object) linkedList0);
      BigInteger bigInteger0 = jSONArray0.optBigInteger(0, (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      jSONArray0.put((Collection<?>) linkedList0);
      int int0 = jSONArray0.optInt(0, 5850);
      assertEquals(5850, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2374, (float) 2374);
      int int0 = jSONArray0.optInt(2374);
      assertEquals(2374, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      jSONArray0.put((Object) linkedList0);
      float float0 = jSONArray0.optFloat(0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      double double0 = jSONArray0.optDouble(2369, (double) 2370);
      assertEquals((-1992.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2340, (float) 2340);
      jSONArray0.join("");
      MockFile mockFile0 = new MockFile("m,vkC}q@j@ej_&#A");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      try { 
        jSONArray1.write((Writer) mockPrintWriter0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unable to write JSONArray value at index: 639
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      try { 
        jSONArray1.getString(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      long long0 = jSONArray1.getLong(2369);
      assertEquals((-1992L), long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Formatter.BigDecimalLayoutForm> hashMap0 = new HashMap<Object, Formatter.BigDecimalLayoutForm>();
      JSONArray jSONArray1 = jSONArray0.put(5850, (Map<?, ?>) hashMap0);
      try { 
        jSONArray1.getLong(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Month, PseudoColumnUsage> hashMap0 = new HashMap<Month, PseudoColumnUsage>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      JSONObject jSONObject0 = jSONArray0.getJSONObject(0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2340, (float) 2340);
      try { 
        jSONArray1.getJSONObject(1721);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1721] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Object) linkedList0);
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      int int0 = jSONArray1.getInt(2369);
      assertEquals((-1992), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(10, (float) 10);
      try { 
        jSONArray0.getInt(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(91, (float) 2374);
      assertEquals(92, jSONArray0.length());
      
      float float0 = jSONArray0.getFloat(91);
      assertEquals(2374.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2369, (-1992.0F));
      try { 
        jSONArray1.getFloat(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2319, (float) 2319);
      boolean boolean0 = jSONArray1.optBoolean(2313, false);
      assertEquals(2320, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2369, (-1992.0F));
      try { 
        jSONArray0.getNumber(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[91] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(" [character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[f9kvX0FS[yJy^q`b1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 10 [character 11 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONArray0.getEnum(class0, 2357);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2357] is not an enum of type java.io.StringWriter@0000000002.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(3553);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1.1427176F));
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull((-17));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray0.getJSONArray(0);
      assertNotSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      double double0 = jSONArray1.optDouble(0, (double) 2340);
      assertEquals(2340.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt(32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1178));
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      try { 
        jSONArray0.put((-3410), (long) (-3410));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3410] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(2358);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2331, 130);
      assertEquals(2332, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.put(12, (Collection<?>) linkedList0);
      assertEquals(13, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2332, 3356.0378386488);
      assertEquals(2333, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2357, (float) 2357);
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONArray1.getEnum(class0, 2357);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2357] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockFile mockFile0 = new MockFile("m,vkC}q@j@ej_&#A");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean((-1228));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.optString(2292);
      assertEquals("", string0);
  }
}
