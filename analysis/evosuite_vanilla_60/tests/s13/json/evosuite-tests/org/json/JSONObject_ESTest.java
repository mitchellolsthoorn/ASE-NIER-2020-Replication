/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 15:21:19 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.SyncFailedException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.net.URISyntaxException;
import java.security.KeyRep;
import java.sql.PseudoColumnUsage;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Formatter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.BiConsumer;
import javax.jws.WebParam;
import javax.smartcardio.CardTerminals;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.SortOrder;
import javax.tools.JavaFileObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      JSONObject.stringToValue("f.N<w");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(87);
      File file0 = MockFile.createTempFile("iVFfVlQ&*~C!2f", "null");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      JSONObject jSONObject2 = new JSONObject(mockFileWriter0);
      String string0 = "[oidH$&$_ceRa&1i!Wc";
      JSONObject jSONObject3 = jSONObject1.put("[oidH$&$_ceRa&1i!Wc", false);
      Class<Locale.Category> class0 = Locale.Category.class;
      JSONObject jSONObject4 = new JSONObject();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONObject4.optEnum(class0, "[oidH$&$_ceRa&1i!Wc", locale_Category0);
      jSONObject2.has("f.N<w");
      try { 
        jSONObject3.write((Writer) mockFileWriter0, (-1994665241), 87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      JSONObject.stringToValue("get");
      JSONObject jSONObject1 = new JSONObject((Object) "get");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "get";
      stringArray0[1] = "] is not a Boolean.";
      stringArray0[2] = "get";
      stringArray0[3] = "get";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject3 = jSONObject2.append("] is not a Boolean.", "get");
      JSONObject jSONObject4 = new JSONObject(92);
      jSONObject1.put("get", (double) 92);
      jSONObject2.optBoolean("get", true);
      jSONObject2.names();
      JSONObject jSONObject5 = new JSONObject();
      jSONObject5.optNumber("get", (Number) bigInteger0);
      jSONObject3.put("get", (float) 92);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "] is not a number.";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      jSONObject0.put("] is not a number.", (-1686));
      try { 
        jSONObject0.getBigDecimal("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String string0 = "f.N<w";
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      JSONObject.stringToValue("f.N<w");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-128);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.plus();
      jSONObject1.optBigDecimal("f.N<w", bigDecimal0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSONObject1.optInt("f.N<w");
      jSONObject1.optDouble("f.N<w", (-198.53680550355));
      jSONObject1.optString("f.N<w");
      String string0 = "58fI6h";
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("istryLock", "f.N<w", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, ";8<KP?>{T@");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "f.N<w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"f.N<w\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("] is not a number.");
      JSONObject.quote("] is not a number.");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONObject0.optBigInteger("4g7M#RT.d", (BigInteger) null);
      jSONObject0.toString();
      jSONObject0.optJSONArray("z\"]cgqO-joSN[VR");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(46);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-4);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "do";
      JSONObject jSONObject2 = jSONObject1.increment("do");
      JSONObject.stringToValue("do");
      try { 
        jSONObject2.putOnce("do", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"do\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(46);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-4);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject1.increment("do");
      JSONObject.stringToValue("do");
      MockPrintStream mockPrintStream0 = new MockPrintStream("do");
      JSONObject.stringToValue("0");
      Class<Proxy.Type> class0 = Proxy.Type.class;
      jSONObject0.optEnum(class0, "do");
      jSONObject2.optInt("0");
      // Undeclared exception!
      try { 
        jSONObject0.query(".0UmixI8,=eYI/V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.getNames(jSONObject0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("true", false);
      mockFileWriter0.getEncoding();
      JSONObject jSONObject2 = new JSONObject(mockFileWriter0);
      JSONObject.getNames((Object) jSONObject1);
      try { 
        jSONObject1.increment("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      Locale.getISOLanguages();
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-40);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("Ll,G)fJuLq.*v", bigInteger0);
      jSONObject1.toString();
      jSONObject1.optJSONArray("`[9 _UZ][");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject.doubleToString((-656.522F));
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean.valueOf(true);
      JSONObject.stringToValue("FJ");
      JSONObject jSONObject0 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mL5^{BWYK,vLFde";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      jSONObject0.optBoolean("mL5^{BWYK,vLFde", true);
      jSONObject0.names();
      jSONObject0.optInt("FJ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)7);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BT.VatGh%tQ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      jSONObject0.put("gettoLowerCase", false);
      JSONObject.isDecimalNotation("isisEmpty");
      Locale locale0 = Locale.ROOT;
      JSONObject jSONObject1 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\f");
      JSONObject.quote("gettoLowerCase", (Writer) charArrayWriter0);
      JSONObject.quote("ishashCode");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      String string0 = "f.N<w";
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      try { 
        jSONObject0.toString(3345);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      String string1 = null;
      jSONObject0.optString((String) null);
      JSONObject.getNames(jSONObject0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(byteArrayOutputStream0);
      jSONObject1.optFloat("Zn`P*iR/n", 0.0F);
      JSONObject jSONObject2 = jSONObject0.put("", 0.0F);
      try { 
        jSONObject2.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Character character0 = Character.valueOf('\\');
      String string0 = "do";
      JSONObject.stringToValue("do");
      MockPrintStream mockPrintStream0 = new MockPrintStream("do");
      JSONObject jSONObject0 = new JSONObject(character0);
      try { 
        jSONObject0.getBigDecimal("do");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean.valueOf(true);
      JSONObject.stringToValue("FJ");
      JSONObject jSONObject0 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mL5^{BWYK,vLFde";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate("mL5^{BWYK,vLFde", "FJ");
      JSONObject jSONObject2 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      jSONObject0.optBoolean("mL5^{BWYK,vLFde", true);
      jSONObject0.names();
      jSONObject0.optInt("FJ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#k>97%F");
      JSONObject.wrap(mockPrintStream0);
      byteArray0[1] = (byte) (-40);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject2.optBigInteger("", bigInteger0);
      jSONObject0.toString();
      jSONObject2.optJSONArray("`[9 _UZ][");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "?q-BA";
      JSONObject.stringToValue("?q-BA");
      HashMap<JSONObject, Window.Type> hashMap0 = new HashMap<JSONObject, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string1 = "*";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("is");
      // Undeclared exception!
      try { 
        JSONObject.quote("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      JSONObject.stringToValue("get");
      JSONObject jSONObject1 = new JSONObject((Object) "get");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "get";
      stringArray0[1] = "] is not a Boolean.";
      stringArray0[2] = "get";
      stringArray0[0] = "get";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONObject1.append("] is not a Boolean.", "get");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject1.put("get", (double) 92);
      jSONObject0.optBoolean("[Ao~`", true);
      jSONObject1.names();
      Integer integer0 = new Integer(92);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-16);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("");
      JSONObject.quote("]9dt#t!h", (Writer) mockPrintWriter0);
      jSONObject1.get("get");
      jSONObject3.optNumber("CR", (Number) (byte) (-40));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = (-656.522F);
      Float float1 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", true);
      Float float2 = new Float((-656.522F));
      jSONObject1.optNumber("?q-BA", (Number) float1);
      LinkedList<LayoutStyle.ComponentPlacement> linkedList0 = new LinkedList<LayoutStyle.ComponentPlacement>();
      jSONObject0.put("?q-BA", (Collection<?>) linkedList0);
      jSONObject1.optDouble("lo");
      HashMap<Formatter.BigDecimalLayoutForm, RoundingMode> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, RoundingMode>();
      String string0 = "2'";
      JSONObject jSONObject2 = jSONObject1.put("org.json.JSONObject$1", (Map<?, ?>) hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.json.JSONObject$1");
      jSONObject2.putOpt("2'", mockPrintWriter0);
      JSONObject.stringToValue("9:cNw7Sa");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("?q-BA", true);
      Float float1 = new Float((-656.522F));
      JSONObject.stringToValue("?q-BA");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "?q-BA";
      stringArray0[1] = "?q-BA";
      stringArray0[2] = "?q-BA";
      stringArray0[3] = "?q-BA";
      stringArray0[4] = "?q-BA";
      JSONObject jSONObject1 = new JSONObject("?q-BA", stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      jSONObject1.optDouble("int", 0.0);
      try { 
        jSONObject0.getBigInteger("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "?q-BA";
      jSONObject0.put("?q-BA", true);
      Float float1 = new Float((-656.522F));
      jSONObject0.optNumber("?q-BA", (Number) null);
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_PRESENT;
      linkedList0.add(cardTerminals_State0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("?q-BA", true);
      Float float1 = new Float((-656.522F));
      jSONObject0.optNumber("?q-BA", (Number) null);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSONObject0.accumulate("2}C->9!", dataInputStream0);
      jSONObject0.toString();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<WebParam.Mode, Authenticator.RequestorType> hashMap0 = new HashMap<WebParam.Mode, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("s%", "s%");
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optBigInteger("s%", bigInteger0);
      JSONObject.getNames((Object) "f.N<w");
      JSONObject jSONObject2 = new JSONObject(28);
      try { 
        jSONObject1.getBigInteger("f.N<w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      String string0 = "in";
      String string1 = null;
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      CardTerminals.State cardTerminals_State0 = CardTerminals.State.CARD_PRESENT;
      linkedList0.add(cardTerminals_State0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      String string0 = "in";
      String string1 = null;
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getDouble("E^o?C+\"Y$u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000020] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.getNames(jSONObject0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(byteArrayOutputStream0);
      jSONObject1.optFloat("Zn`P*iR/n", 0.0F);
      JSONObject jSONObject2 = jSONObject0.put("", 0.0F);
      jSONObject2.getLong("");
      String string1 = "false";
      MockFile mockFile0 = new MockFile("", "false");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile("false", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 92;
      JSONObject jSONObject0 = new JSONObject(92);
      String string0 = "get";
      JSONObject.stringToValue("get");
      JSONObject jSONObject1 = new JSONObject((Object) "get");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "get";
      stringArray0[2] = "get";
      stringArray0[3] = "get";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONObject2.append(stringArray0[1], "get");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      JSONObject.isDecimalNotation("] is not a number.");
      try { 
        jSONObject0.getBigDecimal("wzMdJa:S=QJ&&)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a number.";
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.isDecimalNotation("] is not a number.");
      try { 
        jSONObject1.getJSONObject("J7Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)123);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optInt("getlength");
      JSONObject.isDecimalNotation("getlength");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BT.VatGh%tQ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("gettoLowerCase", false);
      Class<Locale.Category> class0 = Locale.Category.class;
      String string0 = "b+4.@d2qE:.]c_c\\u$";
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONObject1.optEnum(class0, string0, locale_Category0);
      jSONObject1.has("BT.VatGh%tQ");
      JSONObject jSONObject2 = new JSONObject(98);
      jSONObject0.optJSONObject("BT.VatGh%tQ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject3 = (JSONObject)jSONObject0.query(jSONPointer0);
      JSONObject.quote("\f");
      Float float0 = new Float(0.0);
      jSONObject3.optInt("gettoLowerCase");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BT.VatGh%tQ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("BT.VatGh%tQ", false);
      jSONObject1.has("BT.VatGh%tQ");
      JSONObject jSONObject2 = new JSONObject(98);
      jSONObject0.optJSONObject("BT.VatGh%tQ");
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleKeys();
      JSONObject.quote("\f");
      Float float0 = new Float((double) (byte)33);
      jSONObject2.optInt("istoString");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject.doubleToString((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Ll,G)fJuLq.*v";
      String string1 = "do";
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      jSONObject1.has("Ll,G)fJuLq.*v");
      String string2 = "\\\\";
      String string3 = "Rs1wC>`";
      try { 
        MockURI.URI("Rs1wC>`");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 5: Rs1wC>`
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "] is not a Boolean.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "042S, 8aZ B(");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.reset();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "] is not a Boolean.";
      stringArray0[1] = "] is not a Boolean.";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "hashCode";
      stringArray0[4] = "Error reading value at index position ";
      stringArray0[5] = "] is not a Boolean.";
      stringArray0[6] = "] is not a Boolean.";
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = null;
      StringWriter stringWriter0 = new StringWriter(240);
      StringWriter stringWriter1 = stringWriter0.append('V');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      JSONObject.quote((String) null, (Writer) stringWriter2);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.doubleToString(0.0);
      HashMap<PipedWriter, MockRandomAccessFile> hashMap0 = new HashMap<PipedWriter, MockRandomAccessFile>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getString("1>4S/G'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      String string0 = "_chDhC7";
      JSONObject jSONObject0 = new JSONObject((int) (byte)64);
      jSONObject0.toMap();
      jSONObject0.toString();
      try { 
        JSONObject.stringToNumber("_chDhC7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [_chDhC7] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BT.VatGh%tQ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("gettoLowerCase", false);
      Class<Locale.Category> class0 = Locale.Category.class;
      String string0 = "b+4.@d2qE:.]c_c\\u$";
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONObject1.optEnum(class0, string0, locale_Category0);
      jSONObject1.has("BT.VatGh%tQ");
      JSONObject jSONObject2 = new JSONObject(98);
      jSONObject0.write((Writer) charArrayWriter0, 1000000, (-124));
      JSONObject.stringToValue("BT.VatGh%tQ");
      Class<Proxy.Type> class1 = Proxy.Type.class;
      jSONObject0.optEnum(class1, "f.N<w");
      jSONObject0.optInt("to");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      String string0 = "_chDhC7";
      JSONObject jSONObject0 = new JSONObject((int) (byte)64);
      try { 
        jSONObject0.getInt("G4;/DNr@<1-#@!<I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optBoolean("!U3`r~,#PQ|jwC?xV");
      jSONObject0.optLong("!U3`r~,#PQ|jwC?xV", 657L);
      JSONObject jSONObject1 = jSONObject0.putOpt("!U3`r~,#PQ|jwC?xV", "!U3`r~,#PQ|jwC?xV");
      jSONObject1.put("n", (-1L));
      jSONObject1.optFloat("!U3`r~,#PQ|jwC?xV");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      pipedInputStream0.mark(3192);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      try { 
        pipedOutputStream0.write(byteArray0, (-848), (int) (byte)77);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      JSONObject.stringToValue("get");
      JSONObject jSONObject1 = new JSONObject((Object) "get");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "get";
      stringArray0[1] = "] is not a Boolean.";
      stringArray0[2] = "get";
      stringArray0[2] = "get";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject2.append("] is not a Boolean.", "get");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject1.put("get", (double) 92);
      jSONObject1.toMap();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GfliLOt");
      JSONObject.quote("getlength", (Writer) mockPrintWriter0);
      jSONObject1.optLong("get");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BT.VatGh%tQ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("gettoLowerCase", false);
      Class<Locale.Category> class0 = Locale.Category.class;
      String string0 = "b+4.@d2qE:.]c_c\\u$";
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONObject1.optEnum(class0, string0, locale_Category0);
      jSONObject1.has("BT.VatGh%tQ");
      JSONObject jSONObject2 = new JSONObject(98);
      jSONObject0.optJSONObject("BT.VatGh%tQ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject0.query(jSONPointer0);
      JSONObject.quote("\f");
      Float float0 = new Float(0.0);
      JSONObject.numberToString(float0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = (-656.522F);
      Float float1 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "?q-BA";
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", true);
      Float float2 = new Float((-656.522F));
      jSONObject1.optNumber("?q-BA", (Number) float1);
      String string1 = "do";
      String string2 = null;
      // Undeclared exception!
      try { 
        jSONObject1.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      String string0 = "f.N<w";
      JSONObject jSONObject0 = new JSONObject((int) (byte)64);
      try { 
        jSONObject0.getBigInteger("f.N<w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<WebParam.Mode, Authenticator.RequestorType> hashMap0 = new HashMap<WebParam.Mode, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("s%", "s%");
      String string0 = "_chDhC7";
      JSONObject jSONObject2 = new JSONObject(28);
      try { 
        jSONObject1.getBigInteger("f.N<w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-4);
      JSONObject.stringToValue("do");
      MockPrintStream mockPrintStream0 = new MockPrintStream("do");
      JSONObject.stringToValue("0");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(46);
      Character.valueOf('\\');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.getNames((Object) jSONObject0);
      Integer integer0 = new Integer(46);
      JSONObject.getNames((Object) integer0);
      JSONObject jSONObject2 = jSONObject1.increment("do");
      jSONObject1.putOpt("do", jSONObject2);
      JSONObject.stringToValue("do");
      MockPrintStream mockPrintStream0 = new MockPrintStream("do");
      JSONObject.stringToValue("0");
      Class<Proxy.Type> class0 = Proxy.Type.class;
      jSONObject0.optEnum(class0, "ggaB");
      jSONObject2.optInt("0");
      // Undeclared exception!
      try { 
        jSONObject0.query(".0UmixI8,=eYI/V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      String string0 = null;
      jSONObject0.optString((String) null);
      JSONObject.getNames(jSONObject0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(byteArrayOutputStream0);
      jSONObject1.optFloat("Zn`P*iR/n", 0.0F);
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      String string0 = "f.N<w";
      MockPrintStream mockPrintStream0 = new MockPrintStream("BT.VatGh%tQ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("gettoLowerCase", false);
      Class<Locale.Category> class0 = Locale.Category.class;
      String string1 = "b+4.@d2qE:.]c_c\\u$";
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONObject1.optEnum(class0, string1, locale_Category0);
      jSONObject1.has("BT.VatGh%tQ");
      JSONObject jSONObject2 = new JSONObject(98);
      jSONObject1.write((Writer) charArrayWriter0, (-2102), 128);
      try { 
        jSONObject2.getInt("f.N<w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.put("?q-BA", false);
      String string0 = "is";
      MockPrintStream mockPrintStream0 = new MockPrintStream("?q-BA");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 92);
      JSONObject.wrap(float0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (-901), 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("y^i", "y^i");
      try { 
        jSONObject1.getNumber("y^i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext((byte)33, roundingMode0);
      mathContext0.equals("f.N<w");
      mathContext0.getRoundingMode();
      mathContext0.getPrecision();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.toBigIntegerExact();
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject.stringToValue("I");
      jSONObject0.optDouble(",xRAAUO(", (double) 0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      jSONObject0.optEnum(class0, "f.N<w");
      jSONObject0.toString();
      jSONObject0.optFloat(",xRAAUO(", 2482.8958F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      String string0 = "?yWf";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('x');
      jSONObject0.has("?yWf");
      JSONObject jSONObject1 = new JSONObject(70);
      int int0 = 55;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 123);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      jSONObject0.write((Writer) mockPrintWriter0, 70, 55);
      jSONObject0.write((Writer) charArrayWriter0);
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Character.valueOf('\\');
      JSONObject.stringToValue("do");
      MockPrintStream mockPrintStream0 = new MockPrintStream("do");
      JSONObject.getNames((Object) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JSONObject.stringToValue("7xG1nDS{if");
      HashMap<JSONObject, Window.Type> hashMap0 = new HashMap<JSONObject, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("7xG1nDS{if", 2371);
      jSONObject0.optBoolean("A JSONObject text must end with '}'");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("?yWf", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(jSONObject0);
      jSONObject0.remove("zAq+;'g^9yB9%iw");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("?yWf", (Collection<?>) set0);
      jSONObject1.optDouble("?yWf");
      HashMap<Formatter.BigDecimalLayoutForm, RoundingMode> hashMap0 = new HashMap<Formatter.BigDecimalLayoutForm, RoundingMode>();
      jSONObject0.put("2'", (Map<?, ?>) hashMap0);
      jSONObject1.putOpt("?yWf", charArrayWriter0);
      JSONObject.stringToValue("6$BD{$)CM");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 0;
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("?yWf", (Writer) charArrayWriter1);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(jSONObject0);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject0.put("?yWf", (Collection<?>) set0);
      JSONObject.stringToValue("zAq+;'g^9yB9%iw");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.gcd(bigInteger0);
      jSONObject0.write((Writer) charArrayWriter1);
      // Undeclared exception!
      try { 
        jSONObject0.query("zAq+;'g^9yB9%iw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      JSONObject.stringToValue("get");
      JSONObject jSONObject1 = new JSONObject((Object) "get");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "get";
      stringArray0[1] = "] is not a Boolean.";
      stringArray0[1] = "get";
      stringArray0[3] = "get";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject2.append("get", stringArray0[2]);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject1.put("get", (double) 92);
      jSONObject2.optBoolean("get", false);
      jSONObject2.names();
      Integer integer0 = new Integer(92);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-16);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      jSONObject3.toString();
      jSONObject0.optJSONArray("B(");
      JSONObject.numberToString((byte) (-16));
      jSONObject1.optJSONObject("t");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject4.query(jSONPointer0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("?yWf", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(jSONObject0);
      jSONObject0.remove("zAq+;'g^9yB9%iw");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("?yWf", (Collection<?>) set0);
      JSONObject.stringToValue("%s is not an array index");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.gcd(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      jSONObject1.optBigDecimal("Ac#eK,lYGT;]E'1Fs,-", bigDecimal0);
      jSONObject1.put("%s is not an array index", 0L);
      jSONObject1.optInt("\"", 0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("y^i", "y^i");
      jSONObject0.remove("y^i");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      jSONObject0.put("f.N<w", false);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext((byte)33, roundingMode0);
      mathContext0.getPrecision();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.toBigIntegerExact();
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put(")(-B\"HUl&NOJa&]?aei", (Collection<?>) linkedList0);
      LinkedList<CharArrayWriter> linkedList1 = new LinkedList<CharArrayWriter>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")(-B\"HUl&NOJa&]?aei";
      stringArray0[1] = ")(-B\"HUl&NOJa&]?aei";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.put("islength", (Collection<?>) linkedList1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      String string0 = "f.N<w";
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      try { 
        jSONObject1.getInt("f.N<w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = new Long(10L);
      JSONObject.testValidity(long0);
      JSONObject jSONObject0 = new JSONObject(1307);
      jSONObject0.optInt("Unable to read the next character from the stream", 1307);
      JSONObject.wrap(long0);
      try { 
        jSONObject0.getFloat("Unable to read the next character from the stream");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("?yWf", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(jSONObject0);
      jSONObject0.remove("zAq+;'g^9yB9%iw");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("?yWf", (Collection<?>) set0);
      JSONObject.stringToValue("%s is not an array index");
      jSONObject0.optInt("].");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.gcd(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      jSONObject0.optBoolean("og<9-'vUYG)#56y[", false);
      jSONObject1.toString(14);
      jSONObject1.keySet();
      jSONObject0.isNull("?yWf");
      try { 
        jSONObject1.getJSONObject("val [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[0] = "].";
      stringArray0[2] = "].";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("].", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject1.append("] could not convert to BigInteger.", stringArray0[1]);
      JSONObject jSONObject3 = jSONObject2.put("].", 0.0F);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject3.optEnum(class1, "8CBK*'IlHZp3s^gUtq");
      JSONObject.stringToValue("sFY``LQX^u<`H?");
      JSONObject.getNames((Object) null);
      jSONObject1.toString(70);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<SortOrder, PseudoColumnUsage> hashMap0 = new HashMap<SortOrder, PseudoColumnUsage>();
      BiConsumer<SortOrder, Object> biConsumer0 = (BiConsumer<SortOrder, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      SortOrder sortOrder0 = SortOrder.UNSORTED;
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.NO_USAGE_RESTRICTIONS;
      hashMap0.put(sortOrder0, pseudoColumnUsage0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject0.toMap();
      jSONObject0.optInt("in");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      jSONObject0.put("f.N<w", false);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext((byte)33, roundingMode0);
      mathContext0.getPrecision();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.toBigIntegerExact();
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put(")(-B\"HUl&NOJa&]?aei", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      jSONObject0.optEnum(class0, "] is not a JSONObject.");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject.stringToValue("?q-BA");
      HashMap<JSONObject, Window.Type> hashMap0 = new HashMap<JSONObject, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("?q-BA", 2371);
      jSONObject0.optBoolean("?q-BA");
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float((-654.2006F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "?q-7EA";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject1 = jSONObject0.put("?q-7EA", false);
      double double0 = new Float((-654.2006F));
      jSONObject1.length();
      JSONObject.doubleToString((-654.2006F));
      try { 
        jSONObject1.getString("?q-7EA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Locale.Category> class0 = Locale.Category.class;
      String string0 = "b+4.@d2qE:.]c_c\\u$";
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONObject0.optEnum(class0, "x{M-U9FiTF+", locale_Category0);
      jSONObject0.has(string0);
      jSONObject0.optJSONObject("/qIvfdf");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleKeys();
      JSONObject.quote("66JIn");
      Float float0 = new Float(1022.30507591);
      JSONObject.numberToString(float0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      JSONObject.stringToValue("get");
      JSONObject jSONObject1 = new JSONObject((Object) "get");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "get";
      stringArray0[1] = "] is not a Boolean.";
      stringArray0[2] = "get";
      stringArray0[3] = "get";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject2.append("] is not a Boolean.", "get");
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject1.put("get", (double) 92);
      jSONObject2.optBoolean("get", true);
      jSONObject2.names();
      Integer integer0 = new Integer(92);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-16);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      jSONObject3.toString();
      jSONObject0.optJSONArray("B(");
      JSONObject.numberToString((byte) (-16));
      jSONObject1.optJSONObject("t");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      jSONObject4.query(jSONPointer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      jSONObject0.put("f.N<w", false);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext((byte)33, roundingMode0);
      mathContext0.getPrecision();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.toBigIntegerExact();
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put(")(-B\"HUl&NOJa&]?aei", (Collection<?>) linkedList0);
      Class<JTable.PrintMode> class0 = JTable.PrintMode.class;
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.NORMAL;
      jSONObject1.optEnum(class0, ")(-B\"HUl&NOJa&]?aei", jTable_PrintMode0);
      jSONObject1.optInt("");
      try { 
        jSONObject0.getJSONObject("isI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000031] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      String string0 = "?q-BA";
      jSONObject0.put("Null pointer", false);
      try { 
        jSONObject0.getDouble("F1M\"'IJXjJ5(oYA-+=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "?q-BA";
      Float float1 = new Float((-656.522F));
      jSONObject0.optNumber("?q-BA", (Number) null);
      try { 
        jSONObject0.getDouble("E^o?C+\"Y$u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject.stringToValue("?q-BA");
      HashMap<JSONObject, Window.Type> hashMap0 = new HashMap<JSONObject, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", 2355);
      jSONObject1.has("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jSONObject0.write((Writer) charArrayWriter0, 14, 2355);
      JSONObject.stringToValue("MDvNxScn%a");
      Class<Proxy.Type> class0 = Proxy.Type.class;
      jSONObject0.optEnum(class0, "\u0007}rjxr{J;>g76w4");
      jSONObject1.optInt("\u0007}rjxr{J;>g76w4");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("?yWf", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(jSONObject0);
      jSONObject0.remove("zAq+;'g^9yB9%iw");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("?yWf", (Collection<?>) set0);
      JSONObject.stringToValue("%s is not an array index");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.gcd(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      jSONObject0.optBoolean("og<9-'vUYG)#56y[", false);
      jSONObject1.toString(14);
      jSONObject1.keySet();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      String string0 = null;
      Class<JTable.PrintMode> class0 = JTable.PrintMode.class;
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.FIT_WIDTH;
      jSONObject0.optEnum(class0, (String) null, jTable_PrintMode0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "{^";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "fYOZ?9dK3 paXZr";
      jSONObject0.optFloat("fYOZ?9dK3 paXZr", 0.0F);
      jSONObject0.length();
      PipedWriter pipedWriter0 = new PipedWriter();
      jSONObject0.putOpt("fYOZ?9dK3 paXZr", pipedWriter0);
      try { 
        JSONObject.quote((String) null, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject.testValidity(long0);
      JSONObject jSONObject0 = new JSONObject(1307);
      String string0 = null;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONObject0.optBoolean((String) null);
      pipedReader0.close();
      try { 
        JSONObject.quote((String) null, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("^egTs`9pRA");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      jSONPointer0.toString();
      JSONObject jSONObject1 = new JSONObject(linkedList1);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONObject1.put("", (Collection<?>) linkedList2);
      JSONObject.quote("^egTs`9pRA");
      jSONObject0.optFloat("<YhB", 0.0F);
      jSONObject0.optBoolean(".", true);
      try { 
        jSONObject2.getJSONArray("'_V(Ei");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject.doubleToString((-656.522F));
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("-656.52197265625");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "y^i";
      jSONObject0.append("y^i", "y^i");
      JSONObject.doubleToString(Double.NaN);
      String string1 = "<}MuP";
      File file0 = MockFile.createTempFile("<}MuP", "5T}CB#qT:JZ7{h5>/K");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      JSONTokener jSONTokener0 = new JSONTokener(mockFileReader0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.reset();
      charArrayWriter0.reset();
      charArrayWriter0.write(0);
      int int0 = (-22);
      JSONObject.writeValue(charArrayWriter0, charArrayWriter0, 0, (-22));
      String string0 = "\\f";
      JSONObject.doubleToString(0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\f", "\f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject.doubleToString((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.isDecimalNotation("/@9{w6a2bfMO3");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      JSONObject.stringToValue("get");
      JSONObject jSONObject1 = new JSONObject((Object) "get");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "get";
      stringArray0[1] = "] is not a Boolean.";
      stringArray0[2] = "get";
      stringArray0[3] = "get";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject2.append("] is not a Boolean.", "get");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject1.put("get", (double) 92);
      jSONObject2.optBoolean("[Ao~`", true);
      jSONObject2.names();
      Integer integer0 = new Integer(92);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-16);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      jSONObject1.optBigInteger("", bigInteger1);
      jSONObject3.toString();
      jSONObject0.optJSONArray("B(");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSONObject1.optInt("f.N<w");
      jSONObject0.optDouble("f.N<w", (double) (byte)64);
      jSONObject1.put("f.N<w", 131.57);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      Character.valueOf('\\');
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.getNames((Object) jSONObject0);
      Integer integer0 = new Integer(92);
      JSONObject.getNames((Object) integer0);
      JSONObject jSONObject2 = jSONObject1.increment("do");
      jSONObject0.has("Ll,G)fJuLq.*v");
      jSONObject1.putOpt("do", jSONObject2);
      JSONObject.stringToValue("do");
      jSONObject1.optDouble("Ll,G)fJuLq.*v", (double) 92);
      JSONObject.stringToValue("do");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("((x@Www4M~i\"w.Mrg");
      assertNull(number0);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONObject0.optEnum(class0, "((x@Www4M~i\"w.Mrg", locale_Category0);
      String string0 = "toString";
      jSONObject0.has("\r");
      int int0 = 1183;
      JSONObject jSONObject1 = new JSONObject(1183);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 3620);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      jSONObject1.write((Writer) mockPrintWriter0, 55, 3012);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("is");
      jSONObject1.put("?q-BA", false);
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONObject.numberToString(bigInteger0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 190, (-975));
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject.testValidity(long0);
      int int0 = 1307;
      JSONObject jSONObject0 = new JSONObject(1307);
      jSONObject0.optInt("Unable to read the next character from the stream", 1307);
      try { 
        jSONObject0.getFloat("Unable to read the next character from the stream");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<WebParam.Mode, Long> hashMap0 = new HashMap<WebParam.Mode, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optNumber("((x@Www4M~i\"w.Mrg");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optBoolean("y^i");
      jSONObject0.append("y^i", "y^i");
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      String string0 = "org.json.JSONException";
      JSONObject.valueToString("org.json.JSONException");
      try { 
        jSONObject0.getEnum(class0, "org.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not an enum of type java.io.StringWriter@0000000011.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = new JSONObject(52);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      JSONObject.stringToValue("get");
      JSONObject jSONObject1 = new JSONObject((Object) "get");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "get";
      stringArray0[1] = "] is not a Boolean.";
      stringArray0[2] = "get";
      stringArray0[3] = "get";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.optBoolean("[Ao~`", true);
      jSONObject2.names();
      int int0 = new Integer(92);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-16);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      jSONObject1.optBigInteger("", bigInteger1);
      jSONObject3.toString();
      jSONObject0.optJSONArray("B(");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject jSONObject0 = new JSONObject((int) (byte)64);
      String string0 = "G4;/D\\Nr@<1-#@!<I";
      try { 
        jSONObject0.getInt("G4;/DNr@<1-#@!<I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      Character character0 = new Character('\\');
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.getNames(jSONObject0);
      Integer integer0 = new Integer(92);
      JSONObject.getNames((Object) integer0);
      jSONObject0.toString(92);
      try { 
        jSONObject0.getString("java.io.StringWriter@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSONObject1.optInt("f.N<w");
      jSONObject1.optDouble("f.N<w", (-198.53680550355));
      jSONObject0.keys();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("is");
      jSONObject1.put("?q-BA", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 190, (-975));
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("y^i", "y^i");
      HashMap<PipedWriter, MockRandomAccessFile> hashMap1 = new HashMap<PipedWriter, MockRandomAccessFile>();
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      String string0 = "8*dnl8bA2yZp ";
      try { 
        jSONObject3.getString("8*dnl8bA2yZp ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", false);
      String string0 = "is";
      MockPrintStream mockPrintStream0 = new MockPrintStream("is");
      jSONObject1.put("?q-BA", false);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Class<Locale.Category> class0 = Locale.Category.class;
      jSONObject1.optEnum(class0, "is", locale_Category0);
      String string1 = "toString";
      jSONObject1.has("toString");
      JSONObject jSONObject2 = new JSONObject(1183);
      int int0 = 3620;
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null, 55, 3620);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "?q-BA";
      jSONObject0.optBoolean("?q-BA");
      jSONObject0.put("?q-BA", false);
      try { 
        jSONObject0.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      try { 
        jSONObject0.getInt("hashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("y^i", "y^i");
      try { 
        jSONObject0.getInt("org.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byte byte0 = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      String string0 = "f.N<w";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 8192);
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0);
      jSONObject0.put("x$_~2zA0Q", false);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONObject0.optEnum(class0, "x$_~2zA0Q", locale_Category0);
      jSONObject0.has("\"");
      JSONObject jSONObject1 = new JSONObject((int) (byte)64);
      jSONObject0.putOpt((String) null, fileDescriptor0);
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "?q-BA";
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("is");
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null, 2138, 2138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "?q-BA";
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("is");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 12);
      JSONObject.wrap(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null, 2138, 2138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float((-677.5709F));
      JSONObject jSONObject0 = new JSONObject();
      SortOrder sortOrder0 = SortOrder.UNSORTED;
      HashMap<SortOrder, PseudoColumnUsage> hashMap0 = new HashMap<SortOrder, PseudoColumnUsage>();
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.NO_USAGE_RESTRICTIONS;
      hashMap0.put(sortOrder0, pseudoColumnUsage0);
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONObject0.optEnum(class0, "f.N<w", locale_Category0);
      String string0 = "_chDhC7";
      jSONObject1.has("_chDhC7");
      JSONObject jSONObject2 = new JSONObject((int) (byte)64);
      Writer writer0 = jSONObject1.write((Writer) charArrayWriter0, 55, (int) (byte)64);
      jSONObject0.write(writer0);
      // Undeclared exception!
      try { 
        jSONObject1.query("_chDhC7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      jSONObject0.put("f.N<w", false);
      String string0 = "in";
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject0.getEnum(class0, "in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] is not an enum of type java.io.StringWriter@0000000020.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean.valueOf(true);
      JSONObject.stringToValue("FJ");
      JSONObject jSONObject0 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mL5^{BWYK,vLFde";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.accumulate("mL5^{BWYK,vLFde", jSONObject0);
      jSONObject2.put("FJ", 47);
      jSONObject0.optBoolean("mL5^{BWYK,vLFde", true);
      jSONObject0.names();
      jSONObject0.optInt("FJ");
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.TAI_VIET;
      jSONObject1.optEnum(class0, (String) null, character_UnicodeScript0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("?yWf", (Writer) charArrayWriter0);
      JSONObject.testValidity(jSONObject0);
      jSONObject0.toString(0);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0, mathContext0);
      mathContext0.equals((Object) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("java.io.StringWriter@0000000002", bigDecimal0);
      jSONObject1.toString();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<WebParam.Mode, Authenticator.RequestorType> hashMap0 = new HashMap<WebParam.Mode, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("s%", "s%");
      String string0 = "f.N<w";
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optBigInteger("s%", bigInteger0);
      JSONObject.getNames((Object) "f.N<w");
      String string1 = "_chDhC7";
      JSONObject jSONObject2 = new JSONObject(28);
      try { 
        jSONObject1.getBigInteger("f.N<w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONObject.quote("?yWf", (Writer) charArrayWriter0);
      JSONObject.testValidity(jSONObject0);
      jSONObject0.toString(0);
      try { 
        jSONObject0.getString("java.io.StringWriter@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<WebParam.Mode, Authenticator.RequestorType> hashMap0 = new HashMap<WebParam.Mode, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "f.N<w";
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject1.optBigInteger("s%", bigInteger0);
      JSONObject.getNames((Object) "f.N<w");
      String string1 = "_chDhC7";
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject1.getBigInteger("f.N<w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      jSONObject0.opt("i~QPY&lDsI");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("9~a]T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optDouble("^egTs`9pRA");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      jSONPointer0.toString();
      JSONObject jSONObject1 = new JSONObject(linkedList1);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.accumulate("^egTs`9pRA", (Object) null);
      jSONObject2.optBoolean("^egTs`9pRA", false);
      jSONObject1.names();
      jSONObject1.optInt("org.json.JSONPointer");
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.TAI_VIET;
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      jSONObject2.optEnum(class0, "eO0", character_UnicodeScript0);
      try { 
        JSONObject.stringToNumber("Pd$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [Pd$] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("^egTs`9pRA");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      jSONPointer0.toString();
      JSONObject jSONObject1 = new JSONObject(linkedList1);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.accumulate("^egTs`9pRA", (Object) null);
      jSONObject2.optBoolean("^egTs`9pRA", false);
      jSONObject1.names();
      try { 
        JSONObject.stringToNumber("?N2mm8iI>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [?N2mm8iI>] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      HashMap<PseudoColumnUsage, JavaFileObject.Kind> hashMap0 = new HashMap<PseudoColumnUsage, JavaFileObject.Kind>();
      Character.valueOf('2');
      JSONObject jSONObject0 = new JSONObject(fileDescriptor0);
      JSONObject.getNames((Object) jSONObject0);
      Integer integer0 = new Integer((-1626748351));
      JSONObject.getNames((Object) "TT");
      JSONObject jSONObject1 = jSONObject0.increment("TT");
      jSONObject0.has("fa");
      JSONObject jSONObject2 = jSONObject0.putOpt("<[^Fgr:G| *", "TT");
      JSONObject.stringToValue("TT");
      jSONObject2.optDouble("TT", 0.0);
      JSONObject.stringToValue("A JSONObject text must begin with '{'");
      jSONObject1.putOpt("TT", jSONObject2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("Expected '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [Expected '] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("index %d is out of bounds - the array has %d elements");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [index %d is out of bounds - the array has %d elements] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONObject0.optEnum(class0, "f.N<w", locale_Category0);
      jSONObject1.has("_chDhC7");
      MockPrintStream mockPrintStream0 = new MockPrintStream("f.N<w");
      JSONObject.getNames((Object) locale_Category0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      jSONObject0.put("f.N<w", false);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONObject0.optEnum(class0, "f.N<w", locale_Category0);
      try { 
        jSONObject0.getDouble("_chDhC7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      String string0 = "position";
      try { 
        jSONObject0.getJSONArray("cT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject1 = new JSONObject(fileDescriptor0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<PushbackInputStream> linkedList1 = new LinkedList<PushbackInputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.toJSONObject(jSONArray0);
      String string0 = null;
      jSONObject1.opt((String) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("isposition");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      HashMap<DayOfWeek, GraphicsDevice.WindowTranslucency> hashMap0 = new HashMap<DayOfWeek, GraphicsDevice.WindowTranslucency>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal(111);
      jSONObject1.optNumber("] is not a number.", (Number) bigDecimal0);
      jSONObject1.toString(59);
      try { 
        jSONObject0.getString("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 92;
      String string0 = "get";
      JSONObject.stringToValue("get");
      JSONObject jSONObject0 = new JSONObject((Object) "get");
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "get";
      String string1 = "] is not a Boolean.";
      jSONObject0.optInt("V\"zW1t'I*8A5SC.=<", 92);
      try { 
        jSONObject0.getFloat(stringArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optDouble("^egTs`9pRA");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      jSONPointer0.toString();
      linkedList0.toArray();
      JSONObject.indent((Writer) null, (-1771));
      jSONPointer0.toString();
      jSONObject0.query(jSONPointer0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("^egTs`9pRA", true);
      int int0 = 972;
      JSONObject.indent(mockFileWriter0, 45);
      try { 
        jSONObject0.getFloat("^egTs`9pRA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.getNames((Object) character0);
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      jSONObject0.putOpt("Ll,G)fJuLq.*v", jSONObject1);
      JSONObject.stringToValue("Ll,G)fJuLq.*v");
      jSONObject0.optDouble("Ll,G)fJuLq.*v", 0.0);
      JSONObject.stringToValue("Ll,G)fJuLq.*v");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("?q-BA", false);
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean.valueOf(true);
      JSONObject.stringToValue("mL5^{BWYK,vLFde");
      JSONObject jSONObject0 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mL5^{BWYK,vLFde";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      jSONObject0.optBoolean("mL5^{BWYK,vLFde", true);
      jSONObject0.names();
      try { 
        jSONObject1.getString("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000043] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean.valueOf(true);
      JSONObject.stringToValue("FJ");
      JSONObject jSONObject0 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mL5^{BWYK,vLFde";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate("mL5^{BWYK,vLFde", jSONObject0);
      jSONObject0.optBoolean("mL5^{BWYK,vLFde", true);
      jSONObject0.names();
      jSONObject0.optInt("FJ");
      Class<Character.UnicodeScript> class0 = Character.UnicodeScript.class;
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.TAI_VIET;
      jSONObject1.optEnum(class0, (String) null, character_UnicodeScript0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.isNull("h:");
      String string1 = "] is not a Boolean.";
      jSONObject0.optFloat("] is not a Boolean.");
      String string2 = "VG[";
      // Undeclared exception!
      try { 
        jSONObject0.query("VG[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      Character.valueOf('\\');
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.getNames((Object) jSONObject0);
      Integer integer0 = new Integer(92);
      JSONObject.getNames((Object) integer0);
      JSONObject jSONObject2 = jSONObject1.increment("do");
      jSONObject0.has("Ll,G)fJuLq.*v");
      jSONObject1.putOpt("do", jSONObject2);
      JSONObject.stringToValue("do");
      jSONObject1.optDouble("Ll,G)fJuLq.*v", (double) 92);
      // Undeclared exception!
      try { 
        jSONObject0.query("do");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "{^";
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject0.optBigDecimal("{^", bigDecimal0);
      JSONObject jSONObject1 = new JSONObject((Object) "{^");
      try { 
        jSONObject0.getLong("{^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      jSONObject0.optEnum(class0, "f.N<w", locale_Category0);
      JSONObject.stringToValue(".");
      Class<Proxy.Type> class1 = Proxy.Type.class;
      jSONObject0.optEnum(class1, "_chDhC7");
      jSONObject0.optInt("]");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "[+";
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 1248L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(set0);
      jSONObject0.remove("?yWf");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("3d+'H>x%?|`TIU{d`h6", (Collection<?>) linkedList0);
      JSONObject.stringToValue("%s is not an array index");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.gcd(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jSONObject1.optBigDecimal("", bigDecimal0);
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, 4637L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, (Object) null, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "?q-BA";
      jSONObject0.put("?q-BA", false);
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, (-2539), (-2539));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "{^";
      try { 
        jSONObject0.getNumber("{^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string0 = "].";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      try { 
        jSONObject0.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('b');
      stringWriter0.append((CharSequence) null);
      stringWriter0.append((CharSequence) null);
      stringWriter1.append('\"');
      StringWriter stringWriter2 = new StringWriter();
      JSONObject.indent(stringWriter1, 846);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext((byte)33, roundingMode0);
      mathContext0.getRoundingMode();
      mathContext0.getPrecision();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.toBigIntegerExact();
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", (Collection<?>) linkedList0);
      jSONObject1.toMap();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      jSONObject0.optEnum(class0, "] is not a JSONObject.");
      // Undeclared exception!
      try { 
        jSONObject1.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optDouble("^egTs`9pRA");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      jSONPointer0.toString();
      linkedList0.toArray();
      JSONObject.indent((Writer) null, (-1771));
      jSONPointer0.toString();
      jSONObject0.query(jSONPointer0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("y;TjxGr", false);
      int int0 = (-3324);
      // Undeclared exception!
      try { 
        JSONObject.indent((Writer) null, 972);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "ms\"-.";
      JSONObject.wrap("ms\"-.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('~');
      JSONObject.quote("?yWf", (Writer) charArrayWriter1);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", true);
      Float float0 = new Float((-656.522F));
      jSONObject0.toString((-16));
      try { 
        jSONObject1.getString("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "Zn`P*iR/n";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Zn`P*iR/n");
      MockFileWriter mockFileWriter0 = new MockFileWriter("Zn`P*iR/n", false);
      mockFileWriter0.getEncoding();
      JSONObject.stringToValue("true");
      MockPrintStream mockPrintStream0 = new MockPrintStream("t,ri|");
      JSONObject.stringToValue("%s is not an array index");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Zn`P*iR/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject.stringToValue("do");
      String string0 = "]1eEpe`Q3A";
      MockPrintStream mockPrintStream0 = new MockPrintStream("]1eEpe`Q3A");
      JSONObject.getNames((Object) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      Float float0 = new Float((-1708.38797253261));
      JSONObject jSONObject2 = jSONObject1.append("] could not convert to BigInteger.", "].");
      JSONObject jSONObject3 = jSONObject2.put("P.'QgN+wZ@W,5_L`", 0.0F);
      Class<RoundingMode> class1 = RoundingMode.class;
      jSONObject3.optEnum(class1, "8CBK*'IlHZp3s^gUtq");
      JSONObject.stringToValue("sFY``LQX^u<`H?");
      JSONObject.getNames((Object) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.increment("do");
      jSONObject0.has("Ll,G)fJuLq.*v");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ll,G)fJuLq.*v");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      jSONObject0.has("");
      jSONObject0.putOpt("Ll,G)fJuLq.*v", jSONObject1);
      JSONObject.stringToValue("");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      jSONObject0.opt((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "toString";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("toString", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.optDouble("^egTs`9pRA");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      jSONPointer0.toString();
      linkedList0.toArray();
      try { 
        jSONObject0.getLong("^egTs`9pRA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GlY[VAEU+GCw<Hi";
      stringArray0[1] = "K";
      stringArray0[2] = "";
      stringArray0[3] = "Unable to increment [";
      stringArray0[4] = "] could not convert to BigInteger.";
      JSONObject jSONObject0 = new JSONObject(mockFileReader0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong((String) null, (-86L));
      jSONObject0.optDouble("");
      jSONObject0.optString("] could not convert to BigInteger.");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Character character0 = Character.valueOf('g');
      JSONObject jSONObject0 = new JSONObject(character0);
      jSONObject0.putOpt("", "");
      String string0 = "";
      int int0 = (-1843);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1843
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.stringToValue("PQYGX[l~v<");
      MockPrintStream mockPrintStream0 = new MockPrintStream("do");
      JSONObject.getNames((Object) jSONObject0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "Ll,G)fJuLq.*v";
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      jSONObject0.has("=d");
      String string1 = "~0";
      jSONObject1.putOpt("~0", jSONObject0);
      JSONObject.stringToValue(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float float0 = (-654.2006F);
      Float float1 = new Float((-654.2006F));
      JSONObject jSONObject0 = new JSONObject(float1);
      String string0 = "?q-BA";
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", false);
      jSONObject1.putOpt("?q-BA", (Object) null);
      try { 
        jSONObject0.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      HashMap<PseudoColumnUsage, JavaFileObject.Kind> hashMap0 = new HashMap<PseudoColumnUsage, JavaFileObject.Kind>();
      hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "Unable to increment [";
      try { 
        jSONObject0.getJSONArray("Unable to increment [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('x');
      JSONObject.quote("", (Writer) charArrayWriter1);
      jSONObject0.isNull("?yWf");
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONObject.testValidity(set0);
      jSONObject0.remove("?yWf");
      jSONObject0.optDouble("JSON does not allow non-finite numbers.", (double) 0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)33);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSONObject1.accumulate("f.N<w", pipedInputStream0);
      jSONObject1.toString();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      jSONObject0.optInt((String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-16);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("lklIn8}BNLMp92fk@", bigInteger0);
      jSONObject0.toString();
      jSONObject0.optJSONArray("lklIn8}BNLMp92fk@");
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((int) (byte)64);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("_chDhC7", (Collection<?>) linkedList0);
      jSONObject0.accumulate("value [%s] is not an array or object therefore its key %s cannot be resolved", linkedList0);
      jSONObject0.toString();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Boolean.valueOf(true);
      JSONObject.stringToValue("FJ");
      JSONObject jSONObject0 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mL5^{BWYK,vLFde";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      jSONObject0.optBoolean("mL5^{BWYK,vLFde", true);
      jSONObject0.names();
      jSONObject0.optInt("FJ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-40);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject2.optBigInteger("", bigInteger0);
      jSONObject0.toString();
      jSONObject2.optJSONArray("`[9 _UZ][");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject.stringToValue("?q-BA");
      HashMap<JSONObject, Window.Type> hashMap0 = new HashMap<JSONObject, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", 2371);
      jSONObject0.optBoolean("?q-BA");
      LinkedList<StandardProtocolFamily> linkedList0 = new LinkedList<StandardProtocolFamily>();
      jSONObject1.put("D]Pj(d93d", (Collection<?>) linkedList0);
      Integer integer0 = new Integer(2371);
      jSONObject0.accumulate("2}!->9!", integer0);
      jSONObject1.toString();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Float float0 = new Float((-654.2006F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "org.json.JSONTokener";
      JSONObject jSONObject1 = jSONObject0.put("org.json.JSONTokener", false);
      Float float1 = new Float((-654.2006F));
      jSONObject1.optNumber("org.json.JSONTokener", (Number) float0);
      jSONObject1.toString(2354);
      try { 
        jSONObject1.getString("java.io.StringWriter@0000000016");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.writeValue(charArrayWriter0, charArrayWriter0, 0, 0);
      String string0 = "\\f";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\f", "\f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      HashMap<PseudoColumnUsage, JavaFileObject.Kind> hashMap1 = new HashMap<PseudoColumnUsage, JavaFileObject.Kind>();
      hashMap1.clone();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      jSONObject0.optInt("Sr<-j[X'eY8aJnh`w");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1863);
      String string0 = " WZ~#5dQg$a$";
      jSONObject0.optInt(" WZ~#5dQg$a$");
      String string1 = "]}@K-";
      jSONObject0.optFloat("]}@K-", (-2107.9443F));
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<Dialog.ModalExclusionType, WebParam.Mode> hashMap0 = new HashMap<Dialog.ModalExclusionType, WebParam.Mode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONObject0.optLong("ava", 64L);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("sho");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = true;
      String string0 = "mL5^{BWYK,vLFde";
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("mL5^{BWYK,vLFde");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "] not found.";
      stringArray0[1] = "/(8JU.M<CaBsZ)* ";
      stringArray0[2] = "Illegal escape.";
      stringArray0[3] = "a]M/(&5e9(";
      String string0 = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "!c-K&:uRgwMI@gk2Yj";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONObject[";
      stringArray0[1] = "Unable to write JSONArray value at index: ";
      stringArray0[2] = "}o?Y]hUK'Iw6heT*Yk&";
      stringArray0[3] = "zX\"Pj1]lY>><I2}";
      stringArray0[4] = "org.json.JSONTokener";
      stringArray0[5] = "";
      stringArray0[6] = "^\"}GwIt#bw";
      stringArray0[7] = "";
      stringArray0[8] = "%s is not an array index";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.entrySet();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("?q-BA");
      assertEquals("?q-BA", object0);
      
      HashMap<JSONObject, Window.Type> hashMap0 = new HashMap<JSONObject, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("?q-BA", 2371);
      boolean boolean0 = jSONObject0.optBoolean("?q-BA");
      assertFalse(boolean0);
      
      jSONObject0.toMap();
      jSONObject0.optInt("?q-BA");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.getNames(jSONObject0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JSONObject.wrap(byteArrayOutputStream0);
      jSONObject1.optFloat("Zn`P*iR/n", 0.0F);
      JSONObject jSONObject2 = jSONObject0.put("", 0.0F);
      try { 
        jSONObject2.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = new Float((float) 0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "?q-BA";
      jSONObject0.put("?q-BA", false);
      String string1 = "is";
      MockPrintStream mockPrintStream0 = new MockPrintStream("is");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 12);
      JSONObject.wrap((Object) null);
      BufferedWriter bufferedWriter0 = null;
      try {
        bufferedWriter0 = new BufferedWriter((Writer) null, 1890);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = Boolean.valueOf((String) null);
      JSONObject.getNames((Object) boolean0);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Float float0 = new Float(2424.0F);
      JSONObject.doubleToString(2424.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("d*!M_`5l`*sI&Mo'j4R");
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      Float float0 = new Float((-657.5038F));
      JSONObject.quote("");
      JSONObject.quote("");
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      JSONObject jSONObject2 = jSONObject0.put("D]Pj(d93d", (Collection<?>) linkedList0);
      jSONObject2.accumulate("2}C->9!", "D]Pj(d93d");
      jSONObject1.optLong("2}C->9!");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(46);
      Character.valueOf('\\');
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.getNames((Object) jSONObject0);
      Integer integer0 = new Integer(46);
      JSONObject.getNames((Object) integer0);
      JSONObject jSONObject2 = jSONObject1.increment("do");
      jSONObject0.has("Ll,G)fJuLq.*v");
      jSONObject1.putOpt("do", jSONObject2);
      JSONObject.stringToValue("do");
      MockPrintStream mockPrintStream0 = new MockPrintStream("toL");
      JSONObject.getNames((Object) mockPrintStream0);
      jSONObject0.toString(1000000);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Zn`P*iR/n";
      boolean boolean0 = false;
      JSONObject jSONObject1 = jSONObject0.put("Zn`P*iR/n", false);
      jSONObject1.optLong("Zn`P*iR/n", (-106L));
      jSONObject0.optString((String) null);
      JSONObject.wrap((Object) null);
      jSONObject0.optFloat((String) null, (float) (-106L));
      jSONObject1.put("", (-1906.478F));
      String string1 = "=$)K25sgGv8p;u=d";
      MockFile mockFile0 = new MockFile("~", "Zn`P*iR/n");
      MockFile mockFile1 = new MockFile("] could not be converted to BigInteger.", "] could not be converted to BigInteger.");
      JSONObject.getNames((Object) jSONObject0);
      mockFile0.mkdirs();
      mockFile0.renameTo(mockFile1);
      mockFile0.createNewFile();
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      String string0 = "getlength";
      Locale locale0 = Locale.ITALIAN;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getlength", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name getlength, locale it
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "Unable to write JSONObject value for key: ";
      Locale locale0 = Locale.PRC;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Unable to write JSONObject value for key: ", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name Unable to write JSONObject value for key: , locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      jSONObject0.put("f.N<w", true);
      try { 
        jSONObject0.getDouble("_c@DhC7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("BT.VatGh%tQ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JSONObject jSONObject0 = new JSONObject(dataOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("gettoLowerCase", false);
      jSONObject1.has("BT.VatGh%tQ");
      JSONObject jSONObject2 = new JSONObject(98);
      jSONObject0.optJSONObject("BT.VatGh%tQ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      JSONObject jSONObject3 = (JSONObject)jSONObject0.query(jSONPointer0);
      JSONObject.quote("\f");
      Float float0 = new Float(0.0);
      jSONObject3.optInt("gettoLowerCase");
      JSONObject.wrap(linkedList0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "ms\"-.";
      JSONObject.wrap("ms\"-.");
      String string1 = "[9u&=Ek";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("[9u&=Ek");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{");
      JSONTokener jSONTokener0 = new JSONTokener("#");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("<P:Pb!6j>A%Iz");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("y^i", "y^i");
      jSONObject1.put("y^i", (Map<?, ?>) hashMap0);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      String string0 = "org.json.JSONException";
      try { 
        jSONObject0.getEnum(class0, "org.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not an enum of type java.io.StringWriter@0000000014.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 48, 60);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byteArrayInputStream0, stringArray0);
      jSONObject0.optFloat("0");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a number.";
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      jSONObject0.put("] is not a number.", (Map<?, ?>) hashMap0);
      jSONObject0.optDouble("U.78Hj|D(O5W@", (-2587.257));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JSONObject jSONObject0 = new JSONObject(character0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.getNames((Object) character0);
      String string0 = "Ll,G)fJuLq.*v";
      JSONObject jSONObject1 = jSONObject0.increment("Ll,G)fJuLq.*v");
      String string1 = "";
      jSONObject0.has("");
      jSONObject0.putOpt("Ll,G)fJuLq.*v", jSONObject1);
      JSONObject.stringToValue(string0);
      double double0 = 0.0;
      jSONObject0.optDouble(string0, double0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      jSONObject0.optEnum(class0, string1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getlength");
      JSONObject jSONObject0 = new JSONObject();
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      KeyRep.Type keyRep_Type0 = KeyRep.Type.PUBLIC;
      KeyRep.Type keyRep_Type1 = jSONObject0.optEnum(class0, "getlength", keyRep_Type0);
      assertEquals(KeyRep.Type.PUBLIC, keyRep_Type1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Boolean.valueOf(true);
      JSONObject.stringToValue("FJ");
      JSONObject jSONObject0 = new JSONObject((Object) "mL5^{BWYK,vLFde");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mL5^{BWYK,vLFde";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.stringToValue("FJ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Expected a ',' or '}'");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject.doubleToString((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject1.optLong("/@9{w6a2bfMO3");
      JSONObject jSONObject2 = jSONObject1.accumulate("/@9{w6a2bfMO3", float0);
      jSONObject2.toString();
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", true);
      double double0 = new Float((-656.522F));
      jSONObject1.optNumber("?q-BA", (Number) float0);
      jSONObject0.toString((-16));
      try { 
        jSONObject1.getString("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D%}n#7_MMky$a!NR");
      JSONObject.quote("org.json.JSONException", (Writer) mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter(2325);
      jSONObject0.putOnce("isintern", stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      double double0 = jSONObject0.optDouble("U.78Hj|D(O5W@", (-2587.257));
      assertEquals((-2587.257), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] is not a number.");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject(stringReader0, stringArray0);
      HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter> hashMap0 = new HashMap<LayoutStyle.ComponentPlacement, MockPrintWriter>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*");
      JSONObject.quote("a JSON pointer should start with '/' or '#/'", (Writer) mockPrintWriter0);
      JSONObject.quote("] is not a number.");
      BigDecimal bigDecimal0 = new BigDecimal(1743);
      jSONObject0.optNumber("] is not a number.", (Number) bigDecimal0);
      jSONObject0.put("] is not a number.", (-943.74615F));
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Class<Component.BaselineResizeBehavior> class0 = Component.BaselineResizeBehavior.class;
      try { 
        jSONObject0.getEnum(class0, "org.json.JSONPointerException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2663);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "].";
      stringArray0[2] = "P.'QgN+wZ@W,5_L`";
      stringArray0[3] = "'LV2 YGt2O%!2";
      stringArray0[4] = "XZ:PF";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("", 0.0);
      jSONObject1.optLong("mbW}AZu");
      Class<Dialog.ModalityType> class0 = Dialog.ModalityType.class;
      jSONObject0.optEnum(class0, "'LV2 YGt2O%!2");
      Float float0 = new Float((-1708.38797253261));
      jSONObject1.optNumber("'LV2 YGt2O%!2", (Number) float0);
      jSONObject1.put("].", 3908.5278F);
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4);
      String string0 = "ch";
      try { 
        jSONObject0.getBoolean("ch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      try { 
        jSONObject0.getBoolean("(s06d3PW?T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] could not be converted to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "13gk>Vf\\G-|T@7";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("13gk>VfG-|T@7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(4884);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      JSONObject jSONObject1 = new JSONObject(roundingMode0);
      jSONObject1.put("?q-BA", false);
      try { 
        jSONObject0.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Short short0 = new Short((short)1710);
      JSONObject.wrap(short0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONTokener jSONTokener0 = new JSONTokener(mockFileInputStream0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("is");
      Object object0 = JSONObject.wrap("?q-BA");
      assertEquals("?q-BA", object0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject jSONObject0 = new JSONObject(charArrayWriter0);
      String string0 = "?q-BA";
      jSONObject0.put("?q-BA", true);
      try { 
        jSONObject0.getDouble("-%lzVS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("?q-BA", false);
      try { 
        jSONObject0.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Float float0 = new Float((-656.522F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("?q-BA", false);
      try { 
        JSONObject.stringToNumber("?q-BA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [?q-BA] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float float0 = (-654.2006F);
      Float float1 = new Float((-654.2006F));
      JSONObject jSONObject0 = new JSONObject(float1);
      String string0 = "?q-BA";
      jSONObject0.put("?q-BA", false);
      try { 
        jSONObject0.getDouble("?q-BA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000013] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      HashMap<WebParam.Mode, Authenticator.RequestorType> hashMap0 = new HashMap<WebParam.Mode, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = "s%";
      jSONObject0.append("s%", "s%");
      try { 
        jSONObject0.getLong("s%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("y^i", "y^i");
      try { 
        jSONObject0.getLong("y^i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.append("y^i", "y^i");
      try { 
        JSONObject.stringToNumber("XbPMyg?(HUTzI");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [XbPMyg?(HUTzI] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String string0 = "f.N<w";
      JSONObject jSONObject0 = new JSONObject((Object) "f.N<w");
      JSONObject jSONObject1 = jSONObject0.put("f.N<w", false);
      try { 
        jSONObject1.get("yF2&%)z-UUtjjrTU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote((String) null);
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      jSONObject0.put("", (Collection<?>) linkedList0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "?q-BA";
      JSONObject.stringToValue("?q-BA");
      HashMap<JSONObject, Window.Type> hashMap0 = new HashMap<JSONObject, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("?q-BA", 2371);
      String string1 = "";
      try { 
        jSONObject1.getBigDecimal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject0 = new JSONObject(mockFileInputStream0);
      Class<JTable.PrintMode> class0 = JTable.PrintMode.class;
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.FIT_WIDTH;
      jSONObject0.optEnum(class0, (String) null, jTable_PrintMode0);
      try { 
        jSONObject0.getJSONObject("isI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("toM");
      Writer writer0 = JSONObject.quote("getlength", (Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject.quote("?q-BA");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      HashMap<Float, BufferedInputStream> hashMap0 = new HashMap<Float, BufferedInputStream>();
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("CzU8r-;(XL;Eu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3538));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3538
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(59);
      jSONObject0.increment("Illegal escape.");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = (-1929);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1929
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
