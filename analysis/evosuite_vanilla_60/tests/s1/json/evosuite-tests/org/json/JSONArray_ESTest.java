/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 12:14:17 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.ByteArrayInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.security.KeyRep;
import java.sql.ClientInfoStatus;
import java.sql.RowIdLifetime;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.smartcardio.CardTerminals;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList1);
      jSONArray0.put(1684, (Collection<?>) linkedList0);
      int int0 = jSONArray0.optInt(1684, 1575);
      assertEquals(1575, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("u?A{,'");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1921, (Collection<?>) linkedList0);
      try { 
        jSONArray0.getBigInteger(31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[31] could not convert to BigInteger.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((-10));
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] could not convert to BigDecimal.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1921, (Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) linkedList0);
      String string0 = jSONArray1.toString();
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      Object object0 = jSONArray0.query(jSONPointer0);
      assertSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<CardTerminals.State> linkedList0 = new LinkedList<CardTerminals.State>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(2781, 2639);
      assertEquals(2782, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(44, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1693, (Collection<?>) linkedList0);
      String string0 = jSONArray1.optString(1693);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.optQuery(jSONPointer0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.optQuery("/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Number number0 = jSONArray0.optNumber(10, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Number number0 = jSONArray0.optNumber(1729, (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      Number number0 = jSONArray0.optNumber(34, (Number) bigDecimal0);
      assertEquals((byte) (-1), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      long long0 = jSONArray0.optLong((-882), (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      int int0 = jSONArray0.optInt((-1834), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      float float0 = jSONArray0.optFloat(94, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      float float0 = jSONArray0.optFloat((-1152), (-3135.8F));
      assertEquals((-3135.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(63, (double) 63);
      float float0 = jSONArray0.optFloat(63);
      assertEquals(63.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(94, (-2546.860974));
      assertEquals((-2546.860974), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.optBoolean((-343), false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = jSONArray0.optBigInteger((-1002), (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.valueOf((-3961));
      BigInteger bigInteger1 = jSONArray0.optBigInteger((-346), bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = jSONArray0.optBigDecimal((-371), (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-3411));
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal((-3411), bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1162, false);
      int int0 = jSONArray0.length();
      assertEquals(1163, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1791, 0.0);
      float float0 = jSONArray1.getFloat(1791);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null, 1271, 358);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(953, (Collection<?>) linkedList0);
      // Undeclared exception!
      jSONArray0.toString(953);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1727, (long) 1727);
      jSONArray0.optQuery("");
      // Undeclared exception!
      jSONArray1.toList();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query("-jzL'tU*l;4[+5\"2M:$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1629), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1629] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      // Undeclared exception!
      jSONArray0.put(1000000, false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Dialog.ModalityType, RowIdLifetime> hashMap0 = new HashMap<Dialog.ModalityType, RowIdLifetime>();
      try { 
        jSONArray0.put((-625), (Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-625] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<TrayIcon.MessageType, KeyRep.Type> hashMap0 = new HashMap<TrayIcon.MessageType, KeyRep.Type>();
      // Undeclared exception!
      jSONArray0.put(1000000, (Map<?, ?>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Double double0 = new Double(2394.3);
      hashMap0.put((Long) null, double0);
      // Undeclared exception!
      try { 
        jSONArray0.put((-3104), (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      jSONArray0.put(1000000, (Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-32), 2332L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-32] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1292), Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1292] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.optQuery("+q2[SrKkraC{4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2844, true);
      // Undeclared exception!
      jSONArray0.join("dgy gW.3oQ;i.L/fR3");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Window.Type, DayOfWeek> hashMap0 = new HashMap<Window.Type, DayOfWeek>();
      JSONArray jSONArray1 = jSONArray0.put(543, (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(544, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(110, (Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray1.write((Writer) stringWriter0, 1, 1);
      assertEquals("[\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  []\n ]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(32, 1588L);
      StringWriter stringWriter0 = new StringWriter(31);
      Writer writer0 = jSONArray1.write((Writer) stringWriter0, 0, 32);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1727, 89L);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONArray1.write((Writer) stringWriter0, 3739, 146);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      Window.Type window_Type0 = Window.Type.NORMAL;
      linkedList0.offerLast(window_Type0);
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter(93);
      Writer writer0 = jSONArray0.write((Writer) stringWriter0, 8192, 8192);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write((Writer) stringWriter0, 3739, 146);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (Object) linkedList0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<CardTerminals.State, BigDecimal> hashMap0 = new HashMap<CardTerminals.State, BigDecimal>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(8192, (Map<?, ?>) hashMap0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      jSONArray0.put(8192, (Object) locale_FilteringMode0);
      assertEquals(8193, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float((-1102.462F));
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-230), (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-230] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString((-1182), "Unable to write JSONArray value at index: 0");
      assertEquals("Unable to write JSONArray value at index: 0", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      HashMap<Dialog.ModalityType, RowIdLifetime> hashMap0 = new HashMap<Dialog.ModalityType, RowIdLifetime>();
      jSONArray0.put(1726, (Map<?, ?>) hashMap0);
      jSONArray0.optNumber(1726, (Number) bigInteger0);
      assertEquals(1727, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(32, (long) 32);
      MathContext mathContext0 = new MathContext(1940);
      BigDecimal bigDecimal0 = new BigDecimal(87, mathContext0);
      Number number0 = jSONArray1.optNumber(32, (Number) bigDecimal0);
      assertEquals(32L, number0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(114, (Collection<?>) linkedList0);
      long long0 = jSONArray0.optLong(114, 2817L);
      assertEquals(2817L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      long long0 = jSONArray0.optLong(1478, (-304L));
      assertEquals((-304L), long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JTable.PrintMode> class0 = JTable.PrintMode.class;
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.FIT_WIDTH;
      JTable.PrintMode jTable_PrintMode1 = jSONArray0.optEnum(class0, (-2976), jTable_PrintMode0);
      assertSame(jTable_PrintMode0, jTable_PrintMode1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(38, (Object) "");
      Desktop.Action desktop_Action0 = Desktop.Action.MAIL;
      Class<Desktop.Action> class0 = Desktop.Action.class;
      Desktop.Action desktop_Action1 = jSONArray1.optEnum(class0, 38, desktop_Action0);
      assertSame(desktop_Action1, desktop_Action0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      int int0 = jSONArray0.optInt((-1263), (-262));
      assertEquals((-262), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = jSONArray0.optFloat(1876, (float) 1876);
      assertEquals(1876.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(854, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(114, (Collection<?>) linkedList0);
      Object object0 = jSONArray0.opt(19);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.opt(1884);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      Object object0 = jSONArray0.opt((-487));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(114, (Collection<?>) linkedList0);
      try { 
        jSONArray1.getString(114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[114] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(94, (Collection<?>) linkedList0);
      try { 
        jSONArray1.getBoolean(94);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[94] is not a boolean.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get(83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[83] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(114, (Collection<?>) linkedList0);
      Object object0 = jSONArray1.get(114);
      assertNotSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      boolean boolean0 = jSONArray0.optBoolean((-343), true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      // Undeclared exception!
      try { 
        jSONArray0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray1 = jSONArray0.put((Object) stringWriter0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Normalizer.Form> class0 = Normalizer.Form.class;
      jSONArray0.optEnum(class0, (-1146));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(114, (Collection<?>) linkedList0);
      List<Object> list0 = jSONArray0.toList();
      assertEquals(115, list0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1, false);
      List<Object> list0 = jSONArray1.toList();
      assertTrue(list0.contains(false));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = jSONArray0.toList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(97, (Collection<?>) linkedList0);
      String string0 = jSONArray0.toString((-2307));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<MultipleGradientPaint.ColorSpaceType, Month> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, Month>();
      jSONArray0.put((Map<?, ?>) hashMap0);
      String string0 = jSONArray0.toString((-1));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.put((Map<?, ?>) null);
      jSONArray0.toJSONObject(jSONArray1);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1921, (Collection<?>) linkedList0);
      boolean boolean0 = jSONArray1.similar(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.similar((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1876, (Collection<?>) linkedList0);
      jSONArray1.remove(1876);
      assertEquals(1876, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      Object object0 = jSONArray0.remove(91);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.remove((-1540));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(32, (long) 32);
      String string0 = jSONArray0.optString(32, "java.io.StringWriter@0000000006");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((-10));
      long long0 = jSONArray0.optLong(0, 0L);
      assertEquals((-10L), long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(108, (Collection<?>) linkedList0);
      long long0 = jSONArray1.optLong(108);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject((-1292));
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.put(0, (Collection<?>) linkedList1);
      JSONArray jSONArray2 = jSONArray1.optJSONArray(0);
      assertNotSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.optJSONArray(1693);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(108, (double) 0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(108, bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONArray0.optBigDecimal(87, bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, (Collection<?>) linkedList0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONArray1.optBigDecimal(0, bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONArray0.optBigInteger(85, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Window.Type> linkedList0 = new LinkedList<Window.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      HashMap<GraphicsDevice.WindowTranslucency, BigInteger> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, BigInteger>();
      JSONArray jSONArray1 = jSONArray0.put(808, (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray1.optBigInteger(808, bigInteger0);
      assertEquals(809, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(114, (Collection<?>) linkedList0);
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      try { 
        jSONArray0.getEnum(class0, 114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[114] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(32, 1588L);
      int int0 = jSONArray0.optInt(32, 32);
      assertEquals(1588, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1876, (Collection<?>) linkedList0);
      float float0 = jSONArray1.optFloat(1876, (float) 1876);
      assertEquals(1876.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONArray0.put(63, 0.0);
      float float0 = jSONArray1.optFloat(63);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(34, (Collection<?>) linkedList0);
      double double0 = jSONArray1.optDouble(34, (double) 34);
      assertEquals(34.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1, false);
      String string0 = jSONArray1.join("pG6<)$MT");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.join("org.json.JSONObject");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<RoundingMode> linkedList0 = new LinkedList<RoundingMode>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put((-10));
      long long0 = jSONArray0.getLong(0);
      assertEquals((-10L), long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(105, true);
      try { 
        jSONArray0.getLong(105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[105] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(114, (Collection<?>) linkedList0);
      try { 
        jSONArray1.getJSONObject(114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[114] is not a JSONObject.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(108, (Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.getJSONArray(108);
      assertNotSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(32, (long) 32);
      try { 
        jSONArray0.getJSONArray(32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[32] is not a JSONArray.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, (-2045.4));
      assertEquals(1, jSONArray0.length());
      
      Number number0 = jSONArray0.getNumber(0);
      assertEquals((-2045.4), number0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(108, (Collection<?>) linkedList0);
      try { 
        jSONArray0.getNumber(108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[108] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(32, (long) 32);
      assertEquals(33, jSONArray0.length());
      
      float float0 = jSONArray1.getFloat(32);
      assertEquals(32.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.put(1791, (-4220.975));
      try { 
        jSONArray0.getFloat(672);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[672] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(113, (Collection<?>) linkedList0);
      try { 
        jSONArray0.getDouble(113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[113] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1975, false);
      assertEquals(1976, jSONArray0.length());
      
      boolean boolean0 = jSONArray1.getBoolean(1975);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(105, false);
      try { 
        jSONArray0.getInt(105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[105] is not a number.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(91);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 4 [character 5 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(" [character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 12 [character 13 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(31);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1.0F));
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull((-1235));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[G&^~`|y*K8*n@l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at 15 [character 16 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, KeyRep.Type> hashMap0 = new HashMap<Integer, KeyRep.Type>();
      JSONArray jSONArray1 = jSONArray0.put((Map<?, ?>) hashMap0);
      try { 
        jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.optInt((-1292));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(32, (long) 32);
      boolean boolean0 = jSONArray1.optBoolean(32);
      assertEquals(33, jSONArray0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.query("");
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      try { 
        jSONArray0.put((-377), 221);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-377] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1333), (Collection<?>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1333] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-1624), (-483.1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1624] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0L);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(31, 2045.3528F);
      assertEquals(32, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("K<G!7Hs.?r 9-R1X`");
      Writer writer0 = jSONArray0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.optString(1693);
      assertEquals("", string0);
  }
}
