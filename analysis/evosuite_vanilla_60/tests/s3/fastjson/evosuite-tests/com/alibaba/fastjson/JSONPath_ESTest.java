/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 12:40:51 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-17));
      boolean boolean0 = JSONPath.eqNotNull((-1530L), byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("between", serializeConfig0, parserConfig0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 36, 36);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, serializeConfig0.propertyNamingStrategy, jSONPath_RangeSegment0);
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$RangeSegment");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-3016), (-1436859316), (-1436859316));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Q>AKu", ",Vkk", 63);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTransactionRollbackException0, ",Vkk");
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o.$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'o, but '$'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("qEl<");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$j<ztT{I@`@Nl");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_fieldType");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1648L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("9Pr");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("}it~H{9&M5CjeyMS8B");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%:$~:9TH:`Ikhv$'/1h");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[8];
      // Undeclared exception!
      try { 
        JSONPath.extract("bCRXOH30w<vL", "bCRXOH30w<vL", parserConfig0, (int) (byte) (-105), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2bCRXOH30w<vL
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1fCN6ZD of=U7X:x%[");
      long long0 = jSONPath_JSONPathParser0.readLongValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("D]EwXcH!8l(");
      jSONPath_JSONPathParser0.accept('D');
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("@Bf+aN5]", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("I*0z<rvY|cI", (byte)2, jSONPath_Operator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.safeMode");
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, sQLSyntaxErrorException0, jSONPath_WildCardSegment0, "object");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("IX?3R?Vz[P,7t", (String[]) null, true);
      JSONPath jSONPath0 = new JSONPath("DisableASM");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_WildCardSegment0, object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("@");
      JSONPath jSONPath0 = JSONPath.compile("@");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=d9<:bAIjyqR1#o^`s^", "=d9<:bAIjyqR1#o^`s^", 108, (Throwable) null);
      BigDecimal bigDecimal0 = new BigDecimal((-4404));
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, sQLTimeoutException0, sQLTimeoutException0, bigDecimal0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_fieldType");
      JSONPath jSONPath0 = new JSONPath("asm");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_asm_fieldType";
      stringArray0[1] = "asm";
      stringArray0[2] = "bv";
      stringArray0[3] = "bv";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("asm", "bv", "asm", stringArray0, true);
      Float float0 = new Float(0.0F);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%", "*1N", 17);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, float0, jSONPath_JSONPathParser0, sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("fastjson.parser.deny.internal");
      jSONPath_JSONPathParser0.next();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_fieldType");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('g');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("((j1VmRV2T/mH");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("((j1VmRV2T/mH");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Z+d-t6M5cF5,AZ=6fbX");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but 'Z'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u9>0NxHTQ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("JSONPath$RangeSegment", serializeConfig0, parserConfig0);
      byte[] byteArray0 = new byte[9];
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("fastjson.parser.safeMode", (-2), jSONPath_Operator0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, byteArray0[8], jSONReaderScanner0, "JSONPath$RangeSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("illeal jsonpath syntax. ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("d", "zF");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(296);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.eval(jSONPath0, sQLNonTransientConnectionException0, "I3]!MCs~");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("o.$");
      jSONPath0.init();
      assertEquals("o.$", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 1517);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_SizeSegment0, "9(");
      assertNotNull(arrayList0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("`yFxUr^[hX3/Dz>kM#");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("`yFxUr^[hX3/Dz>kM#", true);
      SQLDataException sQLDataException0 = new SQLDataException("parseRest");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, sQLDataException0, sQLIntegrityConstraintViolationException0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("6mJufh(:]'O*#VY&");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-806L));
      assertEquals((-800.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("@");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      int int0 = jSONPath0.size((Object) sQLNonTransientConnectionException0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("+5kT-6B$P");
      Double double0 = new Double(1924.578125);
      boolean boolean0 = jSONPath0.setPropertyValue(jSONPath_MultiPropertySegment0, "", 0L, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("<O!ZIdg");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "<O!ZIdg");
      boolean boolean0 = jSONPath0.removePropertyValue(sQLFeatureNotSupportedException0, (String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) " M=6b2Kk\"UerM)@fG", "fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONPath.read("null", "\"");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(57, true);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer((short) (-963));
      Set<?> set0 = JSONPath.keySet((Object) integer0, "/");
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("Y{jf1N/N1jTRIY6");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("Y{jf1N/N1jTRIY6");
      assertFalse(collection0.contains("Y{jf1N/N1jTRIY6"));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      Object object0 = jSONPath0.getPropertyValue("'", (String) null, 4389238039309364973L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Class<SQLException> class0 = SQLException.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("not support jsonpath : ");
      Object object0 = jSONPath0.getArrayItem((Object) null, 45);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      int int0 = jSONPath0.evalSize(bigDecimal0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-NE}DOTS@kU");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.alibaba.fastjson.JSONPath$JSONPathParser", (String) null, 0, hashMap0);
      int int0 = jSONPath0.evalSize(sQLClientInfoException0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(47);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("\"5-L1V11F6>e0RL^1'", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_SizeSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Object object0 = JSONPath.eval((Object) sQLDataException0, "opY ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = JSONPath.compare("4eJ{S0*V.3g", "4eJ{S0*V.3g");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      // Undeclared exception!
      try { 
        JSONPath.size((Object) class0, "like");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(208, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("false", serializeConfig0, parserConfig0);
      Class<Float> class0 = Float.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      jSONPath0.setPropertyValue(javaBeanSerializer0, (String) null, 208, jSONPath_WildCardSegment0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath(".WDgi5n hY:FU6GT4A", serializeConfig0, parserConfig0);
      MockDate mockDate0 = new MockDate(0, 1772, 0, 536870912, 85, 1772);
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 93, mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("u9>0NxHTQ");
      // Undeclared exception!
      JSONPath.set((Object) jSONPath0, "stackTrace", (Object) "stackTrace");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        JSONPath.set((Object) propertyNamingStrategy0, "BETWEEN", (Object) "BETWEEN");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("RV:^6i)", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath0, (Object) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : RV:^6i)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2898, false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("SlF.", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "SlF.", (Object) serializeConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*1N");
      jSONPath0.set((Object) "*1N", (Object) "*1N");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "like";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(class0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getName";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject((Object) null, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "yPj[XcLZ", 867);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLWarning0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "yPj[XcLZ";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLDataException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath jSONPath0 = JSONPath.compile("~55=6_9/ Bq5&$r");
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigInteger0, "mjM", false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("J8\"Gz2EeA#5<$8mY+");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",");
      Short short0 = new Short((short)32);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) short0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("mjM?4G3+}FKq_b8|", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : mjM?4G3+}FKq_b8|
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = JSONPath.read("", "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("}it~H{9&M5CjeyMS8B");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. }it~H{9&M5CjeyMS8B
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")Z[39IHi%Yv");
      Class<JSONPath> class0 = JSONPath.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2941);
      JSONPath jSONPath0 = new JSONPath("A,_I8oY", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues("-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("Fd,M#ME", (SerializeConfig) null, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",Vkk");
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<SQLException> class0 = SQLException.class;
      JSONPath jSONPath0 = new JSONPath("]6-j99D#>$9^d^mG", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("o.$");
      Class<JSONPath> class0 = JSONPath.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$RangeSegment");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(jSONPath_ArrayAccessSegment0, 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("d50", "NTwQ{", (ParserConfig) null, (int) '6', (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "q(`sl3(0U,4caY*.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(871);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("K_P?", serializeConfig0, parserConfig0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("deny", serializeConfig0, parserConfig0);
      Class<DataTruncation> class0 = DataTruncation.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yPj[XcLZ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("yPj[XcLZ");
      jSONPath0.eval((Object) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",Vkk");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) ",Vkk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ,Vkk
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      JSONPath jSONPath0 = JSONPath.compile("ONS83B6[q/42`<5*d(J");
      // Undeclared exception!
      jSONPath0.deepSet(bigDecimal0, "serializer", (-1527L), bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(36);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      Long long0 = Long.valueOf(1246L);
      jSONPath0.deepSet(long0, (String) null, (-3L), parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("}it~H{9&M5CjeyMS8B");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan("}it~H{9&M5CjeyMS8B", "K", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path }it~H{9&M5CjeyMS8B, segement K
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath(",Vkk");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment(",Vkk", jSONPath_MinSegment0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) jSONPath_FilterSegment0, (Object) jSONPath_ValueSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ,Vkk
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONPath jSONPath0 = new JSONPath("`-B|I@KZW:ljSPE");
      Set<?> set1 = jSONPath0.evalKeySet(set0);
      assertNull(set1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(36);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("=U!=P}ixbd>W^0vg^x8", serializeConfig0, parserConfig0);
      Long long0 = Long.valueOf(1246L);
      jSONPath0.deepSet(long0, (String) null, (-3L), parserConfig0);
      assertFalse(parserConfig0.isJacksonCompatible());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("n-A");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      // Undeclared exception!
      try { 
        jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_Operator0, jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("WG{TClQK");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, sQLFeatureNotSupportedException0, 132);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("zt_", false);
      jSONPath_PropertySegment0.setValue(jSONPath0, "zt_", sQLIntegrityConstraintViolationException0);
      assertEquals("/", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("@Bf+aN5]", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("kyjy\"", false);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("$$,jmAk", sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "%%", (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("kyjy\"", "/stackTrace/8", sQLClientInfoException0);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, jSONPath0, sQLFeatureNotSupportedException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/7");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("o.$");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("~tOu>7,PM\"dW");
      JSONPath jSONPath1 = new JSONPath("XSR<");
      // Undeclared exception!
      jSONPath1.remove((Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("=^\"lJ4=U`u>O");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(" :9~ ELX#A\"~pf");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("y", "<", sQLNonTransientException0);
      Short short0 = new Short((short) (-1890));
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("|C~CP^\"nSxm?Z{{YN", (short) (-1890), (short) (-1890), true);
      JSONPath jSONPath0 = JSONPath.compile("|C~CP^\"nSxm?Z{{YN");
      jSONPath_IntBetweenSegement0.apply(jSONPath0, sQLNonTransientException0, short0, serializeConfig0);
      StringReader stringReader0 = new StringReader("i[o6^M)");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (short) (-1890));
      jSONReaderScanner0.scanDate('8');
      jSONPath0.deepSet((Object) null, "<", (short) (-1890), "y");
      JSONPath jSONPath1 = new JSONPath("com.alibaba.fastjson.JSONPath$RangeSegment", serializeConfig0, parserConfig0);
      jSONPath1.evalKeySet(jSONReaderScanner0);
      JSONPath.compile("xb!a`I}5jn9-tGqH/kl");
      jSONPath1.remove((Object) "y");
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.compile("|C~CP^\"nSxm?Z{{YN");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("i[o6^M)");
      DataTruncation dataTruncation0 = new DataTruncation((-3922), false, true, 2, (-3922));
      JSONPath.reserveToArray(sQLSyntaxErrorException0, (String[]) null);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. |C~CP^\"nSxm?Z{{YN
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("");
      assertEquals("", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("MiscCodec not support ", true);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) jSONPath_PropertySegment0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      jSONPath0.arrayAdd((Object) parserConfig0, (Object[]) null);
      assertFalse(parserConfig0.isSafeMode());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.CollectionCodec");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      boolean boolean0 = jSONPath0.containsValue((Object) javaBeanDeserializer0, (Object) javaBeanDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[3];
      ParserConfig parserConfig0 = new ParserConfig(false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-363));
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u9>0NxHTQ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",Vkk");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath(",Vkk", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ,Vkk
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Object object0 = jSONPath0.eval((Object) parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      String[] stringArray0 = new String[8];
      Object object0 = jSONPath0.eval((Object) stringArray0[4]);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")Z[39IHi%Yv");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(41);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Fd,M#ME", "Fd,M#ME", hashMap0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, ")Z[39IHi%Yv", sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1685), false, false, (-1472), 159);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "like";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(dataTruncation0, stringArray0);
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("yUSKD\"fq5I_b`?-9");
      Object object0 = JSONPath.reserveToObject(jSONPath_JSONPathParser0, (String[]) null);
      assertSame(jSONPath_JSONPathParser0, object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "vjU0";
      stringArray0[1] = "vjU0";
      stringArray0[2] = "vjU0";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray((Object) null, stringArray0);
      assertEquals(3, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("+5kT-6B$P", stringArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1jv", "1jv", (-647), (Throwable) null);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLNonTransientConnectionException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("u9>0NxHTQ", serializeConfig0, (ParserConfig) null);
      Set<?> set0 = jSONPath0.evalKeySet("com.alibaba.fastjson.JSONPath$RangeSegment");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1723840889), 92, 0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_ArrayAccessSegment0, hashMap0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("MiscCodec no support ", true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~55=6_9/ Bq5&$r", "MiscCodec no support ", 5);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLIntegrityConstraintViolationException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("end", serializeConfig0, parserConfig0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) bigInteger0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("&fB$<dz,@[");
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("{<!!tfV,vuk?W(6tIg9", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue("/stackTrace/8", "fastjson.parser.autoTypeAccept", 484499585846206473L, jSONPath_NotNullSegement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yC<");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      jSONPath0.deepSet("yC<", "yC<", (-1759511109484434299L), jSONPath_WildCardSegment0);
      assertEquals("yC<", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(119);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("?", serializeConfig0, parserConfig0);
      SQLException sQLException0 = new SQLException("j$r/&H", "fastjson.parser.safeMode");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("xOlWKDpyOgL", sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("?", "fastjson.parser.autoTypeSupport", 5, (long[]) null, sQLNonTransientException0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      jSONPath0.deepScan(batchUpdateException0, "com.alibaba.fastjson.JSONPath$ValueSegment", arrayList0);
      assertEquals("?", batchUpdateException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 40, 1986, 1986, 1986, 0);
      boolean boolean0 = JSONPath.containsValue((Object) mockGregorianCalendar0, "x", (Object) "x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/", "fastjson.parser.autoTypeSupport", 0);
      Object object0 = jSONPath_WildCardSegment0.eval(jSONPath0, (Object) null, sQLNonTransientConnectionException0);
      int int0 = jSONPath0.size(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Short short0 = new Short((short)16);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double double0 = new Double((-5904L));
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float((float) 0);
      boolean boolean0 = JSONPath.eqNotNull(float0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(908);
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull(0, (-623));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((byte) (-111), bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, (-1580386065683472715L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSONPath$RangeSegment";
      stringArray0[1] = "JSONPath$RangeSegment";
      stringArray0[2] = "bCRXOH30w<vL";
      stringArray0[3] = "bCRXOH30w<vL";
      stringArray0[4] = "JSONPath$RangeSegment";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = JSONPath.eq(jSONPath_MultiPropertySegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      boolean boolean0 = JSONPath.eq(sQLTimeoutException0, sQLTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Stack<Object> stack0 = new Stack<Object>();
      JSONPath jSONPath0 = JSONPath.compile("o");
      jSONPath0.deepGetPropertyValues(serializeConfig0, stack0);
      assertEquals(3, stack0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("0zUQ_4@i9tFNfKo");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("0zUQ_4@i9tFNfKo", stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      jSONPath0.deepGetPropertyValues(hashMap0, (List<Object>) null);
      assertEquals("fastjson.parser.safeMode", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(jSONPath0, (List<Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("like", serializeConfig0, parserConfig0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(sQLTransientConnectionException0, "fastjson.parser.deny", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("}it~H{9&M5CjeyMS8B");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath0, 1383, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("asm");
      MockDate mockDate0 = new MockDate();
      Object object0 = jSONPath0.getArrayItem(mockDate0, 0);
      assertSame(object0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONPath jSONPath0 = JSONPath.compile("[");
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'h';
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, mockGregorianCalendar0, set0);
      assertEquals(5, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("like", serializeConfig0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_ValueSegment0, jSONPath_ValueSegment0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/stackTrace/8");
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("like", intArray0, sQLIntegrityConstraintViolationException0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, sQLIntegrityConstraintViolationException0, batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("mjM?4G3+}FKq_b8|", serializeConfig0, parserConfig0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, true);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Short short0 = new Short((short)601);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, short0, jSONPath_WildCardSegment0, batchUpdateException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath(" not found", serializeConfig0, parserConfig0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("stackTrace", "fastjson.parser.safeMode", (int[]) null);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.safeMode");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("in", batchUpdateException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_SizeSegment0, sQLSyntaxErrorException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("M[W6kQ", "fastjson.parser.deny.internal", (int[]) null);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("fastjson.parser.deny.internal");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fastjson.parser.autoTypeAccept", batchUpdateException0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, sQLSyntaxErrorException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.LongCodec");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, "/stackTrace/5", bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(2941);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("KI0^1{xfFn-8jA]");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("\"&T>u*n)&*=", jSONPath_JSONPathParser0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath jSONPath0 = new JSONPath(",", serializeConfig0, (ParserConfig) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny", "KI0^1{xfFn-8jA]", 6);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_JSONPathParser0, sQLFeatureNotSupportedException0);
      assertNotNull(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("XMbA$2}^t2UUm]9hj");
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("parser", "evalKeySet error : ", "evalKeySet error : ", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("asm");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_asm_fieldType";
      stringArray0[1] = "asm";
      stringArray0[2] = "bv";
      stringArray0[3] = "bv";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("asm", "bv", "asm", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_MatchSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "_asm_fieldType", "o");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = JSONPath.compile(")(");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement(")(", jSONPath_MinSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("null", "LE", hashMap0, sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")(", sQLClientInfoException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_Operator0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      String[] stringArray0 = new String[1];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("internal", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(10, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("internal", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, propertyNamingStrategy0, classLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      String[] stringArray0 = new String[1];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("internal", stringArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(10, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("internal", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, propertyNamingStrategy0, classLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.NoChange;
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("internal", stringArray0, true);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_StringInSegement0, jSONPath_StringInSegement0, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(10, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("internal", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath0, propertyNamingStrategy0, classLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Long[] longArray0 = new Long[17];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONValidator$UTF16Validator", longArray0, false);
      JSONPath jSONPath0 = new JSONPath("d50|/IcV!-pI*al[3");
      Short short0 = new Short((short)0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("d50|/IcV!-pI*al[3", sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, short0, sQLSyntaxErrorException0, "\"Bx=CM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-618L));
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("e,6-Zn^a,", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("$pd\"wLUHv");
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, mockGregorianCalendar0, jSONPath0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-618L));
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("e,6-Zn^a,", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("$pd\"wLUHv");
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, mockGregorianCalendar0, jSONPath0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("like", serializeConfig0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "yUSKD\"fq5I_b`?-9", jSONPath0);
      assertSame(object0, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("!n>(YJHJQ?", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("):(#B#^M#]?n");
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, "):(#B#^M#]?n", parserConfig0, "):(#B#^M#]?n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath jSONPath0 = new JSONPath("NOT_zP");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(90, 90, (-5044));
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_Operator0, jSONPath0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("serializer");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(58, 47, (-1789859325));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, bigDecimal0, (Object) null);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      int[] intArray0 = new int[1];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, jSONPath_Operator0, hashMap0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("_asm_fieldType");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      int[] intArray0 = new int[5];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, (Object) null, jSONPath_MultiIndexSegment0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      BigInteger bigInteger0 = BigInteger.ZERO;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "illegal json : ";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, classLoader0, bigInteger0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("+5kT-6B$P");
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, "+5kT-6B$P", jSONPath0);
      long[] longArray0 = new long[0];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("w=", longArray0, true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, sQLClientInfoException0, object0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("9B,\"\"QI,?E)3P1V><i$");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("MiscCodec no support ", true);
      // Undeclared exception!
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath0, jSONPath0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = JSONPath.compare("4eJ{S0*V.3g", "l]c|U0]gX2Jo8*_g");
      assertEquals((-56), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("l]+{|U0^]gX2Jo*_g", "l]+{|U0^]gX2Jo*_g");
      // Undeclared exception!
      try { 
        JSONPath.compare(mockGregorianCalendar0, sQLRecoverableException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLRecoverableException cannot be cast to java.util.Calendar
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath jSONPath0 = new JSONPath(",Vkk");
      SQLWarning sQLWarning0 = new SQLWarning("xQc3A&;CbYQuz6t3~K", "xQc3A&;CbYQuz6t3~K");
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval(jSONPath0, sQLWarning0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, hashMap0, hashMap0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      Object object1 = jSONPath_MaxSegment0.eval(jSONPath0, parserConfig0.propertyNamingStrategy, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.serializer.CollectionCodec");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, sQLClientInfoException0, "com.alibaba.fastjson.serializer.CollectionCodec");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("_asm_fieldType");
      jSONPath_JSONPathParser0.readString();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~55=6_9/ Bq5&$r");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readSegement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ~55=6_9/ Bq5&$r
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">/QL2NHYs@bTO");
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("no# support jsonpath : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no# support jsonpath : 
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\"/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '\", but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">/QL2NHYs@bTO");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(179L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1fCN6ZD of=U7X:x%[");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(1L, object0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("((j1VmRV2T/mH");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("g<?]m!H#t");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\\-");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. \\-
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("internal", "internal", 0);
      JSONPath jSONPath0 = new JSONPath("H");
      boolean boolean0 = jSONPath0.remove((Object) sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JSONPath jSONPath0 = new JSONPath("{");
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)jSONPath0.eval((Object) batchUpdateException0);
      assertEquals(0, batchUpdateException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0, serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "/stackTrace/12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(114, 114, 63);
      Class<JSONPath.MultiIndexSegment> class0 = JSONPath.MultiIndexSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNotNull(javaBeanDeserializer0);
      
      boolean boolean0 = jSONPath0.set((Object) jSONPath_RangeSegment0, (Object) javaBeanDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.deny.internal");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLIntegrityConstraintViolationException0, (Object) batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Calendar calendar0 = MockCalendar.getInstance();
      boolean boolean0 = jSONPath0.set((Object) hashMap0, (Object) calendar0);
      assertEquals(1, hashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Double double0 = new Double(0.0);
      boolean boolean0 = JSONPath.set((Object) "@", "/stackTrace/10", (Object) double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("%");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "'", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$RangeSegment");
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "com.alibaba.fastjson.JSONPath$RangeSegment", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.JSONPath$RangeSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("nJdr{xS");
      String[] stringArray0 = new String[9];
      jSONPath0.arrayAdd((Object) null, (Object[]) stringArray0);
      assertEquals("nJdr{xS", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("UL$^");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("UL$^");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) sQLTimeoutException0, objectArray0);
      assertEquals("UL$^", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath jSONPath0 = new JSONPath("NOT_zP");
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_Operator0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("o");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@Bf+aN5]", "g", 130);
      int int0 = jSONPath0.size((Object) sQLNonTransientException0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("'i&9PB^I_|j{zH|", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("@Bf+aN5]", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("kyjy\"", false);
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) jSONPath_PropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. @Bf+aN5]
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(16, 808, 808);
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath_RangeSegment0, ",", (Object) "com.alibaba.fastjson.JSONPath$RangeSegment");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) "writer not null", "uQKCE{", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      boolean boolean0 = jSONPath0.contains((Object) parserConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("'");
      boolean boolean0 = jSONPath0.contains((Object) "'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%O");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        JSONPath.extract("r0Twt35fvQ3VjWehU.K", "/stackTrace/0", parserConfig0, 97, (Feature[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("]`H#l]", "fastjson.parser.deny.internal");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object object0 = JSONPath.extract("", "gNA");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("writeFieldValue", "/", parserConfig0, (-1618167431), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2writeFieldValue
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("n-A");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "fastjson.parser.autoTypeAccept");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("-");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("yC<");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("", "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.JSONPath$WildCardSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("com.alibaba.fastjson.JSONPath$ValueSegment", "u9>0NxHTQ", false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("between", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, serializeConfig0, (Object) null, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("hours", "s", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("hours");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("_Q4!9");
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, sQLIntegrityConstraintViolationException0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("@Bf+aN5]");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("@Bf+aN5]", pattern0, jSONPath_Operator0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSONPath jSONPath0 = new JSONPath("@Bf+aN5]", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("kyjy\"", false);
      BigDecimal bigDecimal0 = new BigDecimal((-1199.41));
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_PropertySegment0, "kyjy\"", bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("w>os| ^O");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('>', char0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("/stackTrace/8", serializeConfig0, (ParserConfig) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/stackTrace/8", "$", (-4886));
      boolean boolean0 = jSONPath0.set((Object) sQLRecoverableException0, (Object) null, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      SerializeConfig serializeConfig0 = new SerializeConfig(58, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, jSONPath_SizeSegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$SizeSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(64, (-1091577837), 1093);
      JSONPath jSONPath0 = JSONPath.compile("like");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, "^Q", "deny");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -998697
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = new JSONPath("`yFxUr^[hX3/Dz>kM#");
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue((Object) null, "f3blC:5*j?/3", 1627L, jSONPath_MinSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("deny", "deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2deny
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("like");
      String string0 = jSONPath0.getPath();
      assertEquals("like", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("@Bf+aN5]", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.arrayAdd((Object) "!Wah", "fastjson.parser.safeMode", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~55=6_9/ Bq5&$r", "MiscCodec no support ", 105);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLIntegrityConstraintViolationException0);
      //  // Unstable assertion: assertEquals(83, map0.size());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$IntInSegement");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.readSegement();
      assertNotNull(jSONPath_Segment0);
  }
}
