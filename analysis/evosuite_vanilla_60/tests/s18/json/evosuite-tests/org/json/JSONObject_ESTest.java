/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 16:27:49 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.Window;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.security.CryptoPrimitive;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.time.DayOfWeek;
import java.time.Month;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.swing.LayoutStyle;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("(+liYDZrQlY>Z@");
      assertEquals("(+liYDZrQlY>Z@", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("9n~P|RF3MEzsaDS>#B");
      assertEquals("9n~P|RF3MEzsaDS>#B", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      try { 
        jSONObject0.getEnum(class0, "C(J/5m/0n{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("E", "/aXd|#YIb1M^u");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      JSONObject.indent(mockFileWriter0, 378);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Short short0 = new Short((short)70);
      jSONObject0.accumulate("%s is not an array index", short0);
      try { 
        jSONObject0.getBigInteger("%s is not an array index");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      jSONObject0.write((Writer) mockPrintWriter0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      JSONObject jSONObject1 = jSONObject0.putOnce(":&W&,@n", hashMap0);
      HashMap hashMap1 = (HashMap)jSONObject1.remove(":&W&,@n");
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<FilterOutputStream> linkedList0 = new LinkedList<FilterOutputStream>();
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (Collection<?>) linkedList0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("E", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("java.io.StringWriter@0000000002", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(111);
      Number number0 = jSONObject0.optNumber("java.math.BigInteger@0000000002", (Number) bigInteger0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Number number0 = jSONObject0.optNumber("] is not a JSONArray.", (Number) bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Dialog.ModalExclusionType, Window.Type> hashMap0 = new HashMap<Dialog.ModalExclusionType, Window.Type>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("HjmZYoCwV*q1 C<jR<", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("toByteArray", (-1168L));
      assertEquals((-1168L), long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.optInt("vrnQgd4{OB=.UT[l|)", (-3176));
      assertEquals(0, jSONObject0.length());
      assertEquals((-3176), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      float float0 = jSONObject0.optFloat("A JSONObject text must begin with '{'", (-2781.4534F));
      assertEquals((-2781.4534F), float0, 0.01F);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(sequenceInputStream0, stringArray0);
      double double0 = jSONObject0.optDouble("H", (-1796.8404263));
      assertEquals((-1796.8404263), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1105);
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1132);
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("*|3>{", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("$M,7},<W_Q}9x6R7n_x", (Object) hashMap0);
      HashMap hashMap1 = (HashMap)jSONObject0.opt("$M,7},<W_Q}9x6R7n_x");
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("getshortValue", false);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation(":&W&,@n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.writeValue(pipedWriter0, pipedWriter0, 117, 117);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, (-997), 3912);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.io.StringWriter@0000000001");
      try { 
        jSONObject0.toString(3113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query("(N<Cm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<BigInteger, Month> hashMap0 = new HashMap<BigInteger, Month>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (float) 378);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, DayOfWeek> hashMap0 = new HashMap<String, DayOfWeek>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JSONObject.indent(pipedWriter0, 3380);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getLong("~Uhl+yaFFg9$nFu#2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      try { 
        jSONObject0.getFloat("java.math.BigInteger@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.getEnum((Class<Dialog.ModalExclusionType>) null, "`6r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(111);
      try { 
        jSONObject0.getBoolean("] could not be converted to BigInteger.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 378);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, lineNumberReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("0000");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("-0", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name -0, locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("true", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("6n]-v[o", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1187
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.json.JSONObject$Null");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      JSONObject jSONObject0 = new JSONObject((Object) "b8 cfM:PH*A~y");
      try { 
        jSONObject0.write((Writer) outputStreamWriter0, 378, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "E");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(97);
      jSONObject0.write((Writer) charArrayWriter0, (-248), (-3176));
      assertEquals(124, charArrayWriter0.size());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getshortValue", false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(367);
      jSONObject0.write((Writer) charArrayWriter0, (-1), (-4027));
      assertEquals(62, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFile mockFile0 = new MockFile("Duplicate key \"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, (-40749215), 16);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<String> set0 = jSONObject0.keySet();
      JSONObject jSONObject1 = jSONObject0.accumulate("%s is ot an array index", "%s is ot an array index");
      jSONObject1.accumulate("%s is ot an array index", set0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(52);
      jSONObject0.write((Writer) charArrayWriter0, 95, 43);
      assertEquals(420, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = JSONObject.wrap(pipedOutputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.wrap("l]#/");
      assertEquals("l]#/", object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R", "C(J/5m/0n{");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      Writer writer0 = JSONObject.quote("getshortValue", (Writer) mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("74iQ1ki", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("%s is not an array index", hashMap0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      try { 
        jSONObject0.putOnce("%s is not an array index", dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"%s is not an array index\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      JSONObject jSONObject1 = jSONObject0.putOnce("$Bma", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(111);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.optString("M[", "M[");
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      long long0 = jSONObject0.optLong("^OTDV:zN{!M", (long) 378);
      assertEquals(378L, long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1132);
      int int0 = jSONObject0.optInt("uwW{i@h)Uyyi)H", 1132);
      assertEquals(1132, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      jSONObject0.put("\"", true);
      int int0 = jSONObject0.optInt("\"", 1171);
      assertEquals(1171, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Short short0 = new Short((short)70);
      JSONObject jSONObject1 = jSONObject0.accumulate("%s is not an array index", short0);
      float float0 = jSONObject1.optFloat("%s is not an array index", (-2781.4534F));
      assertEquals(1, jSONObject0.length());
      assertEquals(70.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<StandardLocation, PipedWriter> hashMap0 = new HashMap<StandardLocation, PipedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat((String) null, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<StandardLocation, PipedWriter> hashMap0 = new HashMap<StandardLocation, PipedWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      double double0 = jSONObject0.optDouble("3;M?{e=7[dI-o", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(111);
      JSONObject jSONObject1 = jSONObject0.put("Duplicate key \"", true);
      boolean boolean0 = jSONObject1.optBoolean("Duplicate key \"", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      Character character0 = Character.valueOf('(');
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOnce("$Bma", character0);
      boolean boolean0 = jSONObject0.optBoolean("$Bma", true);
      assertFalse(jSONObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      jSONObject0.optEnum(class0, "ab", authenticator_RequestorType0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1132);
      Object object0 = jSONObject0.opt("na");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.opt((String) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("fU(~h|P?i`lEFZ_\"*}+");
      Object object0 = jSONObject0.get("fU(~h|P?i`lEFZ_\"*}+");
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(389);
      try { 
        jSONObject0.get("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Window.Type> class0 = Window.Type.class;
      jSONObject0.optEnum(class0, "");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Character character0 = Character.valueOf('e');
      JSONObject jSONObject0 = new JSONObject(character0);
      jSONObject0.put("kXb#F|Mi\" dZa9?", 1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("getshortValue", false);
      jSONObject1.toMap();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1613);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.math.BigInteger@0000000001");
      jSONObject0.toString(13);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5?7bI'8");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(861L);
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((byte)93, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Character, BigInteger> hashMap0 = new HashMap<Character, BigInteger>();
      Character character0 = new Character('G');
      BigInteger bigInteger0 = BigInteger.ONE;
      hashMap0.put(character0, bigInteger0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("getbooleanValue", false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1097);
      Writer writer0 = JSONObject.writeValue(bufferedWriter0, hashMap0, 1097, 92);
      assertSame(writer0, bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<PseudoColumnUsage, Float> hashMap0 = new HashMap<PseudoColumnUsage, Float>();
      PseudoColumnUsage pseudoColumnUsage0 = PseudoColumnUsage.SELECT_LIST_ONLY;
      Float float0 = new Float(0.0);
      hashMap0.put(pseudoColumnUsage0, float0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(474);
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<RoundingMode, JDBCType> hashMap0 = new HashMap<RoundingMode, JDBCType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("toString", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.put("] is not a boolean.", (double) Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-Q");
      assertEquals("-Q", object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("VC-fbO,`1DXY<");
      assertEquals("VC-fbO,`1DXY<", object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("3V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3V\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("JhE@0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("3;M?{e=7[dI-o");
      assertEquals("3;M?{e=7[dI-o", object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.math.BigDecimal@0000000002");
      boolean boolean0 = jSONObject0.similar(jSONObject0);
      assertTrue(boolean0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean0 = jSONObject0.similar(locale_FilteringMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray(">{7iq\u0002I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("W<ws}nXn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.quote("`y1\"}d>Zr8!V6~kua");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("isabs", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.math.BigInteger@0000000001");
      PipedWriter pipedWriter0 = new PipedWriter();
      jSONObject0.putOpt("BxG=I44@mab", pipedWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      Float float0 = new Float((float) 135);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, float0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(841);
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      jSONObject0.put("getshortValue", false);
      String[] stringArray0 = new String[4];
      stringArray0[2] = "getshortValue";
      stringArray0[3] = "getshortValue";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, jSONObject0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<LayoutStyle.ComponentPlacement> class0 = LayoutStyle.ComponentPlacement.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("hashCode");
      String string0 = jSONObject0.optString("hashCode", "T#Qy");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("%s is ot an array index", "%s is ot an array index");
      jSONObject0.optNumber("%s is ot an array index");
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.accumulate("%s is ot an array index", bigInteger0);
      jSONObject0.optNumber("%s is ot an array index");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("getshortValue", false);
      Long long0 = new Long(0);
      jSONObject0.optNumber("getshortValue", (Number) long0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("getshortValue", false);
      long long0 = jSONObject1.optLong("getshortValue");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.optJSONObject("\f");
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("& 6__'LW@B<LJ (");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("%s is ot an array index", "%s is ot an array index");
      int int0 = jSONObject0.optInt("%s is ot an array index");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.accumulate("%s is ot an array index", bigInteger0);
      int int0 = jSONObject0.optInt("%s is ot an array index");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("%s is not an array index", hashMap0);
      float float0 = jSONObject1.optFloat("%s is not an array index");
      assertEquals(1, jSONObject0.length());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("<[q)Z|rO<gbC>0&V", 0L);
      float float0 = jSONObject0.optFloat("<[q)Z|rO<gbC>0&V");
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(858);
      JSONObject jSONObject1 = jSONObject0.put("#-UB>k!uKUmfV9>;>", 209.30727F);
      double double0 = jSONObject1.optDouble("#-UB>k!uKUmfV9>;>");
      assertEquals(209.30726623535156, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("getshortValue", false);
      double double0 = jSONObject1.optDouble("getshortValue", (double) 0L);
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.put("%s is ot an array index", (-1L));
      BigInteger bigInteger1 = jSONObject0.optBigInteger("%s is ot an array index", bigInteger0);
      assertEquals((short) (-1), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("-Q");
      jSONObject0.accumulate("N-T+85", boolean0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.optBigInteger("N-T+85", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1132);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("java.io.StringWriter@0000000001", bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject0 = new JSONObject(135);
      JSONObject jSONObject1 = jSONObject0.put(":&W&,@n", (float) 135);
      BigInteger bigInteger1 = jSONObject1.optBigInteger(":&W&,@n", bigInteger0);
      assertEquals((short)135, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Float float0 = new Float(311.453014855959);
      jSONObject0.putOnce("$Bma", float0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("$Bma", bigDecimal0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(1930.749967557725);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("Misplaced array.", bigDecimal0);
      assertEquals((short)1930, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      Character character0 = Character.valueOf('(');
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.putOnce("$Bma", character0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONObject0.optBigDecimal("$Bma", bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("getshortValue", false);
      boolean boolean1 = jSONObject0.optBoolean("getshortValue");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("%s is ntan array index", "%s is ntan array index");
      Class<LayoutStyle.ComponentPlacement> class0 = LayoutStyle.ComponentPlacement.class;
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement0 = LayoutStyle.ComponentPlacement.RELATED;
      jSONObject1.optEnum(class0, "%s is ntan array index", layoutStyle_ComponentPlacement0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      jSONObject0.put("E", (Map<?, ?>) hashMap0);
      jSONObject0.optBoolean("E");
      jSONObject0.putOnce(":&W&,@n", hashMap0);
      Float float0 = new Float(561.53953);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1132);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.accumulate("%s is ot an array index", "%s is ot an array index");
      jSONObject0.names();
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONObject0.put("$M,7},<W_Q}9x6R7n_x", (Object) pipedOutputStream0);
      try { 
        jSONObject0.increment("$M,7},<W_Q}9x6R7n_x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000005].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("java.io.StringWriter@0000000001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3515);
      String[] stringArray0 = JSONObject.getNames((Object) byteArrayOutputStream0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String[] stringArray0 = JSONObject.getNames((Object) bigInteger0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("getshortValue", false);
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("getshortValue", false);
      try { 
        jSONObject1.getJSONObject("getshortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("getshortValue", false);
      try { 
        jSONObject1.getJSONArray("getshortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(841);
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("getshortVaVuD", false);
      try { 
        jSONObject1.getInt("getshortVaVuD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Short short0 = Short.valueOf((short)8);
      jSONObject0.put("R}1'|YGpLdMW0)Gk", (Object) short0);
      Number number0 = jSONObject0.getNumber("R}1'|YGpLdMW0)Gk");
      assertEquals((short)8, number0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("getshortValue", false);
      try { 
        jSONObject1.getNumber("getshortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.putOnce("Unable to write JSONArray value at index: ", boolean0);
      try { 
        jSONObject1.getDouble("Unable to write JSONArray value at index: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("getshortValue", false);
      try { 
        jSONObject1.getBigDecimal("getshortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("%s is ot an array index", "%s is ot an array index");
      boolean boolean0 = jSONObject1.optBoolean("%s is ot an array index");
      assertFalse(jSONObject0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.doubleToString(841);
      assertEquals("841", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1499.02);
      assertEquals("1499.02", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(841);
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      JSONObject jSONObject1 = new JSONObject(841);
      jSONObject0.append("getshortValue", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(841);
      JSONObject jSONObject0 = new JSONObject(byteArrayOutputStream0);
      JSONObject jSONObject1 = jSONObject0.put("w=%a|N{:dy9<", false);
      try { 
        jSONObject0.append("w=%a|N{:dy9<", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[w=%a|N{:dy9<] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<String> set0 = jSONObject0.keySet();
      JSONObject jSONObject1 = jSONObject0.accumulate("%s is ot an array index", "%s is ot an array index");
      JSONObject jSONObject2 = jSONObject1.accumulate("%s is ot an array index", set0);
      jSONObject2.toMap();
      assertEquals(1, set0.size());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.SIGNATURE;
      hashMap0.put(cryptoPrimitive0, (Character) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<CryptoPrimitive, Character> hashMap0 = new HashMap<CryptoPrimitive, Character>();
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_AGREEMENT;
      Character character0 = Character.valueOf('(');
      hashMap0.put(cryptoPrimitive0, character0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.remove("getshortValue");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(858);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        jSONObject0.write((Writer) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(378);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("^OTDV:zN{!M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5?7bI'8");
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      jSONObject0.optString("uE4F_3fhG<_");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, BufferedWriter> hashMap0 = new HashMap<Byte, BufferedWriter>();
      jSONObject0.put("E", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("E");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<BufferedOutputStream> linkedList0 = new LinkedList<BufferedOutputStream>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1105);
      Object object0 = jSONObject0.query("");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      boolean boolean1 = jSONObject0.isNull("D#4");
      assertTrue(boolean1);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1167);
      jSONObject0.put("`y1\"}d>Zr8!V6~kua", (double) 1167);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CryptoPrimitive cryptoPrimitive0 = CryptoPrimitive.KEY_AGREEMENT;
      JSONObject jSONObject0 = new JSONObject(cryptoPrimitive0);
      try { 
        jSONObject0.getString("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
