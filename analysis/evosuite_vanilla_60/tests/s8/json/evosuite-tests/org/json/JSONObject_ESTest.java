/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 13:54:03 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.MultipleGradientPaint;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.sql.JDBCType;
import java.sql.RowIdLifetime;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.smartcardio.CardTerminals;
import javax.swing.LayoutStyle;
import javax.swing.SortOrder;
import javax.tools.JavaFileObject;
import jdk.net.SocketFlow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("r|\"I79/y*^H", (-1386.3501F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject0.toString((-30));
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0");
      assertNotNull(object0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("{", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("H/{ F!iLra`?j`(", 144.1F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      MockFile mockFile0 = new MockFile("", "{");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONObject1.write((Writer) mockPrintWriter0, 60, 60);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("{", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/{", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject.testValidity(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JSONObject.indent(stringWriter0, 114);
      assertEquals("                                                                                                                  ", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Dialog.ModalityType> hashMap0 = new HashMap<JavaFileObject.Kind, Dialog.ModalityType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(7, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      HashMap<SortOrder, Short> hashMap0 = new HashMap<SortOrder, Short>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("kU8O(7aHiCY^a|13", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      String string0 = jSONObject0.optString("O1={]Tsc\r", (String) null);
      assertNull(string0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Number number0 = jSONObject0.optNumber((String) null, (Number) bigInteger0);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
      assertNotNull(number0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, number0.shortValue());
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Number number0 = jSONObject0.optNumber("", (Number) bigInteger0);
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
      assertNotNull(number0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)10, number0.shortValue());
      assertEquals((byte)10, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      BigDecimal bigDecimal0 = new BigDecimal((-1385.46F));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1385), bigDecimal0.shortValue());
      assertEquals((byte) (-105), bigDecimal0.byteValue());
      
      Number number0 = jSONObject0.optNumber("", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertNotNull(number0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short) (-1385), bigDecimal0.shortValue());
      assertEquals((byte) (-105), bigDecimal0.byteValue());
      assertEquals((short) (-1385), number0.shortValue());
      assertEquals((byte) (-105), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      long long0 = jSONObject1.optLong("y|\"]794C*LH", (long) 0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals((-1385L), long0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      long long0 = jSONObject0.optLong("y|\"]794C*LH");
      assertSame(jSONObject0, jSONObject1);
      assertEquals((-1385L), long0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("]wP+6p|5p)j[", 0);
      assertEquals(0, int0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      float float0 = jSONObject0.optFloat("Dlf3>|B#k1[>zQ\"b9Q", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      float float0 = jSONObject0.optFloat("{?Fp7/+o>o}q", (-1323.0F));
      assertEquals((-1323.0F), float0, 0.01F);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("", (double) 0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      boolean boolean0 = jSONObject0.optBoolean("60", false);
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Dialog.ModalityType> hashMap0 = new HashMap<JavaFileObject.Kind, Dialog.ModalityType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("shortValueExact", (BigDecimal) null);
      assertNull(bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      BigDecimal bigDecimal0 = new BigDecimal((-1385.46F));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-105), bigDecimal0.byteValue());
      assertEquals((short) (-1385), bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("y|\"]794C*LH", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((byte) (-105), bigDecimal0.byteValue());
      assertEquals((short) (-1385), bigDecimal0.shortValue());
      assertEquals((byte) (-105), bigDecimal1.byteValue());
      assertEquals((short) (-1385), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      long long0 = jSONObject1.getLong("y|\"]794C*LH");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals((-1385L), long0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, "<^H1'_{", 63, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.query("B:~2j)R)t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("{", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Dialog.ModalityType> hashMap0 = new HashMap<JavaFileObject.Kind, Dialog.ModalityType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("' and instead saw '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(110);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getNumber("YOU-kQWA<y4{&F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      try { 
        jSONObject0.getFloat("] could not convert to BigDecimal.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<PipedReader, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<PipedReader, MultipleGradientPaint.ColorSpaceType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getDouble("G~Cj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getBoolean("getnames");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        jSONObject0.append(stringArray0[0], (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3148);
      assertNotNull(bigDecimal0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)3148, bigDecimal0.shortValue());
      
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      assertNotNull(jSONObject0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)3148, bigDecimal0.shortValue());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("]D\"l/=Cgqoh>");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<CardTerminals.State, JSONObject> hashMap0 = new HashMap<CardTerminals.State, JSONObject>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("_ ", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name _ , locale fr_FR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-2718));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2718
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(5, stringArray0.length);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("Unable to write JSONObject value for key: ", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(5, stringArray0.length);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = jSONObject0.put("%s is not an array index", 144.1F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(5, stringArray0.length);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      
      MockFile mockFile0 = new MockFile("w6ORrfkH(6", "{");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, (-1845), (-1845));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
      assertEquals(5, stringArray0.length);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("{", mockFile0.getName());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/w6ORrfkH(6", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/w6ORrfkH(6/{", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<RoundingMode, CharArrayWriter> hashMap0 = new HashMap<RoundingMode, CharArrayWriter>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(35);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      assertNotNull(bufferedOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, 13, 0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      File file0 = MockFile.createTempFile("] not found.", "sKk^]r,<,nK>69Dfhc", (File) null);
      assertNotNull(file0);
      assertEquals("/tmp/] not found.0sKk^]r,<,nK>69Dfhc", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("] not found.0sKk^]r,<,nK>69Dfhc", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.getParent());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0, 0, 9);
      assertSame(jSONObject0, jSONObject1);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertNotNull(writer0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("/tmp/] not found.0sKk^]r,<,nK>69Dfhc", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("] not found.0sKk^]r,<,nK>69Dfhc", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("{", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "i*<RJSk<p`2");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintWriter0);
      
      Writer writer0 = jSONObject2.write((Writer) mockPrintWriter0, 63, 63);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(writer0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("i*<RJSk<p`2", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/", mockFile1.getParent());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/i*<RJSk<p`2", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isHidden());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.exists());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Object object0 = JSONObject.wrap(stringWriter0);
      assertNotNull(object0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object object0 = JSONObject.wrap(boolean0);
      assertNotNull(object0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer(1648);
      assertNotNull(integer0);
      assertEquals(1648, (int)integer0);
      
      Object object0 = JSONObject.wrap(integer0);
      assertNotNull(object0);
      assertEquals(1648, object0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Byte byte0 = new Byte((byte)110);
      assertNotNull(byte0);
      assertEquals((byte)110, (byte)byte0);
      
      Object object0 = JSONObject.wrap(byte0);
      assertNotNull(object0);
      assertEquals((byte)110, object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = JSONObject.wrap("#/");
      assertNotNull(object0);
      assertEquals("#/", object0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      assertEquals(RoundingMode.CEILING, roundingMode0);
      
      Object object0 = JSONObject.wrap(roundingMode0);
      assertSame(roundingMode0, object0);
      assertSame(object0, roundingMode0);
      assertEquals(RoundingMode.CEILING, object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Writer writer0 = JSONObject.quote("y|\"]794C*LH", (Writer) stringWriter0);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertNotNull(writer0);
      assertEquals("\"y|\\\"]794C*LH\"", stringWriter0.toString());
      assertEquals("\"y|\\\"]794C*LH\"", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("shortValueExact", (Object) "shortValueExact");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      String string0 = jSONObject0.optString("f<", "f<");
      assertNotNull(string0);
      assertEquals("f<", string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      long long0 = jSONObject0.optLong("#/", 5222L);
      assertEquals(5222L, long0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("y|\"]794C*LH", 698);
      assertEquals(698, int0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      float float0 = jSONObject0.optFloat(",W.", 447.7357F);
      assertEquals(447.7357F, float0, 0.01F);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("", (double) (-1385.46F));
      assertEquals((-1385.4599609375), double0, 0.01);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertNotNull(jSONObject0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.optBoolean("]wP+6p|5p)j[", true);
      assertFalse(linkedList0.contains("]wP+6p|5p)j["));
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JDBCType jDBCType0 = JDBCType.SMALLINT;
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType1 = jSONObject0.optEnum(class0, (String) null, jDBCType0);
      assertSame(jDBCType0, jDBCType1);
      assertSame(jDBCType1, jDBCType0);
      assertEquals(JDBCType.SMALLINT, jDBCType1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1386.3501F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Object object0 = jSONObject0.get("y|\"]794C*LH");
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(object0);
      assertEquals((-1386.3501F), object0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      try { 
        jSONObject0.get("3T6,Cg6Se]o\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      assertNotNull(jSONPointer0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.quote("Nesting error.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("uns", (-1000));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<RoundingMode, CharArrayWriter> hashMap0 = new HashMap<RoundingMode, CharArrayWriter>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.remove("Expected a ':' after a key");
      assertNull(object0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONPointer jSONPointer0 = new JSONPointer("");
      assertNotNull(jSONPointer0);
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("q2Saj,!)X7h8pB4.LM^", boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(map0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("r|\"I79/y*^H", (-1386.3501F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = jSONObject1.put("", (long) 0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Writer writer0 = JSONObject.writeValue(stringWriter0, hashMap0, 63, 13);
      assertSame(stringWriter0, writer0);
      assertSame(writer0, stringWriter0);
      assertNotNull(writer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", stringWriter0.toString());
      assertEquals("{}", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("60", true);
      assertNotNull(mockFileOutputStream0);
      
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileOutputStream0);
      assertNotNull(jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      String string0 = jSONObject0.toString(983);
      assertNotNull(string0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      
      String string0 = jSONArray0.toString();
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(string0);
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<PipedReader, MultipleGradientPaint.ColorSpaceType> hashMap0 = new HashMap<PipedReader, MultipleGradientPaint.ColorSpaceType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(linkedList0);
      assertNotNull(jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3147);
      assertNotNull(bigDecimal0);
      assertEquals((byte)75, bigDecimal0.byteValue());
      assertEquals((short)3147, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals((byte)75, bigDecimal0.byteValue());
      assertEquals((short)3147, bigDecimal0.shortValue());
      assertEquals((byte)75, bigDecimal1.byteValue());
      assertEquals((short)3147, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double double0 = new Double(1027.68);
      assertNotNull(double0);
      assertEquals(1027.68, (double)double0, 0.01);
      
      Object object0 = JSONObject.wrap(double0);
      assertNotNull(object0);
      assertEquals(1027.68, object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Short short0 = new Short((short)1386);
      assertNotNull(short0);
      assertEquals((short)1386, (short)short0);
      
      Object object0 = JSONObject.wrap(short0);
      assertNotNull(object0);
      assertEquals((short)1386, object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = (JSONArray)JSONObject.wrap(jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.put((Collection<?>) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      
      MockFile mockFile0 = new MockFile(" @bzNpaRk~=");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      assertNotNull(jSONObject0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(" @bzNpaRk~=", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" @bzNpaRk~=", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      
      MockFile mockFile0 = new MockFile(" @bzNpaRk~=");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      assertNotNull(jSONObject0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(" @bzNpaRk~=", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" @bzNpaRk~=", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(" @bzNpaRk~=", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" @bzNpaRk~=", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Dialog.ModalityType> hashMap0 = new HashMap<JavaFileObject.Kind, Dialog.ModalityType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      try { 
        jSONObject0.put("]$_wn[Chd'JI$4P<YBs", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("1|*?8<pwieK(");
      assertNotNull(object0);
      assertEquals("1|*?8<pwieK(", object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("java.io.StringWriter@0000000002");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertNotNull(object0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("#/");
      assertNotNull(object0);
      assertEquals("#/", object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertNotNull(number0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("[xS4DdzcI6Rg09#~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [[xS4DdzcI6Rg09#~] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        JSONObject.stringToNumber(", l@@coo^l5%Pbdp ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [, l@@coo^l5%Pbdp ] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("6)GuE7d _4??}\"[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("istoCharArray");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      boolean boolean0 = jSONObject0.similar(hashMap0);
      assertFalse(boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getLong("jT>B9L']'?z%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Class<Locale.Category> class0 = Locale.Category.class;
      try { 
        jSONObject0.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] is not an enum of type java.io.StringWriter@0000000003.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertNotNull(jSONObject0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Byte byte0 = Byte.valueOf((byte)48);
      assertNotNull(byte0);
      assertEquals((byte)48, (byte)byte0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("~1", byte0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(linkedList0.contains("~1"));
      assertNotNull(jSONObject1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      try { 
        jSONObject1.putOnce("y|\"]794C*LH", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"y|\"]794C*LH\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("/4z;Y\".!Z&l{XXB&aN", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      JSONObject jSONObject0 = new JSONObject(class0);
      assertEquals(35, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONObject jSONObject1 = jSONObject0.put("", (long) 0);
      jSONObject1.optNumber("", (Number) bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", 0.0F);
      jSONObject1.optLong("y|\"]794C*LH", (long) 0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<MockRandomAccessFile> linkedList0 = new LinkedList<MockRandomAccessFile>();
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (Collection<?>) linkedList0);
      long long0 = jSONObject1.optLong("y|\"]794C*LH");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("#/");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<RoundingMode, CharArrayWriter> hashMap0 = new HashMap<RoundingMode, CharArrayWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("` Bqp)");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("s is not an array ndex", false);
      int int0 = jSONObject1.optInt("s is not an array ndex", (-599));
      assertEquals((-599), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("r|\"I79/y*^H", (-1386.3501F));
      int int0 = jSONObject0.optInt("r|\"I79/y*^H", 0);
      assertEquals(1, jSONObject0.length());
      assertEquals((-1386), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Dialog.ModalityType> hashMap0 = new HashMap<JavaFileObject.Kind, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("", bigInteger0);
      assertEquals((short)10, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Dialog.ModalityType> hashMap0 = new HashMap<JavaFileObject.Kind, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("", bigDecimal0);
      assertEquals((byte)10, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LinkedList<MockRandomAccessFile> linkedList0 = new LinkedList<MockRandomAccessFile>();
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (Collection<?>) linkedList0);
      jSONObject1.optBigDecimal("y|\"]794C*LH", bigDecimal0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("&ARU9", false);
      Class<LayoutStyle.ComponentPlacement> class0 = LayoutStyle.ComponentPlacement.class;
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement0 = LayoutStyle.ComponentPlacement.RELATED;
      LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement1 = jSONObject1.optEnum(class0, "&ARU9", layoutStyle_ComponentPlacement0);
      assertEquals(LayoutStyle.ComponentPlacement.RELATED, layoutStyle_ComponentPlacement1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double(1364.82);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", true);
      JSONArray jSONArray0 = jSONObject1.names();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      jSONObject1.increment("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-587));
      JSONObject jSONObject1 = jSONObject0.putOnce("/4z;Y\".!Z&l{XXB&aN", short0);
      try { 
        jSONObject1.increment("/4z;Y\".!Z&l{XXB&aN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000007].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("Ks?/u+O9rBxqsM!txo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      try { 
        jSONObject1.getString("y|\"]794C*LH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(60);
      String[] stringArray0 = JSONObject.getNames((Object) bigDecimal0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(bigDecimal0, stringArray0);
      assertEquals(11, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String[] stringArray0 = JSONObject.getNames((Object) byteArrayOutputStream0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream> hashMap0 = new HashMap<ProcessBuilder.Redirect.Type, PushbackInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<SocketFlow.Status, Component.BaselineResizeBehavior> hashMap0 = new HashMap<SocketFlow.Status, Component.BaselineResizeBehavior>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject1 = jSONObject0.accumulate("", byte0);
      long long0 = jSONObject1.getLong("");
      assertEquals(48L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("jT>B9L']'?z%", "");
      try { 
        jSONObject1.getLong("jT>B9L']'?z%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      try { 
        jSONObject1.getJSONArray("y|\"]794C*LH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      float float0 = jSONObject1.getFloat("y|\"]794C*LH");
      assertEquals(1, jSONObject0.length());
      assertEquals((-1385.46F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("r|\"I79/y*^H", (-1386.3501F));
      double double0 = jSONObject1.getDouble("r|\"I79/y*^H");
      assertEquals(1, jSONObject0.length());
      assertEquals((-1386.35009765625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.append("y|\"]794C*LH", boolean0);
      try { 
        jSONObject1.getBigDecimal("y|\"]794C*LH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      boolean boolean1 = jSONObject1.optBoolean("y|\"]794C*LH");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("&ARU9", false);
      try { 
        jSONObject0.getJSONObject("&ARU9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("|-:Gm+rc{J=q5|D%", (-1385.46F));
      try { 
        jSONObject0.append("|-:Gm+rc{J=q5|D%", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[|-:Gm+rc{J=q5|D%] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("y|\"]794C*LH", (-1385.46F));
      jSONObject0.accumulate("y|\"]794C*LH", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.append("y|\"]794C*LH", boolean0);
      jSONObject0.accumulate("y|\"]794C*LH", "y|\"]794C*LH");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<MockRandomAccessFile, Float> hashMap0 = new HashMap<MockRandomAccessFile, Float>();
      Float float0 = new Float(0.0F);
      hashMap0.put((MockRandomAccessFile) null, float0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Dialog.ModalityType> hashMap0 = new HashMap<JavaFileObject.Kind, Dialog.ModalityType>();
      JavaFileObject.Kind javaFileObject_Kind0 = JavaFileObject.Kind.SOURCE;
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.APPLICATION_MODAL;
      hashMap0.put(javaFileObject_Kind0, dialog_ModalityType0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(110);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Dialog.ModalityType> hashMap0 = new HashMap<JavaFileObject.Kind, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0);
      MockFile mockFile0 = new MockFile("/", "java.io.StringWriter@0000000003");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery("");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Authenticator.RequestorType> class0 = Authenticator.RequestorType.class;
      jSONObject0.optEnum(class0, "v`Rqd0hc;sRL1/8");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("'^)gKf+;N,Q(%IA5TPw");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.keys();
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HashMap<RoundingMode, CharArrayWriter> hashMap0 = new HashMap<RoundingMode, CharArrayWriter>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Object object0 = jSONObject0.query("/4z;Y\".!Z&l{XXB&aN");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|Ew^#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("y|\"794C*LH", (-1385.46F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONObject0.optBigInteger("y|\"794C*LH", bigInteger0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("#/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Set<String> set0 = jSONObject0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getBigInteger("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Dialog.ModalityType> hashMap0 = new HashMap<JavaFileObject.Kind, Dialog.ModalityType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("Kj=Tjx'[>rUC[4m4&*");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(8192);
      jSONObject0.increment("?PbS8L!Fu)R");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "_ ");
      HashMap<RowIdLifetime, BufferedInputStream> hashMap0 = new HashMap<RowIdLifetime, BufferedInputStream>();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
