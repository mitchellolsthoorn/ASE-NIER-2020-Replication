/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 14:06:28 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.UUID;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=g@T&Vf>");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("scanFieldDecimal", 8963398325558730460L, jSONPath_Operator0);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, class0, (Object) null, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("!Y`RU)");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("wp0_d7j", "Ul+T[ZAYDs22Bp", true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, sQLSyntaxErrorException0, jSONPath0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long(525L);
      Long long1 = new Long(8799865725448097902L);
      boolean boolean0 = JSONPath.eqNotNull(long1, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(3266, 112, 44);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement(":", (-1954L), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(":");
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath_FilterSegment0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -70
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("?Y");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("&.t");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("step must greater than zero : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$\"v5N6>!cy+P[ax");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m7<h");
      jSONPath_JSONPathParser0.readName();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("9gL7Z}s%xF?m", "9gL7Z}s%xF?m", true);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_ValueSegment0);
      assertSame(jSONPath_Filter0, jSONPath_ValueSegment0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("d.'Oyhh^pLpi@", "d.'Oyhh^pLpi@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2d.'Oyhh^pLpi@
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.parser.deserializer.TimeDeserializer");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("illegal json : ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%%");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8dn(*l{+r");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('6');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("sbO");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("w(+E^hQOSpmdj)VZKx");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$NotNullSegement");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.accept('5');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '5, but 'c'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("S(9u+=KU++", 5.11832232593343, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("S(9u+=KU++");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("S(9u+=KU++", "S(9u+=KU++", 2780);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("q}bjc41u@", "com.alibaba.fastjson.JSONPath$KeySetSegment");
      MockDate mockDate0 = new MockDate(2780, 2015, 2015);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, sQLIntegrityConstraintViolationException0, sQLNonTransientConnectionException0, mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.safeMode", hashMap0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "fastjson.parser.deny", sQLClientInfoException0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransactionRollbackException0);
      assertEquals(164, map0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("writeDirectNonContext");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, (Object) null, parserConfig0);
      assertEquals(7, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath0 = JSONPath.compile("Jr4xH[M");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      jSONPath0.getJavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath_SizeSegment0.eval((JSONPath) null, jSONPath_Operator0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$SizeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Object[] objectArray0 = new Object[0];
      JSONPath.arrayAdd((Object) map0, "a8[", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) map0, "a8[", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path a8[
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*dPUd");
      boolean boolean0 = jSONPath0.setPropertyValue("*dPUd", "*dPUd", 3142L, "*dPUd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = JSONPath.set((Object) null, "/cause/stackTrace/13", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("false", serializeConfig0, parserConfig0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.JSONPath$SizeSegment");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      boolean boolean0 = jSONPath0.set((Object) null, (Object) mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = JSONPath.read("null", "4<b*jVK&{PvF");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_MultiIndexSegment0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<JSONPath.RangeSegment> class0 = JSONPath.RangeSegment.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("false", serializeConfig0, parserConfig0);
      SQLDataException sQLDataException0 = new SQLDataException(",q3A", "fastjson.parser.deny.internal");
      Object object0 = jSONPath0.getPropertyValue(sQLDataException0, "com.alibaba.fastjson.JSONPath", (-696L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("3");
      Class<Date> class0 = Date.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.TimeDeserializer");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.parser.ParserConfig", true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("5\"isPWh)", "S3B?|");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, sQLInvalidAuthorizationSpecException0, "S3B?|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path com.alibaba.fastjson.parser.deserializer.TimeDeserializer, segement com.alibaba.fastjson.parser.ParserConfig
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(":");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      int int0 = jSONPath0.evalSize(jSONPath_WildCardSegment0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("k~80,Djt,>eH");
      int int0 = jSONPath0.evalSize("`W$h0!*5P");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(187, 98, 116);
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_RangeSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.evalKeySet("j1]l*)xY=:X,Dq");
      assertFalse(set0.contains("j1]l*)xY=:X,Dq"));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) null, "com.alibaba.fastjson.JSONPach$MatchSegement");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      Object object0 = jSONPath0.eval((Object) ":");
      assertEquals(":", object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = JSONPath.compare("zC9!", "zC9!");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$IntOpSegement", (SerializeConfig) null, parserConfig0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("y");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem((JSONPath) null, (Object) null, (-916), "=rp<2U7Pa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Ol^=kK7gk");
      // Undeclared exception!
      try { 
        JSONPath.set((Object) jSONPath0, "6", (Object) "6");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("like", true);
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) jSONPath_PropertySegment0, false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("k~80,Djt,>eH");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLDataException sQLDataException0 = new SQLDataException("`W$h0!*5P", batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("in", "BF(i H!8# 4", 8, sQLDataException0);
      jSONPath0.set((Object) batchUpdateException0, (Object) sQLFeatureNotSupportedException0, false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("9gL7Z}s%xF?m", "9gL7Z}s%xF?m", false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      jSONPath0.set((Object) bigInteger0, (Object) parserConfig0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny.internal", "fastjson.parser.autoTypeAccept", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLTransientConnectionException0, (Object) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      String[] stringArray0 = pattern0.split((CharSequence) "");
      JSONPath.reserveToArray("", stringArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a8[");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(class0, "yyyy-MM-dd HH:mm:ss", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("FxuBZ8>PZ)^dsC +W");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, (-139));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      JSONPath.remove((Object) bigDecimal0, "JSONPath$MultiPropertySegment");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) jSONPath_Operator0, "a8[");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      JSONPath.remove((Object) sQLNonTransientConnectionException0, "dd-MM-yyyy HH:mm:ss");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("LIKE");
      // Undeclared exception!
      jSONPath0.remove((Object) jSONPath0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("step", serializeConfig0, parserConfig0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.Or;
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(348);
      JSONPath jSONPath0 = new JSONPath("l", serializeConfig0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.time.", hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLClientInfoException0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("$T2rDi", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) "3", "3");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) "", "E=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("`W$h0!*5P", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) "`W$h0!*5P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. `W$h0!*5P
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("S(9u+=KU++");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : S(9u+=KU++
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$P?*1Oj<l=KIh^Oz");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : $P?*1Oj<l=KIh^Oz
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("`");
      Collection<Object> collection0 = jSONPath0.getPropertyValues("`");
      assertFalse(collection0.contains("`"));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Kj/1)Pg\"6/Yd", (SerializeConfig) null, parserConfig0);
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$IntBetweenSegement");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem("com.alibaba.fastjson.JSONPath$IntBetweenSegement", 101);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[12];
      // Undeclared exception!
      try { 
        JSONPath.extract("fastjson.parser.autoTypeAccept", "fastjson.parser.deny", parserConfig0, (-3139755), featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[9];
      // Undeclared exception!
      try { 
        JSONPath.extract("Q", "Q", parserConfig0, (-331), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Feature[] featureArray0 = new Feature[3];
      // Undeclared exception!
      try { 
        JSONPath.extract("LIKE", "b Vj#z\",9Yu>oqO-b", (ParserConfig) null, (-2601), featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract(".ze:!@]!7f80']", "pL[/PA?)N8xc9{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/[sackTrace/6");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NOT_RLIKE", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Long long0 = new Long(525L);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$DoubleOpSegement", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")k<@<q%2Is");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("%%", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. )k<@<q%2Is
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      // Undeclared exception!
      jSONPath0.deepSet(jSONPath0, "Wvb'},R4dd +=HIR3x", (-1983), (Object) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(348);
      JSONPath jSONPath0 = new JSONPath("l", serializeConfig0, (ParserConfig) null);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(javaBeanSerializer0, (List<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("getFieldType");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("c8m.alibaba.fastjson.JSONPSth$1", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.serializer.ASMSerializerFactory$Context");
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues((Object) null, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("S(9u+=KU++", 5.11832232593343, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("S(9u+=KU++");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("S(9u+=KU++", "S(9u+=KU++", 2780);
      DataTruncation dataTruncation0 = new DataTruncation(2964, false, true, 59, 59, sQLIntegrityConstraintViolationException0);
      jSONPath0.containsValue((Object) jSONPath_DoubleOpSegement0, (Object) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("+");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Value", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) jSONPath_WildCardSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")k<@<q%2Is");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONPath0.contains(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. )k<@<q%2Is
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compare((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("+");
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "GbDM?2-K\u0002E{L", (Object[]) stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONPath jSONPath0 = JSONPath.compile("SortField");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "", (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      MockDate mockDate0 = new MockDate(3073L);
      jSONPath0.deepSet((Object) null, "mtd%a,m]~F\"V(sFA+3", 77L, mockDate0);
      assertEquals("Thu Jan 01 00:00:03 GMT 1970", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("l");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("", true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("safeMode");
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.eval(jSONPath0, jSONPath0, sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path l, segement 
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<String> class0 = String.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, javaBeanDeserializer0, 113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("getFieldType");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.IN;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, "c8m.alibaba.fastjson.JSONPSth$1", (-295), jSONPath_Operator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement(",q3A", ",q3A", false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("false", serializeConfig0, parserConfig0);
      SQLWarning sQLWarning0 = new SQLWarning("not support jsonpath : ", "n", 102);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.REG_MATCH;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("dHNIyQ6>qj/Y", (Pattern) null, jSONPath_Operator0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(483);
      boolean boolean0 = jSONPath_RegMatchSegement0.apply(jSONPath0, jSONPath_RlikeSegement0, sQLWarning0, jSONPath_ArrayAccessSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("B");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(60, 60, (short)1909);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      Float float0 = new Float(0.0);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, sQLTimeoutException0, float0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")k<@<q%2Is");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("java/lang/Object", false);
      SQLTransientException sQLTransientException0 = new SQLTransientException("{\"$ref\":\"");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java/lang/Object", "/stackTrace/9", sQLTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Am,Te [*!J~}", "nin");
      jSONPath_PropertySegment0.setValue(jSONPath0, sQLFeatureNotSupportedException0, sQLInvalidAuthorizationSpecException0);
      assertEquals("/stackTrace/9", sQLFeatureNotSupportedException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath jSONPath0 = JSONPath.compile("`");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Or", false);
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-2147483648L), (-1133));
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, bigDecimal0, jSONPath_Operator0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("n9TQsn[6^odrBfx&B:");
      Long long0 = Long.valueOf(1167L);
      boolean boolean0 = jSONPath0.remove((Object) long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Long long0 = new Long(543L);
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.autoTypeSupport");
      boolean boolean0 = jSONPath0.remove((Object) long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath jSONPath0 = JSONPath.compile("y");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ta:xt`t_cr", hashMap0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ta:xt`t_cr", "Ta:xt`t_cr", 413, sQLClientInfoException0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLTransientException0, (Object) jSONPath_WildCardSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = new SerializeConfig((byte)4);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("processKey", parserConfig0, (-465));
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("+");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("JSONPath$RangeSegment", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -5
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.safeMode");
      Object object0 = jSONPath0.eval((Object) "fastjson.parser.safeMode");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("", serializeConfig0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("K_i<Kd98kKqq", serializeConfig0, parserConfig0);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(41);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Feature[] featureArray0 = new Feature[2];
      // Undeclared exception!
      try { 
        JSONPath.extract("7YN63KAl!'5wK&B", "D=tI", parserConfig0, (-216), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // int
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(54);
      Map<String, Object> map0 = JSONPath.paths((Object) "?k^aHB1", serializeConfig0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Byte byte0 = new Byte((byte)33);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$T2rDi";
      stringArray0[1] = "/stackTrace/4";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(byte0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("f");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "like";
      stringArray0[1] = "like";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject(jSONPath0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$MatchSegement", "com.alibaba.fastjson.JSONPath$MatchSegement", jSONPath_Operator0);
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject(jSONPath_StringOpSegement0, stringArray0);
      assertSame(jSONPath_StringOpSegement0, object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeAccept", "S(9u+=KU++");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)JSONPath.reserveToObject(sQLIntegrityConstraintViolationException0, (String[]) null);
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("$");
      String[] stringArray0 = pattern0.split((CharSequence) "$");
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray("$", stringArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(javaBeanDeserializer0, (String[]) null);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(348);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("*", serializeConfig0, parserConfig0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Set<?> set0 = jSONPath0.keySet((Object) jSONPath_WildCardSegment0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("I|4~Xh", "com.alibaba.fastjson.JSONPath$StringOpSegement", 0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
      JSONPath jSONPath0 = new JSONPath("I|4~Xh");
      Object object0 = jSONPath_KeySetSegment0.eval(jSONPath0, sQLDataException0, hashMap0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("`W$h0!*5P", serializeConfig0, parserConfig0);
      int int0 = jSONPath0.evalSize(parserConfig0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("C*|q:!`X,;<#u", serializeConfig0, parserConfig0);
      Byte byte0 = new Byte((byte)49);
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue(byte0, "s>&tmb '", false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("evalSize error : ", true);
      JSONPath jSONPath0 = new JSONPath("HO%u");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("stackTrace", "$P?*1Oj<l=KIh^Oz", 1794);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("false", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(",q3A", ",q3A", (-889275714));
      UUID uUID0 = MockUUID.randomUUID();
      jSONPath0.deepSet(sQLTimeoutException0, "fastjson.parser.safeMode", (-889275714), uUID0);
      assertEquals(",q3A", sQLTimeoutException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java/lang/Object");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("java/lang/Object", true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.JSONPath$StringOpSegement");
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, (Object) null);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1655, 1655, (-1323), (-1323), (-1323), (-1323));
      int int0 = JSONPath.size((Object) mockGregorianCalendar0, "fastjson.parser.safeMode");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull(144, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Short short0 = new Short((short)1026);
      boolean boolean0 = JSONPath.eqNotNull(short0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Float float0 = new Float(1000000.0F);
      boolean boolean0 = JSONPath.eqNotNull(float0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = new Long(4005816915763135639L);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigInteger0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long long0 = new Long(525L);
      Long long1 = new Long((-797590595362680650L));
      boolean boolean0 = JSONPath.eqNotNull(long1, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long long0 = new Long(543L);
      BigDecimal bigDecimal0 = BigDecimal.valueOf(85L);
      boolean boolean0 = JSONPath.eqNotNull(long0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long long0 = new Long((-1882L));
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-1882L));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) 10);
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double(1512.536275075482);
      boolean boolean0 = JSONPath.eqNotNull(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eq(propertyNamingStrategy0, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java/lang/Object");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java/lang/Object", "java/lang/Object", sQLTimeoutException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("rX1", "/stackTrace/12", 101, sQLNonTransientConnectionException0);
      boolean boolean0 = JSONPath.eq(sQLSyntaxErrorException0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eq((Object) null, bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer((-1785));
      boolean boolean0 = JSONPath.eq(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      boolean boolean0 = JSONPath.eq(bigInteger0, propertyNamingStrategy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")k<@<q%2Is");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      Float float0 = new Float(3820.9722F);
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLIntegrityConstraintViolationException0, float0);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("{]", "{]", jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("illegal json : ");
      boolean boolean0 = jSONPath0.removePropertyValue(jSONPath_StringOpSegement0, "illegal json : ", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      int[] intArray0 = new int[11];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      UUID uUID0 = MockUUID.randomUUID();
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, uUID0, "alibaba");
      assertEquals(11, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("!Y`RU)");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.JSONPath$StringInSegement", "wp0_d7j", (-953), (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("wp0_d7j", "false", (-833), sQLFeatureNotSupportedException0);
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("wp0_d7j", intArray0, sQLWarning0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/stackTrace/6", "uCt+(y|kD|D}%fYIc", hashMap0, batchUpdateException0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-953), (-833), (-833));
      // Undeclared exception!
      jSONPath_RangeSegment0.eval(jSONPath0, sQLClientInfoException0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("=g@T&Vf>");
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("LE");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("com.alibaba.fastjson.JSONPath$MultiPropertySegment", false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("LE");
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, jSONPath_NullSegement0, jSONPath_PropertySegment0, sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("y");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("y");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NotNullSegement0, jSONPath_NotNullSegement0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath0, jSONPath0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JSONPath jSONPath0 = new JSONPath(":");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement(":", (-1954L), jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntOpSegement0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(":");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, mockGregorianCalendar0, sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement(")k<@<q%2Is");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath(")k<@<q%2Is", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[)/V N/Gj");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#*Pr67JxD:";
      stringArray0[1] = "must > ";
      stringArray0[2] = "must > ";
      stringArray0[3] = "can not cast to int, value : ";
      stringArray0[4] = "#*Pr67JxD:";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(">U_ZkQiDKW:W$agh x_", stringArray0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_WildCardSegment0, "must > ");
      assertEquals("must > ", object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("b Vj#z\",9Yu>oqO-b");
      JSONPath jSONPath0 = new JSONPath("LIKE");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Wt}.7.0/gUe]-flQAj");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".null";
      stringArray0[1] = "b Vj#z\",9Yu>oqO-b";
      stringArray0[2] = "b Vj#z\",9Yu>oqO-b";
      stringArray0[3] = "Wt}.7.0/gUe]-flQAj";
      stringArray0[4] = ".null";
      stringArray0[5] = "LIKE";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement(".null", "b Vj#z\",9Yu>oqO-b", ".null", stringArray0, false);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_MatchSegement0, jSONPath_MatchSegement0, true);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_FilterGroup0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, batchUpdateException0, sQLTimeoutException0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("", "", false);
      JSONPath jSONPath0 = new JSONPath("$\"v5N6>!cy+P[ax");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      Float float0 = new Float((float) 12);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("0", "com.alibaba.fastjson.parser.ParserConfig", 126, hashMap0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, float0, sQLClientInfoException0);
      assertNotNull(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("", "", false);
      JSONPath jSONPath0 = new JSONPath("$\"v5N6>!cy+P[ax");
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, bigInteger0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("{]", "{]", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("illegal json : ");
      Integer integer0 = new Integer(81);
      DataTruncation dataTruncation0 = new DataTruncation(81, true, false, 68, 68);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, integer0, dataTruncation0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("l");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("l", false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("`", "l", jSONPath_Operator0);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(494, 494, 494);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, "l", jSONPath_PropertySegment0, jSONPath_RangeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("com.alibaba.fastjson.JSONPath$MatchSegement", "com.alibaba.fastjson.JSONPath$MatchSegement", jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("`");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("Or", false);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath_PropertySegment0, "Or", jSONPath_PropertySegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement(",q3A", ",q3A", false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("false", serializeConfig0, parserConfig0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(",q3A", ",q3A", (-889275714));
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, "false", serializeConfig0, sQLTimeoutException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      String[] stringArray0 = pattern0.split((CharSequence) "");
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("", "", (String) null, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("", "JR.%Tzf.", "com.alibaba.fastjson.JSONPath$MatchSegement", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("com.alibaba.fastjson.parser.deserializer.TimeDeserializer", (String) null, "}LzGmY%4\"?o~6vKQ\"A", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("length", serializeConfig0, parserConfig0);
      JSONPath.MinSegment jSONPath_MinSegment0 = JSONPath.MinSegment.instance;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("fastjson.parser.autoTypeAccept", jSONPath_MinSegment0, jSONPath_Operator0);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_RefOpSegement0);
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, jSONPath_FilterSegment0, classLoader0, jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(":", stringArray0, false);
      JSONPath jSONPath0 = new JSONPath(">U_ZkQiDKW:W$agh x_");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(",8");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(">U_ZkQiDKW:W$agh x_", "yB<%Cj~,k", sQLInvalidAuthorizationSpecException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("3_? H", hashMap0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, sQLRecoverableException0, sQLClientInfoException0, jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[)/V N/Gj");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#*Pr67JxD:";
      stringArray0[1] = "must > ";
      stringArray0[2] = "must > ";
      stringArray0[3] = "can not cast to int, value : ";
      stringArray0[4] = "#*Pr67JxD:";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement(">U_ZkQiDKW:W$agh x_", stringArray0, true);
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath_SizeSegment0, "#*Pr67JxD:", jSONPath_MultiPropertySegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("com.alibaba.fastjson.JSONPath$ValueSegment", longArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$ValueSegment");
      Byte byte0 = new Byte((byte)47);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, longArray0[0], byte0, sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";Um8$yu3GS");
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-3750763034362895564L));
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("", longArray0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!|G6}Yz:3J)R}R", "", 2549);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, long0, sQLFeatureNotSupportedException0, jSONPath_FilterSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(";Um8$yu3GS");
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-3750763034362895564L));
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("", longArray0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!|G6}Yz:3J)R}R", "", 2549);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_IntObjInSegement0);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, long0, sQLFeatureNotSupportedException0, jSONPath_FilterSegment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("false", serializeConfig0, parserConfig0);
      long[] longArray0 = new long[2];
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement("[)/V N/Gj", longArray0, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1654, (-1183), 1654);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SQLWarning sQLWarning0 = new SQLWarning("not support jsonpath : ", "n", 102);
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.autoTypeSupport", "false", 98, sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLDataException0);
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, date0, sQLDataException0, sQLTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment((String) null, (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Long long0 = new Long(525L);
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeAccept", serializeConfig0, parserConfig0);
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("fastjson.parser.deny.internal");
      Byte byte0 = new Byte((byte)52);
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, long0, jSONPath0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("step must greater than zero : ");
      JSONPath jSONPath0 = new JSONPath("NE");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment((int[]) null);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath_SizeSegment0, "step must greater than zero : ", jSONPath_MultiIndexSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("a8[");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(28, 17, 17);
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, map0, sQLTimeoutException0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-2024), (-833), (-953));
      JSONPath jSONPath0 = JSONPath.compile("!Y`RU)");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("wp0_d7j", "Ul+T[ZAYDs22Bp", (-2024), (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("getFieldValue error.", "Dna&!X", (-2024), sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("wp0_d7j", intArray0, sQLWarning0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Dna&!X", "nin", hashMap0, batchUpdateException0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLClientInfoException0, "Dna&!X");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      int[] intArray0 = new int[3];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "jsonpath error, path ");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", ",8", sQLInvalidAuthorizationSpecException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, sQLRecoverableException0, (Object) null);
      assertEquals(3, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLDataException sQLDataException0 = new SQLDataException("3HJ", "2EQD ", (Throwable) null);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLDataException0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("[)/V N/Gj");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#*Pr67JxD:";
      stringArray0[1] = "must > ";
      stringArray0[2] = "must > ";
      stringArray0[3] = "can not cast to int, value : ";
      stringArray0[4] = "#*Pr67JxD:";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, "must > ");
      assertEquals(5, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")k<@<q%2Is");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("like", true);
      // Undeclared exception!
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath0, "f");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Double double0 = new Double((-1488));
      Short short0 = new Short((short) (-1));
      // Undeclared exception!
      try { 
        JSONPath.compare(double0, short0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = JSONPath.compare("", "NOT_IN");
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        JSONPath.compare(propertyNamingStrategy0, "k~80,Djt,>eH");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Enum
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[)Q/{ N/Gj");
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval(jSONPath0, "[)Q/{ N/Gj", jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("b Vj#z\",9Yu>oqO-b");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals(" Vj#z\",9Yu>oqO-b", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/8");
      String string0 = jSONPath_JSONPathParser0.readString();
      assertEquals("stackTrace", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("a8[");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("zoT.,0%xTh?ua");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("nin");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nin
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("']0bh&3>~t31Tt");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '', but 't'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("m7<h");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-1014497654951707614L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1.2.68");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-1014497654951707614L));
      assertEquals((-1.01449765495170765E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2zY!JER)R;ZPg");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(2L, object0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("+/bNg9pN`2+N1O");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("z)47");
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("z)47", stringArray0, true);
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_StringInSegement0);
      assertSame(jSONPath_Filter0, jSONPath_StringInSegement0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("2i;\"Y^RgrT/P`9hH");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[]");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.parser.deserializer.TimeDeserializer");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("\t");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.skipWhitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("GbDM?2-K\u0002E{L");
      Map<String, Object> map0 = JSONPath.paths((Object) jSONPath0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "fHV.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/11");
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.alibaba.fastjson.JSONPach$MatchSegement", "com.alibaba.fastjson.JSONPach$MatchSegement", 2847, intArray0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) batchUpdateException0, (Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("B");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSONPath$MultiPropertySegment", "rTL5=Fia", 60);
      boolean boolean0 = jSONPath0.set((Object) "B", (Object) sQLFeatureNotSupportedException0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(17);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$MultiPropertySegment");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_ArrayAccessSegment0, (Object) propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("(");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = jSONPath0.set((Object) ":", (Object) mockGregorianCalendar0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      boolean boolean0 = jSONPath0.set((Object) null, (Object) jSONPath_WildCardSegment0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "l", "/stackTrace/11");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("illegal json : ");
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONPath jSONPath0 = new JSONPath("(");
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "R=g*yueey2y", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport");
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) hashMap0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("k~80,Djt,>eH");
      Object[] objectArray0 = new Object[1];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals("k~80,Djt,>eH", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[)Q/{ N/Gj");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "[)Q/{ N/Gj", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '], but '/'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("java.");
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) "java.", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.parser.deserializer.TimeDeserializer", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) "com.alibaba.fastjson.parser.deserializer.TimeDeserializer", (Object[]) null);
      assertEquals("com.alibaba.fastjson.parser.deserializer.TimeDeserializer", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("y");
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Set<?> set0 = jSONPath0.keySet((Object) bigInteger0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("`");
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      Set<?> set0 = jSONPath0.keySet((Object) batchUpdateException0);
      assertEquals(4, set0.size());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("y");
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<SQLException> class0 = SQLException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      JSONPath jSONPath0 = new JSONPath("p*V\"Y");
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : p*V\"Y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath_Operator0, "fastjson.parser.safeMode", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("$");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("stackTrace", "$P?*1Oj<l=KIh^Oz", 1794);
      boolean boolean0 = JSONPath.containsValue((Object) pattern0, "list_item_value", (Object) sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("b Vj#z\",9Yu>oqO-b", "LIKE");
      boolean boolean0 = JSONPath.contains((Object) sQLWarning0, "/stackTrace/4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      boolean boolean0 = jSONPath0.contains((Object) "alibaba");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "!NSYqM8E}7i+~m%V<>", "(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(",q3A");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/6");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NOT_RLIKE", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object object0 = JSONPath.extract("", "Or");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("`");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      Set<?> set0 = JSONPath.keySet((Object) jSONPath_Operator0, "Or");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny");
      Object object0 = jSONPath0.eval((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/12");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("*");
      jSONPath0.init();
      assertEquals("*", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement(",q3A", ",q3A", false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("false", serializeConfig0, parserConfig0);
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("&$:N48maD?'", "JR.%Tzf.", "fastjson.parser.autoTypeAccept", (String[]) null, false);
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, jSONPath0, jSONPath_RlikeSegement0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(")k<@<q%2Is");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(1150);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, object0, ")k<@<q%2Is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("+");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ks+jhKduQfA~{@oD+", hashMap0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(17);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("a8[");
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, jSONPath0, serializeConfig0.propertyNamingStrategy);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("must > ", (-1722689435), 6452898535252464908L, false);
      SQLTransientException sQLTransientException0 = new SQLTransientException("']0bh&3>~t31Tt", "y");
      JSONPath jSONPath0 = JSONPath.compile("*");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("J}<10}<H-4QA", sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("NOT_IN", "*", (-1722689435));
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, sQLNonTransientConnectionException0, jSONPath0, sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.JSONPath$SizeSegment");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(92, 92, 4931, 92, 4931);
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval((JSONPath) null, mockGregorianCalendar0, jSONPath0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("fastjson.parser.deny.internal", "com.alibaba.fastjson.parser.deserializer.TimeDeserializer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[)Q/{ N/Gj");
      String string0 = jSONPath0.getPath();
      assertEquals("[)Q/{ N/Gj", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$\"v5N6>!cy+P[ax");
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("O}CX'p", "/cause/stackTrace/0");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context", "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("com.alibaba.f stjson.JSONPatt$U", 1419L, jSONPath_Operator0);
      JSONPath jSONPath0 = JSONPath.compile("getFieldType");
      boolean boolean0 = jSONPath0.remove((Object) jSONPath_IntOpSegement0);
      assertFalse(boolean0);
  }
}
