/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 16:38:53 GMT 2020
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.UUID;
import java.util.Vector;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONPath_ESTest extends JSONPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer((-214748364));
      boolean boolean0 = JSONPath.eqNotNull(0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j";
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("u@;;R`C=_", "j", ":", stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, 0, 0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("s", serializeConfig0, parserConfig0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Ya-EOZ4oM0#v", "s", 0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, sQLTimeoutException0, parserConfig0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.alibaba.fastjson.JSONPath$RangeSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("%8MS");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("com.alibaba.fastjson.JSONPath$PropertySegment");
      jSONPath_JSONPathParser0.explain();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-784L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("L");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("L", pattern0, jSONPath_Operator0);
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("~uWe");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest(jSONPath_RegMatchSegement0);
      assertSame(jSONPath_Filter0, jSONPath_RegMatchSegement0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$)8");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. $)8
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      // Undeclared exception!
      try { 
        JSONPath.keySet((Object) jSONPath0, "c.,HSR xeEB_WZkuh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. c.,HSR xeEB_WZkuh
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSONPath.extract("T#}d)%E~88/i3.m<,O", "not_between", parserConfig0, (-1897), featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ident
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      jSONPath0.init();
      assertEquals("NOT_BETWEEN", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("z-f&#egxCiZV2kfID}h");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Stack<Object> stack0 = new Stack<Object>();
      jSONPath0.deepGetPropertyValues(bigDecimal0, stack0);
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("0Y@7~}zBU-b g", 3089451460101527857L, (-3851359326990528739L), true);
      JSONPath jSONPath0 = new JSONPath("0Y@7~}zBU-b g");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Integer integer0 = jSONPath_SizeSegment0.eval(jSONPath0, "0Y@7~}zBU-b g", jSONPath_IntBetweenSegement0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$)8");
      String string0 = jSONPath_JSONPathParser0.readName();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      boolean boolean0 = jSONPath_JSONPathParser0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = JSONPath.JSONPathParser.isDigitFirst('a');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Y*=oke{tF");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.buildArraySegement("n");
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("d");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment((-1614351721), 857, 182);
      // Undeclared exception!
      jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}ol.7F y");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("$AZnnn", true);
      ArrayList arrayList0 = (ArrayList)jSONPath_PropertySegment0.eval(jSONPath0, jSONPath0, (Object) null);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("1IS");
      double double0 = jSONPath_JSONPathParser0.readDoubleValue((-1072L));
      assertEquals((-1071.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("cause");
      JSONPath.arrayAdd((Object) jSONPath0, "i9HJfK", (Object[]) null);
      assertEquals("cause", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = JSONPath.size((Object) null, "|Fd~3R.Q.oe!6uoz");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONPath jSONPath0 = JSONPath.compile("alibaba");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("]l/Mo'n'g0OIqL^0&", "nin", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, 2461, 6, sQLTransactionRollbackException0);
      boolean boolean0 = jSONPath0.setPropertyValue(dataTruncation0, "nin", (-831789045734283466L), fileSystemHandling0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[7oHFUNMGrF(%G7");
      boolean boolean0 = JSONPath.set((Object) "[7oHFUNMGrF(%G7", "[7oHFUNMGrF(%G7", (Object) jSONPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("value not found in path ", "gNAv0H1z", "value not found in path ", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("gNAv0H1z");
      Byte byte0 = new Byte((byte)12);
      boolean boolean0 = jSONPath0.set((Object) byte0, (Object) jSONPath_MatchSegement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = JSONPath.remove((Object) "/stackTrace/3", "com");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(13, false);
      Map<String, Object> map0 = JSONPath.paths((Object) null, serializeConfig0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<,O");
      Set<?> set0 = JSONPath.keySet((Object) jSONPath0, "MQC8yY");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<JSONPath.ArrayAccessSegment> class0 = JSONPath.ArrayAccessSegment.class;
      boolean boolean0 = JSONPath.isDouble(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/3");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" W.>T");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/cause/stackTrace/3", sQLNonTransientException0);
      Collection<Object> collection0 = jSONPath0.getPropertyValues(sQLFeatureNotSupportedException0);
      assertTrue(collection0.contains("/cause/stackTrace/3"));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("8#x;");
      Long long0 = new Long((-3285L));
      Object object0 = jSONPath0.getPropertyValue(long0, "fastjson.parser.autoTypeSupport", (-3285L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("Or", serializeConfig0, parserConfig0);
      JavaBeanSerializer javaBeanSerializer0 = jSONPath0.getJavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("w6Z-", serializeConfig0, parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      Class<JSONPath.SizeSegment> class0 = JSONPath.SizeSegment.class;
      JavaBeanDeserializer javaBeanDeserializer0 = jSONPath0.getJavaBeanDeserializer(class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("expect '");
      Object object0 = jSONPath0.getArrayItem((Object) null, 70);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("cause");
      Short short0 = new Short((short)55);
      int int0 = jSONPath0.evalSize(short0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("L");
      SQLException sQLException0 = new SQLException("nin", "  ?Km.D", (-837));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("jXw~W5}R?", "  ?Km.D", sQLException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("L", sQLNonTransientException0);
      int int0 = jSONPath0.evalSize(sQLTimeoutException0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("null");
      int int0 = jSONPath0.evalSize((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}ol.7F y");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      Set<?> set0 = jSONPath0.evalKeySet(jSONPath_SizeSegment0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      Set<?> set0 = jSONPath0.evalKeySet("u@;;R`C=_");
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = JSONPath.compare("F\"HgCE&", "?*kTieP_");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.size((Object) "new", "+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, parserConfig0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONPath0.size(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$MQC8yY},X@P");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 128, 715);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(jSONPath_WildCardSegment0, "fastjson.parser.autoTypeSupport", (-115), mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class com.alibaba.fastjson.JSONPath$WildCardSegment
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("fastjson.parser.deny.internal");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      jSONPath0.setPropertyValue(bigInteger0, "fastjson.parser.autoTypeAccept", (-5808557972665537831L), bigInteger0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, (Object) null, 1524, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(":", "Ex:#660|", (-2783), intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("}", batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.serializer.JodaCodec", "value", 54, sQLDataException0);
      // Undeclared exception!
      try { 
        JSONPath.set((Object) sQLIntegrityConstraintViolationException0, "Wp0[eP BHW", (Object) batchUpdateException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Long long0 = new Long((-2999L));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("'$%_aiDi");
      JSONPath.set((Object) long0, "cqYRW')>o^6T=", (Object) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Or");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("value not found in path ", "getFieldValue error.", 126);
      // Undeclared exception!
      jSONPath0.set((Object) jSONPath0, (Object) sQLNonTransientConnectionException0, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("in");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) jSONPath_Operator0, (Object) jSONPath_MultiIndexSegment0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("error parse false");
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) "value not found in path ", (Object) "j", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : error parse false
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      jSONPath0.set((Object) bigInteger0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("w6Z-", serializeConfig0, parserConfig0);
      Double double0 = Double.valueOf((double) 39);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) double0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}ol.7F y");
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(69, 69, 69);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) mockGregorianCalendar0, (Object) jSONPath_MultiPropertySegment0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 4!?4BG}ol.7F y
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("className", "className", 89);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "className";
      stringArray0[1] = "[og";
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(sQLTransientConnectionException0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("getFieldValue error.");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      jSONPath0.removePropertyValue(bigInteger0, "getFieldValue error.", true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("n!~W4>K");
      // Undeclared exception!
      try { 
        jSONPath0.removePropertyValue((Object) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%%");
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, (Object) null, 191);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("O#h#^Gi<7");
      // Undeclared exception!
      JSONPath.remove((Object) jSONPath0, "in");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("2[");
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "2[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 2[
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("/cause/stackTrace/12", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) javaBeanDeserializer0, (SerializeConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("NOT_BETWEEN", "com.alibaba.fastjson.JSONPath$FilterSegment");
      Map<String, Object> map0 = JSONPath.paths((Object) sQLDataException0);
      assertEquals(90, map0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONPath jSONPath0 = new JSONPath("e", serializeConfig0, parserConfig0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("i%?g<<j'>|&2%a");
      // Undeclared exception!
      try { 
        jSONPath0.keySet((Object) jSONPath0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : i%?g<<j'>|&2%a
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath(",pL.j8s_WywmB@");
      // Undeclared exception!
      try { 
        jSONPath0.isRef();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. ,pL.j8s_WywmB@
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("pB)lOBETEE");
      // Undeclared exception!
      try { 
        jSONPath0.init();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : pB)lOBETEE
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValues("8#x;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("null");
      // Undeclared exception!
      try { 
        jSONPath0.getPropertyValue("null", "rlike", (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN", (SerializeConfig) null, parserConfig0);
      Class<JSONPath.MultiIndexSegment> class0 = JSONPath.MultiIndexSegment.class;
      // Undeclared exception!
      try { 
        jSONPath0.getJavaBeanSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("n!~W4>K");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      jSONPath0.getJavaBeanDeserializer(class0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("i%?g<<j'>|&2%a");
      // Undeclared exception!
      try { 
        jSONPath0.getArrayItem(jSONPath0, 3311);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("gNAv0H1z", "value not found in path ", (ParserConfig) null, (int) (short)111, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        JSONPath.extract("new", "+", parserConfig0, 650, featureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -5
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        JSONPath.extract("java", "step must greater than zero : ", parserConfig0, 32, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2java
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract((String) null, "/stackTrace/7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("$MQC8yY},X@P");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$MQC8yY},X@P", parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.extract(defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : $MQC8yY},X@P
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("com.alibaba.fastjson.JSONPath$PropertySegment", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalSize("value not found in path ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("\\-", serializeConfig0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("8#x;");
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("|6#36l(", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.evalKeySet(jSONPath_JSONPathParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?/v%9yWr'p";
      stringArray0[1] = "9k";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath.eval((Object) jSONPath_MultiPropertySegment0, "?/v%9yWr'p");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("2[");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "2[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 2[
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.eqNotNull((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("`", serializeConfig0, parserConfig0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(class0, "fastjson.parser.safeMode", (-112L), parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n!~W4>K", (-1433507393));
      JSONPath jSONPath0 = JSONPath.compile("n!~W4>K");
      // Undeclared exception!
      try { 
        jSONPath0.deepSet(jSONReaderScanner0, "toJSON error", 0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path n!~W4>K, segement toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      Class<SQLWarning> class0 = SQLWarning.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(jSONPath0);
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues("/stackTrace/2", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("2");
      // Undeclared exception!
      try { 
        jSONPath0.containsValue((Object) "2", (Object) "2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(")Ljava/lang/String;");
      jSONPath0.containsValue((Object) ")Ljava/lang/String;", (Object) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "Or");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) class0, "7");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("value");
      // Undeclared exception!
      try { 
        JSONPath.contains((Object) sQLFeatureNotSupportedException0, " D?f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath :  D?f
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/3");
      Class<JSONPath> class0 = JSONPath.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<,O");
      // Undeclared exception!
      try { 
        jSONPath0.contains((Object) "syntax error, expect [, actual ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support jsonpath : T#}d)%E~88/i3.m<,O
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Feature[] featureArray0 = new Feature[6];
      JSONPath jSONPath0 = JSONPath.compile("+");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) bigDecimal0, (Object[]) featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath((String) null, serializeConfig0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("tk.J)GhF\"*", (String) null, (-2155));
      JSONPath jSONPath0 = JSONPath.compile("NE");
      long[] longArray0 = new long[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("<v9K", ", segement ", (-2155), longArray0, sQLSyntaxErrorException0);
      boolean boolean0 = jSONPath0.removePropertyValue(batchUpdateException0, "BC&-VU4t]-", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("l16kQ`bwFtqyJ!", "l16kQ`bwFtqyJ!", false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONPath jSONPath0 = new JSONPath("l16kQ`bwFtqyJ!", (SerializeConfig) null, parserConfig0);
      Integer integer0 = new Integer(153);
      jSONPath0.deepSet(integer0, "fastjson.parser.deny", 153, jSONPath_RlikeSegement0);
      assertEquals("l16kQ`bwFtqyJ!", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) map0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value not found in path com.alibaba.fastjson.parser.deserializer.JSONPDeserializer
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double double0 = new Double(1730.779645);
      boolean boolean0 = JSONPath.eq(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[7oHFUNMGrF(%G7");
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONPath0.removeArrayItem(jSONPath0, bigInteger0, 343);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":hy:");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(50, 50, 50);
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, "LnAG", jSONPath0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", ":hy:");
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, object0, 120, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Set<?> set0 = JSONPath.keySet((Object) sQLTransactionRollbackException0, "/stackTrace/7");
      assertNotNull(set0);
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/8", false);
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.setValue(jSONPath0, (Object) null, sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("@[6Dh3", false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("D'/@meI9ID!l.8MxV", serializeConfig0, parserConfig0);
      Short short0 = new Short((short)2315);
      Object object0 = jSONPath_PropertySegment0.eval(jSONPath0, short0, short0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/1");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(2, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("P");
      JSONPath.Segment[] jSONPath_SegmentArray0 = jSONPath_JSONPathParser0.explain();
      assertEquals(1, jSONPath_SegmentArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$)8");
      jSONPath_JSONPathParser0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("i%?g<<j'>|&2%a");
      JSONPath jSONPath1 = new JSONPath("P");
      jSONPath1.keySet((Object) jSONPath0);
      int int0 = 165;
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(165);
      // Undeclared exception!
      try { 
        PropertyNamingStrategy.valueOf("P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.PropertyNamingStrategy.P
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.compile((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[7oHFUNMGrF(%G7");
      boolean boolean0 = jSONPath0.set((Object) "ZaTKxfx-dAP&", (Object) "ZaTKxfx-dAP&", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("n!~W4>K", "Ex:#660|");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLRecoverableException0, (Object) sQLTransactionRollbackException0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nin");
      boolean boolean0 = jSONPath0.set((Object) null, (Object) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`&%", "com.alibaba.fastjson.JSONPath$ArrayAcceSWgment", sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      boolean boolean0 = jSONPath0.containsValue((Object) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("n!~W4>K");
      boolean boolean0 = jSONPath0.containsValue((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("RLIKE");
      Double double0 = new Double((-1.0));
      Object object0 = jSONPath0.eval((Object) double0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("null");
      // Undeclared exception!
      try { 
        jSONPath0.eval((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONPath jSONPath0 = null;
      try {
        jSONPath0 = new JSONPath("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // json-path can not be null or empty
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-214748364));
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      SQLTransientException sQLTransientException0 = new SQLTransientException("#.K\"$K>u00Q*#", ":");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "d", 2, sQLTransientException0);
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.setValue(jSONPath0, sQLTransactionRollbackException0, sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("%%");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/stackTrace/7";
      // Undeclared exception!
      try { 
        JSONPath.reserveToObject(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONPath.reserveToObject((Object) null, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Class class1 = (Class)JSONPath.reserveToObject(class0, (String[]) null);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("in", "in", jSONPath_Operator0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "new";
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath_StringOpSegement0, stringArray0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("L");
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        JSONPath.reserveToArray(jSONPath0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.awt.Rectangle");
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(jSONPath0, stringArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = (JSONArray)JSONPath.reserveToArray(fileSystemHandling0, (String[]) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONPath jSONPath0 = new JSONPath("-", serializeConfig0, parserConfig0);
      Locale locale0 = Locale.CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Set<?> set0 = jSONPath0.evalKeySet(calendar0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      String[] stringArray0 = new String[0];
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      SQLDataException sQLDataException0 = new SQLDataException("TZ>", "fastjson.parser.deny.internal", (Throwable) null);
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, jSONPath0, sQLDataException0);
      Set<?> set0 = jSONPath0.evalKeySet(object0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(3858);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("K]KW0N}\";", serializeConfig0, parserConfig0);
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("AO5#a", false);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      // Undeclared exception!
      try { 
        jSONPath_PropertySegment0.remove(jSONPath0, jSONPath_Operator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "expect '");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONPath jSONPath0 = new JSONPath("Q:", serializeConfig0, parserConfig0);
      Double double0 = new Double(0L);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        jSONPath0.setPropertyValue(double0, "com.alibaba.fastjson.JSONPath$FilterGroup", 0L, sQLNonTransientConnectionException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.awt.Rectangle");
      jSONPath0.deepSet("java.awt.Rectangle", "java.awt.Rectangle", 168L, "java.awt.Rectangle");
      assertEquals("java.awt.Rectangle", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/tu^}*2Ii");
      jSONPath0.deepSet((Object) null, "serialize exceeded MAX_OUTPUT_LENGTH=", (-3851359326990528739L), (Object) null);
      assertEquals("/tu^}*2Ii", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      SQLDataException sQLDataException0 = new SQLDataException();
      jSONPath0.deepScan(sQLDataException0, "/stackTrace/2", arrayList0);
      assertEquals("/stackTrace/2", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("null");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("null", "expect '", (-627));
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepScan(sQLWarning0, "com.alibaba.fastjson.JSONPath$SizeSegment", arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath error, path null, segement com.alibaba.fastjson.JSONPath$SizeSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode", serializeConfig0, parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(106, 641, 843, 2347, 11, 2347);
      Set<?> set0 = jSONPath0.keySet((Object) mockGregorianCalendar0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5;Zd5qRxq1?";
      stringArray0[1] = "value not found in path ";
      stringArray0[2] = "value not found in path ";
      stringArray0[3] = "value not found in path ";
      stringArray0[4] = "value not found in path ";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      JSONPath jSONPath0 = JSONPath.compile("value not found in path ");
      SQLDataException sQLDataException0 = new SQLDataException();
      Object object0 = jSONPath_MultiPropertySegment0.eval(jSONPath0, sQLDataException0, sQLDataException0);
      ArrayList arrayList0 = (ArrayList)jSONPath_MultiPropertySegment0.eval(jSONPath0, "value not found in path ", object0);
      assertFalse(arrayList0.equals((Object)object0));
      assertEquals(5, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.awt.Rectangle";
      stringArray0[1] = "java.awt.Rectangle";
      stringArray0[2] = "java.awt.Rectangle";
      stringArray0[3] = "java.awt.Rectangle";
      stringArray0[4] = "java.awt.Rectangle";
      stringArray0[5] = "java.awt.Rectangle";
      stringArray0[6] = "java.awt.Rectangle";
      stringArray0[7] = "java.awt.Rectangle";
      JSONObject jSONObject0 = (JSONObject)JSONPath.reserveToObject("java.awt.Rectangle", stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSONPath jSONPath0 = new JSONPath("JSONPath$StringInSegement", serializeConfig0, parserConfig0);
      Set<?> set0 = jSONPath0.keySet((Object) jSONObject0);
      assertNull(set0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = JSONPath.isInt(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = JSONPath.eqNotNull((-1), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull((-1580386065683472715L), bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(61);
      Long long0 = new Long((-862L));
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = JSONPath.eqNotNull(bigDecimal0, bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Long long0 = new Long(4652550770214826342L);
      boolean boolean0 = JSONPath.eqNotNull(long0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("not_between");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("T#}d)%E~88/i3.m<,O", sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      boolean boolean0 = JSONPath.eq(sQLSyntaxErrorException0, sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = JSONPath.eq((Object) null, "com.alibaba.fastjson.serializer.GuavaCodec");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = JSONPath.eq("WZn/geiTDT-R~Bpht@/", "WZn/geiTDT-R~Bpht@/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = JSONPath.eq(bigInteger0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(50900, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("LIKE", serializeConfig0, parserConfig0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        jSONPath0.deepGetPropertyValues(classLoader0, vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.lang.Class
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("L");
      Collection<Object> collection0 = jSONPath0.getPropertyValues((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("i%?g<<j'>|&2%a");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(165);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        jSONPath0.setArrayItem(jSONPath0, jSONPath_ArrayAccessSegment0, 165, propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported set operation.class com.alibaba.fastjson.JSONPath$ArrayAccessSegment
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T#}d)%E~88/i3.m<,O", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("4!?4BG}ol.7F y");
      Object object0 = jSONPath0.getArrayItem(jSONPath_StringInSegement0, 0);
      assertSame(object0, jSONPath_StringInSegement0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float((float) (-50));
      JSONPath jSONPath0 = new JSONPath("/stackTrace/3");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = jSONPath0.set((Object) float0, (Object) sQLNonTransientConnectionException0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("0Y@7~}zBU-b g", 3089451460101527857L, (-3851359326990528739L), true);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntBetweenSegement0, jSONPath_NotNullSegement0, false);
      JSONPath jSONPath0 = new JSONPath("0Y@7~}zBU-b g");
      UUID uUID0 = MockUUID.fromString("0Y@7~}zBU-b g");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      boolean boolean0 = jSONPath_FilterGroup0.apply(jSONPath0, uUID0, "0Y@7~}zBU-b g", jSONPath_SizeSegment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("false");
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_NullSegement0, jSONPath_NullSegement0, true);
      Double double0 = new Double(0.0);
      Short short0 = new Short((short)1672);
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply((JSONPath) null, double0, short0, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$NullSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("`$j~iCm=", (-1L), jSONPath_Operator0);
      JSONPath.FilterGroup jSONPath_FilterGroup0 = new JSONPath.FilterGroup(jSONPath_IntOpSegement0, jSONPath_IntOpSegement0, false);
      // Undeclared exception!
      try { 
        jSONPath_FilterGroup0.apply((JSONPath) null, (Object) null, jSONPath_Operator0, "`$j~iCm=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$IntOpSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<,O");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("MQC8yY");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      Integer integer0 = new Integer(0);
      HashSet hashSet0 = (HashSet)jSONPath_KeySetSegment0.eval(jSONPath0, integer0, "syntax error, expect [, actual ");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, hashSet0, hashSet0);
      assertEquals(2, hashSet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[7oHFUNMGrF(%G7");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("[7oHFUNMGrF(%G7", false);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("[7oHFUNMGrF(%G7", jSONPath_PropertySegment0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = JSONPath.KeySetSegment.instance;
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_KeySetSegment0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("BETWEEN");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      JSONPath jSONPath0 = JSONPath.compile("BETWEEN");
      boolean boolean0 = jSONPath_FilterSegment0.remove(jSONPath0, jSONPath_NotNullSegement0, "BETWEEN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("2[");
      JSONPath jSONPath0 = new JSONPath("2[");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      JSONPath jSONPath1 = (JSONPath)jSONPath_FilterSegment0.eval(jSONPath0, "2[", jSONPath0);
      assertEquals("2[", jSONPath1.getPath());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("2[");
      JSONPath jSONPath0 = new JSONPath("2[");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("2[", (String) null, 2207);
      SQLWarning sQLWarning0 = new SQLWarning("2[", "aMe(C", (-1135), sQLTransientException0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_NullSegement0, sQLWarning0);
      assertNotNull(jSONArray0);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<,O");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("MQC8yY");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5:W,IO9Gq/b!$bNf", "%", 241);
      JSONArray jSONArray0 = (JSONArray)jSONPath_FilterSegment0.eval(jSONPath0, (Object) null, sQLNonTransientConnectionException0);
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("/");
      JSONPath jSONPath0 = new JSONPath("0Y@7~}zBU-b g");
      JSONPath.SizeSegment jSONPath_SizeSegment0 = JSONPath.SizeSegment.instance;
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NotNullSegement0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, jSONPath_SizeSegment0, "/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.safeMode");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("illegal jsonp : ", sQLFeatureNotSupportedException0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("com.alibaba.fastjson.JSONPath$ArrayAcceSWgment", sQLTransactionRollbackException0, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_ValueSegment0);
      Object object0 = jSONPath_FilterSegment0.eval(jSONPath0, "`&%", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath(":rV`", serializeConfig0, parserConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("}]&E51)E*r,v{veJa", (String[]) null, false);
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_StringInSegement0);
      // Undeclared exception!
      try { 
        jSONPath_FilterSegment0.eval(jSONPath0, "C{l`7CDU:AM", sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$StringInSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.awt.Rectangle");
      Pattern pattern0 = Pattern.compile("yt3MAA^uuH.H", (-197));
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      JSONPath.RegMatchSegement jSONPath_RegMatchSegement0 = new JSONPath.RegMatchSegement("1", pattern0, jSONPath_Operator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        jSONPath_RegMatchSegement0.apply(jSONPath0, "yt3MAA^uuH.H", (Object) null, javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(39, (-1614351721), (-1614351721));
      JSONPath jSONPath0 = new JSONPath("?/v%9yWr'p");
      ArrayList arrayList0 = (ArrayList)jSONPath_RangeSegment0.eval(jSONPath0, (Object) null, (Object) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("in", "in", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, (Object) null, "new", arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("sxfeMlbe");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LT;
      JSONPath.StringOpSegement jSONPath_StringOpSegement0 = new JSONPath.StringOpSegement("NOT_LIKE", "com.alibaba.fastjson.JSONPath$NotNullSegement", jSONPath_Operator0);
      boolean boolean0 = jSONPath_StringOpSegement0.apply(jSONPath0, jSONPath0, "sxfeMlbe", jSONPath_Operator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      JSONPath.RlikeSegement jSONPath_RlikeSegement0 = new JSONPath.RlikeSegement("R|938e- 0*Ke?l@0uX", "NOT_BETWEEN", true);
      Float float0 = new Float((-1791.297F));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("-Hef%LNy|p&d^gFH)yM", "R|938e- 0*Ke?l@0uX");
      boolean boolean0 = jSONPath_RlikeSegement0.apply(jSONPath0, float0, "NOT_BETWEEN", sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("value not found in path ", "gNAv0H1z", "value not found in path ", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("gNAv0H1z");
      Short short0 = new Short((short)111);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.serializer.ASMSerializerFactory$Context", "gNAv0H1z");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("value not found in path ");
      boolean boolean0 = jSONPath_MatchSegement0.apply(jSONPath0, sQLFeatureNotSupportedException0, short0, sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("fastjson.parser.deny.internal", "-", "fastjson.parser.deny.internal", (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = new JSONPath.MatchSegement("1.2.68", "height", (String) null, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONPath.MatchSegement jSONPath_MatchSegement0 = null;
      try {
        jSONPath_MatchSegement0 = new JSONPath.MatchSegement("Ex:#660|", (String) null, "x", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MatchSegement", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("/stackTrace/2", true);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      JSONPath.RefOpSegement jSONPath_RefOpSegement0 = new JSONPath.RefOpSegement("/stackTrace/2", jSONPath_PropertySegment0, jSONPath_Operator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      boolean boolean0 = jSONPath_RefOpSegement0.apply(jSONPath0, (Object) null, "/stackTrace/2", sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("i%?g<<j'>|&2%a");
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      JSONPath.DoubleOpSegement jSONPath_DoubleOpSegement0 = new JSONPath.DoubleOpSegement("i%?g<<j'>|&2%a", 1752.76, jSONPath_Operator0);
      boolean boolean0 = jSONPath_DoubleOpSegement0.apply(jSONPath0, "i%?g<<j'>|&2%a", jSONPath0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LIKE;
      JSONPath.IntOpSegement jSONPath_IntOpSegement0 = new JSONPath.IntOpSegement("expect '", 0L, jSONPath_Operator0);
      JSONPath jSONPath0 = new JSONPath("expect '");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "expect '");
      Long long0 = new Long(0L);
      boolean boolean0 = jSONPath_IntOpSegement0.apply(jSONPath0, "expect '", sQLFeatureNotSupportedException0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("WZn/geiTDT-R~Bpht@/", stringArray0, true);
      JSONPath jSONPath0 = JSONPath.compile("|");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, "fastjson");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "can not cast to boolean, value : ";
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("WZn/geiTDT-R~Bpht@/", stringArray0, false);
      JSONPath jSONPath0 = JSONPath.compile("|");
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, jSONPath0, jSONPath0, "/cause/stackTrace/9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("yt3MAA");
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(1932L);
      longArray0[0] = long0;
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.autoTypeSupport", longArray0, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "}Xj7'", "", sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("yt3MAA");
      Long[] longArray0 = new Long[1];
      JSONPath.IntObjInSegement jSONPath_IntObjInSegement0 = new JSONPath.IntObjInSegement("fastjson.parser.autoTypeSupport", longArray0, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      boolean boolean0 = jSONPath_IntObjInSegement0.apply(jSONPath0, "}Xj7'", "", sQLNonTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONPath.IntBetweenSegement jSONPath_IntBetweenSegement0 = new JSONPath.IntBetweenSegement("4!?4BG}ol.7F y", 471L, 471L, true);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("B", serializeConfig0, parserConfig0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      boolean boolean0 = jSONPath_IntBetweenSegement0.apply(jSONPath0, "$)i8", sQLIntegrityConstraintViolationException0, jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile(":!~YL+\"?YC>KFmY?");
      JSONPath.IntInSegement jSONPath_IntInSegement0 = new JSONPath.IntInSegement(".HWa<^C~ZKn@fRR^B", (long[]) null, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      boolean boolean0 = jSONPath_IntInSegement0.apply(jSONPath0, sQLInvalidAuthorizationSpecException0, "/stackTrace/7", "/stackTrace/7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<,O");
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("MQC8yY");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException("MQC8yY", "_", batchUpdateException0);
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("o{bvrdO|", jSONPath_NotNullSegement0, false);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "R'U6z(#YP;", sQLDataException0, batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("&]/46D");
      JSONPath.ValueSegment jSONPath_ValueSegment0 = new JSONPath.ValueSegment("&]/46D", jSONPath_JSONPathParser0, true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONPath jSONPath0 = new JSONPath("&]/46D", serializeConfig0, parserConfig0);
      byte[] byteArray0 = new byte[15];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = jSONPath_ValueSegment0.apply(jSONPath0, "&]/46D", bigInteger0, "&]/46D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONPath.ValueSegment jSONPath_ValueSegment0 = null;
      try {
        jSONPath_ValueSegment0 = new JSONPath.ValueSegment("Or", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is null
         //
         verifyException("com.alibaba.fastjson.JSONPath$ValueSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONPath.NullSegement jSONPath_NullSegement0 = new JSONPath.NullSegement("2[");
      JSONPath jSONPath0 = new JSONPath("2[");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment(jSONPath_NullSegement0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2[");
      boolean boolean0 = jSONPath_NullSegement0.apply(jSONPath0, "2[", jSONPath_FilterSegment0, sQLTransactionRollbackException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment(0);
      JSONPath.NotNullSegement jSONPath_NotNullSegement0 = new JSONPath.NotNullSegement("NOT_BETWEEN");
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      Long long0 = new Long(1685);
      boolean boolean0 = jSONPath_NotNullSegement0.apply(jSONPath0, jSONPath_ArrayAccessSegment0, "NOT_BETWEEN", long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("8#x;");
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(0, (-4128), 100);
      // Undeclared exception!
      try { 
        jSONPath_RangeSegment0.eval(jSONPath0, jSONPath0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -40
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny", serializeConfig0, parserConfig0);
      int[] intArray0 = new int[2];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      JSONArray jSONArray0 = (JSONArray)jSONPath_MultiIndexSegment0.eval(jSONPath0, "K_OJ", (Object) null);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/cause/stackTrace/0");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, sQLSyntaxErrorException0, sQLSyntaxErrorException0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("441w");
      JSONPath.WildCardSegment jSONPath_WildCardSegment0 = JSONPath.WildCardSegment.instance_deep;
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("e", false);
      BigInteger bigInteger0 = BigInteger.TEN;
      ArrayList arrayList0 = (ArrayList)jSONPath_WildCardSegment0.eval(jSONPath0, jSONPath_PropertySegment0, bigInteger0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("java.awt.Rectangle");
      Map<String, Object> map0 = JSONPath.paths((Object) "yt3MAA^uuH.H");
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("yt3MAA^uuH.H", true);
      // Undeclared exception!
      jSONPath_PropertySegment0.setValue(jSONPath0, jSONPath0, map0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = JSONPath.compare("RLIKE", "RLIKE");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nek@";
      stringArray0[1] = "nek@";
      JSONPath.MultiPropertySegment jSONPath_MultiPropertySegment0 = new JSONPath.MultiPropertySegment(stringArray0);
      // Undeclared exception!
      try { 
        JSONPath.compare(jSONPath_MultiPropertySegment0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONPath$MultiPropertySegment cannot be cast to java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath.RangeSegment jSONPath_RangeSegment0 = new JSONPath.RangeSegment(857, 650, 182);
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.safeMode");
      Object object0 = jSONPath_RangeSegment0.eval(jSONPath0, parserConfig0, jSONPath0);
      JSONPath.MaxSegment jSONPath_MaxSegment0 = new JSONPath.MaxSegment();
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.deny", "]!;YCfYw");
      Object object1 = jSONPath_MaxSegment0.eval(jSONPath0, sQLWarning0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONPath.MaxSegment jSONPath_MaxSegment0 = JSONPath.MaxSegment.instance;
      // Undeclared exception!
      try { 
        jSONPath_MaxSegment0.eval((JSONPath) null, (Object) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MaxSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(":rV`");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"rV`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect 'v, but ' '
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("\\-");
      int int0 = jSONPath0.size((Object) "\\-");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("RLIKE");
      jSONPath_JSONPathParser0.next();
      jSONPath_JSONPathParser0.readOp();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("value not found in path ");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(">?g=;5w");
      jSONPath_JSONPathParser0.readOp();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("n!~W4>K");
      jSONPath_JSONPathParser0.readSegement();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readOp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '=, but '~'
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("new");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // new
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("'s*,s*'");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals("s*,s*'", object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("$)8");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("Y*=oke{tF");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readDoubleValue((-4593238555717852201L));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("0Y@7~}zBU-b g");
      Object object0 = jSONPath_JSONPathParser0.readValue();
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("/stackTrace/9");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.readLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("e");
      JSONPath.Filter jSONPath_Filter0 = jSONPath_JSONPathParser0.filterRest((JSONPath.Filter) null);
      assertNull(jSONPath_Filter0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".jP,MWRp^)7L2}|ECr");
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("90e9_As#/:%Z?.e$@Ro");
      Object object0 = jSONPath_JSONPathParser0.parseArrayAccessFilter(false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("]l/Mo'n'g0OIqL^0&");
      JSONPath.Segment jSONPath_Segment0 = jSONPath_JSONPathParser0.parseArrayAccess(false);
      assertNotNull(jSONPath_Segment0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser(".HWa<^C~ZKn@fRR^B");
      jSONPath_JSONPathParser0.next();
      // Undeclared exception!
      try { 
        jSONPath_JSONPathParser0.parseArrayAccess(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        JSONPath.remove((Object) serializeConfig0, "bV[E]+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '), but ''
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(114, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSONPath.paths((Object) parserConfig0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // toJSON error
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(31, false);
      DataTruncation dataTruncation0 = new DataTruncation(1820, false, false, 1820, 31);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.deny.internal", dataTruncation0);
      Map<String, Object> map0 = JSONPath.paths((Object) sQLTransientConnectionException0, serializeConfig0);
      //  // Unstable assertion: assertEquals(184, map0.size());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Map<String, Object> map0 = JSONPath.paths((Object) null);
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-214748364));
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(":", "Ex:#660|", (-2783), intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("t", batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(-W*W?-.>!*0sOE}Av", "com.alibaba.fastjson.serializer.JodaCodec", sQLDataException0);
      Object object0 = jSONPath_ArrayAccessSegment0.eval(jSONPath0, sQLTimeoutException0, map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) null, "bWTmJYfjPH(@j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      JSONPath.FilterSegment jSONPath_FilterSegment0 = new JSONPath.FilterSegment((JSONPath.Filter) null);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) ":", (Object) jSONPath_FilterSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/3");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("?/v%9yWr'p", "value not found in path ", 195);
      // Undeclared exception!
      try { 
        jSONPath0.set((Object) sQLNonTransientConnectionException0, (Object) "value not found in path ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?8`WaDr");
      boolean boolean0 = JSONPath.set((Object) null, "?8`WaDr", (Object) sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.deny.internal", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.remove((Object) "fastjson.parser.deny.internal");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/stackTrace/2");
      boolean boolean0 = jSONPath0.remove((Object) "e1cv8?uNszw7)/\"36");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("L");
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("L", intArray0);
      boolean boolean0 = jSONPath0.remove((Object) batchUpdateException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("`");
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        jSONPath0.arrayAdd((Object) "0Y@7~}zBU-b$ g", (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported array put operation. class java.lang.String
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("2");
      Object[] objectArray0 = new Object[5];
      jSONPath0.arrayAdd((Object) null, objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Or");
      int[] intArray0 = new int[8];
      JSONPath.MultiIndexSegment jSONPath_MultiIndexSegment0 = new JSONPath.MultiIndexSegment(intArray0);
      Object[] objectArray0 = new Object[0];
      jSONPath0.arrayAdd((Object) jSONPath_MultiIndexSegment0, objectArray0);
      assertEquals("Or", jSONPath0.getPath());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONPath jSONPath0 = new JSONPath("fastjson.parser.autoTypeSupport", serializeConfig0, parserConfig0);
      jSONPath0.arrayAdd((Object) parserConfig0, (Object[]) null);
      assertFalse(parserConfig0.isSafeMode());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("v\".{_g1=nBp-");
      Set<?> set0 = jSONPath0.keySet((Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("/");
      BigInteger bigInteger0 = BigInteger.TEN;
      Set<?> set0 = jSONPath0.keySet((Object) bigInteger0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN", (SerializeConfig) null, parserConfig0);
      int int0 = jSONPath0.size((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("0vxo%OxQ}cv;");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        jSONPath0.size((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illeal jsonpath syntax. 0vxo%OxQ}cv;
         //
         verifyException("com.alibaba.fastjson.JSONPath$JSONPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = JSONPath.containsValue((Object) null, "expect '", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("NOT_BETWEEN");
      boolean boolean0 = JSONPath.containsValue((Object) jSONPath0, "NOT_BETWEEN", (Object) jSONPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(".", ".", (-3161));
      SQLDataException sQLDataException0 = new SQLDataException("stackTrace", sQLTransientConnectionException0);
      boolean boolean0 = JSONPath.contains((Object) sQLDataException0, "stackTrace");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = JSONPath.contains((Object) "%%", "`");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[7oHFUNMGrF(%G7");
      boolean boolean0 = jSONPath0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("[7oHFUNMGrF(%G7");
      boolean boolean0 = jSONPath0.contains((Object) "[7oHFUNMGrF(%G7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[5];
      // Undeclared exception!
      try { 
        JSONPath.extract("|E85Ai|lG9<G3hec", "/stackTrace/7", parserConfig0, 857, featureArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[5];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 1710);
      Object object0 = jSONPath0.extract(defaultJSONParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("j", ":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2j
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONPath jSONPath0 = new JSONPath("T#}d)%E~88/i3.m<,O");
      Object object0 = jSONPath0.extract((DefaultJSONParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object object0 = JSONPath.read((String) null, "internal");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("/stackTrace/12");
      boolean boolean0 = jSONPath0.isRef();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONPath.KeySetSegment jSONPath_KeySetSegment0 = new JSONPath.KeySetSegment();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONPath.StringInSegement jSONPath_StringInSegement0 = new JSONPath.StringInSegement("T#}d)%E~88/i3.m<,O", stringArray0, true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("$MQC8yY},X@P", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_StringInSegement0.apply(jSONPath0, "$MQC8yY},X@P", "$MQC8yY},X@P", "$MQC8yY},X@P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract("Q=(AV8i%,S\"\"o?X'&", "com.alibaba.fastjson.serializer.ClobSeriliazer");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // error
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONPath.JSONPathParser jSONPath_JSONPathParser0 = new JSONPath.JSONPathParser("PqSIHo<<MTFVeUB");
      char char0 = jSONPath_JSONPathParser0.getNextChar();
      assertEquals('q', char0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("nek@");
      JSONPath.ArrayAccessSegment jSONPath_ArrayAccessSegment0 = new JSONPath.ArrayAccessSegment((-611));
      // Undeclared exception!
      try { 
        jSONPath_ArrayAccessSegment0.remove(jSONPath0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONPath.SizeSegment jSONPath_SizeSegment0 = new JSONPath.SizeSegment();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONPath.MinSegment jSONPath_MinSegment0 = new JSONPath.MinSegment();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      // Undeclared exception!
      try { 
        jSONPath_MinSegment0.eval((JSONPath) null, jSONPath_Operator0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONPath$MinSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.read("?/v%9yWr'p", "j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2?/v%9yWr'p
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("F<mR3Z':@.R6obH", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        JSONPath.size((Object) sQLInvalidAuthorizationSpecException0, stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONPath jSONPath0 = JSONPath.compile("Sa~");
      String string0 = jSONPath0.getPath();
      assertEquals("Sa~", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONPath jSONPath0 = new JSONPath("7^l%&%XS<c", (SerializeConfig) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONPath0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, verson 1.2.68, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONPath.extract(":rV`", "w3K7EXBUtB/O|fGIrwJ");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, line 1, column 2:rV`
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Object object0 = JSONPath.eval((Object) "?ikIipP_", "/stackTrace/5");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        JSONPath.arrayAdd((Object) "n!~W4>K", "n!~W4>K", objectArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // value not found in path n!~W4>K
         //
         verifyException("com.alibaba.fastjson.JSONPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      JSONPath.set((Object) bigDecimal0, "e", (Object) null);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONPath.PropertySegment jSONPath_PropertySegment0 = new JSONPath.PropertySegment("*gHka{#h", false);
      SerializeConfig serializeConfig0 = new SerializeConfig(45);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPath jSONPath0 = new JSONPath("*gHka{#h", serializeConfig0, parserConfig0);
      boolean boolean0 = jSONPath_PropertySegment0.remove(jSONPath0, serializeConfig0);
      assertFalse(boolean0);
  }
}
