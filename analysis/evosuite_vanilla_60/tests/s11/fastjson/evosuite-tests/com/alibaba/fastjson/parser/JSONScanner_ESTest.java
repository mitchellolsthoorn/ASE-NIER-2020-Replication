/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 14:34:44 GMT 2020
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import java.time.chrono.ChronoLocalDate;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONScanner_ESTest extends JSONScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";a7rQ=s:@L-brgEk");
      char[] charArray0 = jSONScanner0.sub_chars(0, 0);
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((-2673L), true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ;
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("beanInfo");
      jSONScanner0.token = 65;
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(3646);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2244));
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", 1616);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?=)");
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = new ParserConfig();
      jSONScanner0.scanFieldStringArray(charArray0, 34, parserConfig0.symbolTable);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9-z^/$)ek$Uz.");
      long long0 = jSONScanner0.scanLong('7');
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9-z^/$)ek$Uz.");
      double double0 = jSONScanner0.scanDouble('7');
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q9B@).yn/]kDa%?", (-4524));
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      int int0 = jSONScanner0.scanInt('U');
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanInt('{');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y3#&'=u(}WL]CO@r");
      char[] charArray0 = new char[0];
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q9B@).yn/]kDa%?");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 117);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!");
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" O<CD0ZQY9<!|%J");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 117);
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('9', '9', '9', '9', '9', 'R', (-343), 346);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q9B@).yn/]kDa%?");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("beanInfo");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('#', 'P', '#');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" O<CD0ZQY9<!|%J");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal json.", 123);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ZlGy}3&?aB7BYy\"nt");
      jSONScanner0.skipObject();
      jSONScanner0.numberString();
      assertEquals('&', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" co");
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(parserConfig0.symbolTable, 'E');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[8];
      jSONScanner0.copyTo(0, 0, charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|unN:");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1|unN:
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q9B@).yn/]kDa%?", (-1491));
      jSONScanner0.skipArray();
      assertEquals('D', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y3#&'=u(}WL]CO@r");
      char[] charArray0 = new char[8];
      jSONScanner0.arrayCopy(0, charArray0, 7, 0);
      assertEquals('0', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kotlin.ranges.IntRange");
      char[] charArray0 = jSONScanner0.sub_chars(2, 12);
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(12, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scanFieldIntArray", 6);
      String string0 = jSONScanner0.subString(6, 6);
      assertEquals("eldInt", string0);
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nbtO 'f=d21!");
      String string0 = jSONScanner0.subString(0, 0);
      assertEquals("", string0);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TQY(ni", 52);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.stringVal();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{un4CZ");
      char[] charArray0 = new char[8];
      jSONScanner0.stringDefaultValue = "{un4CZ";
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q9B@).yn/]kDa%?", (-2650));
      char[] charArray0 = new char[7];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ZlGy}3&?aB7BYy\"nt");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      jSONScanner0.scanSymbol(parserConfig0.symbolTable);
      jSONScanner0.numberString();
      assertEquals('}', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      assertEquals(',', jSONScanner0.getCurrent());
      
      char char0 = jSONScanner0.next();
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(' ', char0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q9B@).yn/]kDa%?", (-4524));
      assertEquals('q', jSONScanner0.getCurrent());
      
      char char0 = jSONScanner0.next();
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";t");
      assertEquals(';', jSONScanner0.getCurrent());
      
      char char0 = jSONScanner0.next();
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals('t', char0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|unN:");
      String string0 = jSONScanner0.info();
      assertEquals('|', jSONScanner0.getCurrent());
      assertEquals("pos 0, line 1, column 1|unN:", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      int int0 = jSONScanner0.indexOf('u', (-2281));
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y3#&'=u(}WL]CO@r");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.decimalValue();
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8#IdgN@wpi", (-126));
      char char0 = jSONScanner0.charAt(0);
      assertEquals('8', char0);
      assertEquals('8', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?=)");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
      assertEquals('?', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"java.beans.Transient");
      char[] charArray0 = new char[8];
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals('\"', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull, column ");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.bytesValue();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9-z^/$)ek$Uz.");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9-z^/$)ek$Uz.", parserConfig0);
      String string0 = jSONScanner0.addSymbol(0, 0, 0, defaultJSONParser0.symbolTable);
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{un4CZ");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(921, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2244));
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y3#&'=u(}WL]CO@r");
      jSONScanner0.bp = (-770);
      // Undeclared exception!
      try { 
        jSONScanner0.scanInt('\'');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"'jwCJu[LW)B%TrC6f");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, (-222), (SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0*s4D}uKfD#tjOKuVx");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0-y Clg5h7}Z");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type:\" ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"k|0BE ,T?MD<Q(?Bq=F");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9-z^/$)ek$Uz.");
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 374);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", 1616);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0-y Clg5h7}Z", (-3292));
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9-z^/$)ek$Uz.");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(2, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("\"@type\":\"java.beans.Transient", 78, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0-y Clg|5h@}Z");
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(54, 54, 54, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9-z^/$)ek$Uz.");
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-1), (-1), (-1), parserConfig0.symbolTable);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 374, 37);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0, 703);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 1629);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q9B@).yn/]kDa%?", (-4524));
      jSONScanner0.skipArray(false);
      assertEquals(10, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y3#&'=u(}WL]CO@r");
      jSONScanner0.skipObject(true);
      assertEquals(10, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b2mw)l:lRO1KT}");
      jSONScanner0.skipObject(false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xHcTgN_P\"H+'{O7=M}s");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1xHcTgN_P\"H+'{O7=M}s
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\", column ");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1\"@type\":\", column 
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{un4CZ");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1{un4CZ
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8',g");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect '[', but int, pos 1, line 1, column 28',g
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1643));
      // Undeclared exception!
      try { 
        jSONScanner0.subString(2687, 2687);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = JSONScanner.charArrayCompare("fastjson.parser.safeMode", 2, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("&B", (-5958), charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("k", (-362), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = JSONScanner.charArrayCompare("beanInfo", 3646, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull", 117);
      char char0 = jSONScanner0.charAt(117);
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", 1616);
      jSONScanner0.indexOf('C', 3244);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"A:YL8OHj0UuW&O#");
      ParserConfig parserConfig0 = new ParserConfig();
      jSONScanner0.scanTypeName(parserConfig0.symbolTable);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o4_<R`wJ!|b[qROu");
      jSONScanner0.scanTypeName((SymbolTable) null);
      assertEquals('o', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y3#&'=u(}WL]CO@r");
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TQY(ni", 52);
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField((long) (-1852), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      boolean boolean0 = jSONScanner0.seekArrayToItem(2);
      assertFalse(boolean0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"java.beans.Transient", (-3771));
      // Undeclared exception!
      try { 
        jSONScanner0.seekArrayToItem((-3771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must > 0, but -3771
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0:sFU;P?[us>D#\" `p2");
      // Undeclared exception!
      try { 
        jSONScanner0.skipString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")7");
      jSONScanner0.bp = 666;
      jSONScanner0.skipArray(false);
      assertEquals(')', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";ydPB_/O^7;e8]");
      jSONScanner0.skipArray(true);
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        jSONScanner0.seekObjectToField(longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@[A]$ep");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1@[A]$ep
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7>|j\"gi~0g)j|Q]Im`", 67);
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 17>|j\"gi~0g)j|Q]Im`
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2{
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!aLj9s5h{j}.=M");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1!aLj9s5h{j}.=M
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"I");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1\"@type\":\"I
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|unN:");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1|unN:
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" O<CD0ZQY9<!|%J");
      jSONScanner0.bp = 1218;
      jSONScanner0.skipObject(false);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Lo`>{}BdU");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 1, line 1, column 2Lo`>{}BdU
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", 1616);
      jSONScanner0.skipString();
      assertEquals(':', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", 1611);
      char[] charArray0 = new char[1];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" O<CD0t<ZQY9<!|%J");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[3];
      SymbolTable symbolTable0 = new SymbolTable(1858);
      JSONScanner jSONScanner0 = new JSONScanner("illegal str, ");
      jSONScanner0.scanFieldStringArray(charArray0, (-1358), symbolTable0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-222), (SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" O<CD0ZQY9<!|%J");
      assertEquals(' ', jSONScanner0.getCurrent());
      
      SymbolTable symbolTable0 = new SymbolTable(747);
      jSONScanner0.scanFieldStringArray((char[]) null, 747, symbolTable0);
      assertEquals('O', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n=oI>D2H7x3vjOP");
      jSONScanner0.scanDate('*');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("19");
      jSONScanner0.scanDate('k');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y#&c4'=u(");
      jSONScanner0.scanDate('^');
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ilegal stat. ");
      jSONScanner0.scanDate('$');
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9-z^/$)ek$Uz.");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('>');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"C!u5HI");
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('\'');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0:sFU;P?[us>D\"`p2");
      long long0 = jSONScanner0.scanLong(':');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nbtO 'f=d21!");
      jSONScanner0.scanLong('s');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '3';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 2602);
      long long0 = jSONScanner0.scanLong('c');
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(33L, long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9-z^/$)ek$Uz.");
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.scanLong('>');
      assertEquals(2, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"C!u5HI");
      long long0 = jSONScanner0.scanLong('Y');
      assertEquals(0L, long0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanLong('A');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0:sFU;P?[us>D#\" `p2");
      double double0 = jSONScanner0.scanDouble(':');
      assertEquals(3, jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nc$K;UBM!MY+i5_)P", 31);
      double double0 = jSONScanner0.scanDouble('\u008D');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '3';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 2602);
      double double0 = jSONScanner0.scanDouble('g');
      assertEquals(33.0, double0, 0.01);
      assertEquals('3', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-K7c,", (-353));
      double double0 = jSONScanner0.scanDouble('d');
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"I");
      jSONScanner0.scanDouble('3');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      double double0 = jSONScanner0.scanDouble('E');
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '+';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 2602);
      jSONScanner0.scanInt('+');
      assertEquals(3, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.seekObjectToField((long) 333, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nbtO 'f=d21!");
      int int0 = jSONScanner0.scanInt('(');
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0:sFU;P?[us>D#\" `p2");
      int int0 = jSONScanner0.scanInt('u');
      assertEquals(0, int0);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-Zb)|OMPPt");
      jSONScanner0.scanInt('z');
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      jSONScanner0.scanInt('V');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" O<CD0ZQY9<!|%J");
      int int0 = jSONScanner0.scanInt('U');
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny.internal");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type:\" ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0-yIClE5h71Z");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y3#&'=u(}WL]CO@r");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0-y Clg5h7}Z");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type:\" ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("utf8 decode error, ");
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("0-y Clg5h7}Z");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" O<CD0ZQY9<!|%J");
      char[] charArray0 = new char[1];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")7");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type:\" ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("A:YUL8Wrj0}uW&Og");
      char[] charArray0 = new char[6];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8',g");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0:sFU;P?[us>D#\" `p2");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", 1616);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y3#&'=u(}WL]CO@r");
      char[] charArray0 = new char[8];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal json, ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o4_<R`wJ!|b[qROu");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" O<CD0ZQY9<!|%J");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type:\" ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y3#&'=u(}WL]CO@r");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("0-y Clg5h7}Z");
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("0-y Clg5h7}Z");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"", 1616);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('3', '3', '3', 'O', 'O', 'O', 41, 41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '7', ']', ']', '7', ']', 107, 107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', '2', ',', '2', '2', 'h', 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('7', '7', '7', '7', '7', '7', 107, 107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('2', ')', '\"', '4', ')', '2', (-2248), 117);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('(', '(', '(', '(', '(', '(', 135, 135);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('-', '-', '-', '-', '-');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k|0BE ,T?MD<Q(?Bq=F");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java/io/IOException");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9-z^/$)ek$Uz.");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('9', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o4_<R`wJ!|b[qROu");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('o', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b2mw)l:lRO1KT}");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals('b', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", colun ");
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals(',', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0y3#&'=u(}WL]CO@r");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('0', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", column ");
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(',', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TQY(ni", 52);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")7");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-1373), (-489));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7");
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny.internal");
      jSONScanner0.bytesValue();
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k|0BE ,T?MD<Q(?Bq=F");
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", coTAumnD");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%G]vTI7Pqg<B kyvr", (-171));
      char[] charArray0 = new char[11];
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDate('E');
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\"\", colu ");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(1328, 1328, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0:sFU;P?[us>D#\" `p2");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('J', 'J', 'J');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 165);
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b2mw)l:lRO1KT}");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('B', 'B', 'B', 'B', 'B', 'B');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"");
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(181, charArray0, 181, 181);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(200, 2307, 2307, defaultJSONParser0.symbolTable);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6^fb\"&V2[@sNe");
      // Undeclared exception!
      try { 
        jSONScanner0.skipArray();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 16^fb\"&V2[@sNe
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"@type\":\"I");
      jSONScanner0.scanDate('d');
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".k+~{6v7BqOH|epSIf[");
      // Undeclared exception!
      try { 
        jSONScanner0.skipObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal str, pos 0, line 1, column 1.k+~{6v7BqOH|epSIf[
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
