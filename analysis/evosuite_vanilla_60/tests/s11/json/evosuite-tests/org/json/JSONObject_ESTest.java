/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 14:42:16 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.GraphicsDevice;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.security.KeyRep;
import java.sql.JDBCType;
import java.sql.PseudoColumnUsage;
import java.text.Normalizer;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.function.BiConsumer;
import javax.annotation.Resource;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject1.getBigInteger("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-470.13570921673073));
      assertEquals("-470.13570921673073", string0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = bigDecimal0.remainder(bigDecimal1, mathContext0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      BigDecimal bigDecimal3 = new BigDecimal(612);
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals((short)612, bigDecimal3.shortValue());
      assertEquals((byte)100, bigDecimal3.byteValue());
      assertNotNull(bigDecimal3);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Float float0 = new Float((float) 612);
      assertEquals(612.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = jSONObject0.similar(float0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      BigDecimal bigDecimal4 = jSONObject0.optBigDecimal("-470.13570921673073", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertSame(bigDecimal4, bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)0, bigDecimal4.shortValue());
      assertEquals((byte)0, bigDecimal4.byteValue());
      assertNotNull(bigDecimal4);
      
      int int0 = 0;
      int int1 = (-1066);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1066
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      boolean boolean2 = jSONObject1.similar(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      JSONArray jSONArray1 = jSONObject3.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONObject jSONObject4 = jSONObject3.put("@$9|dVRn%%", (long) 612);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(3, jSONObject3.length());
      assertEquals(3, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertNotNull(jSONObject4);
      
      Object object0 = jSONObject3.opt("[#nFOK_-tpf&p");
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(3, jSONObject3.length());
      assertNull(object0);
      
      Object object1 = JSONObject.stringToValue("&5Jee ^`O");
      assertEquals("&5Jee ^`O", object1);
      assertFalse(object1.equals((Object)string0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      int int0 = 1053;
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1053);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((byte)29, bigDecimal2.byteValue());
      assertEquals((short)1053, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1053);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 1053);
      assertEquals(1053, charArrayWriter0.size());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("M=sU{;d)r,tK4Gd", jSONObject2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.floatValue();
      jSONObject3.toString(int0);
      String string1 = "_L`eK";
      jSONObject3.optNumber(string1);
      jSONObject2.toString();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject("A JSONObject text must begin with '{'", stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      String string0 = null;
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string1 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      assertFalse(linkedList0.contains(string1));
      assertFalse(list0.contains(string1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode1);
      assertFalse(linkedList0.contains(string1));
      assertFalse(list0.contains(string1));
      assertFalse(list1.contains(string1));
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(list0, list1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList0.contains(string1));
      assertFalse(list0.contains(string1));
      assertTrue(list0.equals((Object)list1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONPointer0);
      
      JSONObject jSONObject2 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertFalse(linkedList0.contains(string1));
      assertFalse(list0.contains(string1));
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(list0, list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      
      LinkedList<MockPrintWriter> linkedList2 = new LinkedList<MockPrintWriter>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      Iterator<MockPrintWriter> iterator0 = linkedList2.iterator();
      assertEquals(0, linkedList2.size());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      JSONArray jSONArray1 = jSONObject3.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONArray1.length());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONObject2.toString(459);
        fail("Expecting exception: ThreadDeath");
      
      } catch(ThreadDeath e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      String string0 = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1053);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal2.shortValue());
      assertEquals((byte)29, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1053);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      BigDecimal bigDecimal3 = new BigDecimal((-481.80656737267));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertEquals((short) (-481), bigDecimal3.shortValue());
      assertEquals((byte)31, bigDecimal3.byteValue());
      assertNotNull(bigDecimal3);
      
      Number number0 = jSONObject0.optNumber("is", (Number) bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(bigDecimal0, number0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(number0, bigDecimal0);
      assertNotSame(number0, bigDecimal1);
      assertSame(number0, bigDecimal2);
      assertNotSame(number0, bigDecimal3);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertTrue(number0.equals((Object)bigDecimal1));
      assertFalse(number0.equals((Object)bigDecimal3));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, number0.shortValue());
      assertEquals((byte)29, number0.byteValue());
      assertNotNull(number0);
      
      Integer integer0 = new Integer(1053);
      assertEquals(1053, (int)integer0);
      assertNotNull(integer0);
      
      JSONObject jSONObject3 = jSONObject2.putOnce((String) null, integer0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      try { 
        jSONObject1.append("M=sU{;d)r,tK4Gd", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[M=sU{;d)r,tK4Gd] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1053);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((byte)29, bigDecimal2.byteValue());
      assertEquals((short)1053, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1053);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 1053);
      assertEquals(1053, charArrayWriter0.size());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        JSONObject.stringToNumber("3q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      String string0 = "P";
      Number number0 = jSONObject0.optNumber("P");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-644));
      assertEquals((byte)124, bigDecimal0.byteValue());
      assertEquals((short) (-644), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1053);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = jSONObject0.optBigDecimal("P", bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((byte)124, bigDecimal0.byteValue());
      assertEquals((short) (-644), bigDecimal0.shortValue());
      assertEquals((short) (-644), bigDecimal2.shortValue());
      assertEquals((byte)124, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1053);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 1053);
      assertEquals(1053, charArrayWriter0.size());
      
      String string1 = "getDeclaringClass";
      String string2 = jSONObject0.optString("getDeclaringClass");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(string2);
      
      char[] charArray0 = null;
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "+fJ}}uC v=]g|Z";
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v=]g|Z");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("+fJ}}uC v=]g|Z", 1.0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      BigDecimal bigDecimal0 = new BigDecimal(1725);
      assertEquals((byte) (-67), bigDecimal0.byteValue());
      assertEquals((short)1725, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("+fJ}}uC v=]g|Z", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals((byte) (-67), bigDecimal0.byteValue());
      assertEquals((short)1725, bigDecimal0.shortValue());
      assertEquals((short)1725, bigDecimal1.shortValue());
      assertEquals((byte) (-67), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 2);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("  ", charArrayWriter0.toString());
      
      String string1 = "getiterator";
      try { 
        JSONObject.writeValue(charArrayWriter0, jSONObject0, 2606, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to write JSONObject value for key: bytes
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      assertEquals(RoundingMode.FLOOR, roundingMode0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("\"", roundingMode0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Object object0 = jSONObject1.get("\"");
      assertSame(jSONObject0, jSONObject1);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(object0, roundingMode0);
      assertEquals(RoundingMode.FLOOR, object0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, stringArray0.length);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1362.2787739715081));
      assertEquals((byte) (-82), bigDecimal0.byteValue());
      assertEquals((short) (-1362), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONObject0.optNumber("\"", (Number) bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((byte) (-82), bigDecimal0.byteValue());
      assertEquals((short) (-1362), bigDecimal0.shortValue());
      assertEquals((byte) (-82), number0.byteValue());
      assertEquals((short) (-1362), number0.shortValue());
      assertEquals(2, stringArray0.length);
      assertNotNull(number0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      try { 
        jSONObject1.append("\"", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      assertEquals(RoundingMode.FLOOR, roundingMode0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("\"", roundingMode0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Object object0 = jSONObject1.get("\"");
      assertSame(jSONObject0, jSONObject1);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(object0, roundingMode0);
      assertEquals(RoundingMode.FLOOR, object0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, stringArray0.length);
      
      JSONObject jSONObject2 = jSONObject1.append("7x7;i[=Sf%_IFH", mockFileWriter0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject2);
      
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      Writer writer0 = JSONObject.quote("isintern", (Writer) mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      
      try { 
        jSONObject1.getEnum(class0, "istoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000018] is not an enum of type java.io.StringWriter@0000000019.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      double double0 = jSONObject0.optDouble("A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject2 = new JSONObject(enumeration0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject3);
      
      // Undeclared exception!
      try { 
        jSONObject1.query("DjVy^?iQ>h&Vk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      JSONObject jSONObject2 = jSONObject0.put("A JSONObject text must begin with '{'", (-708));
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      
      try { 
        jSONObject1.getBigDecimal("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      
      Object object0 = jSONObject1.opt("haP*ZK+bri");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNull(object0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type1 = jSONObject1.optEnum(class0, "0I6F9&@x", proxy_Type0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(proxy_Type0, proxy_Type1);
      assertSame(proxy_Type1, proxy_Type0);
      assertEquals(Proxy.Type.HTTP, proxy_Type1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      
      try { 
        jSONObject0.getJSONObject("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;dq)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M=sU{;dq)r,tK4Gd");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(objectOutputStream0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, stringArray0.length);
      assertNull(stringArray1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      HashMap<MultipleGradientPaint.CycleMethod, Locale.FilteringMode> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, Locale.FilteringMode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      hashMap0.put(multipleGradientPaint_CycleMethod0, locale_FilteringMode0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;dq)r,tK4Gd", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("M=sU{;dq)r,tK4Gd"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, (Locale.FilteringMode) null);
      assertFalse(linkedList1.contains("M=sU{;dq)r,tK4Gd"));
      assertFalse(list0.contains("M=sU{;dq)r,tK4Gd"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(linkedList1);
      assertFalse(linkedList1.contains("M=sU{;dq)r,tK4Gd"));
      assertEquals(0, linkedList1.size());
      assertNotNull(jSONPointer0);
      
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = (JSONObject)jSONObject2.optQuery(jSONPointer0);
      assertFalse(linkedList1.contains("M=sU{;dq)r,tK4Gd"));
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertNotNull(jSONObject3);
      
      LinkedList<MockPrintWriter> linkedList2 = new LinkedList<MockPrintWriter>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      LinkedList<MockPrintWriter> linkedList3 = new LinkedList<MockPrintWriter>();
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertEquals(0, linkedList3.size());
      assertNotNull(linkedList3);
      
      Iterator<MockPrintWriter> iterator0 = linkedList3.iterator();
      assertNotSame(linkedList3, linkedList2);
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertEquals(0, linkedList3.size());
      assertNotNull(iterator0);
      
      long long0 = jSONObject2.optLong("MK");
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertEquals(0L, long0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(92);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long((-247L));
      assertEquals((-247L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = linkedList0.removeFirstOccurrence(long0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(0.0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("gettoCharArray", (Collection<?>) linkedList0);
      assertTrue(linkedList0.contains(0.0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject1.optJSONArray("getintern");
      assertTrue(linkedList0.contains(0.0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, linkedList0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNull(jSONArray0);
      
      JSONObject jSONObject2 = jSONObject0.put("Expected a ':' after a key", (Collection<?>) linkedList0);
      assertTrue(linkedList0.contains(0.0));
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(1, linkedList0.size());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      boolean boolean2 = jSONObject0.optBoolean("0CH<(}%j#G");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('F');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("F", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("F", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertEquals("F", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(iterator0);
      
      int int1 = jSONObject0.optInt("%", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      String[] stringArray0 = JSONObject.getNames((Object) bufferedOutputStream0);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      BigInteger bigInteger0 = jSONObject0.optBigInteger("SuHaA[ a0Oz9A", (BigInteger) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(bigInteger0);
      
      Object object0 = jSONObject0.opt("");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(object0);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      Object object1 = jSONObject2.opt("Nn)}nxSD&(&H)&!E");
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNull(object1);
      
      try { 
        jSONObject0.getLong("SuHaA[ a0Oz9A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("le");
      assertTrue(boolean0);
      
      JSONObject.testValidity("le");
      BigDecimal bigDecimal0 = new BigDecimal(12);
      assertEquals((byte)12, bigDecimal0.byteValue());
      assertEquals((short)12, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      String string0 = "toUpperCase";
      Object object0 = JSONObject.stringToValue("toUpperCase");
      assertEquals("toUpperCase", object0);
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      
      String[] stringArray0 = JSONObject.getNames((Object) bigDecimal0);
      assertEquals((byte)12, bigDecimal0.byteValue());
      assertEquals((short)12, bigDecimal0.shortValue());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object object1 = JSONObject.stringToValue("J%U");
      assertEquals("J%U", object1);
      assertFalse(object1.equals((Object)string0));
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertNotNull(bufferedInputStream0);
      
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(resource_AuthenticationType0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      HashMap<MultipleGradientPaint.CycleMethod, Locale.FilteringMode> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, Locale.FilteringMode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      hashMap0.put(multipleGradientPaint_CycleMethod0, locale_FilteringMode0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      JSONObject jSONObject2 = jSONObject1.put("=v^%&L~W", (Map<?, ?>) hashMap0);
      assertNotSame(stringArray0, stringArray1);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("=v^%&L~W"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, (Locale.FilteringMode) null);
      assertFalse(linkedList1.contains("=v^%&L~W"));
      assertFalse(list0.contains("=v^%&L~W"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertFalse(linkedList1.contains("=v^%&L~W"));
      assertFalse(list0.contains("=v^%&L~W"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(jSONPointer0);
      
      JSONObject jSONObject3 = (JSONObject)jSONObject2.optQuery(jSONPointer0);
      assertFalse(linkedList1.contains("=v^%&L~W"));
      assertFalse(list0.contains("=v^%&L~W"));
      assertNotSame(stringArray0, stringArray1);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject3);
      
      LinkedList<MockPrintWriter> linkedList2 = new LinkedList<MockPrintWriter>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      Iterator<MockPrintWriter> iterator0 = linkedList2.iterator();
      assertEquals(0, linkedList2.size());
      assertNotNull(iterator0);
      
      JSONObject jSONObject4 = jSONObject1.put("=v^%&L~W", (Collection<?>) null);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject1);
      assertNotSame(stringArray0, stringArray1);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(1, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject4);
      
      JSONObject jSONObject5 = jSONObject4.put("nwYzPyZ`G`p", (-1240L));
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject5);
      assertSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject5, jSONObject1);
      assertSame(jSONObject5, jSONObject4);
      assertSame(jSONObject5, jSONObject3);
      assertSame(jSONObject5, jSONObject2);
      assertNotSame(jSONObject5, jSONObject0);
      assertNotSame(stringArray0, stringArray1);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject5);
      assertNotSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject5.equals((Object)jSONObject0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(2, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject5.length());
      assertFalse(jSONObject5.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject5);
      
      try { 
        jSONObject1.getString("nwYzPyZ`G`p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000030] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("A JSONObject text must begin with '{'"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      assertFalse(linkedList0.contains("A JSONObject text must begin with '{'"));
      assertFalse(list0.contains("A JSONObject text must begin with '{'"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      assertFalse(linkedList0.contains("A JSONObject text must begin with '{'"));
      assertFalse(list1.contains("A JSONObject text must begin with '{'"));
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      JSONPointer jSONPointer0 = new JSONPointer(list1);
      assertFalse(linkedList0.contains("A JSONObject text must begin with '{'"));
      assertFalse(list1.contains("A JSONObject text must begin with '{'"));
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(jSONPointer0);
      
      JSONObject jSONObject2 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertFalse(linkedList0.contains("A JSONObject text must begin with '{'"));
      assertFalse(list1.contains("A JSONObject text must begin with '{'"));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(list1, list0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      
      LinkedList<MockPrintWriter> linkedList2 = new LinkedList<MockPrintWriter>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      Iterator<MockPrintWriter> iterator0 = linkedList2.iterator();
      assertEquals(0, linkedList2.size());
      assertNotNull(iterator0);
      
      JSONObject jSONObject3 = jSONObject1.put("A JSONObject text must begin with '{'", (Collection<?>) list0);
      assertFalse(linkedList0.contains("A JSONObject text must begin with '{'"));
      assertFalse(list0.contains("A JSONObject text must begin with '{'"));
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(list0, list1);
      assertTrue(list0.equals((Object)list1));
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject3);
      
      long long0 = jSONObject1.optLong("java.io.StringWriter@0000000008");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)24;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)41, (byte)24}, byteArray0);
      assertEquals((byte)24, bigInteger0.byteValue());
      assertEquals((short)10520, bigInteger0.shortValue());
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger0);
      
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.query((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
      
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-51);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(549);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
      
      MockFile mockFile0 = new MockFile("sEF=-/'1vv");
      assertNotNull(mockFile0);
      
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      String string0 = "P";
      Number number0 = jSONObject0.optNumber("P");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("P", "P");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
      
      Object object0 = JSONObject.stringToValue("n");
      assertEquals("n", object0);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-3186.778402));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-3186), bigDecimal1.shortValue());
      assertEquals((byte) (-114), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = bigDecimal0.add(bigDecimal1, mathContext0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short) (-3186), bigDecimal1.shortValue());
      assertEquals((byte) (-114), bigDecimal1.byteValue());
      assertEquals((byte) (-104), bigDecimal2.byteValue());
      assertEquals((short) (-3176), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      
      int int0 = 3262;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3262);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "M=sU{;d)r,tK4Gd");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(16, charArrayWriter0.size());
      assertEquals("M=sU{;d)r,tK4Gd", charArrayWriter0.toString());
      assertEquals("M=sU{;d)r,tK4Gd", charArrayWriter1.toString());
      assertEquals(16, charArrayWriter1.size());
      assertNotNull(charArrayWriter1);
      
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('Z');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertEquals("M=sU{;d)r,tK4GdZ", charArrayWriter0.toString());
      assertEquals(17, charArrayWriter0.size());
      assertEquals("M=sU{;d)r,tK4GdZ", charArrayWriter1.toString());
      assertEquals(17, charArrayWriter1.size());
      assertEquals(17, charArrayWriter2.size());
      assertEquals("M=sU{;d)r,tK4GdZ", charArrayWriter2.toString());
      assertNotNull(charArrayWriter2);
      
      CharArrayWriter charArrayWriter3 = charArrayWriter2.append((CharSequence) "\\");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter3);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter3);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter3);
      assertSame(charArrayWriter3, charArrayWriter1);
      assertSame(charArrayWriter3, charArrayWriter2);
      assertSame(charArrayWriter3, charArrayWriter0);
      assertEquals("M=sU{;d)r,tK4GdZ\\", charArrayWriter0.toString());
      assertEquals(18, charArrayWriter0.size());
      assertEquals("M=sU{;d)r,tK4GdZ\\", charArrayWriter1.toString());
      assertEquals(18, charArrayWriter1.size());
      assertEquals(18, charArrayWriter2.size());
      assertEquals("M=sU{;d)r,tK4GdZ\\", charArrayWriter2.toString());
      assertEquals(18, charArrayWriter3.size());
      assertEquals("M=sU{;d)r,tK4GdZ\\", charArrayWriter3.toString());
      assertNotNull(charArrayWriter3);
      
      // Undeclared exception!
      JSONObject.indent(charArrayWriter3, 1000000);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string1 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      int int0 = 31;
      String string2 = jSONObject1.toString((-1706));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      
      double double0 = jSONObject0.optDouble("A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = jSONObject0.optBoolean("zdYo,O", true);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      String string1 = JSONObject.quote("y^QN72AAj&lboM");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "intern";
      String string3 = jSONObject0.optString("intern", (String) null);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNull(string3);
      
      String string4 = null;
      JSONTokener jSONTokener0 = null;
      try {
        jSONTokener0 = new JSONTokener((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      String string0 = "@$9|sVRn%%]";
      String string1 = "P";
      Number number0 = jSONObject0.optNumber("P");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
      
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60), (byte) (-51), (byte)3, (byte)3}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      float float0 = jSONObject0.optFloat("@$9|sVRn%%]");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(4282.0F, float0, 0.01F);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      try { 
        JSONObject.stringToNumber("@$9|sVRn%%]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [@$9|sVRn%%]] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)24, (byte)24}, byteArray0);
      assertEquals((short)6168, bigInteger0.shortValue());
      assertEquals((byte)24, bigInteger0.byteValue());
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      String string0 = JSONObject.numberToString((byte)24);
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject(bigInteger0);
      assertArrayEquals(new byte[] {(byte)4, (byte)24, (byte)24}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals((short)6168, bigInteger0.shortValue());
      assertEquals((byte)24, bigInteger0.byteValue());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(3, byteArray0.length);
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;dq)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "M=sU{;dq)r,tK4Gd");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("M=sU{;dq)r,tK4Gd", charArrayWriter0.toString());
      assertEquals(17, charArrayWriter0.size());
      assertEquals("M=sU{;dq)r,tK4Gd", charArrayWriter1.toString());
      assertEquals(17, charArrayWriter1.size());
      assertNotNull(charArrayWriter1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-91);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-60), (byte)3, (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-91), (byte) (-91)}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, byteArray0.length);
      
      HashMap<Double, TrayIcon.MessageType> hashMap0 = new HashMap<Double, TrayIcon.MessageType>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      String string0 = "";
      float float0 = jSONObject0.optFloat("");
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      String string1 = "";
      BigInteger bigInteger2 = (BigInteger)JSONObject.wrap(bigInteger1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger2);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      Class<KeyRep.Type> class0 = KeyRep.Type.class;
      KeyRep.Type keyRep_Type0 = KeyRep.Type.PUBLIC;
      KeyRep.Type keyRep_Type1 = jSONObject3.optEnum(class0, "get", keyRep_Type0);
      assertSame(keyRep_Type1, keyRep_Type0);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(keyRep_Type0, keyRep_Type1);
      assertEquals(KeyRep.Type.PUBLIC, keyRep_Type1);
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      
      String string2 = "Unable to increment [";
      try { 
        jSONObject3.getLong("Unable to increment [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream1);
      
      boolean boolean0 = bufferedInputStream1.markSupported();
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      assertTrue(boolean0);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals(0, pipedInputStream0.available());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertSame(bigInteger1, bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      float float0 = bigInteger1.floatValue();
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      BigInteger bigInteger3 = (BigInteger)JSONObject.wrap(bigInteger1);
      assertSame(bigInteger1, bigInteger3);
      assertSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertSame(bigInteger3, bigInteger1);
      assertSame(bigInteger3, bigInteger0);
      assertSame(bigInteger3, bigInteger2);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("MAcoUqR?1", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = JSONObject.quote("+fJ}}uC v]g|Z");
      assertNotNull(string0);
      
      String string1 = jSONObject0.optString("3a@qTERZf", "3a@qTERZf");
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals("3a@qTERZf", string1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string1);
      
      JSONObject jSONObject2 = jSONObject1.increment("+fJ}}uC v]g|Z");
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject2);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.abs();
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = jSONObject0.optBigInteger("3a@qTERZf", bigInteger0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      
      double double0 = jSONObject2.optDouble("M=sU{;d)r,tK4Gd");
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = jSONObject0.optBoolean(";8aY", false);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertFalse(boolean1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      String string2 = jSONObject0.toString((-1638));
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string2);
      
      try { 
        jSONObject1.getFloat("S~mXA4tO`e,mL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000031] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(718);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, (-472));
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = jSONObject0.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("z?IB", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(iterator0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getAbsolutePath();
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertNotNull(string1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"");
      assertNotNull(mockFileWriter0);
      
      Object object0 = JSONObject.wrap("z?IB");
      assertEquals("z?IB", object0);
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertNotNull(object0);
      
      MockFile mockFile1 = new MockFile("Stepping back two steps is not supported", "Null key.");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      StandardProtocolFamily standardProtocolFamily1 = jSONObject0.optEnum(class0, "isintern", standardProtocolFamily0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(standardProtocolFamily0, standardProtocolFamily1);
      assertSame(standardProtocolFamily1, standardProtocolFamily0);
      assertEquals(StandardProtocolFamily.INET6, standardProtocolFamily1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)JSONObject.writeValue(charArrayWriter0, bigInteger0, (-472), (-472));
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(33, charArrayWriter1.size());
      assertEquals(33, charArrayWriter0.size());
      assertNotNull(charArrayWriter1);
      
      int int0 = jSONObject1.length();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      
      String string2 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("] is not a long.");
      assertTrue(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("] is not a long.", bufferedInputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      JSONObject.testValidity(byte0);
      BigDecimal bigDecimal0 = new BigDecimal(540);
      assertEquals((byte)28, bigDecimal0.byteValue());
      assertEquals((short)540, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("A JSONObject text must begin with '{'", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)28, bigDecimal0.byteValue());
      assertEquals((short)540, bigDecimal0.shortValue());
      assertEquals((short)540, bigDecimal1.shortValue());
      assertEquals((byte)28, bigDecimal1.byteValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(48);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      String string0 = jSONObject0.optString("Kq=T");
      assertSame(jSONObject0, jSONObject1);
      assertEquals("", string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("token cannot be null", false);
      assertNotNull(mockFileWriter0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("A JSONObject text must begin with '{'", mockFileWriter0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      HashMap<Dialog.ModalityType, Character> hashMap0 = new HashMap<Dialog.ModalityType, Character>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put(".", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation(" [b");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject0.putOnce("] could not convert to BigDecimal.", hashMap0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity(jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("] could not convert to BigDecimal.", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      String string0 = jSONObject0.optString("P");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals("", string0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject2.accumulate("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      try { 
        jSONObject1.getString("Qxw`NC4=v|1!_B&&f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000024] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      Object object0 = jSONObject0.opt("");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNull(object0);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      try { 
        jSONObject1.getJSONArray("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string1 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      float float1 = bigInteger0.floatValue();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        jSONObject0.optQuery("A JSONObject text must begin with '{'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      int int0 = (-1718);
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RoundingMode[] roundingModeArray0 = RoundingMode.values();
      assertEquals(8, roundingModeArray0.length);
      assertNotNull(roundingModeArray0);
      
      HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("Error reading value at index position ", "P");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONObject0.similar(jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      
      String string0 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(bufferedWriter0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'A';
      bufferedWriter0.write(charArray0);
      assertArrayEquals(new char[] {'S', 'A'}, charArray0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = linkedList0.add(bufferedWriter0);
      assertTrue(linkedList0.contains(bufferedWriter0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      assertTrue(linkedList0.contains(bufferedWriter0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertEquals(1, jSONArray2.length());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, linkedList0.size());
      assertNotNull(jSONArray2);
      
      // Undeclared exception!
      try { 
        jSONObject1.accumulate((String) null, "P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must_begin wDth+'{'";
      stringArray0[0] = "A JSONObject text must_begin wDth+'{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must_begin wDth+'{'", "A JSONObject text must_begin wDth+'{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject1.get("rK=UBGaIwf3De/,}5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      String[] stringArray0 = new String[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Null pointer");
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(resource_AuthenticationType0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)41, (byte)24, (byte)24, (byte)41}, byteArray0);
      assertEquals((short)6185, bigInteger0.shortValue());
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals(5, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      String string0 = JSONObject.numberToString((byte)24);
      assertNotNull(string0);
      
      String string1 = JSONObject.quote("EUsEeS");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        jSONObject0.get("3ki-wl$p9j9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray1);
      
      String string0 = "M=sU{;d)r,tK4Gd";
      String string1 = null;
      HashMap<Dialog.ModalityType, Normalizer.Form> hashMap0 = new HashMap<Dialog.ModalityType, Normalizer.Form>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.PROXY;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      long long0 = jSONObject0.optLong("!D4?xr~D!Wom Hcr-sz", 0L);
      assertEquals(0L, long0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      try { 
        jSONObject3.getString("M=sU{;d)r,tK4Gd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000001297] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      HashMap<MultipleGradientPaint.CycleMethod, Locale.FilteringMode> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, Locale.FilteringMode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      hashMap0.put(multipleGradientPaint_CycleMethod0, locale_FilteringMode0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      JSONObject jSONObject2 = jSONObject1.put("nwYzPyZ`G`p", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gettoUpperCase");
      assertFalse(boolean0);
      
      LinkedList<MockPrintWriter> linkedList0 = new LinkedList<MockPrintWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<MockPrintWriter> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      JSONObject jSONObject3 = jSONObject1.put("A JSONObject text must begin with '{'", (Collection<?>) linkedList0);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject3);
      
      JSONObject jSONObject4 = jSONObject2.put("A JSONObject text must begin with '{'", 0L);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject3);
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject4);
      
      try { 
        jSONObject0.getString("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000042] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      assertEquals(RoundingMode.FLOOR, roundingMode0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("\"", roundingMode0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Object object0 = jSONObject1.get("\"");
      assertSame(jSONObject0, jSONObject1);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(object0, roundingMode0);
      assertEquals(RoundingMode.FLOOR, object0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(2, stringArray0.length);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1362.2787739715081));
      assertEquals((byte) (-82), bigDecimal0.byteValue());
      assertEquals((short) (-1362), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONObject0.optNumber("\"", (Number) bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte) (-82), bigDecimal0.byteValue());
      assertEquals((short) (-1362), bigDecimal0.shortValue());
      assertEquals((byte) (-82), number0.byteValue());
      assertEquals((short) (-1362), number0.shortValue());
      assertEquals(2, stringArray0.length);
      assertNotNull(number0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce((String) null, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject1.append("7x7;i[=Sf%_IFH", mockFileWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject3);
      
      JSONArray jSONArray0 = jSONObject3.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONArray0);
      
      String string0 = jSONObject0.optString("\"");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\"", "\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = "P";
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      HashMap<GraphicsDevice.WindowTranslucency, LayoutStyle.ComponentPlacement> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, LayoutStyle.ComponentPlacement>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("ha", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONObject0.optNumber("P", (Number) bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigDecimal0, number0);
      assertSame(number0, bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, number0.shortValue());
      assertEquals((byte)0, number0.byteValue());
      assertNotNull(number0);
      
      int int0 = jSONObject0.length();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, int0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = null;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(fileSystemHandling0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      Object object0 = jSONObject0.opt("");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNull(object0);
      
      boolean boolean0 = jSONObject1.optBoolean("9zW1{^93?z?L0O", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      
      try { 
        bufferedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      Boolean boolean0 = new Boolean("Misplaced array.");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      assertEquals(RoundingMode.DOWN, roundingMode0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("Misplaced array.", roundingMode0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = jSONObject1.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      int int0 = 31;
      JSONTokener jSONTokener0 = new JSONTokener(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      assertEquals(RoundingMode.FLOOR, roundingMode0);
      
      Object object0 = JSONObject.stringToValue("\"");
      assertEquals("\"", object0);
      assertNotNull(object0);
      
      JSONObject jSONObject1 = new JSONObject((Object) "\"");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      // Undeclared exception!
      try { 
        jSONObject0.query("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      assertEquals(RoundingMode.UNNECESSARY, roundingMode0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1140);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 1140);
      assertEquals(1140, charArrayWriter0.size());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      String[] stringArray0 = JSONObject.getNames((Object) pipedOutputStream0);
      assertNull(stringArray0);
      
      Object object0 = JSONObject.stringToValue("%");
      assertEquals("%", object0);
      assertNotNull(object0);
      
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JSONObject jSONObject0 = new JSONObject(sequenceInputStream0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      JSONObject.testValidity("0");
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 10);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("0"));
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) set0);
      assertFalse(set0.contains("0"));
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject0 = jSONArray0.optJSONObject(1);
      assertFalse(set0.contains("0"));
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(jSONObject0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "gettoCharArray";
      stringArray0[4] = "0";
      stringArray0[5] = "KK+e+A'A0cYmg";
      stringArray0[6] = "0";
      JSONObject jSONObject1 = new JSONObject((JSONObject) null, stringArray0);
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(7, stringArray0.length);
      assertNotNull(jSONObject1);
      
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null, 32, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      String string0 = "@$9|sVRn%%]";
      Number number0 = jSONObject0.optNumber("P");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
      
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      float float0 = jSONObject0.optFloat("@$9|sVRn%%]");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(4282.0F, float0, 0.01F);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      try { 
        JSONObject.stringToNumber("@$9|sVRn%%]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [@$9|sVRn%%]] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "len";
      stringArray0[1] = "Substring bounds error";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "getkeySet";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(4, stringArray0.length);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-91);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-51), (byte)3, (byte) (-60), (byte) (-91)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      float float0 = jSONObject0.optFloat("");
      assertEquals(Float.NaN, float0, 0.01F);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(4, stringArray0.length);
      
      try { 
        JSONObject.stringToNumber("get");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [get] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((byte) (-1), bigInteger2.byteValue());
      assertEquals((short) (-1), bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      
      BigInteger bigInteger3 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger3);
      
      JSONObject jSONObject2 = jSONObject0.put("A JSONObject text must begin with '{'", (-708));
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      
      LinkedList<JTable.PrintMode> linkedList0 = new LinkedList<JTable.PrintMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      float float0 = jSONObject1.optFloat("' and instead saw ''");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      String string0 = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1053);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((short)1053, bigDecimal2.shortValue());
      assertEquals((byte)29, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      int int0 = 0;
      int int1 = 587;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(587);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 587);
      assertEquals(587, charArrayWriter0.size());
      assertEqualscharArrayWriter0.toString());
      
      String string1 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(string1);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("M=sU{;d)r,tK4Gd", jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      jSONObject0.keys();
      jSONObject0.optInt(string0, int0);
      String string2 = "isunscaledValue";
      String string3 = null;
      MockFile mockFile0 = new MockFile(string3, string2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      JSONObject jSONObject4 = new JSONObject(bufferedOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string4 = "] is not a valid number.";
      jSONObject2.optJSONObject(string4);
      String string5 = "l^";
      jSONObject4.put(string5, (double) int1);
      JSONObject.stringToNumber(string4);
      String string6 = "pl";
      jSONObject1.getBigDecimal(string6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1053);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal2.shortValue());
      assertEquals((byte)29, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1053);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 1053);
      assertEquals(1053, charArrayWriter0.size());
      
      String string1 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(string1);
      
      JSONObject jSONObject3 = jSONObject0.accumulate(string0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string2 = "gettrim";
      MockFile mockFile0 = new MockFile(string2);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, string0);
      jSONObject3.isEmpty();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("Error reading value at index position ", "P");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONObject0.similar(jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(boolean0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      
      String string0 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray2 = new JSONArray((Collection<?>) linkedList0);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray2.length());
      assertTrue(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      long long0 = 4282L;
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.length();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject0.putOnce("Error reading value at index position ", "P");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONObject0.similar(jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(boolean0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      
      String string0 = jSONObject2.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      try { 
        jSONObject0.getDouble("Error reading value at index position ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "+fJ}}uC v]g|Z";
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string1 = JSONObject.quote("+fJ}}uC v]g|Z");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = jSONObject0.optString("3a@qTERZf", "3a@qTERZf");
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals("3a@qTERZf", string2);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string2);
      
      JSONObject jSONObject2 = jSONObject1.increment("+fJ}}uC v]g|Z");
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject2);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("+fJ}}uC v]g|Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = jSONObject0.optString("1hBJXXIW[+(qapUpB");
      assertSame(jSONObject0, jSONObject1);
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("oLq{k^M?^", "M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      Iterator<String> iterator0 = jSONObject2.keys();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(iterator0);
      
      MockFile mockFile0 = new MockFile("org.json.JSONWriter");
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getAbsolutePath();
      assertEquals("/home/apaniche/mitchell/generation-scripts/projects/json/org.json.JSONWriter", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.json.JSONWriter", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("org.json.JSONWriter", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertNotNull(string1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      JSONObject jSONObject3 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject2);
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertEquals("org.json.JSONWriter", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("org.json.JSONWriter", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      MockFile mockFile1 = new MockFile(" De{$r_", "oLq{k^M?^");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      JSONObject jSONObject4 = jSONObject2.optJSONObject("Lo");
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNull(jSONObject4);
      
      JSONObject jSONObject5 = jSONObject0.optJSONObject("");
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNull(jSONObject5);
      
      JSONArray jSONArray1 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOnce("P", "P");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
      
      Object object0 = JSONObject.stringToValue("n");
      assertEquals("n", object0);
      assertNotNull(object0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JSONObject jSONObject2 = new JSONObject(mockFileInputStream0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(fileDescriptor0.valid());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string1 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      int int0 = 31;
      double double0 = jSONObject0.optDouble("A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = jSONObject0.optBoolean("zdYo,O", true);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      
      try { 
        bufferedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      double double0 = jSONObject0.optDouble("A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = jSONObject0.optBoolean("zdYo,O", true);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      
      String string1 = jSONObject0.toString(31);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      try { 
        jSONObject1.getFloat("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", false);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      assertEquals(RoundingMode.FLOOR, roundingMode0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("\"", roundingMode0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Object object0 = jSONObject1.get("\"");
      assertSame(jSONObject0, jSONObject1);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(object0, roundingMode0);
      assertEquals(RoundingMode.FLOOR, object0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, stringArray0.length);
      
      JSONObject jSONObject2 = jSONObject1.append("7x7;i[=Sf%_IFH", mockFileWriter0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject0.optString("\"");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = jSONObject0.isNull("] is not a Boolean.");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(boolean0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = jSONObject2.isNull("toL");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      Object object0 = jSONObject0.opt("");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNull(object0);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      Object object1 = jSONObject3.opt("A JSONObject text must begin with '{'");
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertNull(object1);
      
      JSONObject jSONObject4 = jSONObject3.put("getshortValueExact", (-5006.4912878346795));
      assertNotSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject4);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject2);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject3.isEmpty());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      boolean boolean0 = jSONObject0.isNull("8");
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(boolean0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "\"";
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)86;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)86, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)65;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)86, (byte) (-2), (byte)65}, byteArray0);
      assertEquals((byte)65, bigInteger0.byteValue());
      assertEquals((short) (-447), bigInteger0.shortValue());
      assertEquals(4, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("\"", bigInteger0);
      assertArrayEquals(new byte[] {(byte)3, (byte)86, (byte) (-2), (byte)65}, byteArray0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((byte)65, bigInteger0.byteValue());
      assertEquals((short) (-447), bigInteger0.shortValue());
      assertEquals((byte)65, bigInteger1.byteValue());
      assertEquals((short) (-447), bigInteger1.shortValue());
      assertEquals(2, stringArray0.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(bigInteger1);
      
      Object object0 = jSONObject0.opt("\"");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNull(object0);
      
      String string1 = "EUsEeS";
      JSONObject jSONObject1 = jSONObject0.put("getgetBytes", 1.0F);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string2 = JSONObject.numberToString((byte)65);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject1.getEnum(class0, "java.lang.Byte@0000000007");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not an enum of type java.io.StringWriter@0000000009.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      LinkedList<Authenticator.RequestorType> linkedList0 = new LinkedList<Authenticator.RequestorType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject2 = jSONArray0.optJSONObject(31);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(jSONObject2);
      
      boolean boolean0 = jSONObject1.optBoolean((String) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      
      try { 
        jSONObject1.getLong("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashMap<DataInputStream, Object> hashMap0 = new HashMap<DataInputStream, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      BiConsumer<DataInputStream, Object> biConsumer0 = (BiConsumer<DataInputStream, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Collection<Object> collection0 = hashMap0.values();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(collection0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = "E|[FcsMTIbKHI=$h";
      hashMap0.clear();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("E|[FcsMTIbKHI=$h", object0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      String string1 = jSONObject0.toString(1318);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(string1);
      
      boolean boolean2 = jSONObject1.optBoolean("java.io.StringWriter@0000000007");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      
      try { 
        jSONObject0.getFloat("java.io.StringWriter@0000000007");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashMap<DataInputStream, Object> hashMap0 = new HashMap<DataInputStream, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiConsumer<DataInputStream, Object> biConsumer0 = (BiConsumer<DataInputStream, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Collection<Object> collection0 = hashMap0.values();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(collection0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      hashMap0.clear();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("E|[FcsMTIbKHI=$h", object0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject1.entrySet();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      String string0 = jSONObject0.toString(1318);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
      
      boolean boolean2 = jSONObject1.optBoolean("java.io.StringWriter@0000000007");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      try { 
        jSONObject0.getFloat("java.io.StringWriter@0000000007");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-3186.778402));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-114), bigDecimal1.byteValue());
      assertEquals((short) (-3186), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      BigDecimal bigDecimal2 = bigDecimal1.divide(bigDecimal0, roundingMode0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte) (-114), bigDecimal1.byteValue());
      assertEquals((short) (-3186), bigDecimal1.shortValue());
      assertEquals((byte) (-62), bigDecimal2.byteValue());
      assertEquals((short) (-318), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal3 = bigDecimal0.add(bigDecimal1, mathContext0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte) (-114), bigDecimal1.byteValue());
      assertEquals((short) (-3186), bigDecimal1.shortValue());
      assertEquals((short) (-3176), bigDecimal3.shortValue());
      assertEquals((byte) (-104), bigDecimal3.byteValue());
      assertNotNull(bigDecimal3);
      
      JSONObject jSONObject2 = new JSONObject(bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4{[Ho6?q@+rp}[k");
      assertNotNull(mockPrintWriter0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      boolean boolean1 = mockPrintWriter0.checkError();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "org.json.JSONObject@0000000001");
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotNull(printWriter0);
      
      Writer writer0 = jSONObject1.write((Writer) printWriter0);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, writer0);
      assertSame(writer0, printWriter0);
      assertSame(writer0, mockPrintWriter0);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(mockPrintWriter0, writer0);
      assertSame(mockPrintWriter0, printWriter0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(writer0);
      
      JSONPointer.Builder jSONPointer_Builder0 = JSONPointer.builder();
      assertNotNull(jSONPointer_Builder0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject3);
      
      try { 
        jSONObject1.getBoolean("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000014] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashMap<MultipleGradientPaint.CycleMethod, Locale.FilteringMode> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, Locale.FilteringMode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      hashMap0.put(multipleGradientPaint_CycleMethod0, locale_FilteringMode0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("Unable to preserve stream position", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unable to preserve stream position");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<MockPrintWriter> linkedList0 = new LinkedList<MockPrintWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = jSONObject0.toString(2273);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      try { 
        jSONObject1.getFloat("RVJ@a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000018] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      pipedInputStream0.mark((-114));
      assertEquals(0, pipedInputStream0.available());
      
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        jSONObject0.getBigInteger("#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = jSONObject1.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(string0);
      
      Object object0 = jSONObject0.opt("8");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(object0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, jSONObject1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d),t|K|Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d),t|K|Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d),t|K|Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d),t|K|Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = bigDecimal0.abs();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = jSONObject2.optBigDecimal("M=sU{;d),t|K|Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal2.shortValue());
      assertEquals((byte)100, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      charArrayWriter0.flush();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = jSONObject0.optString("Bad value from toJSONString: ");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals("", string0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      Object object0 = jSONObject2.opt("75^^2.P80uNvHRD");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNull(object0);
      
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      Proxy.Type proxy_Type1 = jSONObject1.optEnum(class0, "M=sU{;d),t|K|Gd", proxy_Type0);
      assertSame(proxy_Type1, proxy_Type0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(proxy_Type0, proxy_Type1);
      assertEquals(Proxy.Type.DIRECT, proxy_Type1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject3 = new JSONObject(612);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertNotNull(jSONObject3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      Object object0 = jSONObject1.opt("A JSONObject text must begin with '{'");
      assertNotSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNull(object0);
      
      try { 
        jSONObject1.getJSONArray("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = jSONObject0.optString("1hBJXXIW[+(qapUpB");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals("", string0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject1.accumulate("oLq{k^M?^", "M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      Iterator<String> iterator0 = jSONObject3.keys();
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(iterator0);
      
      int int0 = jSONObject1.optInt("", 3);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3, int0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JSONObject jSONObject4 = jSONObject3.append("java.lang.Float@00000000030", pipedOutputStream0);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(3, jSONObject3.length());
      assertEquals(3, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertNotNull(jSONObject4);
      
      try { 
        jSONObject3.getJSONArray("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000027] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      Object object0 = JSONObject.stringToValue("2{K");
      assertEquals("2{K", object0);
      assertNotNull(object0);
      
      String[] stringArray0 = JSONObject.getNames((Object) pipedOutputStream0);
      assertNull(stringArray0);
      
      Object object1 = JSONObject.stringToValue("length");
      assertEquals("length", object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true, "2{K");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 2{K
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("n");
      assertEquals("n", object0);
      assertNotNull(object0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      Object object1 = JSONObject.stringToValue("<h^pu%l.:fL}9i9yC;s");
      assertEquals("<h^pu%l.:fL}9i9yC;s", object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "M=sU{;d)r,tK4Gd";
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      String[] stringArray0 = JSONObject.getNames((Object) bufferedOutputStream0);
      assertNull(stringArray0);
      
      Object object0 = JSONObject.stringToValue("M=sU{;d)r,tK4Gd");
      assertEquals("M=sU{;d)r,tK4Gd", object0);
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(iterator0);
      
      int int0 = jSONObject0.optInt("%", 0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertEquals(0, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject4 = new JSONObject(jSONObject3);
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertEquals(1, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertNotNull(jSONObject4);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      String[] stringArray0 = JSONObject.getNames((Object) bufferedOutputStream0);
      assertNull(stringArray0);
      
      JSONObject jSONObject5 = jSONObject2.optJSONObject("%");
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject1.equals((Object)jSONObject4));
      assertFalse(jSONObject2.equals((Object)jSONObject4));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNull(jSONObject5);
      
      JSONObject jSONObject6 = (JSONObject)jSONObject1.remove("org.json.JSONObject@0000000002");
      assertSame(jSONObject0, jSONObject6);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject6);
      assertNotSame(jSONObject6, jSONObject4);
      assertSame(jSONObject6, jSONObject2);
      assertSame(jSONObject6, jSONObject1);
      assertSame(jSONObject6, jSONObject3);
      assertSame(jSONObject6, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject1.equals((Object)jSONObject4));
      assertFalse(jSONObject6.equals((Object)jSONObject4));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject6.length());
      assertFalse(jSONObject6.isEmpty());
      assertNotNull(jSONObject6);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger(":}GvE5NM&6tZxJ-nTM", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      boolean boolean1 = jSONObject0.optBoolean(":}GvE5NM&6tZxJ-nTM", false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      String string0 = jSONObject0.toString(32);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      try { 
        jSONObject0.getFloat("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000022] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1053);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      RoundingMode[] roundingModeArray0 = RoundingMode.values();
      assertEquals(8, roundingModeArray0.length);
      assertNotNull(roundingModeArray0);
      
      HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<PipedWriter> linkedList1 = new LinkedList<PipedWriter>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray1.length());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONObject0.toJSONArray((JSONArray) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNull(jSONArray2);
      
      // Undeclared exception!
      try { 
        jSONObject1.query("M=sU{;d)r,tK4Gd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      assertEquals(RoundingMode.FLOOR, roundingMode0);
      
      RoundingMode[] roundingModeArray0 = RoundingMode.values();
      assertEquals(8, roundingModeArray0.length);
      assertNotNull(roundingModeArray0);
      
      HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      String string0 = "P";
      Number number0 = jSONObject0.optNumber("P");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
      
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.length();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, int0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      JSONObject jSONObject2 = jSONObject0.putOnce("Error reading value at index position ", "P");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      String string1 = jSONObject2.toString();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(string1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("java.io.StringWriter@0000000016", bigInteger0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(jSONArray1);
      
      Object object0 = jSONObject0.opt("Tn");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(object0);
      
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      JSONObject jSONObject4 = new JSONObject();
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertTrue(jSONObject4.isEmpty());
      assertEquals(0, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      Object object1 = jSONObject4.opt("P");
      assertNotSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject1);
      assertNotSame(jSONObject4, jSONObject0);
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertTrue(jSONObject4.isEmpty());
      assertEquals(0, jSONObject4.length());
      assertNull(object1);
      
      try { 
        jSONObject2.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      String string0 = "P";
      Number number0 = jSONObject0.optNumber("isE");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 4282L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-470.13570921673073));
      assertEquals("-470.13570921673073", string0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      BigDecimal bigDecimal1 = bigDecimal0.setScale(46);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      MathContext mathContext0 = new MathContext(46, roundingMode0);
      assertNotNull(mathContext0);
      
      String string1 = mathContext0.toString();
      assertEquals("precision=46 roundingMode=HALF_DOWN", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4{[Ho6?q@+rp}[k");
      assertNotNull(mockPrintWriter0);
      
      JSONObject jSONObject0 = new JSONObject(bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.length();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(0, int0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.opt("&&;k5656");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(object0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) mockPrintWriter0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(writer0, mockPrintWriter0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(writer0);
      
      Number number0 = jSONObject0.optNumber("precision=46 roundingMode=HALF_DOWN");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Writer writer1 = JSONObject.writeValue(mockPrintWriter0, float0, 46, 0);
      assertSame(mockPrintWriter0, writer0);
      assertSame(mockPrintWriter0, writer1);
      assertSame(writer1, mockPrintWriter0);
      assertSame(writer1, writer0);
      assertNotNull(writer1);
      
      try { 
        jSONObject0.getNumber(" e:AH@\"[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(resource_AuthenticationType0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.TINYINT;
      JDBCType jDBCType1 = jSONObject0.optEnum(class0, (String) null, jDBCType0);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jDBCType0, jDBCType1);
      assertSame(jDBCType1, jDBCType0);
      assertEquals(JDBCType.TINYINT, jDBCType1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)24;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject1.optBigInteger("\"J1%#0|z=N>N", bigInteger0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(0, stringArray0.length);
      assertNotNull(bigInteger1);
      
      Object object0 = jSONObject0.opt((String) null);
      assertNotSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNull(object0);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      Object object1 = jSONObject2.opt("g~hYCf0c-deESU3_");
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject3);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNull(object1);
      
      try { 
        jSONObject2.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(iterator0);
      
      int int0 = jSONObject0.optInt("%", 0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        jSONObject0.append("org.json.JSONObject@0000000002", pipedOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[org.json.JSONObject@0000000002] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string1 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      try { 
        jSONObject0.append("A JSONObject text must begin with '{'", bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[A JSONObject text must begin with '{'] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      double double0 = (-3186.778402);
      BigDecimal bigDecimal1 = new BigDecimal((-3186.778402));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-114), bigDecimal1.byteValue());
      assertEquals((short) (-3186), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal2 = bigDecimal0.add(bigDecimal1, mathContext0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte) (-114), bigDecimal1.byteValue());
      assertEquals((short) (-3186), bigDecimal1.shortValue());
      assertEquals((byte) (-104), bigDecimal2.byteValue());
      assertEquals((short) (-3176), bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      
      JSONObject jSONObject3 = jSONObject0.put("\\", 0L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      JSONObject jSONObject4 = new JSONObject(bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(jSONObject4.isEmpty());
      assertEquals(0, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertNotNull(map0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M=sU{;d)r,tK4Gd");
      assertNotNull(mockPrintWriter0);
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(10.0F, float0, 0.01F);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      JSONObject jSONObject5 = new JSONObject();
      assertFalse(jSONObject5.equals((Object)jSONObject2));
      assertFalse(jSONObject5.equals((Object)jSONObject3));
      assertFalse(jSONObject5.equals((Object)jSONObject4));
      assertFalse(jSONObject5.equals((Object)jSONObject0));
      assertFalse(jSONObject5.equals((Object)jSONObject1));
      assertTrue(jSONObject5.isEmpty());
      assertEquals(0, jSONObject5.length());
      assertNotNull(jSONObject5);
      
      try { 
        jSONObject5.getFloat("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000019] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-3186.778402));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-3186), bigDecimal1.shortValue());
      assertEquals((byte) (-114), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      JSONObject jSONObject3 = new JSONObject(bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M=sU{;d)r,tK4Gd");
      assertNotNull(mockPrintWriter0);
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(10.0F, float0, 0.01F);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      String string1 = jSONObject1.toString(9);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject3);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string1);
      
      BigDecimal bigDecimal2 = new BigDecimal((-3186.778402));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short) (-3186), bigDecimal2.shortValue());
      assertEquals((byte) (-114), bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)24;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)41, (byte)24}, byteArray0);
      assertEquals((byte)24, bigInteger0.byteValue());
      assertEquals((short)10520, bigInteger0.shortValue());
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      String string0 = JSONObject.numberToString((byte)24);
      assertNotNull(string0);
      
      String string1 = JSONObject.quote("*bLj?uYwD-{(vo");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = JSONObject.valueToString("java.io.StringWriter@0000000002");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      HashMap<MultipleGradientPaint.ColorSpaceType, Locale.Category> hashMap0 = new HashMap<MultipleGradientPaint.ColorSpaceType, Locale.Category>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getBoolean("java.lang.Byte@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3509L);
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = bigDecimal0.stripTrailingZeros();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals((byte) (-75), bigDecimal2.byteValue());
      assertEquals((short)3509, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      BigDecimal bigDecimal3 = bigDecimal1.subtract(bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)75, bigDecimal3.byteValue());
      assertEquals((short) (-3509), bigDecimal3.shortValue());
      assertNotNull(bigDecimal3);
      
      BigDecimal bigDecimal4 = bigDecimal0.negate();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertTrue(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals((short) (-3509), bigDecimal4.shortValue());
      assertEquals((byte)75, bigDecimal4.byteValue());
      assertNotNull(bigDecimal4);
      
      MathContext mathContext0 = new MathContext(46, roundingMode0);
      assertNotNull(mathContext0);
      
      String string0 = mathContext0.toString();
      assertEquals("precision=46 roundingMode=HALF_DOWN", string0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal5 = bigDecimal0.add(bigDecimal1, mathContext0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal4);
      assertNotSame(bigDecimal1, bigDecimal5);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal5, bigDecimal0);
      assertNotSame(bigDecimal5, bigDecimal3);
      assertNotSame(bigDecimal5, bigDecimal4);
      assertNotSame(bigDecimal5, bigDecimal1);
      assertNotSame(bigDecimal5, bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(bigDecimal1.equals((Object)bigDecimal4));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal5.equals((Object)bigDecimal3));
      assertFalse(bigDecimal5.equals((Object)bigDecimal4));
      assertFalse(bigDecimal5.equals((Object)bigDecimal1));
      assertTrue(bigDecimal5.equals((Object)bigDecimal2));
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((short)3509, bigDecimal5.shortValue());
      assertEquals((byte) (-75), bigDecimal5.byteValue());
      assertNotNull(bigDecimal5);
      
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Map<String, Object> map0 = jSONObject0.toMap();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      String[] stringArray0 = JSONObject.getNames((Object) bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal5);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertTrue(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal5));
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals((short) (-3509), bigDecimal4.shortValue());
      assertEquals((byte)75, bigDecimal4.byteValue());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = "4{[Ho6?q@+rp}[k";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4{[Ho6?q@+rp}[k");
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = mockPrintWriter0.checkError();
      assertFalse(boolean0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "precision=46 roundingMode=HALF_DOWN");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      Writer writer0 = jSONObject0.write((Writer) printWriter0);
      assertSame(writer0, printWriter0);
      assertSame(writer0, mockPrintWriter0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(mockPrintWriter0, writer0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, writer0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(writer0);
      
      JSONPointer.Builder jSONPointer_Builder0 = JSONPointer.builder();
      assertNotNull(jSONPointer_Builder0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertTrue(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal5));
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals((short) (-3509), bigDecimal4.shortValue());
      assertEquals((byte)75, bigDecimal4.byteValue());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(11, stringArray0.length);
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject1.getBoolean("precision=46 roundingMode=HALF_DOWN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean1 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(iterator0);
      
      String string1 = "%";
      try { 
        jSONObject2.put("getavailable", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      stringArray0[1] = "A JSONObject text must begin with '{'";
      stringArray0[2] = "A JSONObject text must begin with '{'";
      HashMap<Short, BufferedOutputStream> hashMap0 = new HashMap<Short, BufferedOutputStream>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(6);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", pipedInputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("java.io.StringWriter@0000000009", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      PipedInputStream pipedInputStream1 = (PipedInputStream)jSONObject0.opt("A JSONObject text must begin with '{'");
      assertSame(pipedInputStream1, pipedInputStream0);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertEquals(0, pipedInputStream1.available());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(pipedInputStream1);
      
      try { 
        jSONObject2.getLong("<seE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000012] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(string0);
      
      Object object0 = jSONObject1.opt("8");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNull(object0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type1 = jSONObject1.optEnum(class0, "0Wh(>+h{", proxy_Type0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(proxy_Type0, proxy_Type1);
      assertSame(proxy_Type1, proxy_Type0);
      assertEquals(Proxy.Type.HTTP, proxy_Type1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      Object object0 = JSONObject.stringToValue("2{K");
      assertEquals("2{K", object0);
      assertNotNull(object0);
      
      String[] stringArray0 = JSONObject.getNames((Object) pipedOutputStream0);
      assertNull(stringArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      assertEquals(RoundingMode.FLOOR, roundingMode0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getFloat("org.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "6R'd]Ea7";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString(1216);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      
      try { 
        jSONObject0.getFloat("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "un");
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(1643);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("=)d6");
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      Set<String> set0 = jSONObject0.keySet();
      assertFalse(set0.contains("=)d6"));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      HashMap<DayOfWeek, ByteArrayOutputStream> hashMap0 = new HashMap<DayOfWeek, ByteArrayOutputStream>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("un", (Map<?, ?>) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      String string0 = JSONObject.doubleToString(0L);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      Number number0 = jSONObject0.optNumber(" /S:r-6n0zJ9(");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNull(number0);
      
      String string1 = "yGUwl:}5q!L+]#!wr";
      // Undeclared exception!
      try { 
        RoundingMode.valueOf("0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.math.RoundingMode.0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "\"";
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      assertEquals(RoundingMode.FLOOR, roundingMode0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("\"", roundingMode0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Object object0 = jSONObject1.get("\"");
      assertSame(jSONObject0, jSONObject1);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(object0, roundingMode0);
      assertEquals(RoundingMode.FLOOR, object0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(2, stringArray0.length);
      
      String string1 = "7x7;i[=Sf%_IFH";
      JSONObject jSONObject2 = jSONObject1.append("7x7;i[=Sf%_IFH", mockFileWriter0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(roundingMode0, object0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject2);
      
      try { 
        jSONObject2.getJSONObject("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000018] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      String string0 = "BQLT2m/Zb\"#eZ";
      String string1 = "cm]:S!+tx@c:P(";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(resource_AuthenticationType0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.TINYINT;
      JDBCType jDBCType1 = jSONObject0.optEnum(class0, (String) null, jDBCType0);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jDBCType0, jDBCType1);
      assertSame(jDBCType1, jDBCType0);
      assertEquals(JDBCType.TINYINT, jDBCType1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      RoundingMode roundingMode0 = RoundingMode.UP;
      assertEquals(RoundingMode.UP, roundingMode0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("BQLT2m/Zb\"#eZ", roundingMode0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject2);
      
      try { 
        jSONObject1.getDouble("BQLT2m/Zb\"#eZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[16];
      long long0 = jSONObject0.optLong("is", 896L);
      assertEquals(896L, long0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      stringArray0[0] = "A JSONArray text must start with '['";
      stringArray0[1] = "A JSONArray text must start with '['";
      hashMap0.remove((Object) "A JSONArray text must start with '['");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(16, stringArray0.length);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString(1201);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(16, stringArray0.length);
      assertNotNull(string0);
      
      Number number0 = jSONObject1.optNumber("6R'd]Ea7");
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(16, stringArray0.length);
      assertNull(number0);
      
      String string1 = jSONObject1.toString(1452);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(16, stringArray0.length);
      assertNotNull(string1);
      
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject2 = jSONObject1.put("java.io.StringWriter@0000000019", (Collection<?>) linkedList0);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(16, stringArray0.length);
      assertNotNull(jSONObject2);
      
      Object object0 = jSONObject2.opt("-470.13570921673073.");
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(16, stringArray0.length);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(116);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("] not found.", 896L);
      assertEquals(896L, long0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(hashMap0);
      assertNotSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      hashMap0.remove((Object) jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject0.toString(44);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(string0);
      
      Number number0 = jSONObject0.optNumber("&\"%![");
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
      
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.length();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, int0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      String string0 = "q=fWVlPw0;D}{KV640/";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)36;
      RoundingMode roundingMode0 = RoundingMode.UP;
      assertEquals(RoundingMode.UP, roundingMode0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("q=fWVlPw0;D}{KV640/", "q=fWVlPw0;D}{KV640/");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      String string1 = "NQ-(p*?cx2XXpd?J(";
      String string2 = "sWD/>v~0vs,`JtWoa@";
      try { 
        jSONObject3.getDouble("sWD/>v~0vs,`JtWoa@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(55);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2592);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      JSONObject jSONObject1 = jSONObject0.append("-0", pipedInputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject1.getJSONArray("/EO<}NlM<sN,m'x)_Tt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000008] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(iterator0);
      
      int int0 = jSONObject0.optInt("%", 0);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(0, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.json.JSONObject@0000000002";
      stringArray0[1] = "M=sU{;d)r,tK4Gd";
      stringArray0[2] = "M=sU{;d)r,tK4Gd";
      stringArray0[3] = "M=sU{;d)r,tK4Gd";
      stringArray0[4] = "%";
      stringArray0[5] = "M=sU{;d)r,tK4Gd";
      stringArray0[6] = "M=sU{;d)r,tK4Gd";
      stringArray0[7] = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject4 = new JSONObject(jSONObject2, stringArray0);
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(9, stringArray0.length);
      assertNotNull(jSONObject4);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce(stringArray0[0], stringArray0[0]);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      
      JSONObject jSONObject2 = jSONObject0.put("", 0.0F);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      
      String string1 = JSONObject.numberToString(bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertFalse(string1.equals((Object)string0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string1);
      
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject0.getEnum(class0, "A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] is not an enum of type java.io.StringWriter@0000000011.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "M=sU{;d)r,tK4Gd";
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject3);
      
      String string0 = "\\u";
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      assertEquals(RoundingMode.UNNECESSARY, roundingMode0);
      
      RoundingMode[] roundingModeArray0 = RoundingMode.values();
      assertEquals(8, roundingModeArray0.length);
      assertNotNull(roundingModeArray0);
      
      RoundingMode roundingMode1 = RoundingMode.valueOf(0);
      assertNotSame(roundingMode1, roundingMode0);
      assertEquals(RoundingMode.UP, roundingMode1);
      assertFalse(roundingMode1.equals((Object)roundingMode0));
      
      JSONObject jSONObject4 = jSONObject2.putOpt(string0, jSONObject3);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject4);
      assertSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject4);
      
      int int0 = jSONObject2.optInt(string0);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(0, int0);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      
      String string1 = jSONObject3.optString("toLowerCase");
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject4);
      assertEquals("", string1);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      JSONObject jSONObject5 = jSONObject4.put("toLowerCase", false);
      assertNotSame(jSONObject5, jSONObject3);
      assertSame(jSONObject5, jSONObject2);
      assertSame(jSONObject5, jSONObject4);
      assertSame(jSONObject5, jSONObject1);
      assertSame(jSONObject5, jSONObject0);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject5);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject5);
      assertNotSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject5);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject3, jSONObject5);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject4);
      assertSame(jSONObject4, jSONObject5);
      assertSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject1);
      assertFalse(jSONObject5.equals((Object)jSONObject3));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject5.isEmpty());
      assertEquals(3, jSONObject5.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(3, jSONObject2.length());
      assertEquals(0, jSONObject3.length());
      assertTrue(jSONObject3.isEmpty());
      assertEquals(3, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject5);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(iterator0);
      
      Iterator<String> iterator1 = jSONObject2.keys();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(iterator1, iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertNotNull(iterator1);
      
      int int0 = jSONObject3.optInt("M=sU{;d)r,tK4Gd", (-416));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertEquals((-416), int0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      
      JSONObject jSONObject4 = jSONObject0.put("getulp", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(3, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      String[] stringArray0 = JSONObject.getNames((Object) dataOutputStream0);
      assertNull(stringArray0);
      
      JSONObject jSONObject5 = jSONObject1.optJSONObject("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject5);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject5);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertNotSame(jSONObject5, jSONObject2);
      assertNotSame(jSONObject5, jSONObject1);
      assertNotSame(jSONObject5, jSONObject4);
      assertNotSame(jSONObject5, jSONObject3);
      assertNotSame(jSONObject5, jSONObject0);
      assertFalse(jSONObject5.equals((Object)jSONObject2));
      assertFalse(jSONObject5.equals((Object)jSONObject1));
      assertFalse(jSONObject5.equals((Object)jSONObject4));
      assertFalse(jSONObject5.equals((Object)jSONObject3));
      assertFalse(jSONObject5.equals((Object)jSONObject0));
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertTrue(jSONObject5.isEmpty());
      assertEquals(0, jSONObject5.length());
      assertNotNull(jSONObject5);
      
      JSONObject jSONObject6 = jSONObject0.put("Expected '", (double) 0);
      assertSame(jSONObject0, jSONObject6);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject5);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject6, jSONObject4);
      assertNotSame(jSONObject6, jSONObject5);
      assertSame(jSONObject6, jSONObject3);
      assertSame(jSONObject6, jSONObject0);
      assertSame(jSONObject6, jSONObject1);
      assertSame(jSONObject6, jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject5));
      assertFalse(jSONObject6.equals((Object)jSONObject5));
      assertEquals(4, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject6.isEmpty());
      assertEquals(4, jSONObject6.length());
      assertNotNull(jSONObject6);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      int int0 = jSONObject0.optInt(":YUC|`4Llf;RJw`[TI", 0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertEquals(0, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject4 = jSONObject2.put("isplus", true);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(3, jSONObject2.length());
      assertEquals(3, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertNotNull(jSONObject4);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      BigDecimal bigDecimal2 = new BigDecimal(0);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      String[] stringArray0 = JSONObject.getNames((Object) "isplus");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject5 = jSONObject3.optJSONObject("%");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(3, jSONObject3.length());
      assertNull(jSONObject5);
      
      String string1 = JSONObject.numberToString(bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      JSONObject.testValidity("0");
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 10);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("sh", (-763));
      assertEquals((-763), int0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("_dB55", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("EZ'\"L=:,l\"[5", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 741L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = (JSONObject)jSONObject1.query("");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject1.put("] is not a Boolean.", (-643));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      BigDecimal bigDecimal0 = new BigDecimal(1725);
      assertEquals((byte) (-67), bigDecimal0.byteValue());
      assertEquals((short)1725, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("%Aw]7?m5MLJ>021", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((byte) (-67), bigDecimal0.byteValue());
      assertEquals((short)1725, bigDecimal0.shortValue());
      assertEquals((byte) (-67), bigDecimal1.byteValue());
      assertEquals((short)1725, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      String string1 = "yw&+\"PdAg";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yw&+\"PdAg");
      assertNotNull(mockPrintWriter0);
      
      JSONObject.indent(mockPrintWriter0, (-643));
      JSONObject jSONObject4 = new JSONObject((Object) "getiterator");
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      String string2 = jSONObject4.optString("Gy9QU)6kNn-k");
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject1);
      assertEquals("", string2);
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertNotNull(string2);
      
      int int0 = 47;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      String string3 = "Misplaced key.";
      JSONObject jSONObject5 = jSONObject0.accumulate("Misplaced key.", "Gy9QU)6kNn-k");
      assertSame(jSONObject5, jSONObject2);
      assertSame(jSONObject5, jSONObject0);
      assertSame(jSONObject5, jSONObject3);
      assertNotSame(jSONObject5, jSONObject4);
      assertSame(jSONObject5, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject5);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(jSONObject5.equals((Object)jSONObject4));
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertEquals(3, jSONObject5.length());
      assertFalse(jSONObject5.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject5);
      
      JSONObject jSONObject6 = null;
      try {
        jSONObject6 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject.testValidity((Object) null);
      int int0 = 1053;
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      String string1 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A JSONObject text must begin with '{'");
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("0");
      assertFalse(boolean0);
      
      JSONObject.testValidity((Object) null);
      BigDecimal bigDecimal0 = new BigDecimal(123);
      assertEquals((byte)123, bigDecimal0.byteValue());
      assertEquals((short)123, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      Object object0 = JSONObject.stringToValue("M=sU{;d)r,tK4Gd");
      assertEquals("M=sU{;d)r,tK4Gd", object0);
      assertNotNull(object0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "M=sU{;d)r,tK4Gd");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = JSONObject.quote("java.lang.Long@0000000011.");
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-470.13570921673073));
      assertEquals("-470.13570921673073", string0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = new BigDecimal(3509L);
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      int int0 = 46;
      BigDecimal bigDecimal2 = bigDecimal0.stripTrailingZeros();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short)3509, bigDecimal0.shortValue());
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short)3509, bigDecimal2.shortValue());
      assertEquals((byte) (-75), bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      BigDecimal bigDecimal3 = bigDecimal1.setScale(46);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertNotNull(bigDecimal3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(stringArray0);
      
      JDBCType jDBCType0 = JDBCType.TINYINT;
      Class<JDBCType> class0 = JDBCType.class;
      String string1 = "LN";
      JDBCType jDBCType1 = jSONObject0.optEnum(class0, "LN", jDBCType0);
      assertSame(jDBCType0, jDBCType1);
      assertSame(jDBCType1, jDBCType0);
      assertEquals(JDBCType.TINYINT, jDBCType1);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      RoundingMode roundingMode0 = RoundingMode.UP;
      assertEquals(RoundingMode.UP, roundingMode0);
      
      Float float0 = new Float(Float.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      try { 
        jSONObject0.putOnce("LN", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      
      JSONObject jSONObject2 = jSONObject0.put("", 0.0F);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject2);
      
      String string1 = JSONObject.numberToString(bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertFalse(string1.equals((Object)string0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string1);
      
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      BigDecimal bigDecimal0 = jSONObject1.optBigDecimal("se:$V9Yz}f9KNI0C</", (BigDecimal) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((byte)29, bigDecimal0.byteValue());
      assertEquals((short)1053, bigDecimal0.shortValue());
      assertEquals((short)1053, bigDecimal1.shortValue());
      assertEquals((byte)29, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(iterator0);
      
      int int0 = jSONObject0.optInt("%", 0);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject4 = jSONObject1.put("]0@jev", false);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertNotNull(jSONObject4);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      BigDecimal bigDecimal2 = new BigDecimal((-1296));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short) (-1296), bigDecimal2.shortValue());
      assertEquals((byte) (-16), bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      String[] stringArray0 = JSONObject.getNames((Object) bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short) (-1296), bigDecimal2.shortValue());
      assertEquals((byte) (-16), bigDecimal2.byteValue());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject5 = jSONObject4.optJSONObject("]0@jev");
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject4.length());
      assertFalse(jSONObject4.isEmpty());
      assertNull(jSONObject5);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("n?+D@3wu");
      assertEquals(0L, long0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.length();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)1, (byte)36, (byte)24, (byte)55, (byte)41}, byteArray0);
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)14121, bigInteger0.shortValue());
      assertEquals(6, byteArray0.length);
      assertNotNull(bigInteger0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = Locale.FilteringMode.values();
      assertEquals(5, locale_FilteringModeArray0.length);
      assertNotNull(locale_FilteringModeArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
      
      MockFile mockFile0 = new MockFile("getintern", "P");
      assertNotNull(mockFile0);
      
      Object object1 = jSONObject1.opt("q=fWVlPw0;D}{KV640/");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      assertEquals(RoundingMode.UP, roundingMode0);
      
      JSONObject jSONObject0 = new JSONObject(roundingMode0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      RoundingMode roundingMode1 = RoundingMode.UNNECESSARY;
      assertNotSame(roundingMode1, roundingMode0);
      assertEquals(RoundingMode.UNNECESSARY, roundingMode1);
      assertFalse(roundingMode1.equals((Object)roundingMode0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      bufferedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertNotSame(jSONObject0, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("A JSONObject text must begin with '{'", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      String string0 = "\\u";
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      assertEquals(RoundingMode.UNNECESSARY, roundingMode0);
      
      RoundingMode[] roundingModeArray0 = RoundingMode.values();
      assertEquals(8, roundingModeArray0.length);
      assertNotNull(roundingModeArray0);
      
      Writer writer0 = mockFileWriter0.append('E');
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      
      RoundingMode roundingMode1 = RoundingMode.valueOf(0);
      assertNotSame(roundingMode1, roundingMode0);
      assertEquals(RoundingMode.UP, roundingMode1);
      assertFalse(roundingMode1.equals((Object)roundingMode0));
      
      JSONObject jSONObject1 = jSONObject0.putOpt(string0, roundingMode0);
      assertSame(mockFileWriter0, writer0);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(roundingMode0, roundingMode1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(roundingMode0.equals((Object)roundingMode1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("\"", 128);
      assertSame(mockFileWriter0, writer0);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(roundingMode0, roundingMode1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(128, int0);
      assertFalse(roundingMode0.equals((Object)roundingMode1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(2, stringArray0.length);
      
      Object object0 = jSONObject0.remove("Unable to write JSONArray value at index: ");
      assertSame(mockFileWriter0, writer0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNull(object0);
      
      String string1 = jSONObject0.optString("\"");
      assertSame(mockFileWriter0, writer0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\"", "\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString("SuHaA[ a0Oz9A");
      assertNotNull(string0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(29);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("{*tdI>LLr&V6~cdu6", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      try { 
        jSONObject0.getInt("unscaledValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "\"";
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      String string1 = "\\u";
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      assertEquals(RoundingMode.UNNECESSARY, roundingMode0);
      
      try { 
        JSONObject.stringToNumber(string1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [\\u] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      int int0 = jSONObject0.optInt("A JSONObject text must begin with '{'", 35);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(35, int0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      
      MockFile mockFile0 = new MockFile("A JSONObject text must begin with '{'", "^");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      String string1 = JSONObject.valueToString("^");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        jSONObject0.getDouble(":Hik~Hzd540z61:RD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = jSONObject0.optInt("A JSONObject text must begin with '{'", 35);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(35, int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      
      MockFile mockFile0 = new MockFile("A JSONObject text must begin with '{'", "^");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      String string1 = JSONObject.valueToString("^");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        jSONObject0.getDouble(":Hik~Hzd540z61:RD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A JSONArray text must start with '['";
      JSONObject jSONObject1 = new JSONObject(276);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.length();
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(0, int0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      Object object0 = jSONObject2.opt("A JSONArray text must start with '['");
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(0, jSONObject2.length());
      assertTrue(jSONObject2.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      JSONArray jSONArray1 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray1);
      
      JSONObject jSONObject2 = jSONObject0.put("%Pt)dPkMJu(D%fO7(Fo", 1658L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      Object object0 = jSONObject0.opt("gettoBigIntegerExact");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "+fJ}}uC v=]g|Z";
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v=]g|Z");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("+fJ}}uC v=]g|Z", 1.0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      BigDecimal bigDecimal0 = new BigDecimal(1725);
      assertEquals((short)1725, bigDecimal0.shortValue());
      assertEquals((byte) (-67), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("+fJ}}uC v=]g|Z", bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals((short)1725, bigDecimal0.shortValue());
      assertEquals((byte) (-67), bigDecimal0.byteValue());
      assertEquals((short)1725, bigDecimal1.shortValue());
      assertEquals((byte) (-67), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 2);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("  ", charArrayWriter0.toString());
      
      String string1 = jSONObject0.optString("getiterator");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(string1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(47);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("}", byteArrayOutputStream0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(3, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
      
      JSONObject.testValidity(float0);
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.io.StringWriter@0000000002", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name java.io.StringWriter@0000000002, locale fr_FR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      JSONObject.testValidity("0");
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 10);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try { 
        jSONObject0.getLong("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      String string0 = jSONObject0.toString(31);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      Object object0 = jSONObject1.opt("java.io.StringWriter@0000000008");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNull(object0);
      
      try { 
        jSONObject1.getLong("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jSONObject0.toString();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(1, stringArray0.length);
      assertNotNull(bigInteger1);
      
      Object object0 = jSONObject0.opt("");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertNull(object0);
      
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      Object object1 = jSONObject3.opt("A JSONObject text must begin with '{'");
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject0);
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertTrue(jSONObject3.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertNull(object1);
      
      try { 
        jSONObject1.getLong("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject("at;iY1Ommu3a+");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      Object object0 = JSONObject.stringToValue("2{K");
      assertEquals("2{K", object0);
      assertNotNull(object0);
      
      String[] stringArray0 = JSONObject.getNames((Object) pipedOutputStream0);
      assertNull(stringArray0);
      
      Object object1 = JSONObject.stringToValue("length");
      assertEquals("length", object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(jSONObject2);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals((short)612, bigDecimal0.shortValue());
      assertEquals((byte)100, bigDecimal0.byteValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)612, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = jSONObject2.optString("M=sU{;d)r,tK4Gd");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      Iterator<String> iterator0 = jSONObject0.keys();
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(iterator0);
      
      int int0 = jSONObject0.optInt("%", 0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertEquals(0, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject4 = jSONObject2.put("org.json.JSONObject@0000000002", false);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertFalse(jSONObject4.isEmpty());
      assertEquals(2, jSONObject4.length());
      assertNotNull(jSONObject4);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      String[] stringArray0 = JSONObject.getNames((Object) bufferedOutputStream0);
      assertNull(stringArray0);
      
      JSONObject jSONObject5 = jSONObject2.optJSONObject("%");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject2.isEmpty());
      assertNull(jSONObject5);
      
      jSONObject1.put("org.json.JSONObject@0000000002", 922.024317680498);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "+fJ}}uC v=]g|Z";
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v=]g|Z");
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("+fJ}}uC v=]g|Z", 1.0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      // Undeclared exception!
      try { 
        jSONObject1.query("+fJ}}uC v=]g|Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "+fJ}}uC v=]g|Z";
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v=]g|Z");
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      double double0 = jSONObject0.optDouble("+fJ}}uC v=]g|Z", (double) 2);
      assertEquals(2.0, double0, 0.01);
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      // Undeclared exception!
      try { 
        jSONObject1.query("+fJ}}uC v=]g|Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertSame(bigInteger1, bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      Object object0 = JSONObject.wrap(pipedOutputStream0);
      assertNotNull(object0);
      assertEquals(0, pipedInputStream0.available());
      
      MockFile mockFile0 = new MockFile("A JSONObject text must begin with '{'", "MAcoUqR?1");
      assertNotNull(mockFile0);
      
      Byte byte0 = new Byte((byte)16);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "\"";
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(jSONObject0);
      
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      assertEquals(RoundingMode.UNNECESSARY, roundingMode0);
      
      int int0 = jSONObject0.optInt("\"");
      assertEquals(0, int0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Object object0 = JSONObject.wrap(pipedOutputStream0);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      String[] stringArray0 = new String[1];
      String string0 = "A JSONObject text must begin with '{'";
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(jSONObject1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        jSONObject1.put((String) null, (-4404));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      RoundingMode[] roundingModeArray0 = RoundingMode.values();
      assertEquals(8, roundingModeArray0.length);
      assertNotNull(roundingModeArray0);
      
      HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JSONObject jSONObject1 = jSONObject0.append("java.", "java.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray1 = jSONObject0.getJSONArray("java.");
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float0 = bigInteger0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("<R2$lsW^`ok[qO?.h", 12);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", 741L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = (JSONObject)jSONObject1.query("");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject1.put("] is not a Boolean.", (-643));
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      assertNotNull(jSONObject3);
      
      Class<RoundingMode> class0 = RoundingMode.class;
      String string0 = "d^)e9qp{1fDgL~^4H";
      int int0 = jSONObject3.getInt("] is not a Boolean.");
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertEquals((-643), int0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject3.length());
      assertFalse(jSONObject3.isEmpty());
      
      MockFile mockFile0 = new MockFile("d^)e9qp{1fDgL~^4H", "] is not a Boolean.");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, "0*vQO{fb=+S");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", 741L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject1.put("] is not a Boolean.", (-643));
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      
      String string0 = "d^)e9qp{1fDgL~^4H";
      int int0 = jSONObject3.getInt("] is not a Boolean.");
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject2);
      assertEquals((-643), int0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertFalse(jSONObject3.isEmpty());
      assertEquals(2, jSONObject3.length());
      
      MockFile mockFile0 = new MockFile("d^)e9qp{1fDgL~^4H", "] is not a Boolean.");
      assertNotNull(mockFile0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("] is not a Boolean.", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name ] is not a Boolean., locale en_US
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "r6N_\"";
      stringArray0[2] = "BQLT2m/Zb\"#eZ";
      String string0 = "cm]:S!+tx@c:P(";
      stringArray0[3] = "cm]:S!+tx@c:P(";
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotNull(jSONObject0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNull(stringArray1);
      
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.JAVA_OBJECT;
      JDBCType jDBCType1 = jSONObject0.optEnum(class0, "r6N_\"", jDBCType0);
      assertSame(jDBCType0, jDBCType1);
      assertSame(jDBCType1, jDBCType0);
      assertEquals(JDBCType.JAVA_OBJECT, jDBCType1);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(4, stringArray0.length);
      
      JSONObject jSONObject1 = jSONObject0.putOnce("cm]:S!+tx@c:P(", "");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotNull(jSONObject1);
      
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      assertEquals(RoundingMode.UP, roundingMode0);
      
      JSONObject jSONObject0 = new JSONObject(roundingMode0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONPointer jSONPointer0 = new JSONPointer(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jSONPointer0);
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(number0);
      
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.length();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, int0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      Object object0 = jSONObject0.opt("Illegal escape.");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(jSONArray0);
      
      Number number0 = jSONObject0.optNumber("P");
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertNull(number0);
      
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.length();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, int0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      
      int int1 = jSONObject1.optInt("@$9|sVRn%%]", 1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(4282, int1);
      assertFalse(int1 == int0);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      MockFile mockFile0 = new MockFile("java.lang.Float@00000000010", "SuHaA[ a0Oz9A");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      String string0 = JSONObject.valueToString("SuHaA[ a0Oz9A");
      assertNotNull(string0);
      
      double double0 = jSONObject1.getDouble("@$9|sVRn%%]");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(4282.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      
      try { 
        jSONObject0.getNumber("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "P";
      stringArray0[1] = "P";
      stringArray0[3] = "P";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(4, stringArray0.length);
      
      RoundingMode roundingMode0 = RoundingMode.UP;
      assertEquals(RoundingMode.UP, roundingMode0);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      String string0 = "NQ-(p*?cx2XXpd?J(";
      JSONObject jSONObject2 = jSONObject0.accumulate("NQ-(p*?cx2XXpd?J(", "P");
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertEquals(1, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(4, stringArray0.length);
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("NQ-(p*?cx2XXpd?J(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      assertEquals(RoundingMode.UNNECESSARY, roundingMode0);
      
      try { 
        JSONObject.stringToNumber("Null pointer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [Null pointer] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "\"";
      try { 
        JSONObject.stringToNumber("\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [\"] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [\"] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertTrue(jSONArray0.isEmpty());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      assertFalse(boolean0);
      
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(612);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JSONObject.indent(charArrayWriter0, 612);
      assertEqualscharArrayWriter0.toString());
      assertEquals(612, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "+fJ}}uC v]g|Z";
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      // Undeclared exception!
      try { 
        jSONObject1.query("+fJ}}uC v]g|Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "+fJ}}uC v]g|Z";
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject1);
      
      Object object0 = JSONObject.wrap("+fJ}}uC v]g|Z");
      assertEquals("+fJ}}uC v]g|Z", object0);
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      
      JSONObject jSONObject2 = jSONObject1.increment("+fJ}}uC v]g|Z");
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject1.isEmpty());
      assertFalse(jSONObject2.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(0, stringArray0.length);
      assertNotNull(jSONObject2);
      
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("+fJ}}uC v]g|Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.wrap(jSONObject0);
      MockFile mockFile0 = new MockFile("`ajczpXT~:");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile("`ajczpXT~:", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("da6YX!TIs");
      JSONObject jSONObject0 = new JSONObject(stringReader0);
      int int0 = jSONObject0.optInt("da6YX!TIs");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(resource_AuthenticationType0, stringArray0);
      JSONObject.getNames(jSONObject0);
      RoundingMode.values();
      HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily>();
      JSONObject jSONObject2 = new JSONObject(jSONArray0);
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      JSONArray jSONArray1 = new JSONArray((Collection<?>) linkedList0);
      jSONObject1.toJSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONObject1.query("istoUpperCase");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      String string0 = "0";
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      Class<StandardProtocolFamily> class1 = StandardProtocolFamily.class;
      jSONArray0.optLong(2220, 7L);
      try { 
        jSONArray0.getInt(2220);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2220] not found.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "!VrAr";
      JSONObject.quote("!VrAr");
      int int0 = (-739);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -739
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      RoundingMode.values();
      HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getDouble("istoLowerCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "r6N_\"";
      stringArray0[2] = "BQLT2m/Zb\"#eZ";
      String string0 = "cm]:S!+tx@c:P(";
      stringArray0[3] = "cm]:S!+tx@c:P(";
      JSONObject jSONObject0 = new JSONObject(locale_FilteringMode0, stringArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.putOnce("cm]:S!+tx@c:P(", "");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.optNumber("=6|0]*7`s%i3");
      jSONObject0.length();
      JSONObject.stringToValue("^NQr6Ql=iT9o0zvB!");
      JSONObject.valueToString("^NQr6Ql=iT9o0zvB!");
      try { 
        jSONObject0.getNumber("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("n?+D@3wu", 1932L);
      jSONObject1.put("getClass", (double) 1932L);
      JSONObject jSONObject2 = new JSONObject((Map<?, ?>) hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jSONObject2.getString("n?+D@3wu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      JSONObject jSONObject0 = new JSONObject(roundingMode0);
      try { 
        jSONObject0.getString("2qw=8p)<Nj#%#G$M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "P";
      stringArray0[1] = "P";
      stringArray0[3] = "P";
      JSONObject jSONObject0 = new JSONObject("P", stringArray0);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      String string0 = null;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "P");
      try { 
        jSONObject1.get("rtYaW<,=Y%wd;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      String string0 = "\\u";
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      int int0 = 0;
      RoundingMode.valueOf(0);
      jSONObject0.putOpt(string0, roundingMode0);
      jSONObject0.optString("\"");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\"", "\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optNumber("P");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getNumber("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000003] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBigInteger("krM&Z,PG3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<MultipleGradientPaint.CycleMethod, Locale.FilteringMode> hashMap0 = new HashMap<MultipleGradientPaint.CycleMethod, Locale.FilteringMode>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      hashMap0.put(multipleGradientPaint_CycleMethod0, locale_FilteringMode0);
      jSONObject0.put("Unable to preserve stream position", (Map<?, ?>) hashMap0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unable to preserve stream position");
      LinkedList<MockPrintWriter> linkedList0 = new LinkedList<MockPrintWriter>();
      linkedList0.iterator();
      jSONObject0.put("Tb:PVWB", (Collection<?>) linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[16];
      stringArray0[1] = stringArray0[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(1201);
      Number number0 = jSONObject1.optNumber("6R'd]Ea7");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[16];
      stringArray0[0] = "A JSONArray text must start with '['";
      stringArray0[1] = "A JSONArray text must start with '['";
      hashMap0.remove((Object) "A JSONArray text must start with '['");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(1201);
      Number number0 = jSONObject1.optNumber("6R'd]Ea7");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<Authenticator.RequestorType, Locale.Category> hashMap0 = new HashMap<Authenticator.RequestorType, Locale.Category>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A JSONArray text must start with '['";
      Authenticator.RequestorType authenticator_RequestorType0 = Authenticator.RequestorType.SERVER;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(authenticator_RequestorType0, locale_Category0);
      stringArray0[1] = "6R'd]Ea7";
      hashMap0.remove((Object) "A JSONArray text must start with '['");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(1216);
      Class<RoundingMode> class0 = RoundingMode.class;
      try { 
        jSONObject1.getEnum(class0, "6R'd]Ea7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000006] is not an enum of type java.io.StringWriter@0000000007.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject.doubleToString((-470.13570921673073));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/mitchell/generation-scripts/projects/json");
      FileSystemHandling.createFolder(evoSuiteFile0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4{[Ho6?q@+rp}[k");
      // Undeclared exception!
      try { 
        RoundingMode.valueOf((-279));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument out of range
         //
         verifyException("java.math.RoundingMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "@$9|sVRn%%]";
      jSONObject0.optNumber("P");
      jSONObject0.length();
      JSONObject jSONObject1 = jSONObject0.putOnce("P", "P");
      JSONObject.getNames((Object) null);
      JSONObject.stringToValue("n");
      Double double0 = new Double(0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONObject jSONObject2 = new JSONObject(mockFileInputStream0);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      BigDecimal bigDecimal0 = new BigDecimal(3261);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject1 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("", (long) 0);
      Short short0 = new Short((short) (-364));
      JSONObject jSONObject2 = new JSONObject((Object) "");
      jSONObject2.toMap();
      JSONObject.getNames((Object) jSONArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Resource.AuthenticationType resource_AuthenticationType0 = Resource.AuthenticationType.CONTAINER;
      String string0 = "cm]:S!+tx@c:P(";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(resource_AuthenticationType0, stringArray0);
      JSONObject.getNames(jSONObject0);
      Class<JDBCType> class0 = JDBCType.class;
      JDBCType jDBCType0 = JDBCType.TINYINT;
      jSONObject0.optEnum(class0, (String) null, jDBCType0);
      RoundingMode roundingMode0 = RoundingMode.UP;
      jSONObject1.putOnce("BQLT2m/Zb\"#eZ", roundingMode0);
      JSONObject jSONObject2 = new JSONObject();
      String string1 = "NQ-(p*?cx2XXpd?J(";
      try { 
        jSONObject2.getDouble("NQ-(p*?cx2XXpd?J(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optNumber("P");
      jSONObject0.toMap();
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      jSONObject0.length();
      jSONObject1.optInt("@$9|sVRn%%]", 1);
      MockFile mockFile0 = new MockFile("java.lang.Float@00000000010", "SuHaA[ a0Oz9A");
      mockFile0.setLastModified(0L);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      JSONObject.valueToString("SuHaA[ a0Oz9A");
      jSONObject1.getDouble("@$9|sVRn%%]");
      try { 
        jSONObject0.getNumber("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "+fJ}}uC v]g|Z";
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.quote("+fJ}}uC v]g|Z");
      jSONObject0.optString("+fJ}}uC v]g|Z", "+fJ}}uC v]g|Z");
      jSONObject1.increment("+fJ}}uC v]g|Z");
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("+fJ}}uC v]g|Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      JSONObject jSONObject1 = jSONObject0.putOpt("\"", roundingMode0);
      jSONObject1.get("\"");
      jSONObject1.append("7x7;i[=Sf%_IFH", mockFileWriter0);
      jSONObject0.optString("\"");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\"", "\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.doubleToString(0.0);
      JSONObject.testValidity("0");
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optNumber("P");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.length();
      jSONObject1.optInt("@$9|sVRn%%]", 0);
      MockFile mockFile0 = new MockFile("java.lang.Float@00000000010", "SuHaA[ a0Oz9A");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      String string0 = JSONObject.valueToString("SuHaA[ a0Oz9A");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject.doubleToString((-470.13570921673073));
      BigDecimal bigDecimal0 = new BigDecimal(3509L);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      int int0 = 46;
      bigDecimal0.stripTrailingZeros();
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      bigDecimal1.setScale(46);
      bigDecimal1.subtract(bigDecimal0);
      bigDecimal0.negate();
      MathContext mathContext0 = new MathContext(46, roundingMode0);
      mathContext0.toString();
      bigDecimal0.add(bigDecimal1, mathContext0);
      JSONObject jSONObject0 = new JSONObject(bigDecimal0);
      jSONObject0.toMap();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optString("-470.13570921673073");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4{[Ho6?q@+rp}[k");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "precision=46 roundingMode=HALF_DOWN");
      jSONObject0.write((Writer) printWriter0);
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("-470.13570921673073");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1082);
      jSONObject0.put("", (float) 1082);
      Class<PseudoColumnUsage> class0 = PseudoColumnUsage.class;
      try { 
        jSONObject0.getEnum(class0, ":<>dxV?o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject.testValidity("0");
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 10);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      JSONTokener jSONTokener0 = new JSONTokener(pipedInputStream0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.length();
      String string0 = "\\SuHaA[ a0Oz9A";
      JSONObject.valueToString("SuHaA[ a0Oz9A");
      try { 
        jSONObject0.getNumber("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000004] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      JSONObject.testValidity("java.io.StringWriter@0000000002");
      Locale locale0 = Locale.FRANCE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.io.StringWriter@0000000002", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name java.io.StringWriter@0000000002, locale fr_FR
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "\"";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name \", locale zh_TW
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "0000";
      Locale locale0 = Locale.ENGLISH;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0000", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name 0000, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.compareTo(bigInteger0);
      int int0 = (-3596);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) (-3596), 4244L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.wrap("+fJ}}uC v]g|Z");
      jSONObject1.increment("+fJ}}uC v]g|Z");
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      jSONObject0.optBigInteger("java.io.StringWriter@0000000029", bigInteger0);
      jSONObject1.optDouble("isunscaledValue");
      jSONObject0.optBoolean("pl", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byte byte0 = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-83);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2), (byte) (-6));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)102);
      try { 
        bufferedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must_begin wDth+'{'";
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      JSONObject.valueToString(bigInteger0);
      JSONObject jSONObject0 = new JSONObject((Object) "A JSONObject text must_begin wDth+'{'");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      jSONObject0.toString(31);
      try { 
        jSONObject1.getFloat("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000011] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(1053);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1053);
      JSONObject.indent(charArrayWriter0, 1053);
      JSONObject.writeValue(charArrayWriter0, (Object) null, (-435), (-435));
      jSONObject2.optString("M=sU{;d)r,tK4Gd");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject.wrap(jSONObject1);
      MockFile mockFile0 = new MockFile("M=sU{;d)r,tK4Gd", "getgetMockHandler");
      jSONObject0.put("getgetMockHandler", 0L);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      jSONObject0.optBigInteger("@$9|sVRn%%]", bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      String string0 = JSONObject.numberToString(bigInteger0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("M=sU{;d)r,tK4Gd", (Map<?, ?>) null);
      JSONObject.isDecimalNotation("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject2 = jSONObject1.putOnce("M=sU{;d)r,tK4Gd", (Object) null);
      JSONObject.testValidity("M=sU{;d)r,tK4Gd");
      BigDecimal bigDecimal0 = new BigDecimal(612);
      jSONObject2.optBigDecimal("M=sU{;d)r,tK4Gd", bigDecimal0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JSONObject.indent(charArrayWriter0, 0);
      jSONObject2.optString("M=sU{;d)r,tK4Gd");
      JSONObject jSONObject3 = jSONObject0.accumulate("org.json.JSONObject@0000000002", jSONObject1);
      jSONObject0.keys();
      jSONObject0.optInt("%", 0);
      jSONObject2.put("org.json.JSONObject@0000000002", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JSONObject.valueToString(jSONObject0);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject3.getEnum(class0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000001302] is not an enum of type java.io.StringWriter@0000001303.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      Float float0 = new Float((-1940.4143452610099));
      jSONObject0.append("oD`OUX6l~&}gY`g", float0);
      jSONObject0.names();
      HashMap<PseudoColumnUsage, JSONObject> hashMap0 = new HashMap<PseudoColumnUsage, JSONObject>();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      JSONObject jSONObject0 = new JSONObject(roundingMode0);
      HashMap<Locale.FilteringMode, Proxy.Type> hashMap0 = new HashMap<Locale.FilteringMode, Proxy.Type>();
      JSONObject jSONObject1 = jSONObject0.put("M4splaced key.", (Map<?, ?>) hashMap0);
      String string0 = "2V3|";
      JSONObject.isDecimalNotation("2V3|");
      try { 
        jSONObject1.putOnce("M4splaced key.", "M=sU{;d)r,tK4Gd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"M4splaced key.\"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optNumber("P");
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      jSONObject0.length();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.optBigInteger("q=fWVlPw0;D}{KV640/", bigInteger0);
      jSONObject1.opt("0");
      BigInteger bigInteger1 = BigInteger.ZERO;
      jSONObject1.put(".", (float) (byte)41);
      JSONObject.numberToString((byte)1);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject0.getEnum(class0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] is not an enum of type java.io.StringWriter@0000000016.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1082);
      String string0 = "";
      jSONObject0.put("", (float) 1082);
      Class<PseudoColumnUsage> class0 = PseudoColumnUsage.class;
      try { 
        jSONObject0.getEnum(class0, ":<>dxV?o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not an enum of type java.io.StringWriter@0000000008.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optNumber("P");
      JSONObject jSONObject1 = jSONObject0.put("@$9|sVRn%%]", 4282L);
      jSONObject0.length();
      jSONObject1.opt("@$9|sVRn%%]");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write((Writer) stringWriter0);
      jSONObject0.optNumber("P");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"", true);
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      jSONObject0.putOpt("\"", roundingMode0);
      jSONObject0.optString("\"");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("x");
      String[] stringArray0 = new String[2];
      mockFileWriter0.flush();
      mockFileWriter0.flush();
      mockFileWriter0.close();
      stringArray0[0] = "x";
      stringArray0[1] = "x";
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0, stringArray0);
      RoundingMode.valueOf(0);
      String[] stringArray1 = JSONObject.getNames((Object) "x");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      jSONObject0.toString(31);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject1.getEnum(class0, "A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an enum of type java.io.StringWriter@0000000010.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HashMap<StandardLocation, SequenceInputStream> hashMap0 = new HashMap<StandardLocation, SequenceInputStream>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString(465);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      HashMap<BufferedInputStream, Long> hashMap0 = new HashMap<BufferedInputStream, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("gettoString", (-1639.0F));
      assertFalse(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(22);
      Class<Dialog.ModalExclusionType> class0 = Dialog.ModalExclusionType.class;
      jSONObject0.optEnum(class0, "/p^D)+U0}?)(@`");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      jSONObject0.putOnce("getDeclaringClass", dataOutputStream0);
      Object object0 = JSONObject.wrap("getDeclaringClass");
      assertEquals("getDeclaringClass", object0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.quote("SuHaA[ a0Oz9");
      jSONObject0.toString();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      jSONObject0.toString(31);
      try { 
        jSONObject1.getFloat("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily> hashMap0 = new HashMap<GraphicsDevice.WindowTranslucency, StandardProtocolFamily>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) linkedList0);
      jSONArray0.remove(597);
      jSONObject0.toJSONArray(jSONArray0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      jSONObject0.putOnce("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      bufferedInputStream0.markSupported();
      jSONObject0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      BigInteger bigInteger1 = jSONObject0.optBigInteger("A JSONObject text must begin with '{'", bigInteger0);
      jSONObject0.opt("");
      bigInteger0.xor(bigInteger1);
      jSONObject0.put("", 0.0F);
      JSONObject.numberToString(bigInteger0);
      Class<Resource.AuthenticationType> class0 = Resource.AuthenticationType.class;
      try { 
        jSONObject0.getEnum(class0, "A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000017] is not an enum of type java.io.StringWriter@0000000018.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("krM&Z,PG3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 0 [character 1 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optNumber("P");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Object object0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+fJ}}uC v]g|Z");
      JSONPointer jSONPointer0 = null;
      try {
        jSONPointer0 = new JSONPointer("+fJ}}uC v]g|Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }
}
