/*
 * This file was automatically generated by EvoSuite
 * Wed May 20 13:19:21 GMT 2020
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.MultipleGradientPaint;
import java.awt.TrayIcon;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Authenticator;
import java.net.Proxy;
import java.net.StandardProtocolFamily;
import java.security.CryptoPrimitive;
import java.security.KeyRep;
import java.text.Normalizer;
import java.time.Month;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import javax.jws.WebParam;
import javax.swing.GroupLayout;
import javax.tools.DocumentationTool;
import javax.tools.JavaFileObject;
import javax.tools.StandardLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONPointer;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("! p");
      assertEquals("! p", object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-0");
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("9Q(i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9Q(i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      try { 
        jSONObject0.getInt("xi9a,/d$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("FqL9=\"#tW(OR]E!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.indent((Writer) null, (-3854));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("4e|x'o");
      assertEquals("4e|x'o", object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short short0 = new Short((short)26);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null pointer", (Object) short0);
      try { 
        jSONObject0.getBigInteger("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] could not be converted to BigInteger.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("m.", (Map<?, ?>) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m.";
      stringArray0[1] = "m.";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("f)iB", false);
      Writer writer0 = JSONObject.writeValue(mockFileWriter0, "NHs|G>-ugyS", (-727), (-130));
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.query("#/");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("M;C/L7o", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONPointer jSONPointer0 = new JSONPointer("/5qR_xZ]WQhYV{");
      Object object0 = jSONObject0.optQuery(jSONPointer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Number number0 = jSONObject0.optNumber("Expected a ',' or ']'", (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-3021.15765416));
      Number number0 = jSONObject0.optNumber("has", (Number) bigDecimal0);
      assertEquals((byte)51, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(1686.97);
      Number number0 = jSONObject0.optNumber("Expected a ':' after a key", (Number) bigDecimal0);
      assertEquals((short)1686, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("null", (long) 39);
      assertEquals(39L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(58);
      int int0 = jSONObject0.optInt("org.json.JSONObject$Null", (-1590));
      assertEquals((-1590), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat(")gO%JR+", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("?oTO", (-4197.3984F));
      assertEquals((-4197.3984F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(bufferedInputStream0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("k^`", (-3496.07307949));
      float float0 = jSONObject1.optFloat("k^`");
      assertEquals((-3496.073F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      double double0 = jSONObject1.optDouble("NHs|G>-ugyS");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Short short0 = new Short((short)26);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null pointer", (Object) short0);
      double double0 = jSONObject0.optDouble("Null pointer");
      assertEquals(26.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-16);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("gettoString", bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("istoUpperCase", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-9);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = jSONObject0.optBigInteger("vOwguEvpL", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = jSONObject0.optBigDecimal("length", (BigDecimal) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("org.json.JSONObject", bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("FHUUqZ;T!>Pkyj\"\"", bigDecimal0);
      assertEquals((short) (-1), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Map<?, ?>) hashMap0);
      Object object0 = jSONObject1.opt("null");
      assertNotSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Character.UnicodeScript, GroupLayout.Alignment> hashMap0 = new HashMap<Character.UnicodeScript, GroupLayout.Alignment>();
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.ARMENIAN;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.CENTER;
      hashMap0.put(character_UnicodeScript0, groupLayout_Alignment0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer((-2473));
      Float float0 = new Float((float) (-2473));
      hashMap0.put(integer0, float0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("m.", (Map<?, ?>) hashMap0);
      jSONObject1.getJSONObject("m.");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<TrayIcon.MessageType, Month> hashMap0 = new HashMap<TrayIcon.MessageType, Month>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("utf-8", 69);
      float float0 = jSONObject0.getFloat("utf-8");
      assertEquals(69.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(110);
      jSONObject0.put("gettoString", 110);
      double double0 = jSONObject0.getDouble("gettoString");
      assertEquals(110.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("NHs|G>-ugyS", false);
      mockFileWriter0.close();
      try { 
        JSONObject.writeValue(mockFileWriter0, "NHs|G>-ugyS", (-727), (-130));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONObject0.accumulate("n2j@g|&#BQ", sequenceInputStream0);
      // Undeclared exception!
      jSONObject0.write((Writer) stringWriter0, 60, 2147483645);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(55);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null, 1125, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.stringToNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        jSONObject0.query((JSONPointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        jSONObject0.query(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<BigInteger, TrayIcon.MessageType> hashMap0 = new HashMap<BigInteger, TrayIcon.MessageType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (-164L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (double) (short)26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Character.UnicodeScript, GroupLayout.Alignment> hashMap0 = new HashMap<Character.UnicodeScript, GroupLayout.Alignment>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.optQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pointer cannot be null
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.isDecimalNotation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.increment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(7);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2);
      // Undeclared exception!
      try { 
        jSONObject0.accumulate((String) null, pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("m.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at 1 [character 2 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<KeyRep.Type, Character.UnicodeScript> hashMap0 = new HashMap<KeyRep.Type, Character.UnicodeScript>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("toString", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name toString, locale de_DE
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("NA*H|G>-ugS", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -27
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 7);
      JSONObject jSONObject0 = new JSONObject(bufferedWriter0);
      jSONObject0.write((Writer) stringWriter0, 6, (-627));
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)102);
      jSONObject0.put("{Rkn'M^~a*sJaiF^)e", (Object) short0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write((Writer) stringWriter0, (-1969491487), 123);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONObject0.accumulate("n2j@g|&#BQ", bigInteger0);
      jSONObject0.write((Writer) stringWriter0, 55, (int) (byte) (-39));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("getg<tBytes");
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0, 2339, 1125);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("OD=2rociM=\u0001Zd5", false);
      JSONObject jSONObject0 = (JSONObject)JSONObject.wrap(mockFileWriter0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = JSONObject.wrap(pipedOutputStream0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = MockFile.createTempFile("sf'59W", "E+vvn");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      JSONObject jSONObject0 = new JSONObject(mockFileWriter0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)jSONObject0.entrySet();
      JSONArray jSONArray0 = (JSONArray)JSONObject.wrap(set0);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = JSONObject.wrap(boolean0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Byte byte0 = new Byte((byte)121);
      Object object0 = JSONObject.wrap(byte0);
      assertEquals((byte)121, object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = JSONObject.wrap("Null pointer");
      assertEquals("Null pointer", object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((short)26);
      Object object0 = JSONObject.wrap(short0);
      assertEquals((short)26, object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Integer, StandardLocation> hashMap0 = new HashMap<Integer, StandardLocation>();
      Integer integer0 = new Integer(200);
      StandardLocation standardLocation0 = StandardLocation.SOURCE_OUTPUT;
      hashMap0.put(integer0, standardLocation0);
      StandardLocation standardLocation1 = hashMap0.put(integer0, standardLocation0);
      Object object0 = JSONObject.wrap(standardLocation1);
      assertSame(object0, standardLocation1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = new Float(1.0);
      Object object0 = JSONObject.wrap(float0);
      assertEquals(1.0F, object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("-959.911528251292");
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject.testValidity("-11.145125717356269");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("java.io.StringWriter@0000000001");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(499);
      JSONObject.quote(":]}/\"{;=#", (Writer) stringWriter0);
      assertEquals("\":]}/\\\"{;=#\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ositin");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Writer writer0 = JSONObject.quote("", (Writer) mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.quote("\"", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = JSONObject.quote((String) null, (Writer) stringWriter0);
      assertEquals("\"\"", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("lon", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("null", "null");
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)102);
      jSONObject0.put("{Rkn'M^~a*sJaiF^)e", (Object) short0);
      Number number0 = jSONObject0.optNumber("{Rkn'M^~a*sJaiF^)e", (Number) short0);
      assertEquals((short)102, number0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Number number0 = jSONObject0.optNumber("$%Hs'-i4.$fk;", (Number) bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONObject0.put("gettoLowerCase", true);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Number number0 = jSONObject0.optNumber("gettoLowerCase", (Number) bigDecimal0);
      assertEquals((short)10, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("`Wu", (-2178.5));
      long long0 = jSONObject1.optLong("`Wu", 1755L);
      assertEquals((-2178L), long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Nu)Dll pointer");
      int int0 = jSONObject0.optInt("Nu)Dll pointer", 68);
      assertEquals(2, jSONObject0.length());
      assertEquals(68, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = jSONObject0.optFloat("null", 1155.26F);
      assertEquals(1155.26F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<JSONObject, Authenticator.RequestorType> hashMap0 = new HashMap<JSONObject, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("a59", (Map<?, ?>) hashMap0);
      double double0 = jSONObject1.optDouble("a59", 1834.591348);
      assertEquals(1834.591348, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("b!XRJm!x3@Vy$#)@\"x", (Object) "b!XRJm!x3@Vy$#)@\"x");
      double double0 = jSONObject0.optDouble("b!XRJm!x3@Vy$#)@\"x", (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Duplicate key \"", Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.increment("istoUpperCase");
      boolean boolean0 = jSONObject0.optBoolean("istoUpperCase", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("B5Lo", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("m.", (Map<?, ?>) hashMap0);
      Class<ProcessBuilder.Redirect.Type> class0 = ProcessBuilder.Redirect.Type.class;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type0 = ProcessBuilder.Redirect.Type.WRITE;
      ProcessBuilder.Redirect.Type processBuilder_Redirect_Type1 = jSONObject0.optEnum(class0, "m.", processBuilder_Redirect_Type0);
      assertSame(processBuilder_Redirect_Type0, processBuilder_Redirect_Type1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      Proxy.Type proxy_Type1 = jSONObject0.optEnum(class0, "", proxy_Type0);
      assertSame(proxy_Type0, proxy_Type1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("null");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<JSONObject, CryptoPrimitive> hashMap0 = new HashMap<JSONObject, CryptoPrimitive>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double(1100.334394);
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = jSONObject0.isEmpty();
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-959.911528251292");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("-959.911528251292", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getBoolean("-959.911528251292");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000033] is not a Boolean.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-959.911528251292");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("-959.911528251292", (Collection<?>) linkedList0);
      jSONObject1.get("-959.911528251292");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("nam");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000002] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(30);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "gettoString");
      Map<String, Object> map0 = jSONObject0.toMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("m.", (Map<?, ?>) hashMap0);
      Map<String, Object> map0 = jSONObject0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<JavaFileObject.Kind, Long> hashMap0 = new HashMap<JavaFileObject.Kind, Long>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<Dialog.ModalExclusionType> linkedList0 = new LinkedList<Dialog.ModalExclusionType>();
      jSONObject0.put("] could not convert to BigInteger.", (Collection<?>) linkedList0);
      String string0 = jSONObject0.toString(13);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.append("null", hashMap0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Map<?, ?>) hashMap0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Character.UnicodeScript, GroupLayout.Alignment> hashMap0 = new HashMap<Character.UnicodeScript, GroupLayout.Alignment>();
      Character.UnicodeScript character_UnicodeScript0 = Character.UnicodeScript.ARMENIAN;
      GroupLayout.Alignment groupLayout_Alignment0 = GroupLayout.Alignment.CENTER;
      hashMap0.put(character_UnicodeScript0, groupLayout_Alignment0);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Double double0 = new Double(1100.334394);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOnce("7r r%oyOg]*T> ", "7r r%oyOg]*T> ");
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.writeValue((Writer) null, (Object) null, 30, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JSONObject jSONObject0 = new JSONObject(locale0);
      jSONObject0.toString(3);
      assertEquals(14, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      BigDecimal bigDecimal1 = (BigDecimal)JSONObject.wrap(bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = (BigInteger)JSONObject.wrap(bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double double0 = new Double(1100.3343941549);
      Object object0 = JSONObject.wrap(double0);
      assertEquals(1100.3343941549, object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Long long0 = new Long(1L);
      Object object0 = JSONObject.wrap(long0);
      assertEquals(1L, object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer(444);
      Object object0 = JSONObject.wrap(integer0);
      assertEquals(444, object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Character character0 = new Character('=');
      Object object0 = JSONObject.wrap(character0);
      assertEquals('=', object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = (JSONObject)JSONObject.wrap(jSONObject0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = JSONObject.wrap((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection<?>) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put(")Cx+^g{Aa>r-l<o", Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("1");
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("null");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("false");
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("true");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-11.145125717356269");
      assertEquals((short) (-11), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Number number0 = JSONObject.stringToNumber("-3496.07307949");
      assertEquals((-3496.07307949), number0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        JSONObject.stringToNumber("(h7!K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // val [(h7!K] is not a valid number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = JSONObject.isDecimalNotation("OoqEri_)UwLk6x]c%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.stringToValue("0000");
      assertEquals("0000", object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(566);
      Integer integer0 = new Integer(9);
      boolean boolean0 = jSONObject0.similar(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-959.911528251292");
      try { 
        jSONObject0.getString("\u0004s2q?YP@%qve_63");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000021] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "NHs|G>-ugyS");
      try { 
        jSONObject0.getFloat("NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000015] not found.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("null", (Object) null);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<WebParam.Mode> linkedList0 = new LinkedList<WebParam.Mode>();
      jSONObject0.put("7r r%oyOg]*T> ", (Collection<?>) linkedList0);
      try { 
        jSONObject0.putOnce("7r r%oyOg]*T> ", "7r r%oyOg]*T> ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate key \"7r r%oyOg]*T> \"
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("3O:mZlyI/", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("-3496.07307949", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(55);
      // Undeclared exception!
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.io.StringWriter@0000000012", true);
      JSONObject jSONObject0 = new JSONObject(mockFileOutputStream0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      boolean boolean0 = jSONObject1.similar(jSONObject0);
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Short short0 = new Short((short)26);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null pointer", (Object) short0);
      String string0 = jSONObject0.optString("Null pointer");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("m.", (Map<?, ?>) hashMap0);
      Number number0 = jSONObject0.optNumber("m.");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Short short0 = new Short((short)26);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null pointer", (Object) short0);
      long long0 = jSONObject0.optLong("Null pointer");
      assertEquals(26L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("null", (Map<?, ?>) hashMap0);
      long long0 = jSONObject0.optLong("null", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("m.", (Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("m.");
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("null");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("null", (Object) "null");
      int int0 = jSONObject1.optInt("null", 3656);
      assertEquals(3656, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)102);
      JSONObject jSONObject1 = jSONObject0.put("{Rkn'M^~a*sJaiF^)e", (Object) short0);
      int int0 = jSONObject1.optInt("{Rkn'M^~a*sJaiF^)e", (int) (short)102);
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("org.json.JSONObject$Null", (Map<?, ?>) hashMap0);
      int int0 = jSONObject0.optInt("org.json.JSONObject$Null", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.put("org.json.JSONObject$Null", 9);
      float float0 = jSONObject0.optFloat("org.json.JSONObject$Null");
      assertEquals(9.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<PipedOutputStream, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<PipedOutputStream, MultipleGradientPaint.CycleMethod>();
      jSONObject0.put("Mq,zpf", (Map<?, ?>) hashMap0);
      float float0 = jSONObject0.optFloat("Mq,zpf");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = jSONObject0.optBigInteger("D#*|IYQ=x5H.*{4|", bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Map<?, ?>) hashMap0);
      BigInteger bigInteger0 = jSONObject1.optBigInteger("null", (BigInteger) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Map<?, ?>) hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(5);
      BigDecimal bigDecimal1 = jSONObject1.optBigDecimal("null", bigDecimal0);
      assertEquals((short)5, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NHs|G>-ugyS", (Object) short0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      try { 
        jSONObject1.getEnum(class0, "NHs|G>-ugyS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not an enum of type java.io.StringWriter@0000000006.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string0 = JSONObject.numberToString(bigDecimal0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Map<?, ?>) hashMap0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("p+VXUgD-Dfp71H", 0);
      JSONObject jSONObject2 = jSONObject1.increment("p+VXUgD-Dfp71H");
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("false", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.increment("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to increment [java.io.StringWriter@0000000008].
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("Null pointer", (Map<?, ?>) hashMap0);
      boolean boolean0 = jSONObject0.has("Null pointer");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("-959.911528251292", (Collection<?>) linkedList0);
      try { 
        jSONObject1.getString("-959.911528251292");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 7);
      String[] stringArray0 = JSONObject.getNames((Object) lineNumberReader0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (Map<?, ?>) hashMap0);
      JSONObject.getNames(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<PipedOutputStream, MultipleGradientPaint.CycleMethod> hashMap0 = new HashMap<PipedOutputStream, MultipleGradientPaint.CycleMethod>();
      JSONObject jSONObject1 = jSONObject0.put("Mq,zpf", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("Mq,zpf");
      assertNotSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Long long0 = Long.getLong("", 0L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("", (Object) long0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000005] is not a JSONObject.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-11));
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not an enum of type ", byte0);
      try { 
        jSONObject1.getJSONArray("] is not an enum of type ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("Null pointer", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getInt("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not an int.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-959.911528251292", 65);
      Number number0 = jSONObject1.getNumber("-959.911528251292");
      assertEquals(65, number0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Character, Month> hashMap0 = new HashMap<Character, Month>();
      jSONObject0.put("Null8pFinte/kr", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getNumber("Null8pFinte/kr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("qZ", (-691));
      float float0 = jSONObject1.getFloat("qZ");
      assertEquals((-691.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOnce("3O:mZlyI/", "java.io.StringWriter@0000000002");
      try { 
        jSONObject1.getFloat("3O:mZlyI/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("nulml", (-480L));
      double double0 = jSONObject0.getDouble("nulml");
      assertEquals((-480.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(77);
      HashMap<StringReader, StandardProtocolFamily> hashMap0 = new HashMap<StringReader, StandardProtocolFamily>();
      jSONObject0.accumulate(":]}/\"{;=#", hashMap0);
      try { 
        jSONObject0.getDouble(":]}/\"{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a number.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-959.911528251292", 65);
      try { 
        jSONObject0.getBigDecimal("-959.911528251292");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000007] could not be converted to BigDecimal.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("b!XRJm!x3@Vy$#)@\"x", (Object) "b!XRJm!x3@Vy$#)@\"x");
      boolean boolean0 = jSONObject1.optBoolean("b!XRJm!x3@Vy$#)@\"x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("org.json.JSONObject$Null", (Map<?, ?>) hashMap0);
      try { 
        jSONObject0.getLong("org.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.io.StringWriter@0000000009] is not a long.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-3496.07307949));
      assertEquals("-3496.07307949", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("m.", (Map<?, ?>) hashMap0);
      try { 
        jSONObject1.append("m.", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[m.] is not a JSONArray.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("java.io.StringWriter@0000000001");
      JSONObject jSONObject0 = new JSONObject(stringReader0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("PISJWFClTnzqw", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("m.", (Map<?, ?>) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("m.", locale0);
      assertFalse(jSONObject2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HashMap<KeyRep.Type, Integer> hashMap0 = new HashMap<KeyRep.Type, Integer>();
      KeyRep.Type keyRep_Type0 = KeyRep.Type.PUBLIC;
      hashMap0.put(keyRep_Type0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      assertTrue(jSONObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Float float0 = new Float(3024.668442822283);
      hashMap0.put((Integer) null, float0);
      // Undeclared exception!
      try { 
        jSONObject0.put("true", (Map<?, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null key.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = jSONObject0.optBigDecimal("yR31<YJzdfee", bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Rkn'M^~a*sJaiF^)e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at 19 [character 20 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = JSONObject.valueToString("\"");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("P&4\"XZ_dKA");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HashMap<Window.Type, Normalizer.Form> hashMap0 = new HashMap<Window.Type, Normalizer.Form>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      Set<String> set0 = jSONObject0.keySet();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.optQuery(jSONPointer0);
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockFileWriter mockFileWriter0 = new MockFileWriter("NHs|G>-ugyS", true);
      Writer writer0 = jSONObject0.write((Writer) mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.optQuery(" wiS_6E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("TKUCP{T]3hG]EOtU7HA");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Locale.Category> class0 = Locale.Category.class;
      jSONObject0.optEnum(class0, "JSONObject[");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      HashMap<Component.BaselineResizeBehavior, Object> hashMap0 = new HashMap<Component.BaselineResizeBehavior, Object>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONPointer jSONPointer0 = new JSONPointer(linkedList0);
      Object object0 = jSONObject0.query(jSONPointer0);
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.query(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a JSON pointer should start with '/' or '#/'
         //
         verifyException("org.json.JSONPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2769);
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (float) 2769);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("|JcAlxaw=B%B-_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HashMap<DocumentationTool.Location, Authenticator.RequestorType> hashMap0 = new HashMap<DocumentationTool.Location, Authenticator.RequestorType>();
      JSONObject jSONObject0 = new JSONObject((Map<?, ?>) hashMap0);
      jSONObject0.put("`Wu", (-2178.5));
      double double0 = jSONObject0.optDouble("`Wu", 0.0);
      assertEquals((-2178.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator<String> iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("null");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("{-0-Jx^<f");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(566);
      jSONObject0.increment("L[N0R[,jtX]CAu{");
      assertFalse(jSONObject0.isEmpty());
      
      long long0 = jSONObject0.getLong("L[N0R[,jtX]CAu{");
      assertEquals(1L, long0);
  }
}
