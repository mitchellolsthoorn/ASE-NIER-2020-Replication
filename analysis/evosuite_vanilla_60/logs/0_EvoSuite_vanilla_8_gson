* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonPrimitive
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonArray
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonElement
* Starting Client-0
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 17361
* Connecting to master process on port 17362
* Connecting to master process on port 17364
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonElement
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 265
* Using seed 8
* Starting evolution
* Initial Number of Goals in DynaMOSA = 183 / 265
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonPrimitive
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonArray
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 433
* Using seed 8
* Starting evolution
* Total number of test goals for DYNAMOSA: 427
* Using seed 8
* Starting evolution
* Initial Number of Goals in DynaMOSA = 165 / 433
* Initial Number of Goals in DynaMOSA = 249 / 427
* Search finished after 62s and 342 generations, 39246 statements, best individual has fitness: 110.0
* Search finished after 63s and 153 generations, 25984 statements, best individual has fitness: 100.0
* Search finished after 63s and 165 generations, 46855 statements, best individual has fitness: 62.0
* Minimizing test suite
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 62
* Number of covered goals: 60
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 77
* Number of covered goals: 70
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 91
* Number of covered goals: 79
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 76%
* Total number of goals: 82
* Number of covered goals: 62
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 77
* Number of covered goals: 70
* Generated 75 tests with total length 222
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 48%
* Compiling and checking tests
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 43
* Number of covered goals: 43
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 70
* Number of covered goals: 68
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 109
* Number of covered goals: 53
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 93%
* Total number of goals: 30
* Number of covered goals: 28
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Generated 78 tests with total length 246
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 81%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonPrimitive_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s8/gson/evosuite-tests
* Done!

* Computation finished
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 36
* Number of covered goals: 34
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 95%
* Total number of goals: 40
* Number of covered goals: 38
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 124
* Number of covered goals: 58
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 22
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Generated 76 tests with total length 181
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:44:03.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 15:44:03.379 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JsonArray jsonArray0 = new JsonArray(2147483645);

* Writing tests to file
* Writing JUnit test case 'JsonArray_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s8/gson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 44%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonElement_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s8/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.internal.bind.JsonTreeWriter
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.stream.JsonReader
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonObject
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.Gson
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 17364
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 17363
* Connecting to master process on port 17366
* Connecting to master process on port 17365
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonObject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 221
* Using seed 8
* Starting evolution
* Initial Number of Goals in DynaMOSA = 142 / 221
[MASTER] 15:46:12.188 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 15:46:12.188 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.bind.JsonTreeWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 443
* Using seed 8
* Starting evolution
* Initial Number of Goals in DynaMOSA = 202 / 443
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.stream.JsonReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2813
* Using seed 8
* Starting evolution
* Finished analyzing classpath
* Generating tests for class com.google.gson.Gson
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Initial Number of Goals in DynaMOSA = 438 / 2813
* Total number of test goals for DYNAMOSA: 991
* Using seed 8
* Starting evolution
* Initial Number of Goals in DynaMOSA = 599 / 991
[MASTER] 15:46:14.739 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 15:46:14.741 [logback-2] ERROR TestCluster - Failed to check cache for com.google.gson.Gson.FutureTypeAdapter<T> : Type points to itself
* Search finished after 61s and 356 generations, 54589 statements, best individual has fitness: 45.0
* Minimizing test suite
* Search finished after 62s and 789 generations, 144730 statements, best individual has fitness: 50.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 83
* Number of covered goals: 80
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 74
* Number of covered goals: 68
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 15
* Number of covered goals: 15
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 87
* Number of covered goals: 79
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 86%
* Total number of goals: 93
* Number of covered goals: 80
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 92%
* Total number of goals: 74
* Number of covered goals: 68
* Search finished after 61s and 26 generations, 10523 statements, best individual has fitness: 277.0
* Generated 63 tests with total length 217
* Resulting test suite's coverage: 89% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 63s and 208 generations, 55306 statements, best individual has fitness: 1016.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 82
* Number of covered goals: 44
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Generated 38 tests with total length 105
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 52%
* Resulting test suite's mutation score: 81%
* Compiling and checking tests
* Compiling and checking tests
* Minimizing test suite
* Minimizing test suite
* Writing tests to file
* Writing JUnit test case 'JsonObject_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s8/gson/evosuite-tests
* Done!

* Computation finished
* Writing tests to file
* Writing JUnit test case 'JsonTreeWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s8/gson/evosuite-tests
* Done!

* Computation finished
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 69%
* Total number of goals: 671
* Number of covered goals: 466
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 66%
* Total number of goals: 677
* Number of covered goals: 449
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 78
* Number of covered goals: 78
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 61%
* Total number of goals: 709
* Number of covered goals: 434
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 35
* Number of covered goals: 18
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 22
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 65%
* Total number of goals: 677
* Number of covered goals: 438
* Generated 161 tests with total length 589
* Resulting test suite's coverage: 70% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 81%
* Total number of goals: 333
* Number of covered goals: 270
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 77%
* Total number of goals: 113
* Number of covered goals: 87
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 43
* Number of covered goals: 43
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 70%
* Total number of goals: 292
* Number of covered goals: 203
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 70
* Number of covered goals: 37
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 35
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 35
* Number of covered goals: 28
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 113
* Number of covered goals: 82
* Generated 76 tests with total length 272
* Resulting test suite's coverage: 73% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'JsonReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s8/gson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 17%
[MASTER] 15:50:10.870 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 15:50:11.839 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_6_1589982611797/com/google/gson/Gson_6_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_6_1589982611797/com/google/gson/Gson_6_tmp__ESTest_scaffolding.java]]
[MASTER] 15:50:11.839 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:50:11.839 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:50:11.843 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.lang.Integer> cannot be converted to java.lang.Class<com.google.gson.Gson.FutureTypeAdapter<java.util.HashMap>>: 23
[MASTER] 15:50:11.844 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_6_1589982611797/com/google/gson/Gson_6_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed May 20 13:50:11 GMT 2020
4:  */
5: 
6: package com.google.gson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.gson.Gson;
11: import java.util.HashMap;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class Gson_6_tmp__ESTest extends Gson_6_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Gson gson0 = new Gson();
22:       Class<Integer> class0 = Integer.class;
23:       gson0.fromJson("", (Class<Gson.FutureTypeAdapter<HashMap>>) class0);
24:       assertFalse(gson0.serializeNulls());
25:       assertTrue(gson0.htmlSafe());
26:   }
27: }
RegularFileObject[/tmp/EvoSuite_6_1589982611797/com/google/gson/Gson_6_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed May 20 13:50:11 GMT 2020
5:  */
6: 
7: package com.google.gson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Gson_6_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.gson.Gson"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/gson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Gson_6_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
82:       "com.google.gson.reflect.TypeToken",
83:       "com.google.gson.internal.bind.TypeAdapters$23",
84:       "com.google.gson.internal.bind.TypeAdapters$24",
85:       "com.google.gson.internal.bind.TypeAdapters$25",
86:       "com.google.gson.internal.bind.TypeAdapters$26",
87:       "com.google.gson.internal.bind.TypeAdapters$20",
88:       "com.google.gson.TypeAdapter",
89:       "com.google.gson.internal.bind.JsonTreeWriter",
90:       "com.google.gson.GsonBuilder",
91:       "com.google.gson.internal.bind.TypeAdapters$21",
92:       "com.google.gson.internal.bind.TypeAdapters$22",
93:       "com.google.gson.internal.bind.TypeAdapters$27",
94:       "com.google.gson.FieldNamingStrategy",
95:       "com.google.gson.internal.bind.TypeAdapters$28",
96:       "com.google.gson.internal.bind.TypeAdapters$29",
97:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
98:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
99:       "com.google.gson.ExclusionStrategy",
100:       "com.google.gson.internal.bind.TimeTypeAdapter",
101:       "com.google.gson.internal.bind.TypeAdapters$34",
102:       "com.google.gson.internal.bind.TypeAdapters$35",
103:       "com.google.gson.internal.JavaVersion",
104:       "com.google.gson.internal.bind.TypeAdapters$30",
105:       "com.google.gson.internal.bind.TypeAdapters$32",
106:       "com.google.gson.internal.bind.TypeAdapters$33",
107:       "com.google.gson.JsonArray",
108:       "com.google.gson.LongSerializationPolicy",
109:       "com.google.gson.internal.bind.TypeAdapters$35$1",
110:       "com.google.gson.internal.Excluder",
111:       "com.google.gson.annotations.Until",
112:       "com.google.gson.TypeAdapterFactory",
113:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
114:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
115:       "com.google.gson.stream.JsonReader$1",
116:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
117:       "com.google.gson.internal.$Gson$Types",
118:       "com.google.gson.stream.JsonReader",
119:       "com.google.gson.InstanceCreator",
120:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
121:       "com.google.gson.internal.reflect.UnsafeReflectionAccessor",
122:       "com.google.gson.Gson$FutureTypeAdapter",
123:       "com.google.gson.internal.bind.TreeTypeAdapter",
124:       "com.google.gson.internal.LinkedTreeMap$Node",
125:       "com.google.gson.stream.JsonWriter",
126:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
127:       "com.google.gson.internal.$Gson$Preconditions",
128:       "com.google.gson.internal.Streams",
129:       "com.google.gson.internal.bind.TypeAdapters$12",
130:       "com.google.gson.internal.bind.TypeAdapters$13",
131:       "com.google.gson.internal.bind.TypeAdapters$14",
132:       "com.google.gson.internal.bind.TypeAdapters$15",
133:       "com.google.gson.internal.bind.TypeAdapters$10",
134:       "com.google.gson.internal.Primitives",
135:       "com.google.gson.internal.bind.TypeAdapters$11",
136:       "com.google.gson.stream.MalformedJsonException",
137:       "com.google.gson.internal.bind.ArrayTypeAdapter",
138:       "com.google.gson.internal.ConstructorConstructor$3",
139:       "com.google.gson.stream.JsonToken",
140:       "com.google.gson.internal.bind.TypeAdapters$16",
141:       "com.google.gson.internal.ObjectConstructor",
142:       "com.google.gson.internal.bind.TypeAdapters$17",
143:       "com.google.gson.internal.bind.TypeAdapters$18",
144:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
145:       "com.google.gson.JsonNull",
146:       "com.google.gson.internal.bind.TypeAdapters$19",
147:       "com.google.gson.internal.bind.DateTypeAdapter$1",
148:       "com.google.gson.internal.ConstructorConstructor$8",
149:       "com.google.gson.LongSerializationPolicy$1",
150:       "com.google.gson.LongSerializationPolicy$2",
151:       "com.google.gson.JsonObject",
152:       "com.google.gson.internal.bind.JsonTreeReader$1",
153:       "com.google.gson.TypeAdapter$1",
154:       "com.google.gson.internal.UnsafeAllocator$3",
155:       "com.google.gson.internal.UnsafeAllocator$4",
156:       "com.google.gson.internal.UnsafeAllocator$1",
157:       "com.google.gson.internal.UnsafeAllocator$2",
158:       "com.google.gson.Gson$2",
159:       "com.google.gson.Gson$3",
160:       "com.google.gson.internal.bind.ObjectTypeAdapter",
161:       "com.google.gson.Gson$4",
162:       "com.google.gson.Gson$5",
163:       "com.google.gson.internal.bind.DateTypeAdapter",
164:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
165:       "com.google.gson.Gson$1",
166:       "com.google.gson.internal.bind.TypeAdapters$26$1",
167:       "com.google.gson.Gson",
168:       "com.google.gson.internal.LinkedTreeMap$1",
169:       "com.google.gson.internal.reflect.ReflectionAccessor",
170:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
171:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
172:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
173:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
174:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
175:       "com.google.gson.annotations.SerializedName",
176:       "com.google.gson.internal.Excluder$1",
177:       "com.google.gson.internal.bind.TypeAdapters$2",
178:       "com.google.gson.internal.bind.JsonTreeReader",
179:       "com.google.gson.internal.bind.TypeAdapters$1",
180:       "com.google.gson.internal.bind.JsonTreeWriter$1",
181:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
182:       "com.google.gson.JsonIOException",
183:       "com.google.gson.internal.bind.TypeAdapters$8",
184:       "com.google.gson.internal.bind.TypeAdapters$7",
185:       "com.google.gson.internal.bind.TypeAdapters",
186:       "com.google.gson.internal.bind.TypeAdapters$9",
187:       "com.google.gson.internal.bind.TypeAdapters$4",
188:       "com.google.gson.internal.LinkedTreeMap",
189:       "com.google.gson.internal.bind.TypeAdapters$3",
190:       "com.google.gson.internal.bind.TypeAdapters$6",
191:       "com.google.gson.internal.LazilyParsedNumber",
192:       "com.google.gson.internal.bind.TypeAdapters$5",
193:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
194:       "com.google.gson.JsonParseException",
195:       "com.google.gson.internal.ConstructorConstructor",
196:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
197:       "com.google.gson.JsonElement",
198:       "com.google.gson.FieldNamingPolicy",
199:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
200:       "com.google.gson.DefaultDateTypeAdapter",
201:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
202:       "com.google.gson.annotations.JsonAdapter",
203:       "com.google.gson.JsonPrimitive",
204:       "com.google.gson.internal.UnsafeAllocator",
205:       "com.google.gson.internal.Streams$AppendableWriter",
206:       "com.google.gson.internal.ConstructorConstructor$14",
207:       "com.google.gson.JsonSyntaxException",
208:       "com.google.gson.FieldNamingPolicy$4",
209:       "com.google.gson.FieldNamingPolicy$3",
210:       "com.google.gson.annotations.Since",
211:       "com.google.gson.FieldNamingPolicy$6",
212:       "com.google.gson.FieldNamingPolicy$5",
213:       "com.google.gson.internal.JsonReaderInternalAccess",
214:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
215:       "com.google.gson.FieldNamingPolicy$2",
216:       "com.google.gson.FieldNamingPolicy$1"
217:     );
218:   } 
219: 
220:   private static void resetClasses() {
221:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Gson_6_tmp__ESTest_scaffolding.class.getClassLoader()); 
222: 
223:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
224:       "com.google.gson.reflect.TypeToken",
225:       "com.google.gson.internal.$Gson$Preconditions",
226:       "com.google.gson.internal.$Gson$Types",
227:       "com.google.gson.Gson",
228:       "com.google.gson.TypeAdapter",
229:       "com.google.gson.Gson$5",
230:       "com.google.gson.Gson$3",
231:       "com.google.gson.Gson$4",
232:       "com.google.gson.Gson$1",
233:       "com.google.gson.Gson$2",
234:       "com.google.gson.Gson$FutureTypeAdapter",
235:       "com.google.gson.internal.Excluder",
236:       "com.google.gson.FieldNamingPolicy",
237:       "com.google.gson.LongSerializationPolicy",
238:       "com.google.gson.internal.bind.TypeAdapters$1",
239:       "com.google.gson.TypeAdapter$1",
240:       "com.google.gson.internal.bind.TypeAdapters$32",
241:       "com.google.gson.internal.bind.TypeAdapters$2",
242:       "com.google.gson.internal.bind.TypeAdapters$3",
243:       "com.google.gson.internal.bind.TypeAdapters$4",
244:       "com.google.gson.internal.bind.TypeAdapters$33",
245:       "com.google.gson.internal.bind.TypeAdapters$5",
246:       "com.google.gson.internal.bind.TypeAdapters$6",
247:       "com.google.gson.internal.bind.TypeAdapters$7",
248:       "com.google.gson.internal.bind.TypeAdapters$8",
249:       "com.google.gson.internal.bind.TypeAdapters$9",
250:       "com.google.gson.internal.bind.TypeAdapters$10",
251:       "com.google.gson.internal.bind.TypeAdapters$11",
252:       "com.google.gson.internal.bind.TypeAdapters$12",
253:       "com.google.gson.internal.bind.TypeAdapters$13",
254:       "com.google.gson.internal.bind.TypeAdapters$14",
255:       "com.google.gson.internal.bind.TypeAdapters$15",
256:       "com.google.gson.internal.bind.TypeAdapters$16",
257:       "com.google.gson.internal.bind.TypeAdapters$17",
258:       "com.google.gson.internal.bind.TypeAdapters$18",
259:       "com.google.gson.internal.bind.TypeAdapters$19",
260:       "com.google.gson.internal.bind.TypeAdapters$20",
261:       "com.google.gson.internal.bind.TypeAdapters$21",
262:       "com.google.gson.internal.bind.TypeAdapters$22",
263:       "com.google.gson.internal.bind.TypeAdapters$23",
264:       "com.google.gson.internal.bind.TypeAdapters$35",
265:       "com.google.gson.internal.bind.TypeAdapters$24",
266:       "com.google.gson.internal.bind.TypeAdapters$25",
267:       "com.google.gson.internal.bind.TypeAdapters$26",
268:       "com.google.gson.internal.bind.TypeAdapters$27",
269:       "com.google.gson.internal.bind.TypeAdapters$34",
270:       "com.google.gson.internal.bind.TypeAdapters$28",
271:       "com.google.gson.internal.bind.TypeAdapters$29",
272:       "com.google.gson.internal.bind.TypeAdapters$30",
273:       "com.google.gson.internal.bind.TypeAdapters",
274:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
275:       "com.google.gson.internal.bind.ObjectTypeAdapter",
276:       "com.google.gson.internal.bind.DateTypeAdapter$1",
277:       "com.google.gson.internal.bind.DateTypeAdapter",
278:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
279:       "com.google.gson.internal.bind.TimeTypeAdapter",
280:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
281:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
282:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
283:       "com.google.gson.internal.bind.ArrayTypeAdapter",
284:       "com.google.gson.JsonElement",
285:       "com.google.gson.JsonNull",
286:       "com.google.gson.internal.Primitives",
287:       "com.google.gson.stream.JsonToken",
288:       "com.google.gson.internal.ConstructorConstructor",
289:       "com.google.gson.internal.JavaVersion",
290:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
291:       "com.google.gson.internal.reflect.ReflectionAccessor",
292:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
293:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
294:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
295:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
296:       "com.google.gson.internal.JsonReaderInternalAccess",
297:       "com.google.gson.stream.JsonReader$1",
298:       "com.google.gson.stream.JsonReader",
299:       "com.google.gson.internal.Streams",
300:       "com.google.gson.stream.JsonWriter",
301:       "com.google.gson.internal.ConstructorConstructor$14",
302:       "com.google.gson.internal.UnsafeAllocator",
303:       "com.google.gson.internal.UnsafeAllocator$1",
304:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
305:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
306:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
307:       "com.google.gson.JsonPrimitive",
308:       "com.google.gson.JsonObject",
309:       "com.google.gson.internal.LinkedTreeMap$1",
310:       "com.google.gson.internal.LinkedTreeMap",
311:       "com.google.gson.internal.LinkedTreeMap$Node",
312:       "com.google.gson.GsonBuilder",
313:       "com.google.gson.internal.bind.JsonTreeWriter$1",
314:       "com.google.gson.internal.bind.JsonTreeWriter",
315:       "com.google.gson.internal.ConstructorConstructor$3",
316:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
317:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
318:       "com.google.gson.internal.ConstructorConstructor$8",
319:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
320:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
321:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
322:       "com.google.gson.internal.ConstructorConstructor$12",
323:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
324:       "com.google.gson.JsonArray",
325:       "com.google.gson.internal.LinkedTreeMap$EntrySet",
326:       "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator",
327:       "com.google.gson.internal.LinkedTreeMap$EntrySet$1",
328:       "com.google.gson.internal.Streams$AppendableWriter",
329:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
330:       "com.google.gson.JsonParseException",
331:       "com.google.gson.JsonIOException",
332:       "com.google.gson.DefaultDateTypeAdapter",
333:       "com.google.gson.JsonSyntaxException",
334:       "com.google.gson.internal.bind.JsonTreeReader$1",
335:       "com.google.gson.internal.bind.JsonTreeReader",
336:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
337:       "com.google.gson.stream.MalformedJsonException",
338:       "com.google.gson.internal.Excluder$1",
339:       "com.google.gson.internal.bind.TypeAdapters$35$1",
340:       "com.google.gson.internal.bind.ObjectTypeAdapter$2"
341:     );
342:   }
343: }

[MASTER] 15:50:11.844 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Gson gson0 = new Gson();
Class<Integer> class0 = Integer.class;
gson0.fromJson("", (Class<Gson.FutureTypeAdapter<HashMap>>) class0);
assertFalse(gson0.serializeNulls());
assertTrue(gson0.htmlSafe());


[MASTER] 15:50:12.147 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_15_1589982612120/com/google/gson/Gson_15_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_15_1589982612120/com/google/gson/Gson_15_tmp__ESTest_scaffolding.java]]
[MASTER] 15:50:12.147 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:50:12.147 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:50:12.148 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.lang.Float> cannot be converted to java.lang.Class<com.google.gson.Gson.FutureTypeAdapter<java.util.HashMap>>: 26
[MASTER] 15:50:12.148 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_15_1589982612120/com/google/gson/Gson_15_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed May 20 13:50:12 GMT 2020
4:  */
5: 
6: package com.google.gson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.gson.Gson;
12: import java.util.HashMap;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class Gson_15_tmp__ESTest extends Gson_15_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Gson gson0 = new Gson();
23:       Class<Float> class0 = Float.TYPE;
24:       // Undeclared exception!
25:       try { 
26:         gson0.fromJson("Uom.*oogle.gon.Gson$5", (Class<Gson.FutureTypeAdapter<HashMap>>) class0);
27:         fail("Expecting exception: NumberFormatException");
28:       
29:       } catch(NumberFormatException e) {
30:       }
31:   }
32: }
RegularFileObject[/tmp/EvoSuite_15_1589982612120/com/google/gson/Gson_15_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed May 20 13:50:12 GMT 2020
5:  */
6: 
7: package com.google.gson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Gson_15_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.gson.Gson"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/gson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Gson_15_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
82:       "com.google.gson.reflect.TypeToken",
83:       "com.google.gson.internal.bind.TypeAdapters$23",
84:       "com.google.gson.internal.bind.TypeAdapters$24",
85:       "com.google.gson.internal.bind.TypeAdapters$25",
86:       "com.google.gson.internal.bind.TypeAdapters$26",
87:       "com.google.gson.internal.bind.TypeAdapters$20",
88:       "com.google.gson.TypeAdapter",
89:       "com.google.gson.internal.bind.JsonTreeWriter",
90:       "com.google.gson.GsonBuilder",
91:       "com.google.gson.internal.bind.TypeAdapters$21",
92:       "com.google.gson.internal.bind.TypeAdapters$22",
93:       "com.google.gson.internal.bind.TypeAdapters$27",
94:       "com.google.gson.FieldNamingStrategy",
95:       "com.google.gson.internal.bind.TypeAdapters$28",
96:       "com.google.gson.internal.bind.TypeAdapters$29",
97:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
98:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
99:       "com.google.gson.ExclusionStrategy",
100:       "com.google.gson.internal.bind.TimeTypeAdapter",
101:       "com.google.gson.internal.bind.TypeAdapters$34",
102:       "com.google.gson.internal.bind.TypeAdapters$35",
103:       "com.google.gson.internal.JavaVersion",
104:       "com.google.gson.internal.bind.TypeAdapters$30",
105:       "com.google.gson.internal.bind.TypeAdapters$32",
106:       "com.google.gson.internal.bind.TypeAdapters$33",
107:       "com.google.gson.JsonArray",
108:       "com.google.gson.LongSerializationPolicy",
109:       "com.google.gson.internal.bind.TypeAdapters$35$1",
110:       "com.google.gson.internal.Excluder",
111:       "com.google.gson.annotations.Until",
112:       "com.google.gson.TypeAdapterFactory",
113:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
114:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
115:       "com.google.gson.stream.JsonReader$1",
116:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
117:       "com.google.gson.internal.$Gson$Types",
118:       "com.google.gson.stream.JsonReader",
119:       "com.google.gson.InstanceCreator",
120:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
121:       "com.google.gson.internal.reflect.UnsafeReflectionAccessor",
122:       "com.google.gson.Gson$FutureTypeAdapter",
123:       "com.google.gson.internal.bind.TreeTypeAdapter",
124:       "com.google.gson.internal.LinkedTreeMap$Node",
125:       "com.google.gson.stream.JsonWriter",
126:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
127:       "com.google.gson.internal.$Gson$Preconditions",
128:       "com.google.gson.internal.Streams",
129:       "com.google.gson.internal.bind.TypeAdapters$12",
130:       "com.google.gson.internal.bind.TypeAdapters$13",
131:       "com.google.gson.internal.bind.TypeAdapters$14",
132:       "com.google.gson.internal.bind.TypeAdapters$15",
133:       "com.google.gson.internal.bind.TypeAdapters$10",
134:       "com.google.gson.internal.Primitives",
135:       "com.google.gson.internal.bind.TypeAdapters$11",
136:       "com.google.gson.stream.MalformedJsonException",
137:       "com.google.gson.internal.bind.ArrayTypeAdapter",
138:       "com.google.gson.internal.ConstructorConstructor$3",
139:       "com.google.gson.stream.JsonToken",
140:       "com.google.gson.internal.bind.TypeAdapters$16",
141:       "com.google.gson.internal.ObjectConstructor",
142:       "com.google.gson.internal.bind.TypeAdapters$17",
143:       "com.google.gson.internal.bind.TypeAdapters$18",
144:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
145:       "com.google.gson.JsonNull",
146:       "com.google.gson.internal.bind.TypeAdapters$19",
147:       "com.google.gson.internal.bind.DateTypeAdapter$1",
148:       "com.google.gson.internal.ConstructorConstructor$8",
149:       "com.google.gson.LongSerializationPolicy$1",
150:       "com.google.gson.LongSerializationPolicy$2",
151:       "com.google.gson.JsonObject",
152:       "com.google.gson.internal.bind.JsonTreeReader$1",
153:       "com.google.gson.TypeAdapter$1",
154:       "com.google.gson.internal.UnsafeAllocator$3",
155:       "com.google.gson.internal.UnsafeAllocator$4",
156:       "com.google.gson.internal.UnsafeAllocator$1",
157:       "com.google.gson.internal.UnsafeAllocator$2",
158:       "com.google.gson.Gson$2",
159:       "com.google.gson.Gson$3",
160:       "com.google.gson.internal.bind.ObjectTypeAdapter",
161:       "com.google.gson.Gson$4",
162:       "com.google.gson.Gson$5",
163:       "com.google.gson.internal.bind.DateTypeAdapter",
164:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
165:       "com.google.gson.Gson$1",
166:       "com.google.gson.internal.bind.TypeAdapters$26$1",
167:       "com.google.gson.Gson",
168:       "com.google.gson.internal.LinkedTreeMap$1",
169:       "com.google.gson.internal.reflect.ReflectionAccessor",
170:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
171:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
172:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
173:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
174:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
175:       "com.google.gson.annotations.SerializedName",
176:       "com.google.gson.internal.Excluder$1",
177:       "com.google.gson.internal.bind.TypeAdapters$2",
178:       "com.google.gson.internal.bind.JsonTreeReader",
179:       "com.google.gson.internal.bind.TypeAdapters$1",
180:       "com.google.gson.internal.bind.JsonTreeWriter$1",
181:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
182:       "com.google.gson.JsonIOException",
183:       "com.google.gson.internal.bind.TypeAdapters$8",
184:       "com.google.gson.internal.bind.TypeAdapters$7",
185:       "com.google.gson.internal.bind.TypeAdapters",
186:       "com.google.gson.internal.bind.TypeAdapters$9",
187:       "com.google.gson.internal.bind.TypeAdapters$4",
188:       "com.google.gson.internal.LinkedTreeMap",
189:       "com.google.gson.internal.bind.TypeAdapters$3",
190:       "com.google.gson.internal.bind.TypeAdapters$6",
191:       "com.google.gson.internal.LazilyParsedNumber",
192:       "com.google.gson.internal.bind.TypeAdapters$5",
193:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
194:       "com.google.gson.JsonParseException",
195:       "com.google.gson.internal.ConstructorConstructor",
196:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
197:       "com.google.gson.JsonElement",
198:       "com.google.gson.FieldNamingPolicy",
199:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
200:       "com.google.gson.DefaultDateTypeAdapter",
201:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
202:       "com.google.gson.annotations.JsonAdapter",
203:       "com.google.gson.JsonPrimitive",
204:       "com.google.gson.internal.UnsafeAllocator",
205:       "com.google.gson.internal.Streams$AppendableWriter",
206:       "com.google.gson.internal.ConstructorConstructor$14",
207:       "com.google.gson.JsonSyntaxException",
208:       "com.google.gson.FieldNamingPolicy$4",
209:       "com.google.gson.FieldNamingPolicy$3",
210:       "com.google.gson.annotations.Since",
211:       "com.google.gson.FieldNamingPolicy$6",
212:       "com.google.gson.FieldNamingPolicy$5",
213:       "com.google.gson.internal.JsonReaderInternalAccess",
214:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
215:       "com.google.gson.FieldNamingPolicy$2",
216:       "com.google.gson.FieldNamingPolicy$1"
217:     );
218:   } 
219: 
220:   private static void resetClasses() {
221:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Gson_15_tmp__ESTest_scaffolding.class.getClassLoader()); 
222: 
223:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
224:       "com.google.gson.reflect.TypeToken",
225:       "com.google.gson.internal.$Gson$Preconditions",
226:       "com.google.gson.internal.$Gson$Types",
227:       "com.google.gson.Gson",
228:       "com.google.gson.TypeAdapter",
229:       "com.google.gson.Gson$5",
230:       "com.google.gson.Gson$3",
231:       "com.google.gson.Gson$4",
232:       "com.google.gson.Gson$1",
233:       "com.google.gson.Gson$2",
234:       "com.google.gson.Gson$FutureTypeAdapter",
235:       "com.google.gson.internal.Excluder",
236:       "com.google.gson.FieldNamingPolicy",
237:       "com.google.gson.LongSerializationPolicy",
238:       "com.google.gson.internal.bind.TypeAdapters$1",
239:       "com.google.gson.TypeAdapter$1",
240:       "com.google.gson.internal.bind.TypeAdapters$32",
241:       "com.google.gson.internal.bind.TypeAdapters$2",
242:       "com.google.gson.internal.bind.TypeAdapters$3",
243:       "com.google.gson.internal.bind.TypeAdapters$4",
244:       "com.google.gson.internal.bind.TypeAdapters$33",
245:       "com.google.gson.internal.bind.TypeAdapters$5",
246:       "com.google.gson.internal.bind.TypeAdapters$6",
247:       "com.google.gson.internal.bind.TypeAdapters$7",
248:       "com.google.gson.internal.bind.TypeAdapters$8",
249:       "com.google.gson.internal.bind.TypeAdapters$9",
250:       "com.google.gson.internal.bind.TypeAdapters$10",
251:       "com.google.gson.internal.bind.TypeAdapters$11",
252:       "com.google.gson.internal.bind.TypeAdapters$12",
253:       "com.google.gson.internal.bind.TypeAdapters$13",
254:       "com.google.gson.internal.bind.TypeAdapters$14",
255:       "com.google.gson.internal.bind.TypeAdapters$15",
256:       "com.google.gson.internal.bind.TypeAdapters$16",
257:       "com.google.gson.internal.bind.TypeAdapters$17",
258:       "com.google.gson.internal.bind.TypeAdapters$18",
259:       "com.google.gson.internal.bind.TypeAdapters$19",
260:       "com.google.gson.internal.bind.TypeAdapters$20",
261:       "com.google.gson.internal.bind.TypeAdapters$21",
262:       "com.google.gson.internal.bind.TypeAdapters$22",
263:       "com.google.gson.internal.bind.TypeAdapters$23",
264:       "com.google.gson.internal.bind.TypeAdapters$35",
265:       "com.google.gson.internal.bind.TypeAdapters$24",
266:       "com.google.gson.internal.bind.TypeAdapters$25",
267:       "com.google.gson.internal.bind.TypeAdapters$26",
268:       "com.google.gson.internal.bind.TypeAdapters$27",
269:       "com.google.gson.internal.bind.TypeAdapters$34",
270:       "com.google.gson.internal.bind.TypeAdapters$28",
271:       "com.google.gson.internal.bind.TypeAdapters$29",
272:       "com.google.gson.internal.bind.TypeAdapters$30",
273:       "com.google.gson.internal.bind.TypeAdapters",
274:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
275:       "com.google.gson.internal.bind.ObjectTypeAdapter",
276:       "com.google.gson.internal.bind.DateTypeAdapter$1",
277:       "com.google.gson.internal.bind.DateTypeAdapter",
278:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
279:       "com.google.gson.internal.bind.TimeTypeAdapter",
280:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
281:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
282:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
283:       "com.google.gson.internal.bind.ArrayTypeAdapter",
284:       "com.google.gson.JsonElement",
285:       "com.google.gson.JsonNull",
286:       "com.google.gson.internal.Primitives",
287:       "com.google.gson.stream.JsonToken",
288:       "com.google.gson.internal.ConstructorConstructor",
289:       "com.google.gson.internal.JavaVersion",
290:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
291:       "com.google.gson.internal.reflect.ReflectionAccessor",
292:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
293:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
294:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
295:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
296:       "com.google.gson.internal.JsonReaderInternalAccess",
297:       "com.google.gson.stream.JsonReader$1",
298:       "com.google.gson.stream.JsonReader",
299:       "com.google.gson.internal.Streams",
300:       "com.google.gson.stream.JsonWriter",
301:       "com.google.gson.internal.ConstructorConstructor$14",
302:       "com.google.gson.internal.UnsafeAllocator",
303:       "com.google.gson.internal.UnsafeAllocator$1",
304:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
305:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
306:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
307:       "com.google.gson.JsonPrimitive",
308:       "com.google.gson.JsonObject",
309:       "com.google.gson.internal.LinkedTreeMap$1",
310:       "com.google.gson.internal.LinkedTreeMap",
311:       "com.google.gson.internal.LinkedTreeMap$Node",
312:       "com.google.gson.GsonBuilder",
313:       "com.google.gson.internal.bind.JsonTreeWriter$1",
314:       "com.google.gson.internal.bind.JsonTreeWriter",
315:       "com.google.gson.internal.ConstructorConstructor$3",
316:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
317:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
318:       "com.google.gson.internal.ConstructorConstructor$8",
319:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
320:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
321:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
322:       "com.google.gson.internal.ConstructorConstructor$12",
323:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
324:       "com.google.gson.JsonArray",
325:       "com.google.gson.internal.LinkedTreeMap$EntrySet",
326:       "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator",
327:       "com.google.gson.internal.LinkedTreeMap$EntrySet$1",
328:       "com.google.gson.internal.Streams$AppendableWriter",
329:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
330:       "com.google.gson.JsonParseException",
331:       "com.google.gson.JsonIOException",
332:       "com.google.gson.DefaultDateTypeAdapter",
333:       "com.google.gson.JsonSyntaxException",
334:       "com.google.gson.internal.bind.JsonTreeReader$1",
335:       "com.google.gson.internal.bind.JsonTreeReader",
336:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
337:       "com.google.gson.stream.MalformedJsonException",
338:       "com.google.gson.internal.Excluder$1",
339:       "com.google.gson.internal.bind.TypeAdapters$35$1",
340:       "com.google.gson.internal.bind.ObjectTypeAdapter$2"
341:     );
342:   }
343: }

[MASTER] 15:50:12.148 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Gson gson0 = new Gson();
Class<Float> class0 = Float.TYPE;
gson0.fromJson("Uom.*oogle.gon.Gson$5", (Class<Gson.FutureTypeAdapter<HashMap>>) class0);

[MASTER] 15:50:13.074 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_25_1589982613045/com/google/gson/Gson_25_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_25_1589982613045/com/google/gson/Gson_25_tmp__ESTest_scaffolding.java]]
[MASTER] 15:50:13.074 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:50:13.074 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:50:13.075 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.lang.String> cannot be converted to java.lang.Class<com.google.gson.Gson.FutureTypeAdapter<java.util.HashMap>>: 23
[MASTER] 15:50:13.075 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_25_1589982613045/com/google/gson/Gson_25_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed May 20 13:50:13 GMT 2020
4:  */
5: 
6: package com.google.gson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.gson.Gson;
11: import java.util.HashMap;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class Gson_25_tmp__ESTest extends Gson_25_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Gson gson0 = new Gson();
22:       Class<String> class0 = String.class;
23:       gson0.fromJson("7B>G", (Class<Gson.FutureTypeAdapter<HashMap>>) class0);
24:       assertTrue(gson0.htmlSafe());
25:       assertFalse(gson0.serializeNulls());
26:   }
27: }
RegularFileObject[/tmp/EvoSuite_25_1589982613045/com/google/gson/Gson_25_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed May 20 13:50:13 GMT 2020
5:  */
6: 
7: package com.google.gson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Gson_25_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.gson.Gson"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/gson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Gson_25_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
82:       "com.google.gson.reflect.TypeToken",
83:       "com.google.gson.internal.bind.TypeAdapters$23",
84:       "com.google.gson.internal.bind.TypeAdapters$24",
85:       "com.google.gson.internal.bind.TypeAdapters$25",
86:       "com.google.gson.internal.bind.TypeAdapters$26",
87:       "com.google.gson.internal.bind.TypeAdapters$20",
88:       "com.google.gson.TypeAdapter",
89:       "com.google.gson.internal.bind.JsonTreeWriter",
90:       "com.google.gson.GsonBuilder",
91:       "com.google.gson.internal.bind.TypeAdapters$21",
92:       "com.google.gson.internal.bind.TypeAdapters$22",
93:       "com.google.gson.internal.bind.TypeAdapters$27",
94:       "com.google.gson.FieldNamingStrategy",
95:       "com.google.gson.internal.bind.TypeAdapters$28",
96:       "com.google.gson.internal.bind.TypeAdapters$29",
97:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
98:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
99:       "com.google.gson.ExclusionStrategy",
100:       "com.google.gson.internal.bind.TimeTypeAdapter",
101:       "com.google.gson.internal.bind.TypeAdapters$34",
102:       "com.google.gson.internal.bind.TypeAdapters$35",
103:       "com.google.gson.internal.JavaVersion",
104:       "com.google.gson.internal.bind.TypeAdapters$30",
105:       "com.google.gson.internal.bind.TypeAdapters$32",
106:       "com.google.gson.internal.bind.TypeAdapters$33",
107:       "com.google.gson.JsonArray",
108:       "com.google.gson.LongSerializationPolicy",
109:       "com.google.gson.internal.bind.TypeAdapters$35$1",
110:       "com.google.gson.internal.Excluder",
111:       "com.google.gson.annotations.Until",
112:       "com.google.gson.TypeAdapterFactory",
113:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
114:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
115:       "com.google.gson.stream.JsonReader$1",
116:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
117:       "com.google.gson.internal.$Gson$Types",
118:       "com.google.gson.stream.JsonReader",
119:       "com.google.gson.InstanceCreator",
120:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
121:       "com.google.gson.internal.reflect.UnsafeReflectionAccessor",
122:       "com.google.gson.Gson$FutureTypeAdapter",
123:       "com.google.gson.internal.bind.TreeTypeAdapter",
124:       "com.google.gson.internal.LinkedTreeMap$Node",
125:       "com.google.gson.stream.JsonWriter",
126:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
127:       "com.google.gson.internal.$Gson$Preconditions",
128:       "com.google.gson.internal.Streams",
129:       "com.google.gson.internal.bind.TypeAdapters$12",
130:       "com.google.gson.internal.bind.TypeAdapters$13",
131:       "com.google.gson.internal.bind.TypeAdapters$14",
132:       "com.google.gson.internal.bind.TypeAdapters$15",
133:       "com.google.gson.internal.bind.TypeAdapters$10",
134:       "com.google.gson.internal.Primitives",
135:       "com.google.gson.internal.bind.TypeAdapters$11",
136:       "com.google.gson.stream.MalformedJsonException",
137:       "com.google.gson.internal.bind.ArrayTypeAdapter",
138:       "com.google.gson.internal.ConstructorConstructor$3",
139:       "com.google.gson.stream.JsonToken",
140:       "com.google.gson.internal.bind.TypeAdapters$16",
141:       "com.google.gson.internal.ObjectConstructor",
142:       "com.google.gson.internal.bind.TypeAdapters$17",
143:       "com.google.gson.internal.bind.TypeAdapters$18",
144:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
145:       "com.google.gson.JsonNull",
146:       "com.google.gson.internal.bind.TypeAdapters$19",
147:       "com.google.gson.internal.bind.DateTypeAdapter$1",
148:       "com.google.gson.internal.ConstructorConstructor$8",
149:       "com.google.gson.LongSerializationPolicy$1",
150:       "com.google.gson.LongSerializationPolicy$2",
151:       "com.google.gson.JsonObject",
152:       "com.google.gson.internal.bind.JsonTreeReader$1",
153:       "com.google.gson.TypeAdapter$1",
154:       "com.google.gson.internal.UnsafeAllocator$3",
155:       "com.google.gson.internal.UnsafeAllocator$4",
156:       "com.google.gson.internal.UnsafeAllocator$1",
157:       "com.google.gson.internal.UnsafeAllocator$2",
158:       "com.google.gson.Gson$2",
159:       "com.google.gson.Gson$3",
160:       "com.google.gson.internal.bind.ObjectTypeAdapter",
161:       "com.google.gson.Gson$4",
162:       "com.google.gson.Gson$5",
163:       "com.google.gson.internal.bind.DateTypeAdapter",
164:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
165:       "com.google.gson.Gson$1",
166:       "com.google.gson.internal.bind.TypeAdapters$26$1",
167:       "com.google.gson.Gson",
168:       "com.google.gson.internal.LinkedTreeMap$1",
169:       "com.google.gson.internal.reflect.ReflectionAccessor",
170:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
171:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
172:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
173:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
174:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
175:       "com.google.gson.annotations.SerializedName",
176:       "com.google.gson.internal.Excluder$1",
177:       "com.google.gson.internal.bind.TypeAdapters$2",
178:       "com.google.gson.internal.bind.JsonTreeReader",
179:       "com.google.gson.internal.bind.TypeAdapters$1",
180:       "com.google.gson.internal.bind.JsonTreeWriter$1",
181:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
182:       "com.google.gson.JsonIOException",
183:       "com.google.gson.internal.bind.TypeAdapters$8",
184:       "com.google.gson.internal.bind.TypeAdapters$7",
185:       "com.google.gson.internal.bind.TypeAdapters",
186:       "com.google.gson.internal.bind.TypeAdapters$9",
187:       "com.google.gson.internal.bind.TypeAdapters$4",
188:       "com.google.gson.internal.LinkedTreeMap",
189:       "com.google.gson.internal.bind.TypeAdapters$3",
190:       "com.google.gson.internal.bind.TypeAdapters$6",
191:       "com.google.gson.internal.LazilyParsedNumber",
192:       "com.google.gson.internal.bind.TypeAdapters$5",
193:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
194:       "com.google.gson.JsonParseException",
195:       "com.google.gson.internal.ConstructorConstructor",
196:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
197:       "com.google.gson.JsonElement",
198:       "com.google.gson.FieldNamingPolicy",
199:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
200:       "com.google.gson.DefaultDateTypeAdapter",
201:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
202:       "com.google.gson.annotations.JsonAdapter",
203:       "com.google.gson.JsonPrimitive",
204:       "com.google.gson.internal.UnsafeAllocator",
205:       "com.google.gson.internal.Streams$AppendableWriter",
206:       "com.google.gson.internal.ConstructorConstructor$14",
207:       "com.google.gson.JsonSyntaxException",
208:       "com.google.gson.FieldNamingPolicy$4",
209:       "com.google.gson.FieldNamingPolicy$3",
210:       "com.google.gson.annotations.Since",
211:       "com.google.gson.FieldNamingPolicy$6",
212:       "com.google.gson.FieldNamingPolicy$5",
213:       "com.google.gson.internal.JsonReaderInternalAccess",
214:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
215:       "com.google.gson.FieldNamingPolicy$2",
216:       "com.google.gson.FieldNamingPolicy$1"
217:     );
218:   } 
219: 
220:   private static void resetClasses() {
221:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Gson_25_tmp__ESTest_scaffolding.class.getClassLoader()); 
222: 
223:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
224:       "com.google.gson.reflect.TypeToken",
225:       "com.google.gson.internal.$Gson$Preconditions",
226:       "com.google.gson.internal.$Gson$Types",
227:       "com.google.gson.Gson",
228:       "com.google.gson.TypeAdapter",
229:       "com.google.gson.Gson$5",
230:       "com.google.gson.Gson$3",
231:       "com.google.gson.Gson$4",
232:       "com.google.gson.Gson$1",
233:       "com.google.gson.Gson$2",
234:       "com.google.gson.Gson$FutureTypeAdapter",
235:       "com.google.gson.internal.Excluder",
236:       "com.google.gson.FieldNamingPolicy",
237:       "com.google.gson.LongSerializationPolicy",
238:       "com.google.gson.internal.bind.TypeAdapters$1",
239:       "com.google.gson.TypeAdapter$1",
240:       "com.google.gson.internal.bind.TypeAdapters$32",
241:       "com.google.gson.internal.bind.TypeAdapters$2",
242:       "com.google.gson.internal.bind.TypeAdapters$3",
243:       "com.google.gson.internal.bind.TypeAdapters$4",
244:       "com.google.gson.internal.bind.TypeAdapters$33",
245:       "com.google.gson.internal.bind.TypeAdapters$5",
246:       "com.google.gson.internal.bind.TypeAdapters$6",
247:       "com.google.gson.internal.bind.TypeAdapters$7",
248:       "com.google.gson.internal.bind.TypeAdapters$8",
249:       "com.google.gson.internal.bind.TypeAdapters$9",
250:       "com.google.gson.internal.bind.TypeAdapters$10",
251:       "com.google.gson.internal.bind.TypeAdapters$11",
252:       "com.google.gson.internal.bind.TypeAdapters$12",
253:       "com.google.gson.internal.bind.TypeAdapters$13",
254:       "com.google.gson.internal.bind.TypeAdapters$14",
255:       "com.google.gson.internal.bind.TypeAdapters$15",
256:       "com.google.gson.internal.bind.TypeAdapters$16",
257:       "com.google.gson.internal.bind.TypeAdapters$17",
258:       "com.google.gson.internal.bind.TypeAdapters$18",
259:       "com.google.gson.internal.bind.TypeAdapters$19",
260:       "com.google.gson.internal.bind.TypeAdapters$20",
261:       "com.google.gson.internal.bind.TypeAdapters$21",
262:       "com.google.gson.internal.bind.TypeAdapters$22",
263:       "com.google.gson.internal.bind.TypeAdapters$23",
264:       "com.google.gson.internal.bind.TypeAdapters$35",
265:       "com.google.gson.internal.bind.TypeAdapters$24",
266:       "com.google.gson.internal.bind.TypeAdapters$25",
267:       "com.google.gson.internal.bind.TypeAdapters$26",
268:       "com.google.gson.internal.bind.TypeAdapters$27",
269:       "com.google.gson.internal.bind.TypeAdapters$34",
270:       "com.google.gson.internal.bind.TypeAdapters$28",
271:       "com.google.gson.internal.bind.TypeAdapters$29",
272:       "com.google.gson.internal.bind.TypeAdapters$30",
273:       "com.google.gson.internal.bind.TypeAdapters",
274:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
275:       "com.google.gson.internal.bind.ObjectTypeAdapter",
276:       "com.google.gson.internal.bind.DateTypeAdapter$1",
277:       "com.google.gson.internal.bind.DateTypeAdapter",
278:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
279:       "com.google.gson.internal.bind.TimeTypeAdapter",
280:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
281:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
282:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
283:       "com.google.gson.internal.bind.ArrayTypeAdapter",
284:       "com.google.gson.JsonElement",
285:       "com.google.gson.JsonNull",
286:       "com.google.gson.internal.Primitives",
287:       "com.google.gson.stream.JsonToken",
288:       "com.google.gson.internal.ConstructorConstructor",
289:       "com.google.gson.internal.JavaVersion",
290:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
291:       "com.google.gson.internal.reflect.ReflectionAccessor",
292:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
293:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
294:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
295:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
296:       "com.google.gson.internal.JsonReaderInternalAccess",
297:       "com.google.gson.stream.JsonReader$1",
298:       "com.google.gson.stream.JsonReader",
299:       "com.google.gson.internal.Streams",
300:       "com.google.gson.stream.JsonWriter",
301:       "com.google.gson.internal.ConstructorConstructor$14",
302:       "com.google.gson.internal.UnsafeAllocator",
303:       "com.google.gson.internal.UnsafeAllocator$1",
304:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
305:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
306:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
307:       "com.google.gson.JsonPrimitive",
308:       "com.google.gson.JsonObject",
309:       "com.google.gson.internal.LinkedTreeMap$1",
310:       "com.google.gson.internal.LinkedTreeMap",
311:       "com.google.gson.internal.LinkedTreeMap$Node",
312:       "com.google.gson.GsonBuilder",
313:       "com.google.gson.internal.bind.JsonTreeWriter$1",
314:       "com.google.gson.internal.bind.JsonTreeWriter",
315:       "com.google.gson.internal.ConstructorConstructor$3",
316:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
317:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
318:       "com.google.gson.internal.ConstructorConstructor$8",
319:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
320:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
321:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
322:       "com.google.gson.internal.ConstructorConstructor$12",
323:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
324:       "com.google.gson.JsonArray",
325:       "com.google.gson.internal.LinkedTreeMap$EntrySet",
326:       "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator",
327:       "com.google.gson.internal.LinkedTreeMap$EntrySet$1",
328:       "com.google.gson.internal.Streams$AppendableWriter",
329:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
330:       "com.google.gson.JsonParseException",
331:       "com.google.gson.JsonIOException",
332:       "com.google.gson.DefaultDateTypeAdapter",
333:       "com.google.gson.JsonSyntaxException",
334:       "com.google.gson.internal.bind.JsonTreeReader$1",
335:       "com.google.gson.internal.bind.JsonTreeReader",
336:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
337:       "com.google.gson.stream.MalformedJsonException",
338:       "com.google.gson.internal.Excluder$1",
339:       "com.google.gson.internal.bind.TypeAdapters$35$1",
340:       "com.google.gson.internal.bind.ObjectTypeAdapter$2"
341:     );
342:   }
343: }

[MASTER] 15:50:13.076 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Gson gson0 = new Gson();
Class<String> class0 = String.class;
gson0.fromJson("7B>G", (Class<Gson.FutureTypeAdapter<HashMap>>) class0);
assertTrue(gson0.htmlSafe());
assertFalse(gson0.serializeNulls());


[MASTER] 15:50:15.944 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_73_1589982615921/com/google/gson/Gson_73_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_73_1589982615921/com/google/gson/Gson_73_tmp__ESTest_scaffolding.java]]
[MASTER] 15:50:15.944 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:50:15.944 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:50:15.944 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.util.concurrent.atomic.AtomicLongArray> cannot be converted to java.lang.Class<com.google.gson.Gson.FutureTypeAdapter<java.util.HashMap>>: 26
[MASTER] 15:50:15.944 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_73_1589982615921/com/google/gson/Gson_73_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed May 20 13:50:15 GMT 2020
4:  */
5: 
6: package com.google.gson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.gson.Gson;
12: import java.util.HashMap;
13: import java.util.concurrent.atomic.AtomicLongArray;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class Gson_73_tmp__ESTest extends Gson_73_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Gson gson0 = new Gson();
24:       Class<AtomicLongArray> class0 = AtomicLongArray.class;
25:       try { 
26:         gson0.fromJson("in == null", (Class<Gson.FutureTypeAdapter<HashMap>>) class0);
27:         fail("Expecting exception: RuntimeException");
28:       
29:       } catch(RuntimeException e) {
30:          //
31:          // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
32:          //
33:          verifyException("com.google.gson.Gson", e);
34:       }
35:   }
36: }
RegularFileObject[/tmp/EvoSuite_73_1589982615921/com/google/gson/Gson_73_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed May 20 13:50:15 GMT 2020
5:  */
6: 
7: package com.google.gson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Gson_73_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.gson.Gson"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/gson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Gson_73_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
82:       "com.google.gson.reflect.TypeToken",
83:       "com.google.gson.internal.bind.TypeAdapters$23",
84:       "com.google.gson.internal.bind.TypeAdapters$24",
85:       "com.google.gson.internal.bind.TypeAdapters$25",
86:       "com.google.gson.internal.bind.TypeAdapters$26",
87:       "com.google.gson.internal.bind.TypeAdapters$20",
88:       "com.google.gson.TypeAdapter",
89:       "com.google.gson.internal.bind.JsonTreeWriter",
90:       "com.google.gson.GsonBuilder",
91:       "com.google.gson.internal.bind.TypeAdapters$21",
92:       "com.google.gson.internal.bind.TypeAdapters$22",
93:       "com.google.gson.internal.bind.TypeAdapters$27",
94:       "com.google.gson.FieldNamingStrategy",
95:       "com.google.gson.internal.bind.TypeAdapters$28",
96:       "com.google.gson.internal.bind.TypeAdapters$29",
97:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
98:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
99:       "com.google.gson.ExclusionStrategy",
100:       "com.google.gson.internal.bind.TimeTypeAdapter",
101:       "com.google.gson.internal.bind.TypeAdapters$34",
102:       "com.google.gson.internal.bind.TypeAdapters$35",
103:       "com.google.gson.internal.JavaVersion",
104:       "com.google.gson.internal.bind.TypeAdapters$30",
105:       "com.google.gson.internal.bind.TypeAdapters$32",
106:       "com.google.gson.internal.bind.TypeAdapters$33",
107:       "com.google.gson.JsonArray",
108:       "com.google.gson.LongSerializationPolicy",
109:       "com.google.gson.internal.bind.TypeAdapters$35$1",
110:       "com.google.gson.internal.Excluder",
111:       "com.google.gson.internal.LinkedTreeMap$EntrySet$1",
112:       "com.google.gson.annotations.Until",
113:       "com.google.gson.TypeAdapterFactory",
114:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
115:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
116:       "com.google.gson.stream.JsonReader$1",
117:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
118:       "com.google.gson.internal.$Gson$Types",
119:       "com.google.gson.stream.JsonReader",
120:       "com.google.gson.InstanceCreator",
121:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
122:       "com.google.gson.internal.reflect.UnsafeReflectionAccessor",
123:       "com.google.gson.Gson$FutureTypeAdapter",
124:       "com.google.gson.internal.bind.TreeTypeAdapter",
125:       "com.google.gson.internal.LinkedTreeMap$Node",
126:       "com.google.gson.stream.JsonWriter",
127:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
128:       "com.google.gson.internal.$Gson$Preconditions",
129:       "com.google.gson.internal.Streams",
130:       "com.google.gson.internal.bind.TypeAdapters$12",
131:       "com.google.gson.internal.bind.TypeAdapters$13",
132:       "com.google.gson.internal.bind.TypeAdapters$14",
133:       "com.google.gson.internal.bind.TypeAdapters$15",
134:       "com.google.gson.internal.bind.TypeAdapters$10",
135:       "com.google.gson.internal.Primitives",
136:       "com.google.gson.internal.bind.TypeAdapters$11",
137:       "com.google.gson.stream.MalformedJsonException",
138:       "com.google.gson.internal.bind.ArrayTypeAdapter",
139:       "com.google.gson.internal.ConstructorConstructor$3",
140:       "com.google.gson.stream.JsonToken",
141:       "com.google.gson.internal.bind.TypeAdapters$16",
142:       "com.google.gson.internal.ObjectConstructor",
143:       "com.google.gson.internal.bind.TypeAdapters$17",
144:       "com.google.gson.internal.bind.TypeAdapters$18",
145:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
146:       "com.google.gson.JsonNull",
147:       "com.google.gson.internal.bind.TypeAdapters$19",
148:       "com.google.gson.internal.bind.DateTypeAdapter$1",
149:       "com.google.gson.internal.ConstructorConstructor$8",
150:       "com.google.gson.LongSerializationPolicy$1",
151:       "com.google.gson.LongSerializationPolicy$2",
152:       "com.google.gson.JsonObject",
153:       "com.google.gson.internal.bind.JsonTreeReader$1",
154:       "com.google.gson.TypeAdapter$1",
155:       "com.google.gson.internal.UnsafeAllocator$3",
156:       "com.google.gson.internal.UnsafeAllocator$4",
157:       "com.google.gson.internal.UnsafeAllocator$1",
158:       "com.google.gson.internal.UnsafeAllocator$2",
159:       "com.google.gson.Gson$2",
160:       "com.google.gson.Gson$3",
161:       "com.google.gson.internal.bind.ObjectTypeAdapter",
162:       "com.google.gson.Gson$4",
163:       "com.google.gson.Gson$5",
164:       "com.google.gson.internal.bind.DateTypeAdapter",
165:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
166:       "com.google.gson.Gson$1",
167:       "com.google.gson.internal.bind.TypeAdapters$26$1",
168:       "com.google.gson.Gson",
169:       "com.google.gson.internal.LinkedTreeMap$1",
170:       "com.google.gson.internal.reflect.ReflectionAccessor",
171:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
172:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
173:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
174:       "com.google.gson.internal.LinkedTreeMap$EntrySet",
175:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
176:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
177:       "com.google.gson.annotations.SerializedName",
178:       "com.google.gson.internal.Excluder$1",
179:       "com.google.gson.internal.bind.TypeAdapters$2",
180:       "com.google.gson.internal.bind.JsonTreeReader",
181:       "com.google.gson.internal.bind.TypeAdapters$1",
182:       "com.google.gson.internal.bind.JsonTreeWriter$1",
183:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
184:       "com.google.gson.JsonIOException",
185:       "com.google.gson.internal.bind.TypeAdapters$8",
186:       "com.google.gson.internal.bind.TypeAdapters$7",
187:       "com.google.gson.internal.bind.TypeAdapters",
188:       "com.google.gson.internal.bind.TypeAdapters$9",
189:       "com.google.gson.internal.bind.TypeAdapters$4",
190:       "com.google.gson.internal.LinkedTreeMap",
191:       "com.google.gson.internal.bind.TypeAdapters$3",
192:       "com.google.gson.internal.bind.TypeAdapters$6",
193:       "com.google.gson.internal.LazilyParsedNumber",
194:       "com.google.gson.internal.bind.TypeAdapters$5",
195:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
196:       "com.google.gson.JsonParseException",
197:       "com.google.gson.internal.ConstructorConstructor",
198:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
199:       "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator",
200:       "com.google.gson.JsonElement",
201:       "com.google.gson.FieldNamingPolicy",
202:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
203:       "com.google.gson.DefaultDateTypeAdapter",
204:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
205:       "com.google.gson.annotations.JsonAdapter",
206:       "com.google.gson.JsonPrimitive",
207:       "com.google.gson.internal.UnsafeAllocator",
208:       "com.google.gson.internal.Streams$AppendableWriter",
209:       "com.google.gson.internal.ConstructorConstructor$14",
210:       "com.google.gson.JsonSyntaxException",
211:       "com.google.gson.FieldNamingPolicy$4",
212:       "com.google.gson.FieldNamingPolicy$3",
213:       "com.google.gson.annotations.Since",
214:       "com.google.gson.FieldNamingPolicy$6",
215:       "com.google.gson.FieldNamingPolicy$5",
216:       "com.google.gson.internal.JsonReaderInternalAccess",
217:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
218:       "com.google.gson.FieldNamingPolicy$2",
219:       "com.google.gson.FieldNamingPolicy$1"
220:     );
221:   } 
222: 
223:   private static void resetClasses() {
224:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Gson_73_tmp__ESTest_scaffolding.class.getClassLoader()); 
225: 
226:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
227:       "com.google.gson.reflect.TypeToken",
228:       "com.google.gson.internal.$Gson$Preconditions",
229:       "com.google.gson.internal.$Gson$Types",
230:       "com.google.gson.Gson",
231:       "com.google.gson.TypeAdapter",
232:       "com.google.gson.Gson$5",
233:       "com.google.gson.Gson$3",
234:       "com.google.gson.Gson$4",
235:       "com.google.gson.Gson$1",
236:       "com.google.gson.Gson$2",
237:       "com.google.gson.Gson$FutureTypeAdapter",
238:       "com.google.gson.internal.Excluder",
239:       "com.google.gson.FieldNamingPolicy",
240:       "com.google.gson.LongSerializationPolicy",
241:       "com.google.gson.internal.bind.TypeAdapters$1",
242:       "com.google.gson.TypeAdapter$1",
243:       "com.google.gson.internal.bind.TypeAdapters$32",
244:       "com.google.gson.internal.bind.TypeAdapters$2",
245:       "com.google.gson.internal.bind.TypeAdapters$3",
246:       "com.google.gson.internal.bind.TypeAdapters$4",
247:       "com.google.gson.internal.bind.TypeAdapters$33",
248:       "com.google.gson.internal.bind.TypeAdapters$5",
249:       "com.google.gson.internal.bind.TypeAdapters$6",
250:       "com.google.gson.internal.bind.TypeAdapters$7",
251:       "com.google.gson.internal.bind.TypeAdapters$8",
252:       "com.google.gson.internal.bind.TypeAdapters$9",
253:       "com.google.gson.internal.bind.TypeAdapters$10",
254:       "com.google.gson.internal.bind.TypeAdapters$11",
255:       "com.google.gson.internal.bind.TypeAdapters$12",
256:       "com.google.gson.internal.bind.TypeAdapters$13",
257:       "com.google.gson.internal.bind.TypeAdapters$14",
258:       "com.google.gson.internal.bind.TypeAdapters$15",
259:       "com.google.gson.internal.bind.TypeAdapters$16",
260:       "com.google.gson.internal.bind.TypeAdapters$17",
261:       "com.google.gson.internal.bind.TypeAdapters$18",
262:       "com.google.gson.internal.bind.TypeAdapters$19",
263:       "com.google.gson.internal.bind.TypeAdapters$20",
264:       "com.google.gson.internal.bind.TypeAdapters$21",
265:       "com.google.gson.internal.bind.TypeAdapters$22",
266:       "com.google.gson.internal.bind.TypeAdapters$23",
267:       "com.google.gson.internal.bind.TypeAdapters$35",
268:       "com.google.gson.internal.bind.TypeAdapters$24",
269:       "com.google.gson.internal.bind.TypeAdapters$25",
270:       "com.google.gson.internal.bind.TypeAdapters$26",
271:       "com.google.gson.internal.bind.TypeAdapters$27",
272:       "com.google.gson.internal.bind.TypeAdapters$34",
273:       "com.google.gson.internal.bind.TypeAdapters$28",
274:       "com.google.gson.internal.bind.TypeAdapters$29",
275:       "com.google.gson.internal.bind.TypeAdapters$30",
276:       "com.google.gson.internal.bind.TypeAdapters",
277:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
278:       "com.google.gson.internal.bind.ObjectTypeAdapter",
279:       "com.google.gson.internal.bind.DateTypeAdapter$1",
280:       "com.google.gson.internal.bind.DateTypeAdapter",
281:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
282:       "com.google.gson.internal.bind.TimeTypeAdapter",
283:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
284:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
285:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
286:       "com.google.gson.internal.bind.ArrayTypeAdapter",
287:       "com.google.gson.JsonElement",
288:       "com.google.gson.JsonNull",
289:       "com.google.gson.internal.Primitives",
290:       "com.google.gson.stream.JsonToken",
291:       "com.google.gson.internal.ConstructorConstructor",
292:       "com.google.gson.internal.JavaVersion",
293:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
294:       "com.google.gson.internal.reflect.ReflectionAccessor",
295:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
296:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
297:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
298:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
299:       "com.google.gson.internal.JsonReaderInternalAccess",
300:       "com.google.gson.stream.JsonReader$1",
301:       "com.google.gson.stream.JsonReader",
302:       "com.google.gson.internal.Streams",
303:       "com.google.gson.stream.JsonWriter",
304:       "com.google.gson.internal.ConstructorConstructor$14",
305:       "com.google.gson.internal.UnsafeAllocator",
306:       "com.google.gson.internal.UnsafeAllocator$1",
307:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
308:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
309:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
310:       "com.google.gson.JsonPrimitive",
311:       "com.google.gson.JsonObject",
312:       "com.google.gson.internal.LinkedTreeMap$1",
313:       "com.google.gson.internal.LinkedTreeMap",
314:       "com.google.gson.internal.LinkedTreeMap$Node",
315:       "com.google.gson.GsonBuilder",
316:       "com.google.gson.internal.bind.JsonTreeWriter$1",
317:       "com.google.gson.internal.bind.JsonTreeWriter",
318:       "com.google.gson.internal.ConstructorConstructor$3",
319:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
320:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
321:       "com.google.gson.internal.ConstructorConstructor$8",
322:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
323:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
324:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
325:       "com.google.gson.internal.ConstructorConstructor$12",
326:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
327:       "com.google.gson.JsonArray",
328:       "com.google.gson.internal.LinkedTreeMap$EntrySet",
329:       "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator",
330:       "com.google.gson.internal.LinkedTreeMap$EntrySet$1",
331:       "com.google.gson.internal.Streams$AppendableWriter",
332:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
333:       "com.google.gson.JsonParseException",
334:       "com.google.gson.JsonIOException",
335:       "com.google.gson.DefaultDateTypeAdapter",
336:       "com.google.gson.JsonSyntaxException",
337:       "com.google.gson.internal.bind.JsonTreeReader$1",
338:       "com.google.gson.internal.bind.JsonTreeReader",
339:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
340:       "com.google.gson.stream.MalformedJsonException",
341:       "com.google.gson.internal.Excluder$1",
342:       "com.google.gson.internal.bind.TypeAdapters$35$1",
343:       "com.google.gson.internal.bind.ObjectTypeAdapter$2"
344:     );
345:   }
346: }

[MASTER] 15:50:15.945 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Gson gson0 = new Gson();
Class<AtomicLongArray> class0 = AtomicLongArray.class;
gson0.fromJson("in == null", (Class<Gson.FutureTypeAdapter<HashMap>>) class0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'Gson_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s8/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.stream.JsonWriter
* Starting Client-0
* Connecting to master process on port 17365
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.stream.JsonWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1024
* Using seed 8
* Starting evolution
* Initial Number of Goals in DynaMOSA = 410 / 1024
* Search finished after 62s and 488 generations, 154432 statements, best individual has fitness: 131.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 179
* Number of covered goals: 172
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 117
* Number of covered goals: 105
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 468
* Number of covered goals: 409
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 85%
* Total number of goals: 97
* Number of covered goals: 82
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 117
* Number of covered goals: 97
* Generated 75 tests with total length 316
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 54%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s8/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.internal.bind.JsonTreeReader
* Starting Client-0
* Connecting to master process on port 17365
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.bind.JsonTreeReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 830
* Using seed 8
* Starting evolution
* Initial Number of Goals in DynaMOSA = 253 / 830
[MASTER] 15:54:10.595 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 15:54:10.597 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Search finished after 61s and 636 generations, 139883 statements, best individual has fitness: 174.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 162
* Number of covered goals: 150
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 103
* Number of covered goals: 92
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 76%
* Total number of goals: 397
* Number of covered goals: 303
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 74%
* Total number of goals: 27
* Number of covered goals: 20
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 103
* Number of covered goals: 92
* Generated 84 tests with total length 327
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 38%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonTreeReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s8/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.internal.LinkedHashTreeMap
* Starting Client-0
* Connecting to master process on port 17361
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.LinkedHashTreeMap
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1627
* Using seed 8
* Starting evolution
* Initial Number of Goals in DynaMOSA = 578 / 1627
[MASTER] 15:57:05.837 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 15:57:05.837 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 15:57:17.250 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 62s and 8 generations, 6086 statements, best individual has fitness: 919.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 54%
* Total number of goals: 387
* Number of covered goals: 210
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 40%
* Total number of goals: 262
* Number of covered goals: 105
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 48%
* Total number of goals: 588
* Number of covered goals: 282
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 34
* Number of covered goals: 16
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 47
* Number of covered goals: 44
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 94%
* Total number of goals: 47
* Number of covered goals: 44
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 40%
* Total number of goals: 262
* Number of covered goals: 105
* Generated 53 tests with total length 185
* Resulting test suite's coverage: 44% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 15:58:20.795 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_13_1589983100765/com/google/gson/internal/LinkedHashTreeMap_13_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_13_1589983100765/com/google/gson/internal/LinkedHashTreeMap_13_tmp__ESTest_scaffolding.java]]
[MASTER] 15:58:20.795 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:58:20.795 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:58:20.798 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Object cannot be converted to java.lang.String: 25
[MASTER] 15:58:20.798 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 15:58:20.799 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_13_1589983100765/com/google/gson/internal/LinkedHashTreeMap_13_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed May 20 13:58:20 GMT 2020
4:  */
5: 
6: package com.google.gson.internal;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.gson.internal.LinkedHashTreeMap;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class LinkedHashTreeMap_13_tmp__ESTest extends LinkedHashTreeMap_13_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       LinkedHashTreeMap<String, Map.Entry<Object, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Map.Entry<Object, Object>>();
23:       // Undeclared exception!
24:       try { 
25:         linkedHashTreeMap0.putIfAbsent((Object) null, (Object) null);
26:         fail("Expecting exception: NullPointerException");
27:       
28:       } catch(NullPointerException e) {
29:          //
30:          // key == null
31:          //
32:          verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
33:       }
34:   }
35: }
RegularFileObject[/tmp/EvoSuite_13_1589983100765/com/google/gson/internal/LinkedHashTreeMap_13_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed May 20 13:58:20 GMT 2020
5:  */
6: 
7: package com.google.gson.internal;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class LinkedHashTreeMap_13_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.gson.internal.LinkedHashTreeMap"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/gson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(LinkedHashTreeMap_13_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.gson.internal.LinkedHashTreeMap",
82:       "com.google.gson.internal.LinkedHashTreeMap$AvlIterator",
83:       "com.google.gson.internal.LinkedHashTreeMap$1",
84:       "com.google.gson.internal.LinkedHashTreeMap$Node",
85:       "com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator",
86:       "com.google.gson.internal.LinkedHashTreeMap$EntrySet$1",
87:       "com.google.gson.internal.LinkedHashTreeMap$KeySet$1",
88:       "com.google.gson.internal.LinkedHashTreeMap$EntrySet",
89:       "com.google.gson.internal.LinkedHashTreeMap$KeySet",
90:       "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder"
91:     );
92:   } 
93: 
94:   private static void resetClasses() {
95:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(LinkedHashTreeMap_13_tmp__ESTest_scaffolding.class.getClassLoader()); 
96: 
97:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
98:       "com.google.gson.internal.LinkedHashTreeMap$1",
99:       "com.google.gson.internal.LinkedHashTreeMap",
100:       "com.google.gson.internal.LinkedHashTreeMap$Node",
101:       "com.google.gson.internal.LinkedHashTreeMap$AvlIterator",
102:       "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder",
103:       "com.google.gson.internal.LinkedHashTreeMap$EntrySet",
104:       "com.google.gson.internal.LinkedHashTreeMap$KeySet",
105:       "com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator",
106:       "com.google.gson.internal.LinkedHashTreeMap$EntrySet$1",
107:       "com.google.gson.internal.LinkedHashTreeMap$KeySet$1"
108:     );
109:   }
110: }

[MASTER] 15:58:20.799 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
LinkedHashTreeMap<String, Map.Entry<Object, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Map.Entry<Object, Object>>();
linkedHashTreeMap0.putIfAbsent((Object) null, (Object) null);

* Writing tests to file
* Writing JUnit test case 'LinkedHashTreeMap_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s8/gson/evosuite-tests
* Done!

* Computation finished
