* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONReaderScanner
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSON
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 12808
* Connecting to master process on port 12810
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONReaderScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1110
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 338 / 1110
[MASTER] 15:30:39.906 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 15:30:39.906 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
[MASTER] 15:30:40.070 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 15:30:40.071 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSON
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2080
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 747 / 2080
[MASTER] 15:30:41.065 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 15:30:41.067 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 15:30:41.084 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 15:30:41.084 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 15:30:41.085 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 15:30:48.297 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 15:30:55.216 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 15:30:56.296 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 15:30:56.979 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 15:31:07.311 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
* Search finished after 64s and 60 generations, 35344 statements, best individual has fitness: 775.0
[MASTER] 15:31:44.361 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_1_JSONArray.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsListener.lambda$new$0(StatisticsListener.java:69) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_1_JSONArray.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	... 1 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_1_JSONArray.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_1_JSONArray.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
* Search finished after 65s and 10 generations, 7175 statements, best individual has fitness: 292.0
* Minimizing test suite
[MASTER] 15:31:45.049 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_1_JSONArray.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.executedAndThenSendIndividualToMaster(StatisticsSender.java:98) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTests(TestSuiteGenerator.java:687) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:245) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_1_JSONArray.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	... 3 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_1_JSONArray.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/serializer/ASMSerializer_1_JSONArray.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 79%
* Total number of goals: 156
* Number of covered goals: 123
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 66%
* Total number of goals: 104
* Number of covered goals: 69
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 31
* Number of covered goals: 31
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 80%
* Total number of goals: 662
* Number of covered goals: 529
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 55%
* Total number of goals: 40
* Number of covered goals: 22
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 95%
* Total number of goals: 22
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 65%
* Total number of goals: 104
* Number of covered goals: 68
* Generated 61 tests with total length 189
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 76%
* Total number of goals: 435
* Number of covered goals: 330
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 72%
* Total number of goals: 283
* Number of covered goals: 204
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 99%
* Total number of goals: 87
* Number of covered goals: 86
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 67%
* Total number of goals: 716
* Number of covered goals: 478
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 28%
* Total number of goals: 197
* Number of covered goals: 55
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 84%
* Total number of goals: 83
* Number of covered goals: 70
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 83
* Number of covered goals: 56
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 58%
* Total number of goals: 283
* Number of covered goals: 164
* Generated 172 tests with total length 730
* Resulting test suite's coverage: 65% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
[MASTER] 15:32:18.729 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_110_1589981538709/com/alibaba/fastjson/JSON_110_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_110_1589981538709/com/alibaba/fastjson/JSON_110_tmp__ESTest_scaffolding.java]]
[MASTER] 15:32:18.729 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 15:32:18.729 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 15:32:18.732 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<com.alibaba.fastjson.JSONPath.Operator> cannot be converted to java.lang.Class<java.util.AbstractMap.SimpleImmutableEntry<com.alibaba.fastjson.serializer.SimplePropertyPreFilter,java.lang.Enum>>: 29
[MASTER] 15:32:18.733 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_110_1589981538709/com/alibaba/fastjson/JSON_110_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed May 20 13:32:18 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.alibaba.fastjson.JSON;
12: import com.alibaba.fastjson.JSONPath;
13: import com.alibaba.fastjson.parser.Feature;
14: import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
15: import java.util.AbstractMap;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class JSON_110_tmp__ESTest extends JSON_110_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Feature[] featureArray0 = new Feature[15];
26:       Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
27:       // Undeclared exception!
28:       try { 
29:         JSON.parseObject("fastjson.parser.features.ErrorOnEnumNotMatch", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, featureArray0);
30:         fail("Expecting exception: NullPointerException");
31:       
32:       } catch(NullPointerException e) {
33:          //
34:          // no message in exception (getMessage() returned null)
35:          //
36:          verifyException("com.alibaba.fastjson.JSON", e);
37:       }
38:   }
39: }
RegularFileObject[/tmp/EvoSuite_110_1589981538709/com/alibaba/fastjson/JSON_110_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed May 20 13:32:18 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSON_110_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSON"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSON_110_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.util.ASMUtils",
84:       "com.alibaba.fastjson.JSONPath",
85:       "com.alibaba.fastjson.parser.JSONScanner",
86:       "com.alibaba.fastjson.parser.JSONLexerBase",
87:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
88:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
89:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
90:       "com.alibaba.fastjson.serializer.JSONSerializable",
91:       "com.alibaba.fastjson.serializer.SerializeWriter",
92:       "com.alibaba.fastjson.serializer.ReferenceCodec",
93:       "com.alibaba.fastjson.JSONException",
94:       "com.alibaba.fastjson.asm.TypeCollector$1",
95:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
96:       "com.alibaba.fastjson.serializer.ToStringSerializer",
97:       "com.alibaba.fastjson.serializer.SerialContext",
98:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
99:       "com.alibaba.fastjson.JSONPath$FilterGroup",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.JSONValidator$Type",
104:       "com.alibaba.fastjson.serializer.MapSerializer",
105:       "com.alibaba.fastjson.asm.Item",
106:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
107:       "com.alibaba.fastjson.serializer.DateCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
111:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.JSONPath$Filter",
114:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
115:       "com.alibaba.fastjson.util.FieldInfo",
116:       "com.alibaba.fastjson.JSONValidator$UTF16Validator",
117:       "com.alibaba.fastjson.annotation.JSONField",
118:       "com.alibaba.fastjson.serializer.PropertyFilter",
119:       "com.alibaba.fastjson.parser.SymbolTable",
120:       "com.alibaba.fastjson.serializer.NameFilter",
121:       "com.alibaba.fastjson.serializer.ListSerializer",
122:       "com.alibaba.fastjson.JSONArray",
123:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
124:       "com.alibaba.fastjson.JSONAware",
125:       "com.alibaba.fastjson.serializer.LongCodec",
126:       "com.alibaba.fastjson.serializer.EnumSerializer",
127:       "com.alibaba.fastjson.util.ASMClassLoader",
128:       "com.alibaba.fastjson.PropertyNamingStrategy",
129:       "com.alibaba.fastjson.parser.JSONToken",
130:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
131:       "com.alibaba.fastjson.serializer.AppendableSerializer",
132:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
133:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
134:       "com.alibaba.fastjson.serializer.ContextValueFilter",
135:       "com.alibaba.fastjson.util.ServiceLoader",
136:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
137:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
138:       "com.alibaba.fastjson.JSONPath$FilterSegment",
139:       "com.alibaba.fastjson.parser.DefaultJSONParser",
140:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
141:       "com.alibaba.fastjson.JSONValidator$ReaderValidator",
142:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
143:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
144:       "com.alibaba.fastjson.serializer.BeanContext",
145:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
146:       "com.alibaba.fastjson.util.IdentityHashMap",
147:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
148:       "com.alibaba.fastjson.JSON",
149:       "com.alibaba.fastjson.serializer.StringCodec",
150:       "com.alibaba.fastjson.serializer.SerializeFilterable",
151:       "com.alibaba.fastjson.JSONWriter",
152:       "com.alibaba.fastjson.asm.Opcodes",
153:       "com.alibaba.fastjson.JSONReader",
154:       "com.alibaba.fastjson.JSONStreamAware",
155:       "com.alibaba.fastjson.asm.MethodWriter",
156:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
157:       "com.alibaba.fastjson.serializer.SerializerFeature",
158:       "com.alibaba.fastjson.JSONPath$Operator",
159:       "com.alibaba.fastjson.TypeReference$1",
160:       "com.alibaba.fastjson.serializer.CalendarCodec",
161:       "com.alibaba.fastjson.util.IOUtils",
162:       "com.alibaba.fastjson.util.TypeUtils",
163:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
164:       "com.alibaba.fastjson.asm.ClassReader",
165:       "com.alibaba.fastjson.JSONPath$Segment",
166:       "com.alibaba.fastjson.spi.Module",
167:       "com.alibaba.fastjson.JSONValidator",
168:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
169:       "com.alibaba.fastjson.serializer.MiscCodec",
170:       "com.alibaba.fastjson.util.IOUtils$1",
171:       "com.alibaba.fastjson.serializer.IntegerCodec",
172:       "com.alibaba.fastjson.serializer.SerializeFilter",
173:       "com.alibaba.fastjson.JSONPObject",
174:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
175:       "com.alibaba.fastjson.serializer.PascalNameFilter",
176:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
177:       "com.alibaba.fastjson.serializer.BeforeFilter",
178:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
179:       "com.alibaba.fastjson.serializer.ArraySerializer",
180:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
181:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
182:       "com.alibaba.fastjson.JSONObject",
183:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
184:       "com.alibaba.fastjson.serializer.CharacterCodec",
185:       "com.alibaba.fastjson.asm.TypeCollector",
186:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
187:       "com.alibaba.fastjson.asm.ByteVector",
188:       "com.alibaba.fastjson.parser.JSONLexer",
189:       "com.alibaba.fastjson.util.ASMClassLoader$1",
190:       "com.alibaba.fastjson.asm.Label",
191:       "com.alibaba.fastjson.JSONValidator$UTF8Validator",
192:       "com.alibaba.fastjson.asm.FieldWriter",
193:       "com.alibaba.fastjson.serializer.JSONSerializer",
194:       "com.alibaba.fastjson.util.JavaBeanInfo",
195:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
196:       "com.alibaba.fastjson.serializer.SerializeConfig",
197:       "com.alibaba.fastjson.serializer.AtomicCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
199:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
200:       "com.alibaba.fastjson.asm.Type",
201:       "com.alibaba.fastjson.serializer.FieldSerializer",
202:       "com.alibaba.fastjson.serializer.FloatCodec",
203:       "com.alibaba.fastjson.parser.JSONReaderScanner",
204:       "com.alibaba.fastjson.serializer.ValueFilter",
205:       "com.alibaba.fastjson.JSONPathException",
206:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
207:       "com.alibaba.fastjson.serializer.Labels",
208:       "com.alibaba.fastjson.serializer.CollectionCodec",
209:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
210:       "com.alibaba.fastjson.serializer.CharArrayCodec",
211:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
212:       "com.alibaba.fastjson.asm.MethodVisitor",
213:       "com.alibaba.fastjson.annotation.JSONCreator",
214:       "com.alibaba.fastjson.asm.MethodCollector",
215:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
216:       "com.alibaba.fastjson.serializer.LabelFilter",
217:       "com.alibaba.fastjson.annotation.JSONType",
218:       "com.alibaba.fastjson.util.UTF8Decoder",
219:       "com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator",
220:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
221:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
222:       "com.alibaba.fastjson.serializer.DoubleSerializer",
223:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
224:       "com.alibaba.fastjson.serializer.BooleanCodec",
225:       "com.alibaba.fastjson.parser.Feature",
226:       "com.alibaba.fastjson.parser.ParserConfig",
227:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
228:       "com.alibaba.fastjson.parser.ParseContext"
229:     );
230:   } 
231: 
232:   private static void resetClasses() {
233:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSON_110_tmp__ESTest_scaffolding.class.getClassLoader()); 
234: 
235:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
236:       "com.alibaba.fastjson.parser.Feature",
237:       "com.alibaba.fastjson.serializer.SerializerFeature",
238:       "com.alibaba.fastjson.util.IOUtils$1",
239:       "com.alibaba.fastjson.util.IOUtils",
240:       "com.alibaba.fastjson.JSON",
241:       "com.alibaba.fastjson.util.IdentityHashMap",
242:       "com.alibaba.fastjson.util.ASMUtils",
243:       "com.alibaba.fastjson.parser.SymbolTable",
244:       "com.alibaba.fastjson.util.TypeUtils",
245:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
246:       "com.alibaba.fastjson.util.ASMClassLoader$1",
247:       "com.alibaba.fastjson.util.ASMClassLoader",
248:       "com.alibaba.fastjson.serializer.MiscCodec",
249:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
250:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
251:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
252:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
253:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
254:       "com.alibaba.fastjson.serializer.DateCodec",
255:       "com.alibaba.fastjson.serializer.CalendarCodec",
256:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
257:       "com.alibaba.fastjson.serializer.CollectionCodec",
258:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
259:       "com.alibaba.fastjson.serializer.StringCodec",
260:       "com.alibaba.fastjson.serializer.CharacterCodec",
261:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
262:       "com.alibaba.fastjson.serializer.IntegerCodec",
263:       "com.alibaba.fastjson.serializer.LongCodec",
264:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
265:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
266:       "com.alibaba.fastjson.serializer.FloatCodec",
267:       "com.alibaba.fastjson.serializer.BooleanCodec",
268:       "com.alibaba.fastjson.serializer.CharArrayCodec",
269:       "com.alibaba.fastjson.serializer.ReferenceCodec",
270:       "com.alibaba.fastjson.serializer.AtomicCodec",
271:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
272:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
273:       "com.alibaba.fastjson.parser.ParserConfig",
274:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
275:       "com.alibaba.fastjson.serializer.DoubleSerializer",
276:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
277:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
278:       "com.alibaba.fastjson.serializer.AppendableSerializer",
279:       "com.alibaba.fastjson.serializer.ToStringSerializer",
280:       "com.alibaba.fastjson.serializer.SerializeConfig",
281:       "com.alibaba.fastjson.JSONPObject",
282:       "com.alibaba.fastjson.serializer.SerializeFilterable",
283:       "com.alibaba.fastjson.serializer.JSONSerializer",
284:       "com.alibaba.fastjson.serializer.SerializeWriter",
285:       "com.alibaba.fastjson.util.ServiceLoader",
286:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
287:       "com.alibaba.fastjson.parser.DefaultJSONParser",
288:       "com.alibaba.fastjson.parser.JSONLexerBase",
289:       "com.alibaba.fastjson.parser.JSONScanner",
290:       "com.alibaba.fastjson.JSONObject",
291:       "com.alibaba.fastjson.JSONArray",
292:       "com.alibaba.fastjson.JSONException",
293:       "com.alibaba.fastjson.parser.JSONToken",
294:       "com.alibaba.fastjson.serializer.PascalNameFilter",
295:       "com.alibaba.fastjson.TypeReference$1",
296:       "com.alibaba.fastjson.TypeReference",
297:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
298:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
299:       "com.alibaba.fastjson.util.JavaBeanInfo",
300:       "com.alibaba.fastjson.asm.ClassWriter",
301:       "com.alibaba.fastjson.asm.ByteVector",
302:       "com.alibaba.fastjson.asm.Item",
303:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
304:       "com.alibaba.fastjson.asm.MethodWriter",
305:       "com.alibaba.fastjson.asm.Label",
306:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
307:       "com.alibaba.fastjson.util.FieldInfo",
308:       "com.alibaba.fastjson.parser.ParseContext",
309:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
310:       "com.alibaba.fastjson.asm.FieldWriter",
311:       "com.alibaba.fastjson.asm.Type",
312:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
313:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
314:       "com.alibaba.fastjson.serializer.FieldSerializer",
315:       "com.alibaba.fastjson.serializer.BeanContext",
316:       "com.alibaba.fastjson.serializer.SerialContext",
317:       "com.alibaba.fastjson.util.UTF8Decoder",
318:       "com.alibaba.fastjson.serializer.MapSerializer",
319:       "com.alibaba.fastjson.serializer.ListSerializer",
320:       "com.alibaba.fastjson.serializer.EnumSerializer",
321:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
322:       "com.alibaba.fastjson.PropertyNamingStrategy",
323:       "com.alibaba.fastjson.asm.ClassReader",
324:       "com.alibaba.fastjson.asm.TypeCollector$1",
325:       "com.alibaba.fastjson.asm.TypeCollector",
326:       "com.alibaba.fastjson.asm.MethodCollector",
327:       "com.alibaba.fastjson.parser.JSONReaderScanner",
328:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
329:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
330:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
331:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
332:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
333:       "com.alibaba.fastjson.serializer.ArraySerializer",
334:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer"
335:     );
336:   }
337: }

[MASTER] 15:32:18.734 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Feature[] featureArray0 = new Feature[15];
Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
JSON.parseObject("fastjson.parser.features.ErrorOnEnumNotMatch", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, featureArray0);

[MASTER] 15:32:20.236 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_148_1589981540219/com/alibaba/fastjson/JSON_148_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_148_1589981540219/com/alibaba/fastjson/JSON_148_tmp__ESTest_scaffolding.java]]
[MASTER] 15:32:20.236 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 15:32:20.236 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 15:32:20.236 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<java.lang.Object> cannot be converted to java.lang.Class<java.util.AbstractMap.SimpleImmutableEntry<com.alibaba.fastjson.serializer.SimplePropertyPreFilter,java.lang.Enum>>: 25
[MASTER] 15:32:20.237 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_148_1589981540219/com/alibaba/fastjson/JSON_148_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed May 20 13:32:20 GMT 2020
4:  */
5: 
6: package com.alibaba.fastjson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.alibaba.fastjson.JSON;
11: import com.alibaba.fastjson.parser.Feature;
12: import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
13: import java.util.AbstractMap;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class JSON_148_tmp__ESTest extends JSON_148_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Feature[] featureArray0 = new Feature[1];
24:       Class<Object> class0 = Object.class;
25:       AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum> abstractMap_SimpleImmutableEntry0 = JSON.parseObject("", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, featureArray0);
26:       assertNull(abstractMap_SimpleImmutableEntry0);
27:   }
28: }
RegularFileObject[/tmp/EvoSuite_148_1589981540219/com/alibaba/fastjson/JSON_148_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed May 20 13:32:20 GMT 2020
5:  */
6: 
7: package com.alibaba.fastjson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class JSON_148_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.alibaba.fastjson.JSON"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/fastjson"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JSON_148_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.alibaba.fastjson.asm.ClassWriter",
82:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
83:       "com.alibaba.fastjson.util.ASMUtils",
84:       "com.alibaba.fastjson.JSONPath",
85:       "com.alibaba.fastjson.parser.JSONScanner",
86:       "com.alibaba.fastjson.parser.JSONLexerBase",
87:       "com.alibaba.fastjson.parser.deserializer.ParseProcess",
88:       "com.alibaba.fastjson.parser.deserializer.FieldTypeResolver",
89:       "com.alibaba.fastjson.parser.ParserConfig$AutoTypeCheckHandler",
90:       "com.alibaba.fastjson.serializer.JSONSerializable",
91:       "com.alibaba.fastjson.serializer.SerializeWriter",
92:       "com.alibaba.fastjson.serializer.ReferenceCodec",
93:       "com.alibaba.fastjson.JSONException",
94:       "com.alibaba.fastjson.asm.TypeCollector$1",
95:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
96:       "com.alibaba.fastjson.serializer.ToStringSerializer",
97:       "com.alibaba.fastjson.serializer.SerialContext",
98:       "com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer",
99:       "com.alibaba.fastjson.JSONPath$FilterGroup",
100:       "com.alibaba.fastjson.serializer.AfterFilter",
101:       "com.alibaba.fastjson.TypeReference",
102:       "com.alibaba.fastjson.serializer.ObjectSerializer",
103:       "com.alibaba.fastjson.JSONValidator$Type",
104:       "com.alibaba.fastjson.serializer.MapSerializer",
105:       "com.alibaba.fastjson.asm.Item",
106:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
107:       "com.alibaba.fastjson.serializer.DateCodec",
108:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
109:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
110:       "com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider",
111:       "com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask",
112:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
113:       "com.alibaba.fastjson.JSONPath$Filter",
114:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
115:       "com.alibaba.fastjson.util.FieldInfo",
116:       "com.alibaba.fastjson.JSONValidator$UTF16Validator",
117:       "com.alibaba.fastjson.annotation.JSONField",
118:       "com.alibaba.fastjson.serializer.PropertyFilter",
119:       "com.alibaba.fastjson.parser.SymbolTable",
120:       "com.alibaba.fastjson.serializer.NameFilter",
121:       "com.alibaba.fastjson.serializer.ListSerializer",
122:       "com.alibaba.fastjson.JSONArray",
123:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
124:       "com.alibaba.fastjson.JSONAware",
125:       "com.alibaba.fastjson.serializer.LongCodec",
126:       "com.alibaba.fastjson.serializer.EnumSerializer",
127:       "com.alibaba.fastjson.util.ASMClassLoader",
128:       "com.alibaba.fastjson.PropertyNamingStrategy",
129:       "com.alibaba.fastjson.parser.JSONToken",
130:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
131:       "com.alibaba.fastjson.serializer.AppendableSerializer",
132:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
133:       "com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer",
134:       "com.alibaba.fastjson.serializer.ContextValueFilter",
135:       "com.alibaba.fastjson.util.ServiceLoader",
136:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
137:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer",
138:       "com.alibaba.fastjson.JSONPath$FilterSegment",
139:       "com.alibaba.fastjson.parser.DefaultJSONParser",
140:       "com.alibaba.fastjson.serializer.ContextObjectSerializer",
141:       "com.alibaba.fastjson.JSONValidator$ReaderValidator",
142:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
143:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
144:       "com.alibaba.fastjson.serializer.BeanContext",
145:       "com.alibaba.fastjson.serializer.AutowiredObjectSerializer",
146:       "com.alibaba.fastjson.util.IdentityHashMap",
147:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
148:       "com.alibaba.fastjson.JSON",
149:       "com.alibaba.fastjson.serializer.StringCodec",
150:       "com.alibaba.fastjson.serializer.SerializeFilterable",
151:       "com.alibaba.fastjson.JSONWriter",
152:       "com.alibaba.fastjson.asm.Opcodes",
153:       "com.alibaba.fastjson.JSONReader",
154:       "com.alibaba.fastjson.JSONStreamAware",
155:       "com.alibaba.fastjson.asm.MethodWriter",
156:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
157:       "com.alibaba.fastjson.serializer.SerializerFeature",
158:       "com.alibaba.fastjson.JSONPath$Operator",
159:       "com.alibaba.fastjson.TypeReference$1",
160:       "com.alibaba.fastjson.serializer.CalendarCodec",
161:       "com.alibaba.fastjson.util.IOUtils",
162:       "com.alibaba.fastjson.util.TypeUtils",
163:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
164:       "com.alibaba.fastjson.asm.ClassReader",
165:       "com.alibaba.fastjson.JSONPath$Segment",
166:       "com.alibaba.fastjson.spi.Module",
167:       "com.alibaba.fastjson.JSONValidator",
168:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
169:       "com.alibaba.fastjson.serializer.MiscCodec",
170:       "com.alibaba.fastjson.util.IOUtils$1",
171:       "com.alibaba.fastjson.serializer.IntegerCodec",
172:       "com.alibaba.fastjson.serializer.SerializeFilter",
173:       "com.alibaba.fastjson.JSONPObject",
174:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
175:       "com.alibaba.fastjson.serializer.PascalNameFilter",
176:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessor",
177:       "com.alibaba.fastjson.serializer.BeforeFilter",
178:       "com.alibaba.fastjson.parser.deserializer.ExtraProcessable",
179:       "com.alibaba.fastjson.serializer.ArraySerializer",
180:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
181:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
182:       "com.alibaba.fastjson.JSONObject",
183:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
184:       "com.alibaba.fastjson.serializer.CharacterCodec",
185:       "com.alibaba.fastjson.asm.TypeCollector",
186:       "com.alibaba.fastjson.parser.deserializer.ObjectDeserializer",
187:       "com.alibaba.fastjson.asm.ByteVector",
188:       "com.alibaba.fastjson.parser.JSONLexer",
189:       "com.alibaba.fastjson.util.ASMClassLoader$1",
190:       "com.alibaba.fastjson.asm.Label",
191:       "com.alibaba.fastjson.JSONValidator$UTF8Validator",
192:       "com.alibaba.fastjson.asm.FieldWriter",
193:       "com.alibaba.fastjson.serializer.JSONSerializer",
194:       "com.alibaba.fastjson.util.JavaBeanInfo",
195:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
196:       "com.alibaba.fastjson.serializer.SerializeConfig",
197:       "com.alibaba.fastjson.serializer.AtomicCodec",
198:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
199:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
200:       "com.alibaba.fastjson.asm.Type",
201:       "com.alibaba.fastjson.serializer.FieldSerializer",
202:       "com.alibaba.fastjson.serializer.FloatCodec",
203:       "com.alibaba.fastjson.parser.JSONReaderScanner",
204:       "com.alibaba.fastjson.serializer.ValueFilter",
205:       "com.alibaba.fastjson.JSONPathException",
206:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
207:       "com.alibaba.fastjson.serializer.Labels",
208:       "com.alibaba.fastjson.serializer.CollectionCodec",
209:       "com.alibaba.fastjson.parser.deserializer.PropertyProcessable",
210:       "com.alibaba.fastjson.serializer.CharArrayCodec",
211:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
212:       "com.alibaba.fastjson.asm.MethodVisitor",
213:       "com.alibaba.fastjson.annotation.JSONCreator",
214:       "com.alibaba.fastjson.asm.MethodCollector",
215:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
216:       "com.alibaba.fastjson.serializer.LabelFilter",
217:       "com.alibaba.fastjson.annotation.JSONType",
218:       "com.alibaba.fastjson.util.UTF8Decoder",
219:       "com.alibaba.fastjson.JSONValidator$UTF8InputStreamValidator",
220:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
221:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
222:       "com.alibaba.fastjson.serializer.DoubleSerializer",
223:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
224:       "com.alibaba.fastjson.serializer.BooleanCodec",
225:       "com.alibaba.fastjson.parser.Feature",
226:       "com.alibaba.fastjson.parser.ParserConfig",
227:       "com.alibaba.fastjson.serializer.PropertyPreFilter",
228:       "com.alibaba.fastjson.parser.ParseContext"
229:     );
230:   } 
231: 
232:   private static void resetClasses() {
233:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JSON_148_tmp__ESTest_scaffolding.class.getClassLoader()); 
234: 
235:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
236:       "com.alibaba.fastjson.parser.Feature",
237:       "com.alibaba.fastjson.serializer.SerializerFeature",
238:       "com.alibaba.fastjson.util.IOUtils$1",
239:       "com.alibaba.fastjson.util.IOUtils",
240:       "com.alibaba.fastjson.JSON",
241:       "com.alibaba.fastjson.util.IdentityHashMap",
242:       "com.alibaba.fastjson.util.ASMUtils",
243:       "com.alibaba.fastjson.parser.SymbolTable",
244:       "com.alibaba.fastjson.util.TypeUtils",
245:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory",
246:       "com.alibaba.fastjson.util.ASMClassLoader$1",
247:       "com.alibaba.fastjson.util.ASMClassLoader",
248:       "com.alibaba.fastjson.serializer.MiscCodec",
249:       "com.alibaba.fastjson.util.IdentityHashMap$Entry",
250:       "com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer",
251:       "com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer",
252:       "com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer",
253:       "com.alibaba.fastjson.parser.deserializer.TimeDeserializer",
254:       "com.alibaba.fastjson.serializer.DateCodec",
255:       "com.alibaba.fastjson.serializer.CalendarCodec",
256:       "com.alibaba.fastjson.parser.deserializer.MapDeserializer",
257:       "com.alibaba.fastjson.serializer.CollectionCodec",
258:       "com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer",
259:       "com.alibaba.fastjson.serializer.StringCodec",
260:       "com.alibaba.fastjson.serializer.CharacterCodec",
261:       "com.alibaba.fastjson.parser.deserializer.NumberDeserializer",
262:       "com.alibaba.fastjson.serializer.IntegerCodec",
263:       "com.alibaba.fastjson.serializer.LongCodec",
264:       "com.alibaba.fastjson.serializer.BigIntegerCodec",
265:       "com.alibaba.fastjson.serializer.BigDecimalCodec",
266:       "com.alibaba.fastjson.serializer.FloatCodec",
267:       "com.alibaba.fastjson.serializer.BooleanCodec",
268:       "com.alibaba.fastjson.serializer.CharArrayCodec",
269:       "com.alibaba.fastjson.serializer.ReferenceCodec",
270:       "com.alibaba.fastjson.serializer.AtomicCodec",
271:       "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer",
272:       "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer",
273:       "com.alibaba.fastjson.parser.ParserConfig",
274:       "com.alibaba.fastjson.serializer.ASMSerializerFactory",
275:       "com.alibaba.fastjson.serializer.DoubleSerializer",
276:       "com.alibaba.fastjson.serializer.PrimitiveArraySerializer",
277:       "com.alibaba.fastjson.serializer.ObjectArrayCodec",
278:       "com.alibaba.fastjson.serializer.AppendableSerializer",
279:       "com.alibaba.fastjson.serializer.ToStringSerializer",
280:       "com.alibaba.fastjson.serializer.SerializeConfig",
281:       "com.alibaba.fastjson.JSONPObject",
282:       "com.alibaba.fastjson.serializer.SerializeFilterable",
283:       "com.alibaba.fastjson.serializer.JSONSerializer",
284:       "com.alibaba.fastjson.serializer.SerializeWriter",
285:       "com.alibaba.fastjson.util.ServiceLoader",
286:       "com.alibaba.fastjson.serializer.JSONSerializableSerializer",
287:       "com.alibaba.fastjson.parser.DefaultJSONParser",
288:       "com.alibaba.fastjson.parser.JSONLexerBase",
289:       "com.alibaba.fastjson.parser.JSONScanner",
290:       "com.alibaba.fastjson.JSONObject",
291:       "com.alibaba.fastjson.JSONArray",
292:       "com.alibaba.fastjson.JSONException",
293:       "com.alibaba.fastjson.parser.JSONToken",
294:       "com.alibaba.fastjson.serializer.PascalNameFilter",
295:       "com.alibaba.fastjson.TypeReference$1",
296:       "com.alibaba.fastjson.TypeReference",
297:       "com.alibaba.fastjson.util.GenericArrayTypeImpl",
298:       "com.alibaba.fastjson.serializer.SimplePropertyPreFilter",
299:       "com.alibaba.fastjson.util.JavaBeanInfo",
300:       "com.alibaba.fastjson.asm.ClassWriter",
301:       "com.alibaba.fastjson.asm.ByteVector",
302:       "com.alibaba.fastjson.asm.Item",
303:       "com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context",
304:       "com.alibaba.fastjson.asm.MethodWriter",
305:       "com.alibaba.fastjson.asm.Label",
306:       "com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer",
307:       "com.alibaba.fastjson.util.FieldInfo",
308:       "com.alibaba.fastjson.parser.ParseContext",
309:       "com.alibaba.fastjson.serializer.SerializeBeanInfo",
310:       "com.alibaba.fastjson.asm.FieldWriter",
311:       "com.alibaba.fastjson.asm.Type",
312:       "com.alibaba.fastjson.serializer.ASMSerializerFactory$Context",
313:       "com.alibaba.fastjson.serializer.JavaBeanSerializer",
314:       "com.alibaba.fastjson.serializer.FieldSerializer",
315:       "com.alibaba.fastjson.serializer.BeanContext",
316:       "com.alibaba.fastjson.serializer.SerialContext",
317:       "com.alibaba.fastjson.util.UTF8Decoder",
318:       "com.alibaba.fastjson.serializer.MapSerializer",
319:       "com.alibaba.fastjson.serializer.ListSerializer",
320:       "com.alibaba.fastjson.serializer.EnumSerializer",
321:       "com.alibaba.fastjson.parser.deserializer.EnumDeserializer",
322:       "com.alibaba.fastjson.PropertyNamingStrategy",
323:       "com.alibaba.fastjson.asm.ClassReader",
324:       "com.alibaba.fastjson.asm.TypeCollector$1",
325:       "com.alibaba.fastjson.asm.TypeCollector",
326:       "com.alibaba.fastjson.asm.MethodCollector",
327:       "com.alibaba.fastjson.parser.JSONReaderScanner",
328:       "com.alibaba.fastjson.util.ParameterizedTypeImpl",
329:       "com.alibaba.fastjson.JSONObject$SecureObjectInputStream",
330:       "com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo",
331:       "com.alibaba.fastjson.parser.deserializer.FieldDeserializer",
332:       "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer",
333:       "com.alibaba.fastjson.serializer.ArraySerializer",
334:       "com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer"
335:     );
336:   }
337: }

[MASTER] 15:32:20.237 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Feature[] featureArray0 = new Feature[1];
Class<Object> class0 = Object.class;
AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum> abstractMap_SimpleImmutableEntry0 = JSON.parseObject("", (Class<AbstractMap.SimpleImmutableEntry<SimplePropertyPreFilter, Enum>>) class0, featureArray0);
assertNull(abstractMap_SimpleImmutableEntry0);


* Resulting test suite's mutation score: 22%
* Compiling and checking tests
[MASTER] 15:32:41.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to java.util.TreeMap
[MASTER] 15:32:41.490 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TreeMap<Object, GenericArrayTypeImpl> treeMap0 = new TreeMap<Object, GenericArrayTypeImpl>();
SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
TreeMap treeMap1 = (TreeMap)JSON.toJSON((Object) treeMap0, serializeConfig0);
assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);


[MASTER] 15:32:41.830 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to java.util.LinkedHashMap
[MASTER] 15:32:41.830 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParserConfig parserConfig0 = new ParserConfig();
LinkedHashMap<JSONArray, PascalNameFilter> linkedHashMap0 = new LinkedHashMap<JSONArray, PascalNameFilter>();
LinkedHashMap linkedHashMap1 = (LinkedHashMap)JSON.toJSON((Object) linkedHashMap0, parserConfig0);
assertEquals(0, linkedHashMap1.size());


* Writing tests to file
* Writing JUnit test case 'JSONReaderScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 15
* Writing tests to file
* Writing JUnit test case 'JSON_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONArray
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.parser.JSONScanner
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONPath
* Starting Client-0
* Connecting to master process on port 12808
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 12811
* Connecting to master process on port 12810
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 15:33:20.131 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 15:33:20.132 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONArray
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1055
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 674 / 1055
[MASTER] 15:33:21.046 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 15:33:21.048 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 15:33:21.688 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 15:33:24.025 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 15:33:24.027 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.JSONScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONPath
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 5652
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 470 / 5652
* Total number of test goals for DYNAMOSA: 7058
* Using seed 7
* Starting evolution
[MASTER] 15:33:25.662 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 15:33:25.662 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Initial Number of Goals in DynaMOSA = 865 / 7058
[MASTER] 15:33:25.768 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 15:33:25.781 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 15:33:25.781 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 15:33:25.781 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 15:33:25.781 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 15:33:25.782 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 15:33:25.782 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 15:33:25.782 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 15:33:25.782 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 15:33:25.782 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 15:33:25.783 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 15:33:25.783 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 15:33:25.790 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Enum<E> : Type points to itself
[MASTER] 15:33:25.794 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 15:33:25.795 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 15:33:28.607 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 15:33:44.676 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 65s and 35 generations, 9503 statements, best individual has fitness: 378.0
* Minimizing test suite
* Search finished after 64s and 156 generations, 93363 statements, best individual has fitness: 3700.0
* Search finished after 64s and 52 generations, 44307 statements, best individual has fitness: 4131.0
[MASTER] 15:34:31.315 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsListener.lambda$new$0(StatisticsListener.java:69) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	... 1 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
* Minimizing test suite
[MASTER] 15:34:33.044 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
	java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:393) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:283) ~[na:1.8.0_161]
	at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:260) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_161]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_161]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:266) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.executedAndThenSendIndividualToMaster(StatisticsSender.java:98) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTests(TestSuiteGenerator.java:687) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:245) [evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:155) [evosuite.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_161]
	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]
Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is: 
	java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:352) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) ~[na:1.8.0_161]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_161]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ~[na:1.8.0_161]
	... 3 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:203) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:168) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:149) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.getClass(GenericClass.java:115) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at org.evosuite.utils.generic.GenericClass.readObject(GenericClass.java:1720) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:556) ~[na:1.8.0_161]
	at org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103) ~[evosuite.jar:1.0.7-SNAPSHOT]
	at sun.reflect.GeneratedMethodAccessor15.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at java.util.ArrayList.readObject(ArrayList.java:797) ~[na:1.8.0_161]
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1158) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2168) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2277) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2201) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2059) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1566) ~[na:1.8.0_161]
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:426) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:322) ~[na:1.8.0_161]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:341) ~[na:1.8.0_161]
	... 12 common frames omitted
Caused by: java.lang.ClassNotFoundException: Class 'com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_Object.class' should be in target project, but could not be found!
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:190) ~[evosuite.jar:1.0.7-SNAPSHOT]
	... 74 common frames omitted
[MASTER] 15:34:33.189 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 7 seconds more than allowed.
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 74%
* Total number of goals: 173
* Number of covered goals: 128
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 70%
* Total number of goals: 101
* Number of covered goals: 71
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 73
* Number of covered goals: 71
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 81%
* Total number of goals: 325
* Number of covered goals: 263
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 35%
* Total number of goals: 219
* Number of covered goals: 77
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 96%
* Total number of goals: 68
* Number of covered goals: 65
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 81%
* Total number of goals: 68
* Number of covered goals: 55
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 101
* Number of covered goals: 70
* Generated 136 tests with total length 351
* Resulting test suite's coverage: 70% (average coverage for all fitness functions)
* Generating assertions
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 35%
* Total number of goals: 1857
* Number of covered goals: 642
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 31%
* Total number of goals: 1519
* Number of covered goals: 469
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 54
* Number of covered goals: 54
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 54%
* Total number of goals: 567
* Number of covered goals: 309
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 94
* Number of covered goals: 50
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 48
* Number of covered goals: 48
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 90%
* Total number of goals: 48
* Number of covered goals: 43
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 27%
* Total number of goals: 1519
* Number of covered goals: 415
* Generated 197 tests with total length 498
* Resulting test suite's coverage: 56% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 39%
* Compiling and checking tests
[MASTER] 15:35:12.938 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 15:35:12.939 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONArray jSONArray0 = new JSONArray();
JSONArray jSONArray1 = jSONArray0.fluentSet(3089, jSONArray0);
jSONArray1.fluentRetainAll(jSONArray0);
assertFalse(jSONArray0.isEmpty());
assertEquals(3090, jSONArray0.size());


* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 49%
* Total number of goals: 2079
* Number of covered goals: 1015
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 36%
* Total number of goals: 1850
* Number of covered goals: 674
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 83
* Number of covered goals: 83
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 54%
* Total number of goals: 913
* Number of covered goals: 490
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 114
* Number of covered goals: 64
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 126
* Number of covered goals: 125
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 89%
* Total number of goals: 126
* Number of covered goals: 112
* Coverage analysis for criterion CBRANCH
[MASTER] 15:35:29.872 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 15:35:29.873 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONArray jSONArray0 = new JSONArray();
JSONArray jSONArray1 = jSONArray0.fluentSet(3089, jSONArray0);
boolean boolean0 = jSONArray1.contains(jSONArray0);
assertEquals(3090, jSONArray0.size());
assertTrue(boolean0);


* Coverage of criterion CBRANCH: 33%
* Total number of goals: 1850
* Number of covered goals: 613
* Generated 260 tests with total length 975
* Resulting test suite's coverage: 46% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 15:35:54.794 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 15:35:54.795 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONArray jSONArray0 = new JSONArray();
jSONArray0.fluentSet(3089, jSONArray0);
boolean boolean0 = jSONArray0.removeAll(jSONArray0);
assertTrue(jSONArray0.isEmpty());
assertTrue(boolean0);


* Writing tests to file
* Writing JUnit test case 'JSONArray_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 24%
* Compiling and checking tests
[MASTER] 15:36:24.106 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: json-path can not be null or empty
[MASTER] 15:36:24.107 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "", 1769);
JSONPath.keySet((Object) sQLInvalidAuthorizationSpecException0, "");

[MASTER] 15:36:25.475 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: json-path can not be null or empty
[MASTER] 15:36:25.475 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = JSONPath.size((Object) null, "");
assertEquals((-1), int0);


[MASTER] 15:36:25.799 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONPathException: illeal jsonpath syntax. =(W})T-
[MASTER] 15:36:25.799 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.LE;
Double double0 = new Double((-440.81));
JSONPath.containsValue((Object) double0, "=(W})T-", (Object) jSONPath_Operator0);

[MASTER] 15:36:38.671 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONException: toJSON error
[MASTER] 15:36:38.671 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SerializeConfig serializeConfig0 = new SerializeConfig(false);
ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
Map<String, Object> map0 = JSONPath.paths((Object) parserConfig0, serializeConfig0);
assertEquals(9, map0.size());


[MASTER] 15:36:39.060 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<173> but was:<168>
[MASTER] 15:36:39.060 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SerializeConfig serializeConfig0 = new SerializeConfig(16, false);
SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("pVy#[oB!,.,+U>H~2", "`6)pqi", 16);
HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("a)S+c^|", hashMap0, sQLIntegrityConstraintViolationException0);
Map<String, Object> map0 = JSONPath.paths((Object) sQLClientInfoException0, serializeConfig0);
assertEquals(173, map0.size());


[MASTER] 15:36:39.366 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: StringIndexOutOfBoundsException
[MASTER] 15:36:39.366 [logback-1] WARN  JUnitAnalyzer - Failing test:
 char[] charArray0 = new char[0];
JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
Class<Object> class0 = Object.class;
jSONScanner0.scanFieldStringArray(charArray0, class0);

[MASTER] 15:36:40.438 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.UnsupportedOperationException: null
[MASTER] 15:36:40.438 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
String[] stringArray0 = new String[7];
stringArray0[0] = "[boolean";
JSONPath.reserveToObject(sQLClientInfoException0, stringArray0);

* Writing tests to file
* Writing JUnit test case 'JSONScanner_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 15:37:02.052 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class com.alibaba.fastjson.JSONException: create asm serializer error, verson 1.2.68, class class com.alibaba.fastjson.parser.SymbolTable
[MASTER] 15:37:02.052 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SerializeConfig serializeConfig0 = new SerializeConfig(79, false);
ParserConfig parserConfig0 = new ParserConfig(false);
JSONPath jSONPath0 = new JSONPath("NOT_IN", serializeConfig0, parserConfig0);
Stack<Object> stack0 = new Stack<Object>();
jSONPath0.deepGetPropertyValues(parserConfig0, stack0);
assertFalse(stack0.empty());
assertTrue(stack0.contains(false));


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'JSONPath_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONObject
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONReader
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.parser.DefaultJSONParser
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONWriter
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 12807
* Starting Client-0
* Connecting to master process on port 12809
* Starting Client-0
* Connecting to master process on port 12810
* Connecting to master process on port 12812
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 429
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 130 / 429
[MASTER] 15:37:17.688 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 15:37:17.689 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 740
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 232 / 740
[MASTER] 15:37:18.612 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 15:37:18.613 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONObject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1211
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 496 / 1211
[MASTER] 15:37:20.161 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 15:37:20.161 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 15:37:20.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 15:37:20.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
[MASTER] 15:37:21.168 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 15:37:23.455 [logback-1] WARN  CheapPurityAnalyzer - com.google.common.collect.ArrayListMultimap was not found in the inheritance tree. Using DEFAULT value for cheap-purity analysis
[MASTER] 15:37:23.456 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: com.google.common.collect.ArrayListMultimap
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.parser.DefaultJSONParser
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3512
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 650 / 3512
[MASTER] 15:37:24.753 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 15:37:24.754 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 15:37:24.762 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 15:37:24.763 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 15:37:24.764 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumMap<K, V> : Type points to itself
[MASTER] 15:37:24.764 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 15:37:24.765 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 15:37:24.766 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Hashtable<K, V> : Type points to itself
[MASTER] 15:37:24.766 [logback-2] ERROR TestCluster - Failed to check cache for java.util.IdentityHashMap<K, V> : Type points to itself
[MASTER] 15:37:24.766 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashMap<K, V> : Type points to itself
[MASTER] 15:37:24.766 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 15:37:24.768 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 15:37:24.769 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeMap<K, V> : Type points to itself
[MASTER] 15:37:24.769 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 15:37:24.770 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 15:37:32.749 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 15:37:49.850 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 15:38:04.075 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 61s and 716 generations, 250638 statements, best individual has fitness: 31.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 97
* Number of covered goals: 97
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 76
* Number of covered goals: 71
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 148
* Number of covered goals: 146
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 76
* Number of covered goals: 69
* Generated 27 tests with total length 95
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 21%
* Compiling and checking tests
* Search finished after 63s and 16 generations, 5903 statements, best individual has fitness: 548.0
* Minimizing test suite
* Search finished after 62s and 36 generations, 16169 statements, best individual has fitness: 529.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 32%
* Total number of goals: 157
* Number of covered goals: 50
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 23%
* Total number of goals: 115
* Number of covered goals: 26
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 20%
* Total number of goals: 266
* Number of covered goals: 54
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 30%
* Total number of goals: 37
* Number of covered goals: 11
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 72%
* Total number of goals: 25
* Number of covered goals: 18
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 23%
* Total number of goals: 115
* Number of covered goals: 26
* Generated 51 tests with total length 153
* Resulting test suite's coverage: 46% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 60%
* Total number of goals: 254
* Number of covered goals: 152
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 50%
* Total number of goals: 172
* Number of covered goals: 86
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 89%
* Total number of goals: 19
* Number of covered goals: 17
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 58%
* Total number of goals: 333
* Number of covered goals: 193
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 162
* Number of covered goals: 64
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 95%
* Total number of goals: 59
* Number of covered goals: 56
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 59
* Number of covered goals: 54
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 50%
* Total number of goals: 172
* Number of covered goals: 86
* Generated 84 tests with total length 215
* Resulting test suite's coverage: 64% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 62s and 34 generations, 15735 statements, best individual has fitness: 2389.0
* Minimizing test suite
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
[MASTER] 15:38:33.537 [main] ERROR RuntimeVariable - Obtained invalid goal count: covered 435 out of 429
[MASTER] 15:38:33.538 [main] ERROR SearchStatistics - Not going to write down statistics data, as some data is invalid
[MASTER] 15:38:33.639 [main] ERROR TestGeneration - failed to write statistics data
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 25%
* Total number of goals: 973
* Number of covered goals: 241
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 24%
* Total number of goals: 707
* Number of covered goals: 173
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 47
* Number of covered goals: 47
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 52%
* Total number of goals: 897
* Number of covered goals: 465
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 37%
* Total number of goals: 102
* Number of covered goals: 38
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 63
* Number of covered goals: 63
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 71%
* Total number of goals: 63
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 23%
* Total number of goals: 707
* Number of covered goals: 162
* Generated 106 tests with total length 382
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'JSONReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONObject_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* Writing tests to file
* Writing JUnit test case 'DefaultJSONParser_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.alibaba.fastjson.JSONValidator
* Starting Client-0
* Connecting to master process on port 12811
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/fastjson/fastjson-1.2.68.jar
* Finished analyzing classpath
* Generating tests for class com.alibaba.fastjson.JSONValidator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1127
* Using seed 7
* Starting evolution
* Initial Number of Goals in DynaMOSA = 268 / 1127
* Search finished after 65s and 23 generations, 8947 statements, best individual has fitness: 398.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 58%
* Total number of goals: 266
* Number of covered goals: 154
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 50%
* Total number of goals: 212
* Number of covered goals: 106
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 375
* Number of covered goals: 329
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 88%
* Total number of goals: 24
* Number of covered goals: 21
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 79%
* Total number of goals: 24
* Number of covered goals: 19
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 50%
* Total number of goals: 212
* Number of covered goals: 105
* Generated 44 tests with total length 141
* Resulting test suite's coverage: 57% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 30%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JSONValidator_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s7/fastjson/evosuite-tests
* Done!

* Computation finished
