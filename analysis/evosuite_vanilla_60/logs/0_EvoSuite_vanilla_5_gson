* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonPrimitive
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.Gson
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonArray
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.internal.bind.JsonTreeReader
* Starting Client-0
* Starting Client-0
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 8707
* Connecting to master process on port 8706
* Connecting to master process on port 8705
* Connecting to master process on port 8710
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonArray
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonPrimitive
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 427
* Using seed 5
* Starting evolution
* Initial Number of Goals in DynaMOSA = 249 / 427
* Total number of test goals for DYNAMOSA: 433
* Using seed 5
* Starting evolution
* Initial Number of Goals in DynaMOSA = 165 / 433
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.bind.JsonTreeReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Total number of test goals for DYNAMOSA: 830
* Using seed 5
* Starting evolution
* Initial Number of Goals in DynaMOSA = 253 / 830
[MASTER] 15:04:30.222 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 15:04:30.222 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Finished analyzing classpath
* Generating tests for class com.google.gson.Gson
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 991
* Using seed 5
* Starting evolution
* Initial Number of Goals in DynaMOSA = 599 / 991
[MASTER] 15:04:31.471 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 15:04:31.474 [logback-2] ERROR TestCluster - Failed to check cache for com.google.gson.Gson.FutureTypeAdapter<T> : Type points to itself
* Search finished after 61s and 133 generations, 40988 statements, best individual has fitness: 64.0
* Minimizing test suite
* Search finished after 62s and 646 generations, 143292 statements, best individual has fitness: 220.0
* Minimizing test suite
* Search finished after 63s and 363 generations, 59478 statements, best individual has fitness: 90.0
* Search finished after 61s and 32 generations, 12834 statements, best individual has fitness: 265.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 62
* Number of covered goals: 60
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 77
* Number of covered goals: 70
* Coverage analysis for criterion EXCEPTION
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 91
* Number of covered goals: 79
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 73%
* Total number of goals: 82
* Number of covered goals: 60
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 77
* Number of covered goals: 70
* Coverage of criterion LINE: 88%
* Total number of goals: 162
* Number of covered goals: 142
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 103
* Number of covered goals: 88
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 34
* Number of covered goals: 34
* Coverage analysis for criterion WEAKMUTATION
* Generated 73 tests with total length 212
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Coverage of criterion WEAKMUTATION: 68%
* Total number of goals: 397
* Number of covered goals: 271
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 74%
* Total number of goals: 27
* Number of covered goals: 20
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 95%
* Total number of goals: 19
* Number of covered goals: 18
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 103
* Number of covered goals: 87
* Generated 70 tests with total length 246
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 46%
* Compiling and checking tests
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 43
* Number of covered goals: 43
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 70
* Number of covered goals: 68
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 59%
* Total number of goals: 109
* Number of covered goals: 64
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Generated 92 tests with total length 294
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 88%
* Compiling and checking tests
* Resulting test suite's mutation score: 38%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonPrimitive_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s5/gson/evosuite-tests
* Done!

* Computation finished
[MASTER] 15:05:48.237 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 15:05:48.237 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JsonArray jsonArray0 = new JsonArray(2147483645);

* Writing tests to file
* Writing JUnit test case 'JsonTreeReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s5/gson/evosuite-tests
* Done!

* Computation finished
* Writing tests to file
* Writing JUnit test case 'JsonArray_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s5/gson/evosuite-tests
* Done!

* Computation finished
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 81%
* Total number of goals: 333
* Number of covered goals: 269
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 77%
* Total number of goals: 113
* Number of covered goals: 87
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 34
* Number of covered goals: 34
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 71%
* Total number of goals: 292
* Number of covered goals: 208
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 70
* Number of covered goals: 39
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 97%
* Total number of goals: 35
* Number of covered goals: 34
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 35
* Number of covered goals: 32
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 113
* Number of covered goals: 83
* Generated 74 tests with total length 272
* Resulting test suite's coverage: 74% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 23%
[MASTER] 15:08:06.452 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 15:08:09.245 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_43_1589980089219/com/google/gson/Gson_43_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_43_1589980089219/com/google/gson/Gson_43_tmp__ESTest_scaffolding.java]]
[MASTER] 15:08:09.245 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar:/home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:08:09.245 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/apaniche/mitchell/generation-scripts/evosuite.jar:/home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
[MASTER] 15:08:09.248 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Class<com.google.gson.internal.Excluder> cannot be converted to java.lang.Class<java.util.HashMap<java.util.HashMap,java.lang.Float>>: 29
[MASTER] 15:08:09.249 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_43_1589980089219/com/google/gson/Gson_43_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed May 20 13:08:09 GMT 2020
4:  */
5: 
6: package com.google.gson;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.gson.Gson;
12: import com.google.gson.internal.Excluder;
13: import java.io.PipedReader;
14: import java.io.Reader;
15: import java.util.HashMap;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class Gson_43_tmp__ESTest extends Gson_43_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Gson gson0 = new Gson();
26:       PipedReader pipedReader0 = new PipedReader();
27:       Class<Excluder> class0 = Excluder.class;
28:       try { 
29:         gson0.fromJson((Reader) pipedReader0, (Class<HashMap<HashMap, Float>>) class0);
30:         fail("Expecting exception: RuntimeException");
31:       
32:       } catch(RuntimeException e) {
33:          //
34:          // java.io.IOException: Pipe not connected
35:          //
36:          verifyException("com.google.gson.Gson", e);
37:       }
38:   }
39: }
RegularFileObject[/tmp/EvoSuite_43_1589980089219/com/google/gson/Gson_43_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed May 20 13:08:09 GMT 2020
5:  */
6: 
7: package com.google.gson;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Gson_43_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.gson.Gson"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/apaniche/mitchell/generation-scripts/projects/gson"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Gson_43_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
82:       "com.google.gson.reflect.TypeToken",
83:       "com.google.gson.internal.bind.TypeAdapters$23",
84:       "com.google.gson.internal.bind.TypeAdapters$24",
85:       "com.google.gson.internal.bind.TypeAdapters$25",
86:       "com.google.gson.internal.bind.TypeAdapters$26",
87:       "com.google.gson.internal.bind.TypeAdapters$20",
88:       "com.google.gson.TypeAdapter",
89:       "com.google.gson.internal.bind.JsonTreeWriter",
90:       "com.google.gson.GsonBuilder",
91:       "com.google.gson.internal.bind.TypeAdapters$21",
92:       "com.google.gson.internal.bind.TypeAdapters$22",
93:       "com.google.gson.internal.bind.TypeAdapters$27",
94:       "com.google.gson.FieldNamingStrategy",
95:       "com.google.gson.internal.bind.TypeAdapters$28",
96:       "com.google.gson.internal.bind.TypeAdapters$29",
97:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
98:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
99:       "com.google.gson.internal.bind.TimeTypeAdapter",
100:       "com.google.gson.ExclusionStrategy",
101:       "com.google.gson.internal.bind.TypeAdapters$34",
102:       "com.google.gson.internal.bind.TypeAdapters$35",
103:       "com.google.gson.internal.JavaVersion",
104:       "com.google.gson.internal.bind.TypeAdapters$30",
105:       "com.google.gson.internal.bind.TypeAdapters$32",
106:       "com.google.gson.internal.bind.TypeAdapters$33",
107:       "com.google.gson.JsonArray",
108:       "com.google.gson.LongSerializationPolicy",
109:       "com.google.gson.internal.bind.TypeAdapters$35$1",
110:       "com.google.gson.internal.Excluder",
111:       "com.google.gson.internal.LinkedTreeMap$EntrySet$1",
112:       "com.google.gson.TypeAdapterFactory",
113:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
114:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
115:       "com.google.gson.stream.JsonReader$1",
116:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
117:       "com.google.gson.internal.$Gson$Types",
118:       "com.google.gson.stream.JsonReader",
119:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
120:       "com.google.gson.internal.reflect.UnsafeReflectionAccessor",
121:       "com.google.gson.Gson$FutureTypeAdapter",
122:       "com.google.gson.internal.bind.TreeTypeAdapter",
123:       "com.google.gson.internal.LinkedTreeMap$Node",
124:       "com.google.gson.stream.JsonWriter",
125:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
126:       "com.google.gson.internal.$Gson$Preconditions",
127:       "com.google.gson.internal.Streams",
128:       "com.google.gson.internal.bind.TypeAdapters$12",
129:       "com.google.gson.internal.bind.TypeAdapters$13",
130:       "com.google.gson.internal.bind.TypeAdapters$14",
131:       "com.google.gson.internal.bind.TypeAdapters$15",
132:       "com.google.gson.internal.bind.TypeAdapters$10",
133:       "com.google.gson.internal.Primitives",
134:       "com.google.gson.internal.bind.TypeAdapters$11",
135:       "com.google.gson.stream.MalformedJsonException",
136:       "com.google.gson.internal.bind.ArrayTypeAdapter",
137:       "com.google.gson.stream.JsonToken",
138:       "com.google.gson.internal.ConstructorConstructor$3",
139:       "com.google.gson.internal.bind.TypeAdapters$16",
140:       "com.google.gson.internal.ObjectConstructor",
141:       "com.google.gson.internal.bind.TypeAdapters$17",
142:       "com.google.gson.internal.bind.TypeAdapters$18",
143:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
144:       "com.google.gson.JsonNull",
145:       "com.google.gson.internal.bind.TypeAdapters$19",
146:       "com.google.gson.internal.bind.DateTypeAdapter$1",
147:       "com.google.gson.internal.ConstructorConstructor$8",
148:       "com.google.gson.LongSerializationPolicy$1",
149:       "com.google.gson.LongSerializationPolicy$2",
150:       "com.google.gson.internal.ConstructorConstructor$6",
151:       "com.google.gson.JsonObject",
152:       "com.google.gson.internal.bind.JsonTreeReader$1",
153:       "com.google.gson.TypeAdapter$1",
154:       "com.google.gson.internal.UnsafeAllocator$3",
155:       "com.google.gson.internal.UnsafeAllocator$4",
156:       "com.google.gson.internal.UnsafeAllocator$1",
157:       "com.google.gson.internal.UnsafeAllocator$2",
158:       "com.google.gson.Gson$2",
159:       "com.google.gson.Gson$3",
160:       "com.google.gson.internal.bind.ObjectTypeAdapter",
161:       "com.google.gson.Gson$4",
162:       "com.google.gson.Gson$5",
163:       "com.google.gson.internal.bind.DateTypeAdapter",
164:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
165:       "com.google.gson.Gson$1",
166:       "com.google.gson.internal.bind.TypeAdapters$26$1",
167:       "com.google.gson.Gson",
168:       "com.google.gson.internal.LinkedTreeMap$1",
169:       "com.google.gson.internal.reflect.ReflectionAccessor",
170:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
171:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
172:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
173:       "com.google.gson.internal.LinkedTreeMap$EntrySet",
174:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
175:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
176:       "com.google.gson.annotations.SerializedName",
177:       "com.google.gson.internal.Excluder$1",
178:       "com.google.gson.internal.bind.TypeAdapters$2",
179:       "com.google.gson.internal.bind.JsonTreeReader",
180:       "com.google.gson.internal.bind.TypeAdapters$1",
181:       "com.google.gson.internal.bind.JsonTreeWriter$1",
182:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
183:       "com.google.gson.JsonIOException",
184:       "com.google.gson.internal.bind.TypeAdapters$8",
185:       "com.google.gson.internal.bind.TypeAdapters$7",
186:       "com.google.gson.internal.bind.TypeAdapters",
187:       "com.google.gson.internal.bind.TypeAdapters$9",
188:       "com.google.gson.internal.bind.TypeAdapters$4",
189:       "com.google.gson.internal.LinkedTreeMap",
190:       "com.google.gson.internal.bind.TypeAdapters$3",
191:       "com.google.gson.internal.bind.TypeAdapters$6",
192:       "com.google.gson.internal.LazilyParsedNumber",
193:       "com.google.gson.internal.bind.TypeAdapters$5",
194:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
195:       "com.google.gson.JsonParseException",
196:       "com.google.gson.internal.ConstructorConstructor",
197:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
198:       "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator",
199:       "com.google.gson.JsonElement",
200:       "com.google.gson.FieldNamingPolicy",
201:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
202:       "com.google.gson.DefaultDateTypeAdapter",
203:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
204:       "com.google.gson.annotations.JsonAdapter",
205:       "com.google.gson.JsonPrimitive",
206:       "com.google.gson.internal.UnsafeAllocator",
207:       "com.google.gson.internal.Streams$AppendableWriter",
208:       "com.google.gson.internal.ConstructorConstructor$14",
209:       "com.google.gson.JsonSyntaxException",
210:       "com.google.gson.FieldNamingPolicy$4",
211:       "com.google.gson.FieldNamingPolicy$3",
212:       "com.google.gson.FieldNamingPolicy$6",
213:       "com.google.gson.FieldNamingPolicy$5",
214:       "com.google.gson.internal.JsonReaderInternalAccess",
215:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
216:       "com.google.gson.FieldNamingPolicy$2",
217:       "com.google.gson.FieldNamingPolicy$1"
218:     );
219:   } 
220: 
221:   private static void resetClasses() {
222:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Gson_43_tmp__ESTest_scaffolding.class.getClassLoader()); 
223: 
224:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
225:       "com.google.gson.reflect.TypeToken",
226:       "com.google.gson.internal.$Gson$Preconditions",
227:       "com.google.gson.internal.$Gson$Types",
228:       "com.google.gson.Gson",
229:       "com.google.gson.TypeAdapter",
230:       "com.google.gson.Gson$5",
231:       "com.google.gson.Gson$3",
232:       "com.google.gson.Gson$4",
233:       "com.google.gson.Gson$1",
234:       "com.google.gson.Gson$2",
235:       "com.google.gson.Gson$FutureTypeAdapter",
236:       "com.google.gson.internal.Excluder",
237:       "com.google.gson.FieldNamingPolicy",
238:       "com.google.gson.LongSerializationPolicy",
239:       "com.google.gson.internal.bind.TypeAdapters$1",
240:       "com.google.gson.TypeAdapter$1",
241:       "com.google.gson.internal.bind.TypeAdapters$32",
242:       "com.google.gson.internal.bind.TypeAdapters$2",
243:       "com.google.gson.internal.bind.TypeAdapters$3",
244:       "com.google.gson.internal.bind.TypeAdapters$4",
245:       "com.google.gson.internal.bind.TypeAdapters$33",
246:       "com.google.gson.internal.bind.TypeAdapters$5",
247:       "com.google.gson.internal.bind.TypeAdapters$6",
248:       "com.google.gson.internal.bind.TypeAdapters$7",
249:       "com.google.gson.internal.bind.TypeAdapters$8",
250:       "com.google.gson.internal.bind.TypeAdapters$9",
251:       "com.google.gson.internal.bind.TypeAdapters$10",
252:       "com.google.gson.internal.bind.TypeAdapters$11",
253:       "com.google.gson.internal.bind.TypeAdapters$12",
254:       "com.google.gson.internal.bind.TypeAdapters$13",
255:       "com.google.gson.internal.bind.TypeAdapters$14",
256:       "com.google.gson.internal.bind.TypeAdapters$15",
257:       "com.google.gson.internal.bind.TypeAdapters$16",
258:       "com.google.gson.internal.bind.TypeAdapters$17",
259:       "com.google.gson.internal.bind.TypeAdapters$18",
260:       "com.google.gson.internal.bind.TypeAdapters$19",
261:       "com.google.gson.internal.bind.TypeAdapters$20",
262:       "com.google.gson.internal.bind.TypeAdapters$21",
263:       "com.google.gson.internal.bind.TypeAdapters$22",
264:       "com.google.gson.internal.bind.TypeAdapters$23",
265:       "com.google.gson.internal.bind.TypeAdapters$35",
266:       "com.google.gson.internal.bind.TypeAdapters$24",
267:       "com.google.gson.internal.bind.TypeAdapters$25",
268:       "com.google.gson.internal.bind.TypeAdapters$26",
269:       "com.google.gson.internal.bind.TypeAdapters$27",
270:       "com.google.gson.internal.bind.TypeAdapters$34",
271:       "com.google.gson.internal.bind.TypeAdapters$28",
272:       "com.google.gson.internal.bind.TypeAdapters$29",
273:       "com.google.gson.internal.bind.TypeAdapters$30",
274:       "com.google.gson.internal.bind.TypeAdapters",
275:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
276:       "com.google.gson.internal.bind.ObjectTypeAdapter",
277:       "com.google.gson.internal.bind.DateTypeAdapter$1",
278:       "com.google.gson.internal.bind.DateTypeAdapter",
279:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
280:       "com.google.gson.internal.bind.TimeTypeAdapter",
281:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
282:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
283:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
284:       "com.google.gson.internal.bind.ArrayTypeAdapter",
285:       "com.google.gson.JsonElement",
286:       "com.google.gson.JsonNull",
287:       "com.google.gson.internal.Primitives",
288:       "com.google.gson.stream.JsonToken",
289:       "com.google.gson.internal.ConstructorConstructor",
290:       "com.google.gson.internal.JavaVersion",
291:       "com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
292:       "com.google.gson.internal.reflect.ReflectionAccessor",
293:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
294:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
295:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
296:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
297:       "com.google.gson.JsonObject",
298:       "com.google.gson.internal.LinkedTreeMap$1",
299:       "com.google.gson.internal.LinkedTreeMap",
300:       "com.google.gson.internal.LinkedTreeMap$Node",
301:       "com.google.gson.internal.JsonReaderInternalAccess",
302:       "com.google.gson.stream.JsonReader$1",
303:       "com.google.gson.stream.JsonReader",
304:       "com.google.gson.JsonParseException",
305:       "com.google.gson.JsonSyntaxException",
306:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
307:       "com.google.gson.internal.ConstructorConstructor$3",
308:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
309:       "com.google.gson.JsonArray",
310:       "com.google.gson.stream.JsonWriter",
311:       "com.google.gson.internal.ConstructorConstructor$14",
312:       "com.google.gson.internal.UnsafeAllocator",
313:       "com.google.gson.internal.UnsafeAllocator$1",
314:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
315:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
316:       "com.google.gson.JsonPrimitive",
317:       "com.google.gson.internal.Streams",
318:       "com.google.gson.internal.bind.JsonTreeWriter$1",
319:       "com.google.gson.internal.bind.JsonTreeWriter",
320:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
321:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
322:       "com.google.gson.internal.ConstructorConstructor$8",
323:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
324:       "com.google.gson.internal.LinkedTreeMap$EntrySet",
325:       "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator",
326:       "com.google.gson.internal.LinkedTreeMap$EntrySet$1",
327:       "com.google.gson.internal.bind.TypeAdapters$35$1",
328:       "com.google.gson.internal.bind.JsonTreeReader$1",
329:       "com.google.gson.internal.bind.JsonTreeReader",
330:       "com.google.gson.GsonBuilder",
331:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
332:       "com.google.gson.internal.Excluder$1",
333:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
334:       "com.google.gson.internal.Streams$AppendableWriter",
335:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
336:       "com.google.gson.internal.bind.ObjectTypeAdapter$2",
337:       "com.google.gson.stream.MalformedJsonException",
338:       "com.google.gson.internal.ConstructorConstructor$12",
339:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
340:       "com.google.gson.internal.ConstructorConstructor$13",
341:       "com.google.gson.internal.ConstructorConstructor$6",
342:       "com.google.gson.DefaultDateTypeAdapter",
343:       "com.google.gson.JsonIOException"
344:     );
345:   }
346: }

[MASTER] 15:08:09.249 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Gson gson0 = new Gson();
PipedReader pipedReader0 = new PipedReader();
Class<Excluder> class0 = Excluder.class;
gson0.fromJson((Reader) pipedReader0, (Class<HashMap<HashMap, Float>>) class0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 13
* Writing tests to file
* Writing JUnit test case 'Gson_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s5/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.internal.bind.JsonTreeWriter
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonElement
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.JsonObject
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 8708
* Connecting to master process on port 8706
* Starting Client-0
* Connecting to master process on port 8710
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonObject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.bind.JsonTreeWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 221
* Using seed 5
* Starting evolution
* Initial Number of Goals in DynaMOSA = 142 / 221
* Total number of test goals for DYNAMOSA: 443
* Using seed 5
* Starting evolution
* Finished analyzing classpath
* Generating tests for class com.google.gson.JsonElement
[MASTER] 15:08:35.979 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 15:08:35.980 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Initial Number of Goals in DynaMOSA = 202 / 443
* Total number of test goals for DYNAMOSA: 265
* Using seed 5
* Starting evolution
* Initial Number of Goals in DynaMOSA = 183 / 265
* Search finished after 61s and 240 generations, 38382 statements, best individual has fitness: 47.0
* Search finished after 62s and 814 generations, 150322 statements, best individual has fitness: 54.0
* Search finished after 61s and 483 generations, 53456 statements, best individual has fitness: 102.0
* Minimizing test suite
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 83
* Number of covered goals: 79
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 87
* Number of covered goals: 78
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 86%
* Total number of goals: 93
* Number of covered goals: 80
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Generated 57 tests with total length 193
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 51%
* Compiling and checking tests
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 82
* Number of covered goals: 43
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Generated 36 tests with total length 99
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 88%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 36
* Number of covered goals: 34
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 39
* Number of covered goals: 38
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 124
* Number of covered goals: 64
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 22
* Number of covered goals: 20
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Generated 78 tests with total length 188
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'JsonTreeWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s5/gson/evosuite-tests
* Done!

* Computation finished
* Writing tests to file
* Writing JUnit test case 'JsonObject_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s5/gson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 44%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonElement_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s5/gson/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.internal.LinkedHashTreeMap
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.stream.JsonWriter
* EvoSuite 1.0.7-SNAPSHOT
* Configuration: EvoSuite_vanilla
* Going to generate test cases for class: com.google.gson.stream.JsonReader
* Starting Client-0
* Starting Client-0
* Starting Client-0
* Connecting to master process on port 8707
* Connecting to master process on port 8708
* Connecting to master process on port 8709
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.stream.JsonWriter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Total number of test goals for DYNAMOSA: 1024
* Using seed 5
* Starting evolution
* Initial Number of Goals in DynaMOSA = 410 / 1024
  - /home/apaniche/mitchell/generation-scripts/projects/gson/gson-2.8.6.jar
* Finished analyzing classpath
* Generating tests for class com.google.gson.stream.JsonReader
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.LinkedHashTreeMap
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2813
* Using seed 5
* Starting evolution
* Initial Number of Goals in DynaMOSA = 438 / 2813
* Total number of test goals for DYNAMOSA: 1627
* Using seed 5
* Starting evolution
* Initial Number of Goals in DynaMOSA = 578 / 1627
[MASTER] 15:11:30.554 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 15:11:30.554 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 15:11:44.751 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 15:12:10.854 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 61s and 433 generations, 137600 statements, best individual has fitness: 142.0
* Minimizing test suite
* Search finished after 62s and 178 generations, 47288 statements, best individual has fitness: 1023.0
* Search finished after 62s and 8 generations, 6798 statements, best individual has fitness: 878.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 179
* Number of covered goals: 171
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 117
* Number of covered goals: 104
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 468
* Number of covered goals: 401
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 97
* Number of covered goals: 80
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 117
* Number of covered goals: 96
* Generated 76 tests with total length 316
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 57%
* Total number of goals: 387
* Number of covered goals: 220
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 44%
* Total number of goals: 262
* Number of covered goals: 114
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 52%
* Total number of goals: 588
* Number of covered goals: 303
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 34
* Number of covered goals: 16
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 87%
* Total number of goals: 47
* Number of covered goals: 41
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 85%
* Total number of goals: 47
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 42%
* Total number of goals: 262
* Number of covered goals: 111
* Generated 50 tests with total length 158
* Resulting test suite's coverage: 44% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 57%
* Compiling and checking tests
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonWriter_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s5/gson/evosuite-tests
* Done!

* Computation finished
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 67%
* Total number of goals: 671
* Number of covered goals: 448
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 66%
* Total number of goals: 677
* Number of covered goals: 449
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 76
* Number of covered goals: 76
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 58%
* Total number of goals: 709
* Number of covered goals: 411
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 35
* Number of covered goals: 16
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 86%
* Total number of goals: 22
* Number of covered goals: 19
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 65%
* Total number of goals: 677
* Number of covered goals: 442
* Generated 154 tests with total length 558
* Resulting test suite's coverage: 69% (average coverage for all fitness functions)
* Generating assertions
* Writing tests to file
* Writing JUnit test case 'LinkedHashTreeMap_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s5/gson/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'JsonReader_ESTest' to /home/apaniche/mitchell/generation-scripts/evosuite_vanilla/tests/s5/gson/evosuite-tests
* Done!

* Computation finished
